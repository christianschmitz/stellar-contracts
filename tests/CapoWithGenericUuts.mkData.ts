// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in Capo (src/DefaultCapo.hl)

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";

import {
    RelativeDelegateLink,
    CapoDatum$CharterToken,
    AnyData,
    CapoDatum$DelegatedData,
    CapoDatum,
    CapoActivity
} from "./CapoWithGenericUuts.hlbundle.js"
import { someDataMaker } from "../src/helios/dataBridge/someDataMaker.js"
import { tagOnly } from "../src/helios/HeliosScriptBundle.js"
import {hasSeed} from "../src/StellarContract.js"

export default class mkDatumBridgeCapo extends someDataMaker {
    
    datum: CapoDatumHelper = new CapoDatumHelper(this.bundle)   // datumAccessor
    CapoDatum: CapoDatumHelper = this.datum;


}

class CapoDatumHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { CharterToken: /*minEnumVariant*/ CapoDatum$CharterToken }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { DelegatedData: /*minEnumVariant*/ CapoDatum$DelegatedData }, 
       
        | { CharterToken: /*minEnumVariant*/ CapoDatum$CharterTokenLike }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { DelegatedData: /*minEnumVariant*/ CapoDatum$DelegatedDataLike }
   >(CapoDatumSchema, { isMainnet: true });
    CharterToken(fields: { 
        spendDelegateLink: {
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
},
        spendInvariants: Array<{
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
}
>,
        namedDelegates: Map<string, {
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
}
>,
        mintDelegateLink: {
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
},
        mintInvariants: Array<{
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
}
>,
        govAuthorityLink: {
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
}
    }) {
        return this.enumCast.toUplcData({
            CharterToken: fields 
        });
    }

    get ScriptReference() {
        return this.enumCast.toUplcData({ ScriptReference: {} });
    }

    DelegatedData(fields: { 
        data: {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
},
        version: IntLike,
        otherDetails: UplcData
    }) {
        return this.enumCast.toUplcData({
            DelegatedData: fields 
        });
    }
}


class CapoActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { usingAuthority: /*minEnumVariant*/ tagOnly }
        | { updatingCharter: /*minEnumVariant*/ tagOnly }
        | { retiringRefScript: /*minEnumVariant*/ tagOnly }
        | { addingSpendInvariant: /*minEnumVariant*/ tagOnly }
        | { spendingDelegatedDatum: /*minEnumVariant*/ tagOnly }
        | { updatingTypeMap: /*minEnumVariant*/ tagOnly }, 
       
        | { usingAuthority: /*minEnumVariant*/ tagOnly }
        | { updatingCharter: /*minEnumVariant*/ tagOnly }
        | { retiringRefScript: /*minEnumVariant*/ tagOnly }
        | { addingSpendInvariant: /*minEnumVariant*/ tagOnly }
        | { spendingDelegatedDatum: /*minEnumVariant*/ tagOnly }
        | { updatingTypeMap: /*minEnumVariant*/ tagOnly }
   >(CapoActivitySchema, { isMainnet: true });
    get usingAuthority() {
        return this.enumCast.toUplcData({ usingAuthority: {} });
    }

    get updatingCharter() {
        return this.enumCast.toUplcData({ updatingCharter: {} });
    }

    get retiringRefScript() {
        return this.enumCast.toUplcData({ retiringRefScript: {} });
    }

    get addingSpendInvariant() {
        return this.enumCast.toUplcData({ addingSpendInvariant: {} });
    }

    get spendingDelegatedDatum() {
        return this.enumCast.toUplcData({ spendingDelegatedDatum: {} });
    }

    get updatingTypeMap() {
        return this.enumCast.toUplcData({ updatingTypeMap: {} });
    }
}



