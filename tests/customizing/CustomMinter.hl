minting customMinter

import { 
    hasSeedUtxo, 
    validateUutMinting
} from CapoMintHelpers

const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42

enum Activity { 
    mintingCharter {
        owner: Address
    }
    mintingUuts {
        seedTxn: TxId
        seedIndex: Int
        purposes: []String
    }
    mintingNamedToken {
        value: Value
    }
    burningToken
}


func hasContractSeedUtxo(tx: Tx) -> Bool {
    hasSeedUtxo(tx, seedTxn, seedIndex, "charter")
}

func main(r : Activity, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;

    charterToken: AssetClass = AssetClass::new(
        mph,
        "charter".encode_utf8()
    );

    ok : Bool = r.switch {
        charter: mintingCharter => {       
            assert(value_minted == Value::new(charterToken, 1), "no charter token minted");

            hasContractSeedUtxo(tx) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.owner
                )
            })
        },
        mintingNamedToken{value} => {

            charterTokenValue : Value = Value::new(
                AssetClass::new(ctx.get_current_minting_policy_hash(), "charter".encode_utf8()), 
                1
            );
            
            assert(tx.outputs.any((txo : TxOutput) -> Bool {
                txo.value >= charterTokenValue
            }),"missing required charter token authorization");

            expectedMint : Map[ByteArray]Int = value.get_policy(mph);
            actualMint : Map[ByteArray]Int = value_minted.get_policy(mph);

            //!!! todo: ensure that ALL and ONLY the tokens named in the redeemer are minted; not any others.

            expectedMint == actualMint
        },
        burningToken => {
            false
        },
        _ => true
    };

    print("custom minter: minting value: " + value_minted.show());

    ok
}

