// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in BasicDelegate (src/delegation/BasicDelegate.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { makeErgoCast, type Cast } from "@helios-lang/contract-utils"
import type { UplcData, ConstrData } from "@helios-lang/uplc";
import type { 
    IntLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
 import { makeInlineTxOutputDatum, type InlineTxOutputDatum, type TxOutputDatum } from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { 
    DataBridge, 
    ContractDataBridge, 
    DataBridgeReaderClass,
    type callWith,
} from "../../src/helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../../src/helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../../src/helios/HeliosScriptBundle.js"
import type { IntersectedEnum } from "../../src/helios/typeUtils.js"
import { 
    impliedSeedActivityMaker, SeedActivity, type hasSeed, type isActivity, 
    type funcWithImpliedSeed, type SeedAttrs
} from "../../src/ActivityTypes.js"

export type TimeLike = IntLike;


import type {
    AnyData, ErgoAnyData, AnyDataLike,
    DelegateDatum$Cip68RefToken, DelegateDatum$Ergo$Cip68RefToken, DelegateDatum$Cip68RefTokenLike,
    DelegationDetail, ErgoDelegationDetail, DelegationDetailLike,
    ProtocolSettings, ErgoProtocolSettings, ProtocolSettingsLike,
    DelegateDatum$capoStoredData, DelegateDatum$Ergo$capoStoredData, DelegateDatum$capoStoredDataLike,
    DelegateDatum, ErgoDelegateDatum, DelegateDatumLike,
    CapoLifecycleActivity$CreatingDelegate, CapoLifecycleActivity$Ergo$CreatingDelegate, CapoLifecycleActivity$CreatingDelegateLike,
    DelegateRole, ErgoDelegateRole, DelegateRoleLike,
    CapoLifecycleActivity$removePendingDgtChange, CapoLifecycleActivity$Ergo$removePendingDgtChange, CapoLifecycleActivity$removePendingDgtChangeLike,
    CapoLifecycleActivity$forcingNewSpendDelegate, CapoLifecycleActivity$Ergo$forcingNewSpendDelegate, CapoLifecycleActivity$forcingNewSpendDelegateLike,
    CapoLifecycleActivity$forcingNewMintDelegate, CapoLifecycleActivity$Ergo$forcingNewMintDelegate, CapoLifecycleActivity$forcingNewMintDelegateLike,
    ManifestActivity$updatingEntry, ManifestActivity$Ergo$updatingEntry, ManifestActivity$updatingEntryLike,
    ManifestActivity$addingEntry, ManifestActivity$Ergo$addingEntry, ManifestActivity$addingEntryLike,
    ManifestActivity$forkingThreadToken, ManifestActivity$Ergo$forkingThreadToken, ManifestActivity$forkingThreadTokenLike,
    ManifestActivity$burningThreadToken, ManifestActivity$Ergo$burningThreadToken, ManifestActivity$burningThreadTokenLike,
    ManifestActivity, ErgoManifestActivity, ManifestActivityLike,
    CapoLifecycleActivity, ErgoCapoLifecycleActivity, CapoLifecycleActivityLike,
    DelegateLifecycleActivity$ReplacingMe, DelegateLifecycleActivity$Ergo$ReplacingMe, DelegateLifecycleActivity$ReplacingMeLike,
    DelegateLifecycleActivity, ErgoDelegateLifecycleActivity, DelegateLifecycleActivityLike,
    SpendingActivity, ErgoSpendingActivity, SpendingActivityLike,
    MintingActivity, ErgoMintingActivity, MintingActivityLike,
    BurningActivity, ErgoBurningActivity, BurningActivityLike,
    DelegateActivity$CreatingDelegatedData, DelegateActivity$Ergo$CreatingDelegatedData, DelegateActivity$CreatingDelegatedDataLike,
    DelegateActivity$UpdatingDelegatedData, DelegateActivity$Ergo$UpdatingDelegatedData, DelegateActivity$UpdatingDelegatedDataLike,
    DelegateActivity$DeletingDelegatedData, DelegateActivity$Ergo$DeletingDelegatedData, DelegateActivity$DeletingDelegatedDataLike,
    DelegateActivity, ErgoDelegateActivity, DelegateActivityLike
} from "./BadSettings.typeInfo.js";

export type * as types from "./BadSettings.typeInfo.js";
import type * as types from "./BadSettings.typeInfo.js";



/**
 * GENERATED data bridge for **BasicDelegate** script (defined in class ***BadSettingsBundle***)
 * main: **src/delegation/BasicDelegate.hl**, project: **stellar-contracts**
 * @remarks - note that you may override `get dataBridgeName() { return "..." }` to customize the name of this bridge class
* @public
 */
export class BadSettingsPolicyDataBridge extends ContractDataBridge {
    static isAbstract = false as const;
    isAbstract = false as const;
    /**
     * Helper class for generating TxOutputDatum for the ***datum type (DelegateDatum)***
     * for this contract script. 
     */
    datum: DelegateDatumHelper
     = new DelegateDatumHelper(this.bundle, {})   // datumAccessor/enum

    /**
     * this is the specific type of datum for the `BasicDelegate` script
     */
    DelegateDatum: DelegateDatumHelper = this.datum;

    readDatum : (d: UplcData) => ErgoDelegateDatum = (d) =>  {
        return this.reader.DelegateDatum(d)
    }


    /**
     * generates UplcData for the activity type (***DelegateActivity***) for the `BasicDelegate` script
     */
    activity : DelegateActivityHelper= new DelegateActivityHelper(this.bundle, {isActivity: true}); // activityAccessor/enum
        DelegateActivity: DelegateActivityHelper = this.activity;

    reader = new BadSettingsPolicyDataBridgeReader(this);

    /**
     * accessors for all the types defined in the `BasicDelegate` script
     * @remarks - these accessors are used to generate UplcData for each type
     */
    types = {
      /**
       * generates UplcData for the enum type ***DelegateDatum*** for the `BasicDelegate` script
       */
        DelegateDatum: new DelegateDatumHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***DelegateRole*** for the `BasicDelegate` script
       */
        DelegateRole: new DelegateRoleHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***ManifestActivity*** for the `BasicDelegate` script
       */
        ManifestActivity: new ManifestActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***CapoLifecycleActivity*** for the `BasicDelegate` script
       */
        CapoLifecycleActivity: new CapoLifecycleActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***DelegateLifecycleActivity*** for the `BasicDelegate` script
       */
        DelegateLifecycleActivity: new DelegateLifecycleActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***SpendingActivity*** for the `BasicDelegate` script
       */
        SpendingActivity: new SpendingActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***MintingActivity*** for the `BasicDelegate` script
       */
        MintingActivity: new MintingActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***BurningActivity*** for the `BasicDelegate` script
       */
        BurningActivity: new BurningActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***DelegateActivity*** for the `BasicDelegate` script
       */
        DelegateActivity: new DelegateActivityHelper(this.bundle),

      /**
       * generates UplcData for the enum type ***AnyData*** for the `BasicDelegate` script
       */
        AnyData: (fields: AnyDataLike | {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}
) => {
        return this.ᱺᱺAnyDataCast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***DelegationDetail*** for the `BasicDelegate` script
       */
        DelegationDetail: (fields: DelegationDetailLike | {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}
) => {
        return this.ᱺᱺDelegationDetailCast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***ProtocolSettings*** for the `BasicDelegate` script
       */
        ProtocolSettings: (fields: ProtocolSettingsLike | {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
    meaning: /*minStructField*/ IntLike
    badSpenderSetting: /*minStructField*/ IntLike
    badMinterSetting: /*minStructField*/ IntLike
}
) => {
        return this.ᱺᱺProtocolSettingsCast.toUplcData(fields);
    },    }    

    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺAnyDataCast = makeErgoCast<
                AnyData, AnyDataLike
            >(AnyDataSchema, { isMainnet: true });
    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺDelegationDetailCast = makeErgoCast<
                DelegationDetail, DelegationDetailLike
            >(DelegationDetailSchema, { isMainnet: true });
    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺProtocolSettingsCast = makeErgoCast<
                ProtocolSettings, ProtocolSettingsLike
            >(ProtocolSettingsSchema, { isMainnet: true });


}
export default BadSettingsPolicyDataBridge;

/*
 * @public
 */
export class BadSettingsPolicyDataBridgeReader extends DataBridgeReaderClass {
    constructor(public bridge: BadSettingsPolicyDataBridge) {
        super();
    }
datum = (d: UplcData) => { return this.DelegateDatum(d) }
    /**
        * reads UplcData *known to fit the **DelegateDatum*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateDatum(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateDatum;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoDelegateDatum;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegateRole*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateRole(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateRole;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoDelegateRole;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **ManifestActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    ManifestActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.ManifestActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoManifestActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **CapoLifecycleActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    CapoLifecycleActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.CapoLifecycleActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoCapoLifecycleActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegateLifecycleActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateLifecycleActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateLifecycleActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoDelegateLifecycleActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **SpendingActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    SpendingActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.SpendingActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoSpendingActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **MintingActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    MintingActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.MintingActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoMintingActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **BurningActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    BurningActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.BurningActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoBurningActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegateActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoDelegateActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **AnyData*** struct type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    AnyData(d: UplcData) {
        const cast = this.bridge.ᱺᱺAnyDataCast;
        return cast.fromUplcData(d) //??? as ErgoAnyData;
    } /* structReader helper */

    /**
        * reads UplcData *known to fit the **DelegationDetail*** struct type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegationDetail(d: UplcData) {
        const cast = this.bridge.ᱺᱺDelegationDetailCast;
        return cast.fromUplcData(d) //??? as ErgoDelegationDetail;
    } /* structReader helper */

    /**
        * reads UplcData *known to fit the **ProtocolSettings*** struct type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    ProtocolSettings(d: UplcData) {
        const cast = this.bridge.ᱺᱺProtocolSettingsCast;
        return cast.fromUplcData(d) //??? as ErgoProtocolSettings;
    } /* structReader helper */

}

/**
 * Helper class for generating UplcData for the struct ***AnyData*** type.
 * @public
 */
export class AnyDataHelper extends DataBridge {
    isCallable = true
   /**
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
        AnyData,
        AnyDataLike
    >(AnyDataSchema, { isMainnet: true });

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // AnyData(fields: AnyDataLike) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for the struct ***DelegationDetail*** type.
 * @public
 */
export class DelegationDetailHelper extends DataBridge {
    isCallable = true
   /**
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
        DelegationDetail,
        DelegationDetailLike
    >(DelegationDetailSchema, { isMainnet: true });

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // DelegationDetail(fields: DelegationDetailLike) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for the struct ***ProtocolSettings*** type.
 * @public
 */
export class ProtocolSettingsHelper extends DataBridge {
    isCallable = true
   /**
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
        ProtocolSettings,
        ProtocolSettingsLike
    >(ProtocolSettingsSchema, { isMainnet: true });

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // ProtocolSettings(fields: ProtocolSettingsLike) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating InlineTxOutputDatum for variants of the ***DelegateDatum*** enum type.
 * @public
 */
export class DelegateDatumHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       DelegateDatum,
       DelegateDatumLike
   >(DelegateDatumSchema, { isMainnet: true });

    /**
     * generates  InlineTxOutputDatum for ***"BadSettingsPolicy::DelegateDatum.Cip68RefToken"***
     * @remarks - ***DelegateDatum$Cip68RefTokenLike*** is the same as the expanded field-types.
     */
    Cip68RefToken(fields: DelegateDatum$Cip68RefTokenLike | { 
        cip68meta: AnyDataLike,
        cip68version: IntLike,
        otherDetails: UplcData
    }) : InlineTxOutputDatum {
        const uplc = this.mkUplcData({
            Cip68RefToken: fields 
        }, "BadSettingsPolicy::DelegateDatum.Cip68RefToken");
        return makeInlineTxOutputDatum(uplc);
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  InlineTxOutputDatum for ***"BadSettingsPolicy::DelegateDatum.IsDelegation"***
     * @remarks - ***DelegationDetailLike*** is the same as the expanded field-type.
     */
    IsDelegation(
        dd: DelegationDetailLike | {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}
    ) : InlineTxOutputDatum {
        const uplc = this.mkUplcData({ 
           IsDelegation: dd
        }, "BadSettingsPolicy::DelegateDatum.IsDelegation"); /*singleField enum variant*/
        return makeInlineTxOutputDatum(uplc);
    }

    /**
     * generates  InlineTxOutputDatum for ***"BadSettingsPolicy::DelegateDatum.capoStoredData"***
     * @remarks - ***DelegateDatum$capoStoredDataLike*** is the same as the expanded field-types.
     */
    capoStoredData(fields: DelegateDatum$capoStoredDataLike | { 
        data: ProtocolSettingsLike,
        version: IntLike,
        otherDetails: UplcData
    }) : InlineTxOutputDatum {
        const uplc = this.mkUplcData({
            capoStoredData: fields 
        }, "BadSettingsPolicy::DelegateDatum.capoStoredData");
        return makeInlineTxOutputDatum(uplc);
    } /*multiFieldVariant enum accessor*/
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***DelegateRole*** enum type.
 * @public
 */
export class DelegateRoleHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       DelegateRole,
       DelegateRoleLike
   >(DelegateRoleSchema, { isMainnet: true });

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
 */
    get MintDgt() {
        const uplc = this.mkUplcData({ MintDgt: {} }, 
            "CapoDelegateHelpers::DelegateRole.MintDgt");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get SpendDgt() {
        const uplc = this.mkUplcData({ SpendDgt: {} }, 
            "CapoDelegateHelpers::DelegateRole.SpendDgt");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
 */
    get MintInvariant() {
        const uplc = this.mkUplcData({ MintInvariant: {} }, 
            "CapoDelegateHelpers::DelegateRole.MintInvariant");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
 */
    get SpendInvariant() {
        const uplc = this.mkUplcData({ SpendInvariant: {} }, 
            "CapoDelegateHelpers::DelegateRole.SpendInvariant");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#4***
 */
    get DgDataPolicy() {
        const uplc = this.mkUplcData({ DgDataPolicy: {} }, 
            "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#5***
 */
    get OtherNamedDgt() {
        const uplc = this.mkUplcData({ OtherNamedDgt: {} }, 
            "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
 */
    get BothMintAndSpendDgt() {
        const uplc = this.mkUplcData({ BothMintAndSpendDgt: {} }, 
            "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
 */
    get HandledByCapoOnly() {
        const uplc = this.mkUplcData({ HandledByCapoOnly: {} }, 
            "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly");
        return uplc;
    } /* tagOnly variant accessor */
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***ManifestActivity*** enum type.
 * @public
 */
export class ManifestActivityHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       ManifestActivity,
       ManifestActivityLike
   >(ManifestActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
     */
    retiringEntry(
        key: string
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           retiringEntry: key
        }, "CapoDelegateHelpers::ManifestActivity.retiringEntry"); /*singleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
     * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
     */
    updatingEntry(fields: ManifestActivity$updatingEntryLike | { 
        key: string,
        tokenName: number[]
    }) : UplcData {
        const uplc = this.mkUplcData({
            updatingEntry: fields 
        }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
     * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
     */
    addingEntry(fields: ManifestActivity$addingEntryLike | { 
        key: string,
        tokenName: number[]
    }) : UplcData {
        const uplc = this.mkUplcData({
            addingEntry: fields 
        }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
     * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
     */
    forkingThreadToken(fields: ManifestActivity$forkingThreadTokenLike | { 
        key: string,
        newThreadCount: IntLike
    }) : UplcData {
        const uplc = this.mkUplcData({
            forkingThreadToken: fields 
        }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
     * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
     */
    burningThreadToken(fields: ManifestActivity$burningThreadTokenLike | { 
        key: string,
        burnedThreadCount: IntLike
    }) : UplcData {
        const uplc = this.mkUplcData({
            burningThreadToken: fields 
        }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
       return uplc;
    } /*multiFieldVariant enum accessor*/
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***ManifestActivity*** enum type.
 * @public
 */
export class ManifestActivityHelperNested extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       ManifestActivity,
       ManifestActivityLike
   >(ManifestActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    retiringEntry(
        key: string
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           retiringEntry: key
        }, "CapoDelegateHelpers::ManifestActivity.retiringEntry"); /*singleField enum variant*/
       return uplc;
    }

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
     * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    updatingEntry(fields: ManifestActivity$updatingEntryLike | { 
        key: string,
        tokenName: number[]
    }) : isActivity {
        const uplc = this.mkUplcData({
            updatingEntry: fields 
        }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
     * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    addingEntry(fields: ManifestActivity$addingEntryLike | { 
        key: string,
        tokenName: number[]
    }) : isActivity {
        const uplc = this.mkUplcData({
            addingEntry: fields 
        }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
     * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    forkingThreadToken(fields: ManifestActivity$forkingThreadTokenLike | { 
        key: string,
        newThreadCount: IntLike
    }) : isActivity {
        const uplc = this.mkUplcData({
            forkingThreadToken: fields 
        }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
     * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    burningThreadToken(fields: ManifestActivity$burningThreadTokenLike | { 
        key: string,
        burnedThreadCount: IntLike
    }) : isActivity {
        const uplc = this.mkUplcData({
            burningThreadToken: fields 
        }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
       return uplc;
    } /*multiFieldVariant enum accessor*/
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***CapoLifecycleActivity*** enum type.
 * @public
 */
export class CapoLifecycleActivityHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       CapoLifecycleActivity,
       CapoLifecycleActivityLike
   >(CapoLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$CreatingDelegate} accessor for use in a context
     * providing an implicit seed utxo. 
     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"*** 
     * with raw seed details included in fields.
     */
    CreatingDelegate(fields: CapoLifecycleActivity$CreatingDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): UplcData
    CreatingDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$CreatingDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$CreatingDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$CreatingDelegate({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
     */
    $seeded$CreatingDelegate = impliedSeedActivityMaker(this, 
        this.CreatingDelegate as (value: hasSeed, fields: { 
            purpose: string 
        } ) => UplcData
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingDgtChange"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get queuePendingDgtChange() {
        const uplc = this.mkUplcData({ queuePendingDgtChange: {} }, 
            "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingDgtChange");
        return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.removePendingDgtChange"***
     * @remarks - ***CapoLifecycleActivity$removePendingDgtChangeLike*** is the same as the expanded field-types.
     */
    removePendingDgtChange(fields: CapoLifecycleActivity$removePendingDgtChangeLike | { 
        role: DelegateRoleLike,
        name: string | undefined
    }) : UplcData {
        const uplc = this.mkUplcData({
            removePendingDgtChange: fields 
        }, "CapoDelegateHelpers::CapoLifecycleActivity.removePendingDgtChange");
       return uplc;
    } /*multiFieldVariant enum accessor*/

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingDgtChanges"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
 */
    get commitPendingDgtChanges() {
        const uplc = this.mkUplcData({ commitPendingDgtChanges: {} }, 
            "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingDgtChanges");
        return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$forcingNewSpendDelegate} accessor for use in a context
     * providing an implicit seed utxo. 
     */
    forcingNewSpendDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"*** 
     * with raw seed details included in fields.
     */
    forcingNewSpendDelegate(fields: CapoLifecycleActivity$forcingNewSpendDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): UplcData
    forcingNewSpendDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$forcingNewSpendDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$forcingNewSpendDelegateLike; 
           const uplc = this.mkUplcData({
                forcingNewSpendDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
     */
    $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(this, 
        this.forcingNewSpendDelegate as (value: hasSeed, fields: { 
            purpose: string 
        } ) => UplcData
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$forcingNewMintDelegate} accessor for use in a context
     * providing an implicit seed utxo. 
     */
    forcingNewMintDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"*** 
     * with raw seed details included in fields.
     */
    forcingNewMintDelegate(fields: CapoLifecycleActivity$forcingNewMintDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): UplcData
    forcingNewMintDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$forcingNewMintDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$forcingNewMintDelegateLike; 
           const uplc = this.mkUplcData({
                forcingNewMintDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
     */
    $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(this, 
        this.forcingNewMintDelegate as (value: hasSeed, fields: { 
            purpose: string 
        } ) => UplcData
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


    /**
     * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
     */
    get updatingManifest() {
        const nestedAccessor = new ManifestActivityHelperNested(this.bundle,
            {isNested: true, isActivity: false 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: ManifestActivityLike) => {
                return  this.mkUplcData({ updatingManifest: activity }, 
            "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest");
        });
        return nestedAccessor;
    } /* nested enum accessor */
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***DelegateLifecycleActivity*** enum type.
 * @public
 */
export class DelegateLifecycleActivityHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       DelegateLifecycleActivity,
       DelegateLifecycleActivityLike
   >(DelegateLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$ReplacingMe} accessor for use in a context
     * providing an implicit seed utxo. 
     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
     * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"*** 
     * with raw seed details included in fields.
     */
    ReplacingMe(fields: DelegateLifecycleActivity$ReplacingMeLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): UplcData
    ReplacingMe(
        seedOrUf: hasSeed | DelegateLifecycleActivity$ReplacingMeLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        } else {
            const fields = seedOrUf as DelegateLifecycleActivity$ReplacingMeLike; 
           const uplc = this.mkUplcData({
                ReplacingMe: fields 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$ReplacingMe({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
     */
    $seeded$ReplacingMe = impliedSeedActivityMaker(this, 
        this.ReplacingMe as (value: hasSeed, fields: { 
            purpose: string 
        } ) => UplcData
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get Retiring() {
        const uplc = this.mkUplcData({ Retiring: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
 */
    get ValidatingSettings() {
        const uplc = this.mkUplcData({ ValidatingSettings: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings");
        return uplc;
    } /* tagOnly variant accessor */
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***SpendingActivity*** enum type.
 * @public
 */
export class SpendingActivityHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       SpendingActivity,
       SpendingActivityLike
   >(SpendingActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"BadSettingsPolicy::SpendingActivity.UpdatingRecord"***
     */
    UpdatingRecord(
        id: number[]
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           UpdatingRecord: id
        }, "BadSettingsPolicy::SpendingActivity.UpdatingRecord"); /*singleField enum variant*/
       return uplc;
    }
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***MintingActivity*** enum type.
 * @public
 */
export class MintingActivityHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       MintingActivity,
       MintingActivityLike
   >(MintingActivitySchema, { isMainnet: true });

    /**
    * generates  UplcData for ***"BadSettingsPolicy::MintingActivity.CreatingRecord"***, 
    * given a transaction-context (or direct arg) with a ***seed utxo*** 
    * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
    *  - to get a transaction context having the seed needed for this argument, 
    *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
    * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
    *  - in a context providing an implicit seed utxo, use 
    *    the {@link $seeded$CreatingRecord} variant of this activity instead
    *
     */
    CreatingRecord(thingWithSeed: hasSeed | TxOutputId | string) 
    : UplcData {
        const seedTxOutputId = this.getSeed(thingWithSeed);
        const uplc = this.mkUplcData({ 
           CreatingRecord: seedTxOutputId
        },"BadSettingsPolicy::MintingActivity.CreatingRecord");  
        return uplc;
    }  /*singleField/seeded enum variant*/

    /**
     * generates  UplcData for ***"BadSettingsPolicy::MintingActivity.CreatingRecord"***
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     * ## Usage
     * Access the activity-creator as a getter: `$seeded$CreatingRecord`
     *
     * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
     * `mkTxnCreateRecord({activity, ...})` method.
     */
    get $seeded$CreatingRecord() {
        return impliedSeedActivityMaker(this,this.CreatingRecord)() // called with no args needed
    } /* coda: seeded helper in same singleField/seeded enum variant*/

}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***BurningActivity*** enum type.
 * @public
 */
export class BurningActivityHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       BurningActivity,
       BurningActivityLike
   >(BurningActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"BadSettingsPolicy::BurningActivity.DeletingRecord"***
     */
    DeletingRecord(
        id: number[]
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           DeletingRecord: id
        }, "BadSettingsPolicy::BurningActivity.DeletingRecord"); /*singleField enum variant*/
       return uplc;
    }
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***CapoLifecycleActivity*** enum type.
 * @public
 */
export class CapoLifecycleActivityHelperNested extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       CapoLifecycleActivity,
       CapoLifecycleActivityLike
   >(CapoLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$CreatingDelegate} accessor for use in a context
     * providing an implicit seed utxo. 
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"*** 
     * with raw seed details included in fields.
     */
    CreatingDelegate(fields: CapoLifecycleActivity$CreatingDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): isActivity
    CreatingDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$CreatingDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$CreatingDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$CreatingDelegate({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    $seeded$CreatingDelegate = impliedSeedActivityMaker(this, 
        this.CreatingDelegate as (value: hasSeed, fields: { 
            purpose: string 
        } ) => isActivity
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingDgtChange"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get queuePendingDgtChange() {
        const uplc = this.mkUplcData({ queuePendingDgtChange: {} }, 
            "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingDgtChange");
        return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.removePendingDgtChange"***
     * @remarks - ***CapoLifecycleActivity$removePendingDgtChangeLike*** is the same as the expanded field-types.
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    removePendingDgtChange(fields: CapoLifecycleActivity$removePendingDgtChangeLike | { 
        role: DelegateRoleLike,
        name: string | undefined
    }) : isActivity {
        const uplc = this.mkUplcData({
            removePendingDgtChange: fields 
        }, "CapoDelegateHelpers::CapoLifecycleActivity.removePendingDgtChange");
       return uplc;
    } /*multiFieldVariant enum accessor*/

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingDgtChanges"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
 */
    get commitPendingDgtChanges() {
        const uplc = this.mkUplcData({ commitPendingDgtChanges: {} }, 
            "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingDgtChanges");
        return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$forcingNewSpendDelegate} accessor for use in a context
     * providing an implicit seed utxo. 
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    forcingNewSpendDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"*** 
     * with raw seed details included in fields.
     */
    forcingNewSpendDelegate(fields: CapoLifecycleActivity$forcingNewSpendDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): isActivity
    forcingNewSpendDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$forcingNewSpendDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$forcingNewSpendDelegateLike; 
           const uplc = this.mkUplcData({
                forcingNewSpendDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(this, 
        this.forcingNewSpendDelegate as (value: hasSeed, fields: { 
            purpose: string 
        } ) => isActivity
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$forcingNewMintDelegate} accessor for use in a context
     * providing an implicit seed utxo. 
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    forcingNewMintDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"*** 
     * with raw seed details included in fields.
     */
    forcingNewMintDelegate(fields: CapoLifecycleActivity$forcingNewMintDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): isActivity
    forcingNewMintDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$forcingNewMintDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$forcingNewMintDelegateLike; 
           const uplc = this.mkUplcData({
                forcingNewMintDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(this, 
        this.forcingNewMintDelegate as (value: hasSeed, fields: { 
            purpose: string 
        } ) => isActivity
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


    /**
     * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
     */
    get updatingManifest() {
        const nestedAccessor = new ManifestActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: ManifestActivityLike) => {
                return  this.mkUplcData({ updatingManifest: activity }, 
            "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest");
        });
        return nestedAccessor;
    } /* nested enum accessor */
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***DelegateLifecycleActivity*** enum type.
 * @public
 */
export class DelegateLifecycleActivityHelperNested extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       DelegateLifecycleActivity,
       DelegateLifecycleActivityLike
   >(DelegateLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$ReplacingMe} accessor for use in a context
     * providing an implicit seed utxo. 
    * ### Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"*** 
     * with raw seed details included in fields.
     */
    ReplacingMe(fields: DelegateLifecycleActivity$ReplacingMeLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): isActivity
    ReplacingMe(
        seedOrUf: hasSeed | DelegateLifecycleActivity$ReplacingMeLike, 
        filteredFields?: { 
            purpose: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        } else {
            const fields = seedOrUf as DelegateLifecycleActivity$ReplacingMeLike; 
           const uplc = this.mkUplcData({
                ReplacingMe: fields 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
     * @param fields - \{ purpose: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$ReplacingMe({ purpose })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    $seeded$ReplacingMe = impliedSeedActivityMaker(this, 
        this.ReplacingMe as (value: hasSeed, fields: { 
            purpose: string 
        } ) => isActivity
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get Retiring() {
        const uplc = this.mkUplcData({ Retiring: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring");
        return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
 */
    get ValidatingSettings() {
        const uplc = this.mkUplcData({ ValidatingSettings: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings");
        return uplc;
    } /* tagOnly variant accessor */
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***SpendingActivity*** enum type.
 * @public
 */
export class SpendingActivityHelperNested extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       SpendingActivity,
       SpendingActivityLike
   >(SpendingActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::SpendingActivity.UpdatingRecord"***
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    UpdatingRecord(
        id: number[]
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           UpdatingRecord: id
        }, "BadSettingsPolicy::SpendingActivity.UpdatingRecord"); /*singleField enum variant*/
       return uplc;
    }
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***MintingActivity*** enum type.
 * @public
 */
export class MintingActivityHelperNested extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       MintingActivity,
       MintingActivityLike
   >(MintingActivitySchema, { isMainnet: true });

    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::MintingActivity.CreatingRecord"***, 
    * given a transaction-context (or direct arg) with a ***seed utxo*** 
    * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
    *  - to get a transaction context having the seed needed for this argument, 
    *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
    * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
    *  - in a context providing an implicit seed utxo, use 
    *    the {@link $seeded$CreatingRecord} variant of this activity instead
    *
     * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
    */
    CreatingRecord(thingWithSeed: hasSeed | TxOutputId | string) 
    : isActivity {
        const seedTxOutputId = this.getSeed(thingWithSeed);

        // piped through parent's uplc-encoder
        const uplc = this.mkUplcData({ 
           CreatingRecord: seedTxOutputId
        },"BadSettingsPolicy::MintingActivity.CreatingRecord");  
        return uplc;
    }  /*singleField/seeded enum variant*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::MintingActivity.CreatingRecord"***
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     * ## Usage
     * Access the activity-creator as a getter: `$seeded$CreatingRecord`
     *
     * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
     * `mkTxnCreateRecord({activity, ...})` method.
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    get $seeded$CreatingRecord() {
        return impliedSeedActivityMaker(this,this.CreatingRecord)() // called with no args needed
    } /* coda: seeded helper in same singleField/seeded enum variant*/

}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***BurningActivity*** enum type.
 * @public
 */
export class BurningActivityHelperNested extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       BurningActivity,
       BurningActivityLike
   >(BurningActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::BurningActivity.DeletingRecord"***
    * ## Nested activity: 
    * this is connected to a nested-activity wrapper, so the details are piped through 
    * the parent's uplc-encoder, producing a single uplc object with 
    * a complete wrapper for this inner activity detail.
     */
    DeletingRecord(
        id: number[]
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           DeletingRecord: id
        }, "BadSettingsPolicy::BurningActivity.DeletingRecord"); /*singleField enum variant*/
       return uplc;
    }
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for variants of the ***DelegateActivity*** enum type.
 * @public
 */
export class DelegateActivityHelper extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeErgoCast<
       DelegateActivity,
       DelegateActivityLike
   >(DelegateActivitySchema, { isMainnet: true });

    /**
     * access to different variants of the ***nested CapoLifecycleActivity*** type needed for ***DelegateActivity:CapoLifecycleActivities***.
     */
    get CapoLifecycleActivities() {
        const nestedAccessor = new CapoLifecycleActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: CapoLifecycleActivityLike) => {
                return  this.mkUplcData({ CapoLifecycleActivities: activity }, 
            "BadSettingsPolicy::DelegateActivity.CapoLifecycleActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested DelegateLifecycleActivity*** type needed for ***DelegateActivity:DelegateLifecycleActivities***.
     */
    get DelegateLifecycleActivities() {
        const nestedAccessor = new DelegateLifecycleActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: DelegateLifecycleActivityLike) => {
                return  this.mkUplcData({ DelegateLifecycleActivities: activity }, 
            "BadSettingsPolicy::DelegateActivity.DelegateLifecycleActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested SpendingActivity*** type needed for ***DelegateActivity:SpendingActivities***.
     */
    get SpendingActivities() {
        const nestedAccessor = new SpendingActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: SpendingActivityLike) => {
                return  this.mkUplcData({ SpendingActivities: activity }, 
            "BadSettingsPolicy::DelegateActivity.SpendingActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested MintingActivity*** type needed for ***DelegateActivity:MintingActivities***.
     */
    get MintingActivities() {
        const nestedAccessor = new MintingActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: MintingActivityLike) => {
                return  this.mkUplcData({ MintingActivities: activity }, 
            "BadSettingsPolicy::DelegateActivity.MintingActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested BurningActivity*** type needed for ***DelegateActivity:BurningActivities***.
     */
    get BurningActivities() {
        const nestedAccessor = new BurningActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia(
            (activity: BurningActivityLike) => {
                return  this.mkUplcData({ BurningActivities: activity }, 
            "BadSettingsPolicy::DelegateActivity.BurningActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::DelegateActivity.CreatingDelegatedData"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See the {@link $seeded$CreatingDelegatedData} accessor for use in a context
     * providing an implicit seed utxo. 
     */
    CreatingDelegatedData(value: hasSeed, fields: { 
        dataType: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::DelegateActivity.CreatingDelegatedData"*** 
     * with raw seed details included in fields.
     */
    CreatingDelegatedData(fields: DelegateActivity$CreatingDelegatedDataLike | {
            seed: TxOutputId | string,
            dataType: string
    } ): isActivity
    CreatingDelegatedData(
        seedOrUf: hasSeed | DelegateActivity$CreatingDelegatedDataLike, 
        filteredFields?: { 
            dataType: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields } 
            }, "BadSettingsPolicy::DelegateActivity.CreatingDelegatedData");
           return uplc;
        } else {
            const fields = seedOrUf as DelegateActivity$CreatingDelegatedDataLike; 
           const uplc = this.mkUplcData({
                CreatingDelegatedData: fields 
            }, "BadSettingsPolicy::DelegateActivity.CreatingDelegatedData");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::DelegateActivity.CreatingDelegatedData"***, 
     * @param fields - \{ dataType: string \}
     * @remarks
    * ### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * ## Usage
     *   1. Call the `$seeded$CreatingDelegatedData({ dataType })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
     */
    $seeded$CreatingDelegatedData = impliedSeedActivityMaker(this, 
        this.CreatingDelegatedData as (value: hasSeed, fields: { 
            dataType: string 
        } ) => isActivity
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */


    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::DelegateActivity.UpdatingDelegatedData"***
     * @remarks - ***DelegateActivity$UpdatingDelegatedDataLike*** is the same as the expanded field-types.
     */
    UpdatingDelegatedData(fields: DelegateActivity$UpdatingDelegatedDataLike | { 
        dataType: string,
        recId: number[]
    }) : isActivity {
        const uplc = this.mkUplcData({
            UpdatingDelegatedData: fields 
        }, "BadSettingsPolicy::DelegateActivity.UpdatingDelegatedData");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::DelegateActivity.DeletingDelegatedData"***
     * @remarks - ***DelegateActivity$DeletingDelegatedDataLike*** is the same as the expanded field-types.
     */
    DeletingDelegatedData(fields: DelegateActivity$DeletingDelegatedDataLike | { 
        dataType: string,
        recId: number[]
    }) : isActivity {
        const uplc = this.mkUplcData({
            DeletingDelegatedData: fields 
        }, "BadSettingsPolicy::DelegateActivity.DeletingDelegatedData");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"BadSettingsPolicy::DelegateActivity.MultipleDelegateActivities"***
     */
    MultipleDelegateActivities(
        activities: Array<UplcData>
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           MultipleDelegateActivities: activities
        }, "BadSettingsPolicy::DelegateActivity.MultipleDelegateActivities"); /*singleField enum variant*/
       return uplc;
    }
}/*mkEnumHelperClass*/


export const AnyDataSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "map",
    "id": "__module__StellarHeliosHelpers__AnyData[]",
    "name": "AnyData",
    "fieldTypes": [
        {
            "name": "id",
            "type": {
                "kind": "internal",
                "name": "ByteArray"
            },
            "key": "@id"
        },
        {
            "name": "type",
            "type": {
                "kind": "internal",
                "name": "String"
            },
            "key": "tpe"
        }
    ]
};

export const DelegationDetailSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
    "name": "DelegationDetail",
    "fieldTypes": [
        {
            "name": "capoAddr",
            "type": {
                "kind": "internal",
                "name": "Address"
            }
        },
        {
            "name": "mph",
            "type": {
                "kind": "internal",
                "name": "MintingPolicyHash"
            }
        },
        {
            "name": "tn",
            "type": {
                "kind": "internal",
                "name": "ByteArray"
            }
        }
    ]
};

export const ProtocolSettingsSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "map",
    "id": "__module__ProtocolSettings__ProtocolSettings[]",
    "name": "ProtocolSettings",
    "fieldTypes": [
        {
            "name": "id",
            "type": {
                "kind": "internal",
                "name": "ByteArray"
            },
            "key": "@id"
        },
        {
            "name": "type",
            "type": {
                "kind": "internal",
                "name": "String"
            },
            "key": "tpe"
        },
        {
            "name": "meaning",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "badSpenderSetting",
            "type": {
                "kind": "internal",
                "name": "Int"
            },
            "key": "badSettingToSpendDelegate"
        },
        {
            "name": "badMinterSetting",
            "type": {
                "kind": "internal",
                "name": "Int"
            },
            "key": "badSettingToMintDelegate"
        }
    ]
};

export const DelegateDatumSchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateDatum",
    "id": "__module__BadSettingsPolicy__DelegateDatum[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__BadSettingsPolicy__DelegateDatum[]__Cip68RefToken",
            "name": "Cip68RefToken",
            "fieldTypes": [
                {
                    "name": "cip68meta",
                    "type": {
                        "kind": "struct",
                        "format": "map",
                        "id": "__module__StellarHeliosHelpers__AnyData[]",
                        "name": "AnyData",
                        "fieldTypes": [
                            {
                                "name": "id",
                                "type": {
                                    "kind": "internal",
                                    "name": "ByteArray"
                                },
                                "key": "@id"
                            },
                            {
                                "name": "type",
                                "type": {
                                    "kind": "internal",
                                    "name": "String"
                                },
                                "key": "tpe"
                            }
                        ]
                    }
                },
                {
                    "name": "cip68version",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                },
                {
                    "name": "otherDetails",
                    "type": {
                        "kind": "internal",
                        "name": "Data"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__BadSettingsPolicy__DelegateDatum[]__IsDelegation",
            "name": "IsDelegation",
            "fieldTypes": [
                {
                    "name": "dd",
                    "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
                        "name": "DelegationDetail",
                        "fieldTypes": [
                            {
                                "name": "capoAddr",
                                "type": {
                                    "kind": "internal",
                                    "name": "Address"
                                }
                            },
                            {
                                "name": "mph",
                                "type": {
                                    "kind": "internal",
                                    "name": "MintingPolicyHash"
                                }
                            },
                            {
                                "name": "tn",
                                "type": {
                                    "kind": "internal",
                                    "name": "ByteArray"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__BadSettingsPolicy__DelegateDatum[]__capoStoredData",
            "name": "capoStoredData",
            "fieldTypes": [
                {
                    "name": "data",
                    "type": {
                        "kind": "struct",
                        "format": "map",
                        "id": "__module__ProtocolSettings__ProtocolSettings[]",
                        "name": "ProtocolSettings",
                        "fieldTypes": [
                            {
                                "name": "id",
                                "type": {
                                    "kind": "internal",
                                    "name": "ByteArray"
                                },
                                "key": "@id"
                            },
                            {
                                "name": "type",
                                "type": {
                                    "kind": "internal",
                                    "name": "String"
                                },
                                "key": "tpe"
                            },
                            {
                                "name": "meaning",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                }
                            },
                            {
                                "name": "badSpenderSetting",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                },
                                "key": "badSettingToSpendDelegate"
                            },
                            {
                                "name": "badMinterSetting",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                },
                                "key": "badSettingToMintDelegate"
                            }
                        ]
                    }
                },
                {
                    "name": "version",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                },
                {
                    "name": "otherDetails",
                    "type": {
                        "kind": "internal",
                        "name": "Data"
                    }
                }
            ]
        }
    ]
};

export const DelegateRoleSchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateRole",
    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
            "name": "MintDgt",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
            "name": "SpendDgt",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
            "name": "MintInvariant",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
            "name": "SpendInvariant",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
            "name": "OtherNamedDgt",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 6,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
            "name": "BothMintAndSpendDgt",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 7,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
            "name": "HandledByCapoOnly",
            "fieldTypes": []
        }
    ]
};

export const ManifestActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "ManifestActivity",
    "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
            "name": "retiringEntry",
            "fieldTypes": [
                {
                    "name": "key",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
            "name": "updatingEntry",
            "fieldTypes": [
                {
                    "name": "key",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "tokenName",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
            "name": "addingEntry",
            "fieldTypes": [
                {
                    "name": "key",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "tokenName",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
            "name": "forkingThreadToken",
            "fieldTypes": [
                {
                    "name": "key",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "newThreadCount",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
            "name": "burningThreadToken",
            "fieldTypes": [
                {
                    "name": "key",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "burnedThreadCount",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                }
            ]
        }
    ]
};

export const CapoLifecycleActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "CapoLifecycleActivity",
    "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
            "name": "CreatingDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purpose",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingDgtChange",
            "name": "queuePendingDgtChange",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingDgtChange",
            "name": "removePendingDgtChange",
            "fieldTypes": [
                {
                    "name": "role",
                    "type": {
                        "kind": "enum",
                        "name": "DelegateRole",
                        "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                "name": "MintDgt",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                "name": "SpendDgt",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 2,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                "name": "MintInvariant",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 3,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                "name": "SpendInvariant",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 4,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                "name": "DgDataPolicy",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 5,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                "name": "OtherNamedDgt",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 6,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                "name": "BothMintAndSpendDgt",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 7,
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                "name": "HandledByCapoOnly",
                                "fieldTypes": []
                            }
                        ]
                    }
                },
                {
                    "name": "name",
                    "type": {
                        "kind": "option",
                        "someType": {
                            "kind": "internal",
                            "name": "String"
                        }
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingDgtChanges",
            "name": "commitPendingDgtChanges",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
            "name": "forcingNewSpendDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purpose",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
            "name": "forcingNewMintDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purpose",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 6,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
            "name": "updatingManifest",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "ManifestActivity",
                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                "name": "retiringEntry",
                                "fieldTypes": [
                                    {
                                        "name": "key",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                "name": "updatingEntry",
                                "fieldTypes": [
                                    {
                                        "name": "key",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    },
                                    {
                                        "name": "tokenName",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 2,
                                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                "name": "addingEntry",
                                "fieldTypes": [
                                    {
                                        "name": "key",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    },
                                    {
                                        "name": "tokenName",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 3,
                                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                "name": "forkingThreadToken",
                                "fieldTypes": [
                                    {
                                        "name": "key",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    },
                                    {
                                        "name": "newThreadCount",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 4,
                                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                "name": "burningThreadToken",
                                "fieldTypes": [
                                    {
                                        "name": "key",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    },
                                    {
                                        "name": "burnedThreadCount",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    ]
};

export const DelegateLifecycleActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateLifecycleActivity",
    "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
            "name": "ReplacingMe",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purpose",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
            "name": "Retiring",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
            "name": "ValidatingSettings",
            "fieldTypes": []
        }
    ]
};

export const SpendingActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "SpendingActivity",
    "id": "__module__BadSettingsPolicy__SpendingActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__BadSettingsPolicy__SpendingActivity[]__UpdatingRecord",
            "name": "UpdatingRecord",
            "fieldTypes": [
                {
                    "name": "id",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        }
    ]
};

export const MintingActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "MintingActivity",
    "id": "__module__BadSettingsPolicy__MintingActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__BadSettingsPolicy__MintingActivity[]__CreatingRecord",
            "name": "CreatingRecord",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        }
    ]
};

export const BurningActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "BurningActivity",
    "id": "__module__BadSettingsPolicy__BurningActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__BadSettingsPolicy__BurningActivity[]__DeletingRecord",
            "name": "DeletingRecord",
            "fieldTypes": [
                {
                    "name": "id",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        }
    ]
};

export const DelegateActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateActivity",
    "id": "__module__BadSettingsPolicy__DelegateActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__CapoLifecycleActivities",
            "name": "CapoLifecycleActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "CapoLifecycleActivity",
                        "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                                "name": "CreatingDelegate",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purpose",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingDgtChange",
                                "name": "queuePendingDgtChange",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 2,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingDgtChange",
                                "name": "removePendingDgtChange",
                                "fieldTypes": [
                                    {
                                        "name": "role",
                                        "type": {
                                            "kind": "enum",
                                            "name": "DelegateRole",
                                            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                            "variantTypes": [
                                                {
                                                    "kind": "variant",
                                                    "tag": 0,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                                    "name": "MintDgt",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 1,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                                    "name": "SpendDgt",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 2,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                                    "name": "MintInvariant",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 3,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                                    "name": "SpendInvariant",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 4,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                                    "name": "DgDataPolicy",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 5,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                                    "name": "OtherNamedDgt",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 6,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                                    "name": "BothMintAndSpendDgt",
                                                    "fieldTypes": []
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 7,
                                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                                    "name": "HandledByCapoOnly",
                                                    "fieldTypes": []
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "name": "name",
                                        "type": {
                                            "kind": "option",
                                            "someType": {
                                                "kind": "internal",
                                                "name": "String"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 3,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingDgtChanges",
                                "name": "commitPendingDgtChanges",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 4,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
                                "name": "forcingNewSpendDelegate",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purpose",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 5,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
                                "name": "forcingNewMintDelegate",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purpose",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 6,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
                                "name": "updatingManifest",
                                "fieldTypes": [
                                    {
                                        "name": "activity",
                                        "type": {
                                            "kind": "enum",
                                            "name": "ManifestActivity",
                                            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                                            "variantTypes": [
                                                {
                                                    "kind": "variant",
                                                    "tag": 0,
                                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                                    "name": "retiringEntry",
                                                    "fieldTypes": [
                                                        {
                                                            "name": "key",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 1,
                                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                                    "name": "updatingEntry",
                                                    "fieldTypes": [
                                                        {
                                                            "name": "key",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            }
                                                        },
                                                        {
                                                            "name": "tokenName",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "ByteArray"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 2,
                                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                                    "name": "addingEntry",
                                                    "fieldTypes": [
                                                        {
                                                            "name": "key",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            }
                                                        },
                                                        {
                                                            "name": "tokenName",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "ByteArray"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 3,
                                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                                    "name": "forkingThreadToken",
                                                    "fieldTypes": [
                                                        {
                                                            "name": "key",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            }
                                                        },
                                                        {
                                                            "name": "newThreadCount",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "Int"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "kind": "variant",
                                                    "tag": 4,
                                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                                    "name": "burningThreadToken",
                                                    "fieldTypes": [
                                                        {
                                                            "name": "key",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            }
                                                        },
                                                        {
                                                            "name": "burnedThreadCount",
                                                            "type": {
                                                                "kind": "internal",
                                                                "name": "Int"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__DelegateLifecycleActivities",
            "name": "DelegateLifecycleActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "DelegateLifecycleActivity",
                        "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
                                "name": "ReplacingMe",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purpose",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
                                "name": "Retiring",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 2,
                                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
                                "name": "ValidatingSettings",
                                "fieldTypes": []
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__SpendingActivities",
            "name": "SpendingActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "SpendingActivity",
                        "id": "__module__BadSettingsPolicy__SpendingActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__BadSettingsPolicy__SpendingActivity[]__UpdatingRecord",
                                "name": "UpdatingRecord",
                                "fieldTypes": [
                                    {
                                        "name": "id",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__MintingActivities",
            "name": "MintingActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "MintingActivity",
                        "id": "__module__BadSettingsPolicy__MintingActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__BadSettingsPolicy__MintingActivity[]__CreatingRecord",
                                "name": "CreatingRecord",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__BurningActivities",
            "name": "BurningActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "BurningActivity",
                        "id": "__module__BadSettingsPolicy__BurningActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__BadSettingsPolicy__BurningActivity[]__DeletingRecord",
                                "name": "DeletingRecord",
                                "fieldTypes": [
                                    {
                                        "name": "id",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__CreatingDelegatedData",
            "name": "CreatingDelegatedData",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "dataType",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 6,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__UpdatingDelegatedData",
            "name": "UpdatingDelegatedData",
            "fieldTypes": [
                {
                    "name": "dataType",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "recId",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 7,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__DeletingDelegatedData",
            "name": "DeletingDelegatedData",
            "fieldTypes": [
                {
                    "name": "dataType",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "recId",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 8,
            "id": "__module__BadSettingsPolicy__DelegateActivity[]__MultipleDelegateActivities",
            "name": "MultipleDelegateActivities",
            "fieldTypes": [
                {
                    "name": "activities",
                    "type": {
                        "kind": "list",
                        "itemType": {
                            "kind": "internal",
                            "name": "Data"
                        }
                    }
                }
            ]
        }
    ]
};
// }
