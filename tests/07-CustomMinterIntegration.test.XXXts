import {
    describe as descrWithContext,
    expect,
    it as itWithContext,
    beforeEach,
    vi,
} from "vitest";

import { CustomTreasury } from "./customizing/CustomTreasury";
import { StellarTxnContext } from "../src/StellarTxnContext";
import {
    ADA,
    StellarTestContext,
    addTestContext,
    CapoTestHelper,
    DefaultCapoTestHelper,
} from "../src/testing";

type localTC = StellarTestContext<CustomTreasuryTestHelper>;

const it = itWithContext<localTC>;
const fit = itWithContext.only;
//!!! todo: update this when vitest can have skip<HeliosTestingContext>
//!!! until then, we need to use if(0) it(...) : (
// ... or something we make up that's nicer
const xit = it.skip;

const describe = descrWithContext<localTC>;

const minAda = 2n * ADA; // minimum needed to send an NFT

class CustomTreasuryTestHelper extends DefaultCapoTestHelper<CustomTreasury> {
    get stellarClass() {
        return CustomTreasury;
    }

    // mkDefaultCharterArgs() {
    //     return {
    //         govAuthorityLink: {
    //             addrHint: [this.currentActor.address],
    //             strategyName: "address",
    //         },
    //     };
    // }

    async setupActors() {
        this.addActor("tina", 1100n * ADA);
        this.addActor("tracy", 13n * ADA);
        this.addActor("tom", 120n * ADA);
        return this.setActor("tina");
    }
    async mintNamedToken(
        tokenName: string,
        count: bigint,
        destination: Address
    ): Promise<StellarTxnContext> {
        const { delay } = this;
        const { tina, tom, tracy } = this.actors;

        await this.mintCharterToken();
        const treasury = this.strella!;

        const tcx = await treasury.mkTxnMintNamedToken(tokenName, count);
        const v = treasury.tokenAsValue(tokenName, count);

        tcx.addOutput(new TxOutput(destination, v));

        console.log(
            "charter token mint: \n" + tcx.dump(treasury.networkParams)
        );

        const submitting = treasury.submit(tcx, {
            signers: [tina.address, tracy.address, tom.address],
        });
        return submitting.then(() => {
            this.network.tick(1n);

            return tcx;
        });
    }

    // async mkCharterSpendTx(): Promise<StellarTxnContext> {
    //     await this.mintCharterToken();

    //     const treasury = this.strella!;
    //     const tcx: StellarTxnContext = new StellarTxnContext(this.currentActor);

    //     return treasury.txnAddCharterWithAuthority(tcx);
    // }

    // async updateCharter(
    //     trustees: Address[],
    //     minSigs: bigint
    // ): Promise<StellarTxnContext> {
    //     await this.mintCharterToken();
    //     const treasury = this.strella!;

    //     const { signers } = this.state;

    //     const tcx = await treasury.mkTxnUpdateCharter(trustees, minSigs);
    //     return treasury.submit(tcx, { signers }).then(() => {
    //         this.network.tick(1n);
    //         return tcx;
    //     });
    // }
}

describe.skip("StellarContract", async () => {
    beforeEach<localTC>(async (context) => {
        return addTestContext(context, CustomTreasuryTestHelper);
    });

    describe("Integration tests: custom Capo, custom minter", () => {
        describe("can mint other tokens, on the authority of the charter token", () => {
            it("can build transactions that mint non-'charter' tokens", async (context: localTC) => {
                const {
                    h,
                    h: { network, actors, delay, state },
                } = context;

                await h.initialize();
                const treasury = context.h.strella;

                const tokenName = "fooToken";
                const hasNamedToken = treasury.mkTokenPredicate(
                    treasury.mph,
                    tokenName,
                    42n
                );
                const mintedBefore = await network.getUtxos(treasury.address);
                expect(mintedBefore.filter(hasNamedToken)).toHaveLength(0);

                const tcx: StellarTxnContext = await h.mintNamedToken(
                    tokenName,
                    42n,
                    actors.tom.address
                );
                const theTokenValue = hasNamedToken.value;
                expect(hasNamedToken(tcx.tx.body.minted)).toBeTruthy();

                const u = await network.getUtxos(actors.tom.address);
                const f = u.find(hasNamedToken);
                expect(f).toBeTruthy();
                expect(f?.origOutput.value.ge(theTokenValue)).toBeTruthy();
            });

            it.skip("requires the charter-token to be spent as proof of authority", async (context: localTC) => {
                const {
                    h,
                    h: { network, actors, delay, state },
                } = context;

                await h.initialize();
                const treasury = context.strella!;

                const tokenName = "fooToken";
                const hasNamedToken = treasury.mkTokenPredicate(
                    treasury.mph,
                    tokenName,
                    42n
                );
                const mintedBefore = await network.getUtxos(treasury.address);
                expect(mintedBefore.filter(hasNamedToken)).toHaveLength(0);

                // NOTE: this mocks the return-token-to-contract function,
                //   which doesn't satisfy the purpose of the test
                // vi.spyOn(treasury, "txnKeepCharterToken").mockImplementation(
                //     (tcx) => tcx!
                // );

                // NOTE: this satisfies the purpose of the test by mocking the addition
                //    of the charter-token, but doesn't actually trigger any functionality
                //    in the contract, because it takes actually spending the charter token
                //    to trigger the validator to do anything in the first place.
                // vi.spyOn(treasury, "mustAddCharterAuthorization").mockImplementation(
                //     (tcx) => tcx!
                // );

                //!!! todo: the only way to actually make a real negative test here
                //  ... involves separating the responsibility for validating "mint named token"
                //  ... from the responsibility for checking that the authority-token can be spent
                //  ... then, we could make the "mint named token" validator run a transaction-check
                //  ... which would fail in the expected way:

                expect(
                    h.mintNamedToken(tokenName, 42n, actors.tom.address)
                ).rejects.toThrow(
                    /missing required charter token authorization/
                );
            });

            it("fails if the charter-token is not returned to the treasury", async (context: localTC) => {
                const {
                    h,
                    h: { network, actors, delay, state },
                } = context;

                await h.initialize();
                const treasury = context.strella!;

                const tokenName = "fooToken";
                const hasNamedToken = treasury.mkTokenPredicate(
                    treasury.mph,
                    tokenName,
                    42n
                );
                const mintedBefore = await network.getUtxos(treasury.address);
                expect(mintedBefore.filter(hasNamedToken)).toHaveLength(0);

                vi.spyOn(treasury, "txnKeepCharterToken").mockImplementation(
                    (tcx: StellarTxnContext, x: any) => {
                        tcx.addOutput(
                            new TxOutput(
                                actors.tracy.address,
                                treasury.tvCharter()
                            )
                        );

                        return tcx;
                    }
                );

                expect(
                    h.mintNamedToken(tokenName, 42n, actors.tom.address)
                ).rejects.toThrow(
                    /charter token must be returned to the contract/
                );
            });

            it("fails if the charter-token changes the charter parameters", async (context: localTC) => {
                const {
                    h,
                    h: { network, actors, delay, state },
                } = context;
                const { tina, tom, tracy } = actors;

                await h.initialize();
                const treasury = context.strella;
                const tokenName = "fooToken";

                let targetTrustees = [tom.address, tracy.address, tina.address];
                let targetMinSigs = 97n;
                vi.spyOn(treasury, "txnKeepCharterToken").mockImplementation(
                    (tcx: StellarTxnContext, x: any) => {
                        tcx.addOutput(
                            new TxOutput(
                                treasury.address,
                                treasury.tvCharter(),
                                treasury.mkDatumCharterToken({
                                    trustees: targetTrustees,
                                    minSigs: targetMinSigs,
                                })
                            )
                        );

                        return tcx;
                    }
                );

                const invalidUpdate = /invalid update to charter settings/;
                await expect(
                    h.mintNamedToken(tokenName, 42n, actors.tom.address)
                ).rejects.toThrow(invalidUpdate);

                targetMinSigs = 2n; // restores original good minSigs
                await expect(
                    h.mintNamedToken(tokenName, 42n, actors.tom.address)
                ).rejects.toThrow(invalidUpdate);

                targetMinSigs = 43n; // bad minSigs
                targetTrustees = [tina.address, tom.address, tracy.address]; // good (= original) trustee list
                await expect(
                    h.mintNamedToken(tokenName, 42n, actors.tom.address)
                ).rejects.toThrow(invalidUpdate);

                //! restores original settings including the right order; should pass.
                targetMinSigs = 2n;
                targetTrustees = [tina.address, tom.address, tracy.address];
                expect(
                    h.mintNamedToken(tokenName, 42n, actors.tom.address)
                ).resolves.toBeTruthy();
            });
        });
    });
});

const seconds = 1000; // milliseconds
