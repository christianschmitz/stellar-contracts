// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
/// <reference types="@helios-lang/uplc" />
/// <reference types="@helios-lang/ledger" />
/// <reference types="@helios-lang/contract-utils" />
/// <reference types="../delegation/CapoDelegateBundle.ts">;  // development
/// <reference types="./CapoHeliosBundle.ts">
/// <reference types="./HeliosScriptBundle.ts">
/// <reference types="@donecollectively/stellar-contracts" /> // production



/** ------------ BEGIN hlbundle imports --------- */
/** if you want to maintain these in a .ts file, you can use the following imports there */
// import type { UplcData } from "@helios-lang/uplc";
// import type {
//     Address,
//     AssetClass,
//     DatumHash,
//     MintingPolicyHash,
//     PubKey,
//     PubKeyHash,
//     ScriptHash,
//     SpendingCredential,
//     StakingCredential,
//     StakingHash,
//     StakingValidatorHash,
//     TimeRange,
//     TxId,
//     TxInput,
//     TxOutput,
//     TxOutputId,
//     TxOutputDatum,
//     ValidatorHash,
//     Value,
// } from "@helios-lang/ledger";
// import type { Cast } from "@helios-lang/contract-utils";
// import type { 
//     IntLike,
//     ByteArrayLike,
//  } from "@helios-lang/codec-utils";

// import type {CapoHeliosBundle} from "@donecollectively/stellar-contracts"
// import type {CapoDelegateBundle} from "@donecollectively/stellar-contracts"
// import type {
//     HeliosScriptBundle,
//     mkEnum,
//     type EnumType,
//     type singleEnumVariant,
// } from "@donecollectively/stellar-contracts"

/** ------------ BEGIN hlbundle types ------------ */
export type RelativeDelegateLink = {
    uutName: string
    strategyName: string
    delegateValidatorHash: Option<ValidatorHash>
    config: number[]
};

export type RelativeDelegateLinkLike = {
    uutName: string
    strategyName: string
    delegateValidatorHash: Option<ValidatorHash | string | number[]>
    config: number[]
};


export type AnyData = {
    id: number[]
    type: string
};

export type AnyDataLike = {
    id: number[]
    type: string
};


export type CapoDatum = EnumType<{module: "CapoHelpers", enumName: "CapoDatum"}, {
        CharterToken: singleEnumVariant<CapoDatum, "CharterToken",
            "Constr#0", 
            "fields", {
                spendDelegateLink: RelativeDelegateLink,
                spendInvariants: Array<RelativeDelegateLink>,
                namedDelegates: Map<string, RelativeDelegateLink>,
                mintDelegateLink: RelativeDelegateLink,
                mintInvariants: Array<RelativeDelegateLink>,
                govAuthorityLink: RelativeDelegateLink
            }, "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariant<CapoDatum, "ScriptReference",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >,
        DelegatedData: singleEnumVariant<CapoDatum, "DelegatedData",
            "Constr#2", 
            "fields", {
                data: AnyData,
                version: bigint,
                otherDetails: UplcData
            }, "noSpecialFlags"
        >
    }
>;

export type CapoDatumLike = EnumType<{module: "CapoHelpers", enumName: "CapoDatum"}, {
        CharterToken: singleEnumVariant<CapoDatum, "CharterToken",
            "Constr#0", 
            "fields", {
                spendDelegateLink: RelativeDelegateLinkLike,
                spendInvariants: Array<RelativeDelegateLinkLike>,
                namedDelegates: Map<string, RelativeDelegateLinkLike>,
                mintDelegateLink: RelativeDelegateLinkLike,
                mintInvariants: Array<RelativeDelegateLinkLike>,
                govAuthorityLink: RelativeDelegateLinkLike
            }, "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariant<CapoDatum, "ScriptReference",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >,
        DelegatedData: singleEnumVariant<CapoDatum, "DelegatedData",
            "Constr#2", 
            "fields", {
                data: AnyDataLike,
                version: IntLike,
                otherDetails: UplcData
            }, "noSpecialFlags"
        >
    }
>;


export type CapoActivity = EnumType<{module: "CapoHelpers", enumName: "CapoActivity"}, {
        usingAuthority: singleEnumVariant<CapoActivity, "usingAuthority",
            "Constr#0", "tagOnly", never, "noSpecialFlags"
        >,
        updatingCharter: singleEnumVariant<CapoActivity, "updatingCharter",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >,
        retiringRefScript: singleEnumVariant<CapoActivity, "retiringRefScript",
            "Constr#2", "tagOnly", never, "noSpecialFlags"
        >,
        addingSpendInvariant: singleEnumVariant<CapoActivity, "addingSpendInvariant",
            "Constr#3", "tagOnly", never, "noSpecialFlags"
        >,
        spendingDelegatedDatum: singleEnumVariant<CapoActivity, "spendingDelegatedDatum",
            "Constr#4", "tagOnly", never, "noSpecialFlags"
        >,
        updatingTypeMap: singleEnumVariant<CapoActivity, "updatingTypeMap",
            "Constr#5", "tagOnly", never, "noSpecialFlags"
        >
    }
>;

export type CapoActivityLike = EnumType<{module: "CapoHelpers", enumName: "CapoActivity"}, {
        usingAuthority: singleEnumVariant<CapoActivity, "usingAuthority",
            "Constr#0", "tagOnly", never, "noSpecialFlags"
        >,
        updatingCharter: singleEnumVariant<CapoActivity, "updatingCharter",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >,
        retiringRefScript: singleEnumVariant<CapoActivity, "retiringRefScript",
            "Constr#2", "tagOnly", never, "noSpecialFlags"
        >,
        addingSpendInvariant: singleEnumVariant<CapoActivity, "addingSpendInvariant",
            "Constr#3", "tagOnly", never, "noSpecialFlags"
        >,
        spendingDelegatedDatum: singleEnumVariant<CapoActivity, "spendingDelegatedDatum",
            "Constr#4", "tagOnly", never, "noSpecialFlags"
        >,
        updatingTypeMap: singleEnumVariant<CapoActivity, "updatingTypeMap",
            "Constr#5", "tagOnly", never, "noSpecialFlags"
        >
    }
>;


/** ------------- hlbundle types END ------------- */

export default
class CapoBundleWithGenericUuts 
extends CapoHeliosBundle {
    mkDatum: makesUplcEnumData<CapoDatumLike>;
    readDatum: readsUplcEnumData<CapoDatum>;

    Activity: makesUplcActivityEnumData<CapoActivityLike>;

}
