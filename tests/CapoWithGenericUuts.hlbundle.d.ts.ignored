// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
/// <reference types="@helios-lang/uplc" />
/// <reference types="@helios-lang/ledger" />
/// <reference types="@helios-lang/contract-utils" />
/// <reference types="../delegation/CapoDelegateBundle.ts">;  // development
/// <reference types="./CapoHeliosBundle.ts">
/// <reference types="./HeliosScriptBundle.ts">
/// <reference types="@donecollectively/stellar-contracts" /> // production



/** ------------ BEGIN hlbundle imports --------- */
/** if you want to maintain these in a .ts file, you can use the following imports there */
// import type { UplcData } from "@helios-lang/uplc";
// import type {
//     Address,
//     AssetClass,
//     DatumHash,
//     MintingPolicyHash,
//     PubKey,
//     PubKeyHash,
//     ScriptHash,
//     SpendingCredential,
//     StakingCredential,
//     StakingHash,
//     StakingValidatorHash,
//     TimeRange,
//     TxId,
//     TxInput,
//     TxOutput,
//     TxOutputId,
//     TxOutputDatum,
//     ValidatorHash,
//     Value,
// } from "@helios-lang/ledger";
// import type { Cast } from "@helios-lang/contract-utils";
// import type { 
//     IntLike,
//     ByteArrayLike,
//  } from "@helios-lang/codec-utils";

// import type {CapoHeliosBundle} from "@donecollectively/stellar-contracts"
// import type {CapoDelegateBundle} from "@donecollectively/stellar-contracts"
// import type {
//     HeliosScriptBundle,
//     mkEnum,
//     type EnumTypeMeta,
//     type singleEnumVariantMeta,
//     type tagOnly
// } from "@donecollectively/stellar-contracts"

/** ------------ BEGIN hlbundle types ------------ */
export type RelativeDelegateLink = {
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash>
    config: /*minStructField*/ number[]
}

export type RelativeDelegateLinkLike = {
    uutName: /*minStructField*/ string
    strategyName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ Option<ValidatorHash | string | number[]>
    config: /*minStructField*/ number[]
}


export type CapoDatum$CharterToken = {
    spendDelegateLink: RelativeDelegateLink  /*minVariantField*/ ,
    spendInvariants: Array<RelativeDelegateLink>  /*minVariantField*/ ,
    namedDelegates: Map<string, RelativeDelegateLink>  /*minVariantField*/ ,
    mintDelegateLink: RelativeDelegateLink  /*minVariantField*/ ,
    mintInvariants: Array<RelativeDelegateLink>  /*minVariantField*/ ,
    govAuthorityLink: RelativeDelegateLink  /*minVariantField*/ 
}

export type CapoDatum$CharterTokenLike = {
    spendDelegateLink: RelativeDelegateLinkLike  /*minVariantField*/ ,
    spendInvariants: Array<RelativeDelegateLinkLike>  /*minVariantField*/ ,
    namedDelegates: Map<string, RelativeDelegateLinkLike>  /*minVariantField*/ ,
    mintDelegateLink: RelativeDelegateLinkLike  /*minVariantField*/ ,
    mintInvariants: Array<RelativeDelegateLinkLike>  /*minVariantField*/ ,
    govAuthorityLink: RelativeDelegateLinkLike  /*minVariantField*/ 
}


export type AnyData = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}

export type AnyDataLike = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}


export type CapoDatum$DelegatedData = {
    data: AnyData  /*minVariantField*/ ,
    version: bigint  /*minVariantField*/ ,
    otherDetails: UplcData  /*minVariantField*/ 
}

export type CapoDatum$DelegatedDataLike = {
    data: AnyDataLike  /*minVariantField*/ ,
    version: IntLike  /*minVariantField*/ ,
    otherDetails: UplcData  /*minVariantField*/ 
}


export type CapoDatumMeta = EnumTypeMeta<
    {module: "CapoHelpers", enumName: "CapoDatum"}, {
        CharterToken: singleEnumVariantMeta<CapoDatumMeta, "CharterToken",
            "Constr#0", 
            "fields", CapoDatum$CharterToken, "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariantMeta<CapoDatumMeta, "ScriptReference",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        DelegatedData: singleEnumVariantMeta<CapoDatumMeta, "DelegatedData",
            "Constr#2", 
            "fields", CapoDatum$DelegatedData, "noSpecialFlags"
        >
    }
>;

export type CapoDatum = 
        | { CharterToken: /*minEnumVariant*/ CapoDatum$CharterToken }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { DelegatedData: /*minEnumVariant*/ CapoDatum$DelegatedData }
export type CapoDatumLike = 
        | { CharterToken: /*minEnumVariant*/ CapoDatum$CharterTokenLike }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { DelegatedData: /*minEnumVariant*/ CapoDatum$DelegatedDataLike }

export type CapoActivityMeta = EnumTypeMeta<
    {module: "CapoHelpers", enumName: "CapoActivity"}, {
        usingAuthority: singleEnumVariantMeta<CapoActivityMeta, "usingAuthority",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        updatingCharter: singleEnumVariantMeta<CapoActivityMeta, "updatingCharter",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        retiringRefScript: singleEnumVariantMeta<CapoActivityMeta, "retiringRefScript",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        addingSpendInvariant: singleEnumVariantMeta<CapoActivityMeta, "addingSpendInvariant",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        spendingDelegatedDatum: singleEnumVariantMeta<CapoActivityMeta, "spendingDelegatedDatum",
            "Constr#4", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        updatingTypeMap: singleEnumVariantMeta<CapoActivityMeta, "updatingTypeMap",
            "Constr#5", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;

export type CapoActivity = 
        | { usingAuthority: /*minEnumVariant*/ tagOnly }
        | { updatingCharter: /*minEnumVariant*/ tagOnly }
        | { retiringRefScript: /*minEnumVariant*/ tagOnly }
        | { addingSpendInvariant: /*minEnumVariant*/ tagOnly }
        | { spendingDelegatedDatum: /*minEnumVariant*/ tagOnly }
        | { updatingTypeMap: /*minEnumVariant*/ tagOnly }
export type CapoActivityLike = 
        | { usingAuthority: /*minEnumVariant*/ tagOnly }
        | { updatingCharter: /*minEnumVariant*/ tagOnly }
        | { retiringRefScript: /*minEnumVariant*/ tagOnly }
        | { addingSpendInvariant: /*minEnumVariant*/ tagOnly }
        | { spendingDelegatedDatum: /*minEnumVariant*/ tagOnly }
        | { updatingTypeMap: /*minEnumVariant*/ tagOnly }

/** ------------- hlbundle types END ------------- */

export default
class CapoBundleWithGenericUuts 
extends CapoHeliosBundle {
    mkDatum: makesUplcEnumData<CapoDatumLike>;
    readDatum: readsUplcEnumData<CapoDatum>;

    Activity: makesUplcActivityEnumData<CapoActivityLike>;

}
