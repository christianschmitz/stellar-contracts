{"version":3,"file":"DelegatedDataContract.mjs","sources":["../src/delegation/DelegatedDataContract.ts"],"sourcesContent":["import { makeTxOutput, makeValue, type Value } from \"@helios-lang/ledger\";\nimport { makeIntData } from \"@helios-lang/uplc\";\n\nimport type {\n    FoundDatumUtxo,\n    hasCharterRef,\n    hasUutContext,\n} from \"../CapoTypes.js\";\nimport type { hasSettingsRef } from \"../CapoTypes.js\";\nimport type { ReqtsMap } from \"../Requirements.js\";\nimport type { StellarTxnContext, hasSeedUtxo } from \"../StellarTxnContext.js\";\nimport { ContractBasedDelegate } from \"./ContractBasedDelegate.js\";\nimport type { UutName } from \"./UutName.js\";\nimport { betterJsonSerializer, dumpAny } from \"../diagnostics.js\";\nimport {\n    type seedActivityFunc,\n    type SeedActivityArg,\n    SeedActivity,\n    type isActivity,\n} from \"../ActivityTypes.js\";\nimport type {\n    AnyData,\n    AnyDataLike,\n    ErgoAnyData,\n    minimalAnyData,\n} from \"./UnspecializedDelegate.typeInfo.js\";\nimport { textToBytes, type InlineDatum } from \"../HeliosPromotedTypes.js\";\nimport type {\n    CapoHeliosBundle,\n    CapoHeliosBundleClass,\n} from \"../CapoHeliosBundle.js\";\nimport type { CapoDelegateBundle } from \"./CapoDelegateBundle.js\";\nimport type { AnyDataTemplate, minimalData } from \"./DelegatedData.js\";\nimport { uplcDataSerializer } from \"./jsonSerializers.js\";\n\nexport type DgDataType<T extends DelegatedDataContract<any, any>> =\n    T extends DelegatedDataContract<infer T, infer TLike> ? T : never;\n\n\nexport type DgDataTypeLike<T extends DelegatedDataContract<any, any>> =\n    T extends DelegatedDataContract<infer T, infer TLike> ? TLike : never;\n\n/**\n * use for new or updated record data, where id and type can\n * be implied instead of explicitly provided\n */\nexport type minimalDgDataTypeLike<T extends DelegatedDataContract<any, any>> =\n    minimalData<DgDataTypeLike<T>>;\n\n/**\n * @public\n * @deprecated use minimalDgDataTypeLike instead\n */\nexport type DgDataCreationAttrs<\n    T extends DelegatedDataContract<any, any> // | DelegatedDatumAdapter<any>\n> = Omit<DgDataTypeLike<T>, \"id\" | \"type\">;\n\n/**\n * @public\n */\nexport type DelegatedDatumTypeName<\n    T extends DelegatedDataContract<any, any>,\n    TN extends string = T[\"recordTypeName\"]\n> = TN;\n\nexport type DelegatedDatumIdPrefix<\n    T extends DelegatedDataContract<any, any>,\n    TN extends string = T[\"idPrefix\"]\n> = TN;\n\n/**\n * DelegatedDataContract provides a base class for utility functions\n * to simplify implementation of delegate controllers.  They are used\n * to manage the creation and updating of records in a delegated data store,\n * where the data is stored in a Capo, and the controller is forced into the\n * transaction by the Capo's delegate policy (or its spend-delegate's).\n *@public\n */\nexport abstract class DelegatedDataContract<\n    T extends AnyDataTemplate<any, any>,\n    TLike extends AnyDataTemplate<any, any>\n> extends ContractBasedDelegate {\n    usesWrappedData?: boolean;\n    dgDatumHelper = this.dataBridgeClass?.prototype.DelegateDatum;\n\n    /**\n     * when set to true, the controller class will include the Capo's\n     * gov authority in the transaction, to ease transaction setup.\n     * @remarks\n     * This is a convenience for the controller, and should be used along with\n     * the appropriate on-chain policy to require the gov token's presence.\n     */\n    needsGovAuthority = false;\n    abstract get recordTypeName(): string;\n    abstract get idPrefix(): string;\n\n    abstract exampleData(): minimalData<TLike>;\n\n    /**\n     * Provides a customized label for the delegate, used in place of\n     * a generic script name (\"BasicDelegate\").  DelegatedDataContract\n     * provides a default name with the record type name and \"Pol\" suffix.\n     *\n     * Affects the on-chain logging for the policy and the compiled script\n     * output in the script-cache on-disk or in browser's storage.\n     */\n    get delegateName() {\n        return `${this.recordTypeName}Pol`;\n    }\n\n    // abstract get capo(): Capo<any>;\n    abstract requirements(): ReqtsMap<any, any> | ReqtsMap<any, never>;\n\n    // async findRecord(id: string | UutName) {\n    //     return this.capo\n    //         .findDelegatedDataUtxos({\n    //             type: this.recordTypeName,\n    //             id,\n    //         })\n    //         .then(this.capo.singleItem);\n    // }\n\n    get abstractBundleClass(): undefined | typeof CapoDelegateBundle {\n        return undefined;\n    }\n\n    scriptBundle() {\n        if (this.abstractBundleClass) {\n            throw new Error(\n                `${this.constructor.name}: this pluggable delegate requires a bit of setup that doesn't seem to be done yet.\\n` +\n                    `First, ensure you have derived a subclass for the controller, with a scriptBundle() method.\\n` +\n                    `\\nThat method should \\`return new YourConcreteBundle()\\`\\n` +\n                    `\\n  ... where YourConcreteBundle is a subclass of CapoDelegateBundle that you've created.\\n` +\n                    `\\nA concrete bundle class should be defined in \\`${this.delegateName}.concrete.hlb.ts\\`\\n` +\n                    `  ... in the same directory as your derived controller class:\\n\\n` +\n                    `    import {YourAppCapo} from \"./YourAppCapo.js\";\\n` +\n                    `    import {${this.abstractBundleClass.name}} from ...\\n` +\n                    `    export default class YourConcreteBundle extends ${this.abstractBundleClass.name}} {\\n` +\n                    `        // ... \\n` +\n                    `    }\\n`\n            );\n        }\n\n        throw new Error(\n            `${this.constructor.name}: missing required implementation of abstractBundleClass()\\n` +\n                `\\nDefined in a \\`*.hlb.ts\\` file, it should have at minimum:\\n` +\n                `    import {YourAppCapo} from \"./YourAppCapo.js\";\\n\\n` +\n                `    import SomeSpecializedDelegate from \"./YourSpecializedDelegate.hl\";\\n\\n` +\n                `    export default class SomeDelegateBundle extends CapoHeliosBundle {\\n` +\n                `        get specializedDelegateModule() { return SomeSpecializedDelegate; }\\n` +\n                `    }\\n\\n` +\n                `We'll generate types in a .typeInfo.ts file, based on the types in your Helios sources,\\n` +\n                `  ... and a .bridge.ts file having data-conversion classes for your on-chain types.`+\n                `\\nWhen your delegated-data controller is used within your Capo, your bundle will\\n` +\n                `have access via import {...} to any helios modules provided by that Capo's .hlb.ts. `\n        );\n\n        return null as unknown as CapoDelegateBundle;\n    }\n\n    /**\n     * Finds records of this delegate's type, optionally by ID.\n     * @remarks\n     * Returns a record list when no ID is provided, or a single record when an ID is provided.\n     */\n    async findRecords<\n        THIS extends DelegatedDataContract<any, any>,\n        ID extends undefined | string | UutName | number[]\n    >(\n        this: THIS,\n        options: {\n            id?: T;\n            // TODO: support single/predicate/query options by passing them through\n            // single : boolean\n            // predicate: ...\n            // query\n        } = {}\n    ): Promise<\n        ID extends undefined\n            ? FoundDatumUtxo<T, TLike>[]\n            : FoundDatumUtxo<T, TLike>\n    > {\n        const result = await this.capo.findDelegatedDataUtxos({\n            type: this.recordTypeName,\n            // single, // todo: support single in the options\n            // predicate\n        });\n        if (options.id == undefined) {\n            // this is the typed-array case.  We could get more explicit\n            // about casting the result type, but that's already provided by the\n            // definition of ***this function's*** return type.\n            return result as any;\n        }\n        // the caller will already know whether the expected type is an array above,\n        // or a  single item below.\n        return this.capo.singleItem(result) as any;\n    }\n\n    mkDgDatum<THIS extends DelegatedDataContract<any, any>>(\n        this: THIS,\n        record: TLike\n    ): InlineDatum {\n        // console.log({record}, \"8888888888888888888888888888888888888\")\n\n        return this.mkDatum.capoStoredData({\n            data: record,\n            version: 2n,\n            otherDetails: makeIntData(0),\n        });\n    }\n\n    /**\n     * Intuition hook redirecting to activity.MintingActivities.$seeded$...\n     * @remarks\n     * @deprecated use activites.MintingActivites.$seeded$* accessors/methods instead.\n     */\n    usesSeedActivity<SA extends seedActivityFunc<any, any>>(\n        a: SA,\n        seedPlaceholder: \"...seed\",\n        ...args: SeedActivityArg<SA>\n    ) {\n        throw new Error(\n            `make an implied-seed activity with this.activity.MintingActivites.$seeded$*`\n        );\n        // console.log(\"seed activity with function \", a.name, a)\n        // return new SeedActivity(this, a, args);\n    }\n\n    /**\n     * builds a txn creating a record of this type in the data store\n     * @remarks\n     * The \\{activity\\} option can be a {@link SeedActivity} object provided by\n     * `this.activity.MintingActivities.$seeded$‹activityName›` accessors/methods,\n     * which creates a record id based on the (unique) spend of a seed value.\n     */\n    async mkTxnCreateRecord<\n        TCX extends StellarTxnContext\n        // DDType extends MaybeWrappedDataType<THIS> = MaybeWrappedDataType<THIS>,\n        // minDDType extends DgDataCreationAttrs<THIS> = DgDataCreationAttrs<THIS>\n    >(options: DgDataCreationOptions<TLike>, tcx?: TCX): Promise<TCX> {\n        // ... it does the setup for the creation activity,\n        //   so that the actual \"creation\" part of the transaction will be ready to go\n\n        tcx = tcx || (this.mkTcx(`create ${this.recordTypeName}`) as TCX);\n        // all the reference data that can be needed by the creation policy\n        const tcx1a = await this.tcxWithCharterRef(tcx);\n        const tcx1b = await this.tcxWithSeedUtxo(tcx1a);\n        const tcx1c = tcx1b;\n        // const tcx1c = await this.tcxWithSettingsRef(tcx1b);\n        const { capo } = this;\n        const mintDelegate = await capo.getMintDelegate();\n\n        const dataType = this.recordTypeName;\n        // mints the UUT needed to create the record, which triggers the mint delegate\n        // to enforce the data delegate creation policy\n        const tcx2 = await capo.txnMintingUuts(tcx1c, [this.idPrefix], {\n            mintDelegateActivity: mintDelegate.activity.CreatingDelegatedData(\n                tcx1c,\n                { dataType }\n            ),\n        });\n\n        const activity: isActivity =\n            options.activity instanceof SeedActivity\n                ? options.activity.mkRedeemer(tcx2)\n                : options.activity;\n\n        // ... now the transaction has what it needs to trigger the creation policy\n        // ... and be approved by it creation policy.\n        // this method is the only part of the process that is actually triggering the\n        // delegate policy that checks the creation.\n        return this.txnCreatingRecord(tcx2, {\n            ...options,\n            activity,\n        }).then((tcx3) => tcx3);\n    }\n\n    creationDefaultDetails(): Partial<TLike> {\n        return {};\n    }\n\n    async txnCreatingRecord<\n        TCX extends StellarTxnContext &\n            hasCharterRef &\n            hasSeedUtxo &\n            // hasSettingsRef &\n            hasUutContext<DelegatedDatumIdPrefix<this>>\n    >(\n        tcx: TCX,\n        // record: minDDType,\n        options: CoreDgDataCreationOptions<TLike>\n    ): Promise<TCX> {\n        const newType = this.recordTypeName as DelegatedDatumTypeName<this>;\n        const idPrefix = this.idPrefix as DelegatedDatumIdPrefix<this>;\n\n        const {\n            addedUtxoValue: extraCreationValue = makeValue(0n),\n            data: typedData,\n            activity,\n        } = options;\n\n        const tcx2 = await this.txnGrantAuthority(tcx, activity);\n\n        const uut = tcx.state.uuts[idPrefix];\n        let newRecord: DgDataTypeLike<this> = typedData as any;\n\n        const defaults = this.creationDefaultDetails() || {};\n        const fullRecord = {\n            id: textToBytes(uut.toString()),\n            type: newType,\n            ...defaults,\n            ...newRecord,\n        } as DgDataTypeLike<this>;\n\n        const newDatum = this.mkDatum.capoStoredData({\n            // data: new Map(Object.entries(beforeSave(fullRecord) as any)),\n            data: fullRecord,\n            version: 2n,\n            otherDetails: makeIntData(0),\n        });\n        console.log(\n            `🏒 creating ${newType} -> `+\n            uplcDataSerializer(newType, fullRecord, 1)\n\n        );\n        let tcx3 = tcx2;\n        if (this.needsGovAuthority) {\n            tcx3 = await this.capo.txnAddGovAuthority(tcx2);\n        }\n\n        return tcx3.addOutput(\n            makeTxOutput(\n                this.capo.address,\n                this.uh.mkMinTv(this.capo.mph, uut).add(extraCreationValue),\n                newDatum\n            )\n        ) as TCX & typeof tcx2;\n    }\n\n    /**\n     * Creates an indirect reference to an an update activity with arguments,\n     * using a record-id placeholder.\n     *\n     * @remarks\n     * Provide an update activity function, a placeholder for the record-id, any other args\n     * for the on-chain activity/redeemer.  The update-activity function can be any of this\n     * contract's `activity.SpendingActivities.*` functions.\n     *\n     * This approach is similar to the creation-time {@link DelegatedDataContract.usesSeedActivity|usesSeedActivity()} method,\n     * with a \"...recId\" placeholder instead of a \"...seed\" placeholder.\n     *\n     * The arguments are passed to the update activity function, which is expected to return\n     * an {@link isActivity} object serializing the `{redeemer}` data as a UplcData object.\n     * Normally that's done with {@link ContractBasedDelegate.mkSpendingActivity | mkSpendingActivity()}.\n     */\n    usesUpdateActivity<\n        UA extends updateActivityFunc<any>\n        // (...args: [hasRecId, ...any]) => isActivity\n    >(a: UA, _idPlaceholder: \"...recId\", ...args: UpdateActivityArgs<UA>) {\n        return new UpdateActivity(this, a, args);\n    }\n\n    /**\n     * Creates a transaction for updating a record in the delegated data store\n     *\n     * @remarks\n     * Provide a transaction name, an existing item, and a controller activity to trigger.\n     * The activity MUST either be an activity triggering one of the controller's SpendingActivity variants,\n     * or the result of calling {@link DelegatedDataContract.usesUpdateActivity | usesUpdateActivity()}.\n     *   **or TODO support a multi-activity**\n     *\n     * The updatedRecord only needs to contain the fields that are being updated.\n     */\n    async mkTxnUpdateRecord<TCX extends StellarTxnContext>(\n        this: DelegatedDataContract<any, any>,\n        txnName: string,\n        item: FoundDatumUtxo<T, any>,\n        options: DgDataUpdateOptions<TLike>,\n        tcx?: TCX\n    ): Promise<TCX> {\n        tcx = tcx || (this.mkTcx(txnName) as TCX);\n        const { capo } = this;\n        const mintDelegate = await capo.getMintDelegate();\n        const /* tcx1a*/ tcx1 = await this.tcxWithCharterRef(tcx);\n        // const tcx1 = await this.tcxWithSettingsRef(tcx1a);\n\n        const {\n            activity,\n            addedUtxoValue,\n            // beforeSave = (x) => x,\n            updatedFields,\n        } = options;\n        // tell Capo to spend the DD record\n        const tcx2 = await capo.txnAttachScriptOrRefScript(\n            tcx1,\n            capo.compiledScript\n        );\n        const tcx2a = tcx2.addInput(\n            item.utxo,\n            capo.activitySpendingDelegatedDatum()\n        );\n        const existingTypedData = item.data as DgDataType<this>;\n        let recId: string | number[] = existingTypedData.id;\n        if (!Array.isArray(recId)) {\n            recId = textToBytes(recId);\n        }\n        // tell the spend delegate to allow the spend,\n        // ... by authority of the delegated-data controller\n        const spendDelegate = await capo.getSpendDelegate(\n            tcx2a.state.charterData\n        );\n        const dataType = this.recordTypeName;\n        const tcx2b = await spendDelegate.txnGrantAuthority(\n            tcx2a,\n            spendDelegate.activity.UpdatingDelegatedData({\n                dataType,\n                recId,\n            })\n        );\n\n        const materializedActivity: isActivity =\n            activity instanceof UpdateActivity\n                ? activity.mkRedeemer(recId)\n                : activity;\n\n        let recordWithUpdates: DgDataTypeLike<this> = {\n            ...(existingTypedData as any),\n            ...updatedFields,\n        };\n\n        // const patchedRecord = beforeSave(recordWithUpdates);\n\n\n        let tcx2c = tcx2b;\n        if (this.needsGovAuthority) {\n            tcx2c = await this.capo.txnAddGovAuthority(tcx2b);\n        }\n\n        return this.txnUpdatingRecord(tcx2b, recId, item, {\n            activity: materializedActivity,\n            addedUtxoValue,\n            updatedFields: recordWithUpdates as any,\n        });\n    }\n\n    async txnUpdatingRecord<\n        TCX extends StellarTxnContext & hasCharterRef\n        // hasSeedUtxo &\n        // hasSettingsRef\n    >(\n        tcx: TCX,\n        id: hasRecId,\n        item: FoundDatumUtxo<T, any>,\n        // controllerActivity: isActivity,\n        // record: WrappedDataType<THIS>,\n        options: CoreDgDataUpdateOptions<TLike>\n    ): Promise<TCX> {\n        const recType = this.recordTypeName as DelegatedDatumTypeName<this>;\n\n        const {\n            addedUtxoValue = makeValue(0),\n            // beforeSave = (x) => x,\n            activity,\n            updatedFields: updatedRecord,\n        } = options;\n\n        const fullUpdatedRecord: TLike = {\n            ...(item.data as TLike),\n            ...updatedRecord,\n        }\n\n        console.log(\n            `🏒 updating ${recType} ->`,\n            uplcDataSerializer(recType,\n                JSON.parse(JSON.stringify(updatedRecord, betterJsonSerializer, 2)),\n                1\n            )\n        );\n\n        const tcx2 = await this.txnGrantAuthority(tcx, activity);\n        console.log(\n            \"    -- prev value in dgData utxo:\",\n            dumpAny(item.utxo.value)\n        );\n        console.log(\n            \"    -- addedUtxoValue in dgData utxo:\",\n            dumpAny(addedUtxoValue)\n        );\n        return this.returnUpdatedRecord(\n            tcx, \n            item.utxo.value.add(addedUtxoValue), // .add(this.mkMinTv(this.capo.mph, id))\n            fullUpdatedRecord\n        );\n    }\n    getReturnAddress() {\n        return this.capo.address;\n    }\n    returnUpdatedRecord<\n        TCX extends StellarTxnContext & hasCharterRef\n    >(tcx: TCX, returnedValue: Value, updatedRecord: TLike): TCX {\n        return tcx.addOutput(\n            makeTxOutput(\n                this.getReturnAddress(),\n                returnedValue,\n                this.mkDatum.capoStoredData({\n                    data: updatedRecord,\n                    version: 2n,\n                    otherDetails: makeIntData(0),\n                })\n\n                // this.mkDatumDelegatedDataRecord(beforeSave(record))\n            )\n        )\n    }\n}\n\n/**\n * @public\n */\nexport type updateActivityFunc<ARGS extends [...any]> = (\n    recId: hasRecId,\n    ...args: ARGS\n) => isActivity;\n\ntype UpdateActivityArgs<\n    UA extends updateActivityFunc<any> //  (...args: [hasRecId, ...any]) => isActivity\n> = UA extends updateActivityFunc<infer ARGS> ? ARGS : never;\n\nexport class UpdateActivity<\n    FactoryFunc extends updateActivityFunc<any>,\n    ARGS extends [...any] = FactoryFunc extends updateActivityFunc<infer ARGS>\n        ? ARGS\n        : never\n> {\n    args: ARGS;\n    constructor(\n        private host: DelegatedDataContract<any, any>,\n        private factoryFunc: updateActivityFunc<any>,\n        args: ARGS\n    ) {\n        this.args = args;\n    }\n\n    mkRedeemer(recId: hasRecId) {\n        return this.factoryFunc.call(this.host, recId, ...this.args);\n    }\n}\n\ntype hasRecId = string | number[] | UutName;\n\nexport type DgDataCreationOptions<TLike extends AnyDataTemplate<any, any>> = {\n    activity: isActivity | SeedActivity<any>;\n    data: minimalData<TLike>;\n    // beforeSave?(x: DT): DT;\n\n    addedUtxoValue?: Value;\n};\n\nexport type CoreDgDataCreationOptions<TLike extends AnyDataTemplate<any, any>> =\n    {\n        activity: isActivity;\n        data: minimalData<TLike>;\n        // beforeSave?(x: DT): DT;\n\n        addedUtxoValue?: Value;\n    };\n\nexport type DgDataUpdateOptions<TLike extends AnyDataTemplate<any, any>> = {\n    activity: isActivity | UpdateActivity<any>;\n    updatedFields: Partial<minimalData<TLike>>;\n\n    addedUtxoValue?: Value;\n    // beforeSave?(x: DTL): DTL;\n};\n\n// omits type-wrapper and requires all fields for data-type-like\nexport type CoreDgDataUpdateOptions<TLike extends AnyDataTemplate<any, any>> = {\n    activity: isActivity;\n    updatedFields: minimalData<TLike>;\n\n    addedUtxoValue?: Value;\n    // beforeSave?(x: DTL): DTL;\n};\n"],"names":["textToBytes"],"mappings":";;;;;;;;;AAUO,MAAM,qBAAqB,SAAS,qBAAqB,CAAC;AACjE,EAAE,eAAe,CAAC;AAClB,EAAE,aAAa,GAAG,IAAI,CAAC,eAAe,EAAE,SAAS,CAAC,aAAa,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB,GAAG,KAAK,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,YAAY,GAAG;AACrB,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACvC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,mBAAmB,GAAG;AAC5B,IAAI,OAAO,KAAK,CAAC,CAAC;AAClB,GAAG;AACH,EAAE,YAAY,GAAG;AACjB,IAAI,IAAI,IAAI,CAAC,mBAAmB,EAAE;AAClC,MAAM,MAAM,IAAI,KAAK;AACrB,QAAQ,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,IAAI,CAAC,YAAY,CAAC;AACnE;AACA;AACA;AACA,YAAY,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;AAC5C,oDAAoD,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;AACpF;AACA;AACA,CAAC;AACD,OAAO,CAAC;AACR,KAAK;AACL,IAAI,MAAM,IAAI,KAAK;AACnB,MAAM,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,CAAC;AACrF,KAAK,CAAC;AAEN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,WAAW,CAAC,OAAO,GAAG,EAAE,EAAE;AAClC,IAAI,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC;AAC1D,MAAM,IAAI,EAAE,IAAI,CAAC,cAAc;AAC/B;AACA;AACA,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,OAAO,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE;AAC9B,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACxC,GAAG;AACH,EAAE,SAAS,CAAC,MAAM,EAAE;AACpB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAM,IAAI,EAAE,MAAM;AAClB,MAAM,OAAO,EAAE,EAAE;AACjB,MAAM,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC;AAClC,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB,CAAC,CAAC,EAAE,eAAe,EAAE,GAAG,IAAI,EAAE;AAChD,IAAI,MAAM,IAAI,KAAK;AACnB,MAAM,CAAC,2EAA2E,CAAC;AACnF,KAAK,CAAC;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,iBAAiB,CAAC,OAAO,EAAE,GAAG,EAAE;AACxC,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAC7D,IAAI,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;AACpD,IAAI,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AACpD,IAAI,MAAM,KAAK,GAAG,KAAK,CAAC;AACxB,IAAI,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;AAC1B,IAAI,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AACtD,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;AACzC,IAAI,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACnE,MAAM,oBAAoB,EAAE,YAAY,CAAC,QAAQ,CAAC,qBAAqB;AACvE,QAAQ,KAAK;AACb,QAAQ,EAAE,QAAQ,EAAE;AACpB,OAAO;AACP,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,YAAY,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;AACrH,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;AACxC,MAAM,GAAG,OAAO;AAChB,MAAM,QAAQ;AACd,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;AAC5B,GAAG;AACH,EAAE,sBAAsB,GAAG;AAC3B,IAAI,OAAO,EAAE,CAAC;AACd,GAAG;AACH,EAAE,MAAM,iBAAiB,CAAC,GAAG,EAAE,OAAO,EAAE;AACxC,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;AACxC,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACnC,IAAI,MAAM;AACV,MAAM,cAAc,EAAE,kBAAkB,GAAG,SAAS,CAAC,EAAE,CAAC;AACxD,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,QAAQ;AACd,KAAK,GAAG,OAAO,CAAC;AAChB,IAAI,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAC7D,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzC,IAAI,IAAI,SAAS,GAAG,SAAS,CAAC;AAC9B,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,sBAAsB,EAAE,IAAI,EAAE,CAAC;AACzD,IAAI,MAAM,UAAU,GAAG;AACvB,MAAM,EAAE,EAAEA,UAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;AACrC,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,GAAG,QAAQ;AACjB,MAAM,GAAG,SAAS;AAClB,KAAK,CAAC;AACN,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;AACjD;AACA,MAAM,IAAI,EAAE,UAAU;AACtB,MAAM,OAAO,EAAE,EAAE;AACjB,MAAM,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC;AAClC,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,CAAC,GAAG;AACf,MAAM,CAAC,mBAAmB,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;AACtF,KAAK,CAAC;AACN,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AACpB,IAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAChC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,SAAS;AACzB,MAAM,YAAY;AAClB,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO;AACzB,QAAQ,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC;AACnE,QAAQ,QAAQ;AAChB,OAAO;AACP,KAAK,CAAC;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,kBAAkB,CAAC,CAAC,EAAE,cAAc,EAAE,GAAG,IAAI,EAAE;AACjD,IAAI,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AAC7C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,iBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE;AACvD,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACrC,IAAI,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;AAC1B,IAAyB,MAAM,IAAI,CAAC,eAAe,GAAG;AACtD,IAAI,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;AACnD,IAAI,MAAM;AACV,MAAM,QAAQ;AACd,MAAM,cAAc;AACpB;AACA,MAAM,aAAa;AACnB,KAAK,GAAG,OAAO,CAAC;AAChB,IAAI,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,0BAA0B;AACtD,MAAM,IAAI;AACV,MAAM,IAAI,CAAC,cAAc;AACzB,KAAK,CAAC;AACN,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ;AAC/B,MAAM,IAAI,CAAC,IAAI;AACf,MAAM,IAAI,CAAC,8BAA8B,EAAE;AAC3C,KAAK,CAAC;AACN,IAAI,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC;AACxC,IAAI,IAAI,KAAK,GAAG,iBAAiB,CAAC,EAAE,CAAC;AACrC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAC/B,MAAM,KAAK,GAAGA,UAAW,CAAC,KAAK,CAAC,CAAC;AACjC,KAAK;AACL,IAAI,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB;AACrD,MAAM,KAAK,CAAC,KAAK,CAAC,WAAW;AAC7B,KAAK,CAAC;AACN,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;AACzC,IAAI,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,iBAAiB;AACvD,MAAM,KAAK;AACX,MAAM,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACnD,QAAQ,QAAQ;AAChB,QAAQ,KAAK;AACb,OAAO,CAAC;AACR,KAAK,CAAC;AACN,IAAI,MAAM,oBAAoB,GAAG,QAAQ,YAAY,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;AAC5G,IAAI,IAAI,iBAAiB,GAAG;AAC5B,MAAM,GAAG,iBAAiB;AAC1B,MAAM,GAAG,aAAa;AACtB,KAAK,CAAC;AAEN,IAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAChC,MAAc,MAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACxD,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE;AACtD,MAAM,QAAQ,EAAE,oBAAoB;AACpC,MAAM,cAAc;AACpB,MAAM,aAAa,EAAE,iBAAiB;AACtC,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,MAAM,iBAAiB,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;AAClD,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;AACxC,IAAI,MAAM;AACV,MAAM,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC;AACnC;AACA,MAAM,QAAQ;AACd,MAAM,aAAa,EAAE,aAAa;AAClC,KAAK,GAAG,OAAO,CAAC;AAChB,IAAI,MAAM,iBAAiB,GAAG;AAC9B,MAAM,GAAG,IAAI,CAAC,IAAI;AAClB,MAAM,GAAG,aAAa;AACtB,KAAK,CAAC;AACN,IAAI,OAAO,CAAC,GAAG;AACf,MAAM,CAAC,mBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC;AACxC,MAAM,kBAAkB;AACxB,QAAQ,OAAO;AACf,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,oBAAoB,EAAE,CAAC,CAAC,CAAC;AAC1E,QAAQ,CAAC;AACT,OAAO;AACP,KAAK,CAAC;AACN,IAAiB,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,QAAQ,EAAE;AAC7D,IAAI,OAAO,CAAC,GAAG;AACf,MAAM,mCAAmC;AACzC,MAAM,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAC9B,KAAK,CAAC;AACN,IAAI,OAAO,CAAC,GAAG;AACf,MAAM,uCAAuC;AAC7C,MAAM,OAAO,CAAC,cAAc,CAAC;AAC7B,KAAK,CAAC;AACN,IAAI,OAAO,IAAI,CAAC,mBAAmB;AACnC,MAAM,GAAG;AACT,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC;AACzC;AACA,MAAM,iBAAiB;AACvB,KAAK,CAAC;AACN,GAAG;AACH,EAAE,gBAAgB,GAAG;AACrB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAC7B,GAAG;AACH,EAAE,mBAAmB,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,EAAE;AACzD,IAAI,OAAO,GAAG,CAAC,SAAS;AACxB,MAAM,YAAY;AAClB,QAAQ,IAAI,CAAC,gBAAgB,EAAE;AAC/B,QAAQ,aAAa;AACrB,QAAQ,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;AACpC,UAAU,IAAI,EAAE,aAAa;AAC7B,UAAU,OAAO,EAAE,EAAE;AACrB,UAAU,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC;AACtC,SAAS,CAAC;AACV;AACA,OAAO;AACP,KAAK,CAAC;AACN,GAAG;AACH,CAAC;AACM,MAAM,cAAc,CAAC;AAC5B,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE;AACvC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,IAAI,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,GAAG;AACH,EAAE,IAAI,CAAC;AACP,EAAE,UAAU,CAAC,KAAK,EAAE;AACpB,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AACjE,GAAG;AACH;;;;"}