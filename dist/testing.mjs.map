{"version":3,"file":"testing.mjs","sources":["../src/diagnostics.ts","../src/StellarTxnContext.ts","../src/utils.ts","../src/StellarContract.ts","../src/testing/types.ts","../src/testing/StellarTestHelper.ts","../src/testing/CapoTestHelper.ts","../src/CapoMintHelpers.ts","../src/delegation/CapoDelegateHelpers.ts","../src/delegation/RolesAndDelegates.ts","../src/minting/DefaultMinter.ts","../src/Requirements.ts","../src/Capo.ts","../src/delegation/StellarDelegate.ts","../src/minting/UnspecializedMintDelegate.ts","../src/UnspecializedCapo.ts","../src/CapoHelpers.ts","../src/minting/BasicMintDelegate.ts","../src/authority/AuthorityPolicy.ts","../src/authority/AnyAddressAuthorityPolicy.ts","../src/authority/MultisigAuthorityPolicy.ts","../src/DefaultCapo.ts","../src/testing/DefaultCapoTestHelper.ts","../src/testing/index.ts"],"sourcesContent":["import {\n    Address,\n    Datum,\n    Tx,\n    TxOutput,\n    TxInput,\n    Value,\n    bytesToText,\n    Assets,\n} from \"@hyperionbt/helios\";\nimport { ErrorMap } from \"./delegation/RolesAndDelegates.js\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\n\n/**\n * converts a hex string to a printable alternative, with no assumptions about the underlying data\n * @remarks\n *\n * Unlike Helios' bytesToText, hexToPrintable() simply changes printable characters to characters,\n * and represents non-printable characters in '‹XX›' format.\n * @param ‹pName› - descr\n * @typeParam ‹pName› - descr (for generic types)\n * @public\n **/\nexport function hexToPrintableString(hexStr) {\n    let result = \"\";\n    for (let i = 0; i < hexStr.length; i += 2) {\n        let hexChar = hexStr.substring(i, i + 2);\n        let charCode = parseInt(hexChar, 16);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += String.fromCharCode(charCode);\n        } else {\n            result += `‹${hexChar}›`;\n        }\n\n        // todo decode utf8 parts using bytesToText(...substring...)\n        // int         required_len;\n        // if (key[0] >> 7 == 0)\n        //     required_len = 1;\n        // else if (key[0] >> 5 == 0x6)\n        //     required_len = 2;\n        // else if (key[0] >> 4 == 0xE)\n        //     required_len = 3;\n        // else if (key[0] >> 5 == 0x1E)\n        //     required_len = 4;\n        // else\n        //     return (0);\n        // return (strlen(key) == required_len && chars_are_folow_uni(key + 1));\n    \n\n    }\n    return result;\n}\n/**\n * Converts an array of [ policyId, ‹tokens› ] tuples for on-screen presentation\n * @remarks\n *\n * Presents policy-ids with shortened identifiers, and shows a readable & printable\n * representation of token names even if they're not UTF-8 encoded.\n * @public\n **/\nexport function assetsAsString(a: Assets) {\n    //@ts-expect-error it's marked as private, but thankfully it's still accessible\n    const assets = a.assets;\n    return assets\n        .map(([policyId, tokenEntries]) => {\n            const pIdHex = policyId.hex;\n\n            const tokenString = tokenEntries\n                .map(\n                    ([nameBytes, count]) => {\n                        const nameString = hexToPrintableString(nameBytes.hex);\n                        return `${count}×💴 ${nameString}`\n                    }\n                )\n                .join(\" + \");\n            return `⦑🏦 ${pIdHex.slice(0, 8)}…${pIdHex.slice(\n                -4\n            )} ${tokenString}⦒`;\n        })\n        .join(\"\\n  \");\n}\n/**\n * Converts lovelace to approximate ADA, in consumable 3-decimal form\n * @public\n **/\nexport function lovelaceToAda(l: bigint | number) {\n    const asNum = parseInt(l.toString());\n    const ada =\n        (asNum && `${(Math.round(asNum / 1000) / 1000).toFixed(3)} ADA`) || \"\";\n    return ada;\n}\n\n/**\n * Converts a Value to printable form\n * @public\n **/\nexport function valueAsString(v: Value) {\n    const ada = lovelaceToAda(v.lovelace);\n    const assets = assetsAsString(v.assets);\n    return [ada, assets].filter((x) => !!x).join(\" + \");\n}\n\n/**\n * Converts a Tx to printable form\n * @public\n **/\nexport function txAsString(tx: Tx): string {\n    const bodyAttrs = [\n        \"inputs\",\n        \"minted\",\n        \"collateral\",\n        \"refInputs\",\n        \"outputs\",\n        \"fee\",\n        \"lastValidSlot\",\n        \"firstValidSlot\",\n        \"metadataHash\",\n        \"scriptDataHash\",\n        \"signers\",\n        \"collateralReturn\",\n    ];\n    const witnessAttrs = [\n        \"signatures\",\n        \"datums\",\n        \"refScripts\",\n        \"scripts\",\n        \"redeemers\",\n        \"nativeScripts\",\n    ];\n\n    let details = \"\";\n\n    const d = tx.dump();\n    //!!! todo: improve interface of tx so useful things have a non-private api\n    //!!! todo: get rid of dump()\n    //!!! todo: get back to type-safety in this diagnostic suite\n    for (const x of bodyAttrs) {\n        let item = tx.body[x] || (d.body[x] as any);\n        let skipLabel = false;\n        // console.log(`attr '${x}'`)\n        if (Array.isArray(item) && !item.length) continue;\n\n        if (!item) continue;\n        if (\"inputs\" == x) {\n            item = `\\n  ${item.map((x) => txInputAsString(x)).join(\"\\n  \")}`;\n        }\n        if (\"refInputs\" == x) {\n            item = `\\n  ${item\n                .map((x) => txInputAsString(x, \"ℹ️  \"))\n                .join(\"\\n  \")}`;\n        }\n        if (\"collateral\" == x) {\n            //!!! todo: group collateral with inputs and reflect it being spent either way,\n            //     IFF it is also a tx `input`\n            //!!! todo: move collateral to bottom with collateralReturn,\n            //     IFF it is not part of the tx `inputs`\n            item = item.map((x) => txInputAsString(x, \"🔪\")).join(\"\\n    \");\n        }\n        if (\"minted\" == x) {\n            item = ` ❇️  ${assetsAsString(item)}`;\n        }\n        if (\"outputs\" == x) {\n            item = `\\n  ${item\n                .map((x, i) => txOutputAsString(x, `${i}  <-`))\n                .join(\"\\n  \")}`;\n        }\n        if (\"signers\" == x) {\n            item = item.map((x) => {\n                if (!x.hex) debugger;\n                return `🔑#${x.hex.slice(0, 6)}…${x.hex.slice(-4)}`;\n            });\n        }\n\n        if (\"fee\" == x) {\n            item = parseInt(item);\n            item =\n                `${(Math.round(item / 1000) / 1000).toFixed(3)} ADA ` +\n                tx.profileReport.split(\"\\n\")[0];\n\n            // console.log(\"fee\", item)\n        }\n\n        if (\"collateralReturn\" == x) {\n            skipLabel = true;\n            item = `  ${txOutputAsString(\n                item,\n                `0  <- ❓`\n            )} conditional: collateral change (returned in case of txn failure)`;\n        }\n\n        details += `${skipLabel ? \"\" : \"  \" + x + \": \"}${item}\\n`;\n    }\n    let hasWinfo = false;\n    const winfo = {};\n    for (const x of witnessAttrs) {\n        let item = tx.witnesses[x] || (d.witnesses[x] as any);\n        if (Array.isArray(item) && !item.length) continue;\n        if (\"datums\" == x && !Object.entries(item || {}).length) continue;\n        if (\"signatures\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                const addr = Address.fromHash(s.pubKeyHash);\n                return `🖊️ ${addrAsString(addr)} = 🔑…${s.pubKeyHash.hex.slice(\n                    -4\n                )}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"redeemers\" == x) {\n            if (!item) continue;\n            //!!! todo: augment with mph when that's available from the Activity.\n            item = item.map((x) => {\n                // console.log(\"redeemer keys\", ...[ ...Object.keys(x2) ], x2.dump());\n                const indexInfo =\n                    x.inputIndex == -1\n                        ? `spend txin #‹tbd›`\n                        : \"inputIndex\" in x\n                        ? `spend txin #${1 + x.inputIndex}`\n                        : `mint policy#${1 + x.mphIndex}`;\n\n                return `🏧  ${indexInfo} ${x.data.toString()}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"scripts\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                try {\n                    const mph = s.mintingPolicyHash.hex;\n                    return `🏦 ${mph.slice(0, 8)}…${mph.slice(-4)} (minting)`;\n                } catch (e) {\n                    const vh = s.validatorHash.hex;\n                    const addr = Address.fromHash(s.validatorHash);\n                    return `📜 ${vh.slice(0, 8)}…${vh.slice(\n                        -4\n                    )} (validator at ${addrAsString(addr)})`;\n                }\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n\n        if (!item) continue;\n        hasWinfo = true;\n        winfo[x] = item;\n    }\n    if (hasWinfo) {\n        details += Object.entries(winfo)\n            .map(([k, v]) => `  ${k}: ${v}\\n`)\n            .join(\"\");\n    }\n    try {\n        details = details + `  txId: ${tx.id().hex}`;\n    } catch (e) {\n        details = details + `  (Tx not yet finalized!)`;\n    }\n    return details;\n}\n\n/**\n * Converts a TxInput to printable form\n * @remarks\n *\n * Shortens address and output-id for visual simplicity\n * @public\n **/\nexport function txInputAsString(x: TxInput, prefix = \"-> \"): string {\n    const oid = x.outputId.txId.hex;\n    const oidx = x.outputId.utxoIdx;\n    return `${prefix}${addrAsString(x.address)} ${valueAsString(\n        x.value\n    )} = 📖 ${oid.slice(0, 6)}…${oid.slice(-4)}#${oidx}`;\n}\n\n/**\n * Converts a list of UTxOs to printable form\n * @remarks\n *\n * ... using {@link txInputAsString}\n * @public\n **/\nexport function utxosAsString(utxos: TxInput[], joiner = \"\\n\"): string {\n    return utxos.map((u) => utxoAsString(u, \" 💵\")).join(joiner);\n}\n\n/**\n * converts a utxo to printable form\n * @remarks\n *\n * shows shortened output-id and the value being output\n * @internal\n **/\nexport function utxoAsString(x: TxInput, prefix = \"💵\"): string {\n    const oid = x.outputId.txId.hex;\n    const oidx = x.outputId.utxoIdx;\n\n    return ` 📖 ${oid.slice(0, 6)}…${oid.slice(-4)}#${oidx}: ${txOutputAsString(\n        x.origOutput,\n        prefix\n    )}`; // or 🪙\n}\n\n/**\n * converts a Datum to a printable summary\n * @remarks\n *\n * using shortening techniques for the datumHash\n * @public\n **/\nexport function datumAsString(d: Datum | null | undefined): string {\n    if (!d) return \"\"; //\"‹no datum›\";\n\n    // debugger\n    const dh = d.hash.hex;\n    const dhss = `${dh.slice(0, 8)}…${dh.slice(-4)}`;\n    if (d.isInline()) return `d‹inline:${dhss}›`;\n    return `d‹hash:${dhss}…›`;\n}\n\n/**\n * Converts a txOutput to printable form\n * @remarks\n *\n * including all its values, and shortened Address.\n * @public\n **/\nexport function txOutputAsString(x: TxOutput, prefix = \"<-\"): string {\n    return `${prefix} ${addrAsString(x.address)} ${datumAsString(\n        x.datum\n    )} ${valueAsString(x.value)}`;\n}\n\n/**\n * Renders an address in shortened bech32 form, with prefix and part of the bech32 suffix\n * @remarks\n * @param address - address\n * @public\n **/\nexport function addrAsString(address: Address): string {\n    const bech32 = (address as any).bech32 || address.toBech32();\n\n    return `${bech32.slice(0, 14)}…${bech32.slice(-4)}`;\n}\n\n/**\n * Converts an Errors object to a string for onscreen presentation\n * @public\n **/\nexport function errorMapAsString(em: ErrorMap, prefix = \"  \") {\n    return Object.keys(em)\n        .map((k) => `in field ${prefix}${k}: ${JSON.stringify(em[k])}`)\n        .join(\"\\n\");\n}\n\n/**\n * Converts any (supported) input arg to string\n * @remarks\n *\n * more types to be supported TODO\n * @public\n **/\nexport function dumpAny(\n    x: Tx | StellarTxnContext | Address | Value | TxOutput\n) {\n    if (x instanceof Tx) {\n        return txAsString(x);\n    }\n    if (x instanceof TxOutput) {\n        return txOutputAsString(x);\n    }\n\n    if (x instanceof Value) {\n        return valueAsString(x);\n    }\n    if (x instanceof Address) {\n        return addrAsString(x);\n    }\n    if (x instanceof StellarTxnContext) {\n        return txAsString(x.tx);\n    }\n}\n\nif (\"undefined\" == typeof window) {\n    globalThis.peek = dumpAny;\n} else {\n    //@ts-expect-error\n    window.peek = dumpAny;\n}\n","import {\n    HeliosData,\n    Tx,\n    TxOutput,\n    TxInput,\n} from \"@hyperionbt/helios\";\nimport type {\n    Address,\n    Wallet,\n} from \"@hyperionbt/helios\";\n\nimport { txAsString } from \"./diagnostics.js\";\n\n//!!! if we could access the inputs and outputs in a building Tx,\n//  this might  not be necessary (unless it becomes a\n//   bigger-picture contextual container that serves various Stellar\n//   contract scripts with non-txn context for building a Tx)\n\ntype noState = {};\n\ntype addInputArgs = Parameters<Tx[\"addInput\"]>;\ntype _redeemerArg = addInputArgs[1]\n\ntype RedeemerArg = {\n    redeemer: _redeemerArg;\n};\n\n/**\n * Transaction-building context for Stellar Contract transactions\n * @remarks\n *\n * Uses same essential facade as Helios Tx.\n * \n * Adds a transaction-state container with strong typing of its contents,\n * enabling transaction-building code to use type-sensitive auto-complete\n * and allowing Stellar Contracts library code to require transaction contexts\n * having known states.\n * \n * Retains reflection capabilities to allow utxo-finding utilities to exclude \n * utxo's already included in the contract.\n * \n * @typeParam S - type of the context's `state` prop\n * @public\n **/\nexport class StellarTxnContext<S = noState> {\n    tx = new Tx();\n    inputs: TxInput[] = [];\n    collateral?: TxInput;\n    outputs: TxOutput[] = [];\n    feeLimit?: bigint;\n    state: S;\n    actor?: Wallet;\n    neededSigners: Address[] = []\n    constructor(actor?: Wallet, state: Partial<S> = {}) {\n        this.actor = actor\n        //@ts-expect-error\n        this.state = state;\n    }\n\n    dump() {\n        const { tx } = this;\n        return txAsString(tx);\n    }\n\n    mintTokens(...args: Parameters<Tx[\"mintTokens\"]>): StellarTxnContext<S> {\n        this.tx.mintTokens(...args);\n\n        return this;\n    }\n\n    reservedUtxos(): TxInput[] {\n        return [...this.inputs, this.collateral].filter(\n            (x) => !!x\n        ) as TxInput[];\n    }\n\n    utxoNotReserved(u: TxInput): TxInput | undefined {\n        if (this.collateral?.eq(u)) return undefined;\n        if (this.inputs.find((i) => i.eq(u))) return undefined;\n        return u;\n    }\n\n    addCollateral(collateral: TxInput) {\n        if (!collateral.value.assets.isZero()) {\n            throw new Error(\n                `invalid attempt to add non-pure-ADA utxo as collateral`\n            );\n        }\n        this.collateral = collateral;\n\n        this.tx.addCollateral(collateral);\n        return this;\n    }\n\n    addInput<TCX extends StellarTxnContext<S>>(\n        this: TCX, \n        input: addInputArgs[0], \n        r?: RedeemerArg\n    ) : TCX  {\n        if (input.address.pubKeyHash) this.neededSigners.push(input.address)\n        this.inputs.push(input);\n        this.tx.addInput(input, r?.redeemer);\n\n        return this;\n    }\n\n    addInputs<TCX extends StellarTxnContext<S>>(\n        this:TCX, \n        inputs: Parameters<Tx[\"addInputs\"]>[0], \n        r: RedeemerArg\n    ): TCX {\n        for (const input of inputs) {\n            if (input.address.pubKeyHash) this.neededSigners.push(input.address)\n        }\n        this.inputs.push(...inputs);\n        this.tx.addInputs(inputs, r.redeemer);\n\n        return this;\n    }\n\n    addOutput<TCX extends StellarTxnContext<S>>(\n        this:TCX, \n        ...args: Parameters<Tx[\"addOutput\"]>\n    ): TCX {\n        const [output, ..._otherArgs] = args;\n        this.outputs.push(output);\n        this.tx.addOutput(...args);\n        return this;\n    }\n\n    addOutputs<TCX extends StellarTxnContext<S>>(\n        this:TCX\n        ,...args: Parameters<Tx[\"addOutputs\"]>\n    ): TCX {\n        const [outputs, ..._otherArgs] = args;\n        this.outputs.push(...outputs);\n        this.tx.addOutputs(...args);\n\n        return this;\n    }\n\n    attachScript(...args: Parameters<Tx[\"attachScript\"]>) {\n        this.tx.attachScript(...args);\n\n        return this;\n    }\n\n    async addSignature(wallet: Wallet) {\n        const [sig] = await wallet.signTx(this.tx);\n\n        this.tx.addSignature(sig);\n    }\n\n    /**\n     * To add a script to the transaction context, use `attachScript`\n     *\n     * @deprecated - invalid method name; use attachScript\n     **/\n    addScript() {}\n}\n","import {\n    Address,\n    Assets,\n    MintingPolicyHash,\n    TxOutput,\n    Value,\n    textToBytes,\n    \n} from \"@hyperionbt/helios\";\nimport { uutPurposeMap } from \"./Capo.js\";\nimport { valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { UutName } from \"./delegation/RolesAndDelegates.js\";\n\n\n/**\n * Creates Value-creation entires for a list of uuts\n * @remarks\n * \n * returns a list of `entries` usable in Value's `[mph, entries[]]` tuple.\n * @param uuts - a list of {@link UutName}s or a {@link uutPurposeMap}\n * @public\n **/\nexport function mkUutValuesEntries(uuts: UutName[]): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(uuts: uutPurposeMap<any>): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(\n    uuts: UutName[] | uutPurposeMap<any>\n): valuesEntry[] {\n    const uutNs = Array.isArray(uuts) ? uuts : Object.values(uuts);\n    const uniqs : UutName[] = [];\n    for (const un of uutNs) {\n        if (!uniqs.includes(un)) uniqs.push(un)\n    }\n    return uniqs.map((uut) => mkValuesEntry(uut.name, BigInt(1)));\n}\n\n/**\n * Converts string to array of UTF-8 byte-values \n* @public\n **/\nexport const stringToNumberArray = textToBytes\n// func stringToNumberArray (str: string): number[] {\n//     let encoder = new TextEncoder();\n//     let byteArray = encoder.encode(str);\n//     return [...byteArray].map((x) => parseInt(x.toString()));\n// }\n\n/**\n * Creates a tuple usable in a Value, converting token-name to byte-array if needed\n * @public\n **/\nexport function mkValuesEntry(\n    tokenName: string | number[],\n    count: bigint\n): valuesEntry {\n    const tnBytes = Array.isArray(tokenName)\n        ? tokenName\n        : stringToNumberArray(tokenName);\n\n    // addrHint,  //moved to config\n    // reqdAddress,  // removed\n\n    return [tnBytes, count];\n}\n\n/**\n * construct a Value based on a token-name\n * @remarks\n *\n * A simpler version of the Value constructor to serve the\n * common case of a single, string-based token name.\n *\n * If you need the Value to contain its minUtx computed based\n * on network parameters, use the StellarContract's mkMinTv()\n * method instead.\n *\n * @param mph - policy-hash of the token\n * @param tokenName - string name of the token\n * @param count: number of the tokens to include in the value\n * @public\n **/\nexport function mkTv(\n    mph: MintingPolicyHash,\n    tokenName: string | number[],\n    count: bigint = 1n\n): Value {\n    const v = new Value(\n        undefined,\n        new Assets([[mph, [mkValuesEntry(tokenName, count)]]])\n    );\n    return v;\n}\n","import {\n    Address,\n    Assets,\n    DatumHash,\n    HInt,\n    HeliosData,\n    MintingPolicyHash,\n    Network,\n    NetworkParams,\n    Program,\n    TxOutput,\n    TxInput,\n    UplcData,\n    UplcDataValue,\n    UplcProgram,\n    Value,\n    Wallet,\n    extractScriptPurposeAndName,\n    Datum,\n    AssetClass,\n    //@ts-expect-error\n    DataDefinition,\n    ListData,\n    ConstrData,\n    WalletHelper,\n} from \"@hyperionbt/helios\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport { utxosAsString, valueAsString } from \"./diagnostics.js\";\nimport { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { mkTv, stringToNumberArray } from \"./utils.js\";\nimport { UutName } from \"./delegation/RolesAndDelegates.js\";\nimport { helios } from \"../index.js\";\n\ntype tokenPredicate<tokenBearer extends canHaveToken> = ((\n    something: tokenBearer\n) => tokenBearer | undefined) & { value: Value };\n\n/**\n * a type for redeemer/activity-factory functions declared with \\@Activity.redeemer\n *\n * @public\n */\nexport type isActivity = {\n    redeemer: UplcDataValue | UplcData;\n    // | HeliosData\n};\n\ntype WalletsAndAddresses = {\n    wallets: Wallet[];\n    addresses?: Address[];\n};\nexport type utxoInfo = {\n    u: TxInput;\n    sufficient: boolean;\n    free: bigint;\n    minAdaAmount: bigint;\n};\n\n/**\n * Type for the Class that constructs to a given type\n * @remarks\n *\n * Type of the matching literal class\n *\n * Typescript should make this pattern easier\n *\n * @typeParam S - the type of objects of this class\n * @typeParam CT - inferred type of the constructor args for the class\n * @public\n **/\nexport type stellarSubclass<\n    S extends StellarContract<CT>,\n    CT extends configBase = S extends StellarContract<infer iCT>\n        ? iCT\n        : configBase\n> = (new (args: StellarConstructorArgs<CT>) => S & StellarContract<CT>) & {\n    defaultParams: Partial<CT>;\n};\n\n/**\n * Properties for Datum structures for on-chain scripts\n * @public\n **/\nexport type anyDatumProps = Record<string, any>;\n/**\n * Configuration details for StellarContract classes\n * @public\n **/\nexport type configBase = Record<string, any>;\n\n/**\n * Decorators for on-chain activity (redeemer) factory functions\n * @public\n **/\nexport const Activity = {\n    /**\n     * Decorates a partial-transaction function that spends a contract-locked UTxO using a specific activity (\"redeemer\")\n     * @remarks\n     *\n     * activity-linked transaction-partial functions must follow the txn\\{...\\}\n     * and active-verb (\"ing\") naming conventions.  `txnRetiringDelegation`,\n     * `txnModifyingVote` and `txnWithdrawingStake` would be examples\n     * of function names following this guidance.\n     *\n     * @public\n     **/\n    partialTxn(proto, thingName, descriptor) {\n        needsActiveVerb(thingName);\n        return partialTxn(proto, thingName, descriptor);\n    },\n    /**\n     * Decorates a factory-function for creating tagged redeemer data for a specific on-chain activity\n     * @remarks\n     *\n     * The factory function should follow an active-verb convention by including \"ing\" in the name of the factory function\n     * @public\n     **/\n    redeemer(proto, thingName, descriptor) {\n        needsActiveVerb(thingName, !!\"okwhatever\");\n        return Activity.redeemerData(proto, thingName, descriptor);\n    },\n    redeemerData(proto, thingName, descriptor) {\n        //!!! todo: registry and cross-checking for missing redeeming methods\n\n        //!!! todo: develop more patterns of \"redeemer uses an input of a certain mph/value\"\n        return descriptor;\n    },\n};\n\nfunction needsActiveVerb(thingName: string, okWorkaround?: boolean) {\n    if (!thingName.match(/ing/)) {\n        const orWorkaround =\n            okWorkaround &&\n            \"(or work around with @Activity.redeemerData instead)\";\n        throw new Error(\n            `Activity: ${thingName}: name should have 'ing' in it ${orWorkaround}`\n        );\n    }\n    if (thingName.match(/^ing/)) {\n        throw new Error(\n            `Activity: ${thingName}: name shouldn't start with 'ing'`\n        );\n    }\n}\n\n/**\n * Decorates datum-building functions\n * @remarks\n *\n * function names must follow the mkDatum... convention.\n *\n * The function should accept a single argument with input type\n * that feels Typescripty, and that can be fit to the on-chain type of\n * the underlying Datum variant of the given name.\n *\n * @public\n **/\nexport function datum(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkDatum/)) {\n        throw new Error(\n            `@datum factory: ${thingName}: name should start with 'mkDatum...'`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * Decorates functions that can construct a new transaction context for a specific use-case\n * @remarks\n *\n * function names must follow the mkTxn... convention.\n * @public\n **/\nexport function txn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkTxn/)) {\n        throw new Error(\n            `@txn factory: ${thingName}: name should start with 'mkTxn...'`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * decorates functions that increment a transaction by adding needed details for a use-case\n * @remarks\n *\n * Function names must follow the txn\\{...\\} naming convention. Typical partial-transaction names\n * may describe the semantics of how the function augments the transaction.\n * `txnAddSignatures` or `txnReceivePayment` could be example names following\n * this guidance\n *\n * Partial transactions should have a \\<TCX extends StellarTxnContext\\<...\\>\\> type parameter,\n * matched to its first function argument, and should return a type extending that same TCX,\n * possibly with additional StellarTxnContext\\<...\\> type info.\n *\n * The TCX constraint can specify key requirements for an existing transaction context when\n * that's relevant.\n *\n * @public\n **/\nexport function partialTxn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^txn[A-Z]/)) {\n        let help = \"\";\n        if (thingName.match(/^mkTxn/)) {\n            help = `\\n  ... or, for transaction initiation with mkTxn, you might try @txn instead. `;\n        }\n        throw new Error(\n            `@partialTxn factory: ${thingName}: should start with 'txn[A-Z]...'${help}`\n        );\n    }\n    return descriptor;\n}\n\nexport async function findInputsInWallets(\n    v: Value,\n    searchIn: WalletsAndAddresses,\n    network: Network\n) {\n    const { wallets, addresses } = searchIn;\n\n    const lovelaceOnly = v.assets.isZero();\n    console.warn(\"finding inputs\", {\n        lovelaceOnly,\n    });\n\n    for (const w of wallets) {\n        const [a] = await w.usedAddresses;\n        console.log(\"finding funds in wallet\", a.toBech32().substring(0, 18));\n        const utxos = await w.utxos;\n        for (const u of utxos) {\n            if (lovelaceOnly) {\n                if (u.value.assets.isZero() && u.value.lovelace >= v.lovelace) {\n                    return u;\n                }\n                console.log(\"  - too small; skipping \", u.value.dump());\n            } else {\n                if (u.value.ge(v)) {\n                    return u;\n                }\n            }\n        }\n    }\n    if (lovelaceOnly) {\n        throw new Error(\n            `no ADA is present except those on token bundles.  TODO: findFreeLovelaceWithTokens`\n        );\n        // const spareChange = this.findFreeLovelaceWithTokens(v, w)\n    }\n    //!!! todo: allow getting free ada from a contract address?\n\n    if (addresses) {\n        for (const a of addresses) {\n            const utxos = await network.getUtxos(a);\n            for (const u of utxos) {\n                if (u.value.ge(v)) {\n                    return u;\n                }\n            }\n        }\n    }\n\n    throw new Error(\n        `None of these wallets${\n            (addresses && \" or addresses\") || \"\"\n        } have the needed tokens`\n    );\n}\n\n/**\n * standard setup for any Stellar Contract class\n * @public\n **/\nexport type SetupDetails = {\n    network: Network;\n    networkParams: NetworkParams;\n    myActor?: Wallet;\n    isTest?: boolean;\n    isDev? : boolean;\n    optimize?: boolean;\n};\n\n/**\n * @public\n * Extracts the config type for a Stellar Contract class\n **/\nexport type ConfigFor<\n    SC extends StellarContract<C>,\n    C extends configBase = SC extends StellarContract<infer inferredConfig>\n        ? inferredConfig\n        : never\n> = C;\n/**\n * Initializes a stellar contract class\n * @remarks\n *\n * Includes network and other standard setup details, and any configuration needed\n * for the specific class.\n * @public\n **/\nexport type StellarConstructorArgs<CT extends configBase> = {\n    setup: SetupDetails;\n    config?: CT;\n    partialConfig?: Partial<CT>;\n};\n\n/**\n * a function that can filter txInputs for coin-selection\n * @remarks\n *\n * short form: \"returns truthy\" if the input is matchy for the context\n * @public\n **/\nexport type utxoPredicate =\n    | ((u: TxInput) => TxInput | undefined)\n    | ((u: TxInput) => boolean)\n    | ((u: TxInput) => boolean | undefined);\n\ntype scriptPurpose =\n    | \"testing\"\n    | \"minting\"\n    | \"spending\"\n    | \"staking\"\n    | \"module\"\n    | \"endpoint\";\n\nexport type canHaveToken = TxInput | TxOutput | Assets;\ntype UtxoSearchScope = {\n    address?: Address;\n    wallet?: Wallet;\n    exceptInTcx?: StellarTxnContext<any>;\n};\n\n//!!! todo: type configuredStellarClass = class -> networkStuff -> withParams = stellar instance.\n\n/*\n * Basic wrapper and off-chain facade for interacting with a single Plutus contract script\n * @remarks\n *\n * This class is normally used only for individual components of a higher-level {@link Capo | Capo or Leader contract},\n * which act as delegates within its application context.  Nonetheless, it is the base class for every Capo as well as\n * simpler contract scripts.\n *\n * The StellarContract class serves as an off-chain facade for transaction-building and interfacing to any on-chain\n * contract script.  Each StellarContract subclass must define a `contractSource()`, which is currently a Helios-language\n * script, compiled in any Javascript environment to an on-chain executable UPLC or \"plutus core\" form.  This enables\n * a static dApp to be self-sovereign, without need for any server (\"application back-end\") environment.\n *\n * @typeParam ConfigType - schema for the configuration needed for creating or reproducing a\n * specific instance of the contract script on-chain.\n *\n * @public\n **/\nexport class StellarContract<\n    // SUB extends StellarContract<any, ParamsType>,\n    ConfigType extends configBase\n> {\n    //! it has scriptProgram: a parameterized instance of the contract\n    //  ... with specific `parameters` assigned.\n    scriptProgram?: Program;\n    configIn?: ConfigType;\n    partialConfig?: Partial<ConfigType>;\n    contractParams?: configBase;\n    setup: SetupDetails;\n    network: Network;\n    networkParams: NetworkParams;\n    myActor?: Wallet;\n    // isTest?: boolean\n    static get defaultParams() {\n        return {};\n    }\n\n    /**\n     * returns the wallet connection used by the current actor\n     * @remarks\n     *\n     * Throws an error if the strella contract facade has not been initialized with a wallet in settings.myActor\n     * @public\n     **/\n    get wallet() {\n        if (!this.myActor)\n            throw new Error(\n                `wallet is not connected to strella '${this.constructor.name}'`\n            );\n        return this.myActor;\n    }\n\n    //! can transform input configuration to contract script params\n    //! by default, all the config keys are used as script params\n    getContractScriptParams(\n        config: ConfigType\n    ): configBase & Partial<ConfigType> {\n        return config;\n    }\n\n    delegateReqdAddress(): false | Address {\n        return this.address;\n    }\n    delegateAddrHint(): Address[] | undefined {\n        return undefined;\n    }\n\n    constructor(args: StellarConstructorArgs<ConfigType>) {\n        const { setup, config, partialConfig } = args;\n        this.setup = setup;\n        const { network, networkParams, isTest, myActor } = setup;\n        this.network = network;\n        this.networkParams = networkParams;\n        // this.isTest = isTest\n        if (myActor) this.myActor = myActor;\n\n        if (config) {\n            this.configIn = config;\n\n            const fullScriptParams = (this.contractParams =\n                this.getContractScriptParams(config));\n\n            this.scriptProgram = this.loadProgramScript(fullScriptParams);\n        } else {\n            this.partialConfig = partialConfig;\n            this.scriptProgram = this.loadProgramScript();\n        }\n    }\n    compiledScript!: UplcProgram; // initialized in loadProgramScript\n\n    get datumType() {\n        return this.onChainDatumType;\n    }\n    /**\n     * @internal\n     **/\n    _purpose?: scriptPurpose;\n    get purpose() {\n        if (this._purpose) return this._purpose;\n\n        const purpose = this.scriptProgram?.purpose as scriptPurpose;\n        if (!purpose) return \"non-script\";\n        return (this._purpose = purpose as scriptPurpose);\n    }\n\n    get address(): Address {\n        return Address.fromHashes(this.compiledScript.validatorHash);\n    }\n\n    get mintingPolicyHash() {\n        if (\"minting\" != this.purpose) return undefined;\n\n        return this.compiledScript.mintingPolicyHash;\n    }\n\n    get identity() {\n        if (\"minting\" == this.purpose) {\n            const b32 = this.compiledScript.mintingPolicyHash.toBech32();\n            //!!! todo: verify bech32 checksum isn't messed up by this:\n            return b32.replace(/^asset/, \"mph\");\n        }\n\n        return this.address.toBech32();\n    }\n\n    //! searches the network for utxos stored in the contract,\n    //  returning those whose datum hash is the same as the input datum\n    async outputsSentToDatum(datum: InlineDatum) {\n        const myUtxos = await this.network.getUtxos(this.address);\n\n        // const dump = utxosAsString(myUtxos)\n        // console.log({dump})\n        return myUtxos.filter((u) => {\n            return u.origOutput.datum?.hash.hex == datum.hash.hex;\n        });\n    }\n\n    //! adds the values of the given TxInputs\n    totalValue(utxos: TxInput[]): Value {\n        return utxos.reduce((v: Value, u: TxInput) => {\n            return v.add(u.value);\n        }, new Value(0n));\n    }\n\n    /**\n     * Returns the indicated Value to the contract script\n     * @public\n     * @param tcx - transaction context\n     * @param value - a value already having minUtxo calculated\n     * @param datum - inline datum\n     **/\n    //! adds the indicated Value to the transaction;\n    //  ... EXPECTS  the value to already have minUtxo calculated on it.\n    @partialTxn // non-activity partial\n    txnKeepValue(tcx: StellarTxnContext, value: Value, datum: InlineDatum) {\n        tcx.addOutput(new TxOutput(this.address, value, datum));\n\n        return tcx;\n    }\n\n    addStrellaWithConfig<\n        SC extends StellarContract<any>\n        // P = SC extends StellarContract<infer P> ? P : never\n    >(\n        TargetClass: new (\n            a: SC extends StellarContract<any>\n                ? StellarConstructorArgs<ConfigFor<SC>>\n                : never\n        ) => SC,\n        config: SC extends StellarContract<infer iCT> ? iCT : never\n    ) {\n        const args: StellarConstructorArgs<ConfigFor<SC>> = {\n            config,\n            setup: this.setup,\n        };\n        //@ts-expect-error todo: why is the conditional type not matching enough?\n        const strella = new TargetClass(args);\n        return strella;\n    }\n\n    // async findDatum(d: Datum | DatumHash): Promise<TxInput[]>;\n    // async findDatum(predicate: utxoPredicate): Promise<TxInput[]>;\n    // async findDatum(d: Datum | DatumHash | utxoPredicate): Promise<TxInput[]> {\n    //     let targetHash: DatumHash | undefined =\n    //         d instanceof Datum\n    //             ? d.hash\n    //             : d instanceof DatumHash\n    //             ? d\n    //             : undefined;\n    //     let predicate =\n    //         \"function\" === typeof d\n    //             ? d\n    //             : (u: TxInput) => {\n    //                   const match =\n    //                       u.origOutput?.datum?.hash.hex == targetHash?.hex;\n    //                   console.log(\n    //                       txOutputAsString(\n    //                           u.origOutput,\n    //                           `    ${match ? \"✅ matched \" : \"❌ no match\"}`\n    //                       )\n    //                   );\n    //                   return !!match;\n    //               };\n\n    //     //prettier-ignore\n    //     console.log(\n    //         `finding utxo with datum ${\n    //             targetHash?.hex.substring(0,12)\n    //         }... in wallet`,\n    //         this.address.toBech32().substring(0,18)\n    //     );\n\n    //     const heldUtxos = await this.network.getUtxos(this.address);\n    //     console.log(`    - found ${heldUtxos.length} utxo:`);\n    //     return heldUtxos.filter(predicate);\n    // }\n\n    /**\n     * Returns all the types exposed by the contract script\n     * @remarks\n     *\n     * Passed directly from Helios; property names match contract's defined type names\n     *\n     * @public\n     **/\n    get onChainTypes() {\n        const types = {...this.scriptProgram!.types}\n        //@ts-expect-error because allStatements is marked as internal\n        const statements = this.scriptProgram!.allStatements;\n\n        for( const [statement, _someBoolThingy] of statements ) {\n            const name = statement.name.value\n            if (types[name]) continue;\n            if( \"StructStatement\" == Object.getPrototypeOf(statement).constructor.name) {\n                const type = statement.genOffChainType(); // an off-chain type **representing** an on-chain type\n                const name = type.name.value\n                if (types[name]) throw new Error(`ruh roh`)\n                types[name] = type\n            }\n        }\n        return types\n    }\n\n    /**\n     * identifies the enum used for the script Datum\n     * @remarks\n     *\n     * Override this if your contract script uses a type name other than Datum.\n     * @public\n     **/\n    get scriptDatumName() {\n        return \"Datum\";\n    }\n\n    /**\n     * returns the on-chain type for datum\n     * @remarks\n     *\n     * returns the on-chain enum used for attaching data (or data hashes) to contract utxos\n     * the returned type (and its enum variants) are suitable for off-chain txn-creation\n     * override `get scriptDatumName()` if needed to match your contract script.\n     * @public\n     **/\n    get onChainDatumType() {\n        const { scriptDatumName: onChainDatumName } = this;\n        const { [onChainDatumName]: DatumType } = this.scriptProgram!.types;\n        return DatumType;\n    }\n\n    /**\n     * identifies the enum used for activities (redeemers) in the Helios script\n     * @remarks\n     *\n     * Override this if your contract script uses a type name other than Activity.\n     * @public\n     **/\n\n    get scriptActivitiesName() {\n        return \"Activity\";\n    }\n\n    /**\n     * returns the on-chain type for activites (\"redeemers\")\n     * @remarks\n     *\n     * returns the on-chain enum used for spending contract utxos or for different use-cases of minting (in a minting script).\n     * the returned type (and its enum variants) are suitable for off-chain txn-creation\n     * override `get onChainActivitiesName()` if needed to match your contract script.\n     * @public\n     **/\n    get onChainActivitiesType() {\n        const { scriptActivitiesName: onChainActivitiesName } = this;\n        const { [onChainActivitiesName]: ActivitiesType } =\n            this.scriptProgram!.types;\n        return ActivitiesType;\n    }\n    mustGetActivity(activityName) {\n        const { [activityName]: activityType } = this.onChainActivitiesType;\n        if (!activityType) {\n            const { scriptActivitiesName: onChainActivitiesName } = this;\n            throw new Error(\n                `$${this.constructor.name}: activity name mismatch ${onChainActivitiesName}::${activityName}''\\n` +\n                    `   known activities in this script: ${Object.keys(\n                        this.onChainActivitiesType\n                    ).join(\", \")}`\n            );\n        }\n        return activityType;\n    }\n\n    async readDatum<DPROPS extends anyDatumProps>(\n        datumName: string,\n        datum: Datum | InlineDatum\n    ): Promise<DPROPS | undefined> {\n        const thisDatumType = this.onChainDatumType[datumName];\n\n        // console.log(` ----- read datum ${datumName}`)\n\n        if (!thisDatumType) throw new Error(`invalid datumName ${datumName}`);\n        if (!datum.isInline())\n            throw new Error(\n                `datum must be an InlineDatum to be readable using readDatum()`\n            );\n\n        return this.readUplcDatum(thisDatumType, datum.data!).catch((e) => {\n            if (e.message?.match(/expected constrData/)) return undefined;\n            throw e;\n        }) as Promise<DPROPS | undefined>;\n    }\n\n    private async readUplcStructList(uplcType: any, uplcData: ListData) {\n        const { fieldNames, instanceMembers } = uplcType as any;\n\n        if (uplcType.fieldNames?.length == 1) {\n            throw new Error(`todo: support for single-field nested structs?`);\n        }\n\n        //@ts-expect-error until Helios exposes right type info for the list element\n        const nestedFieldList = uplcData.list;\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn: string, i: number) => {\n                    const fieldData = nestedFieldList[i];\n                    const fieldType = instanceMembers[fn];\n                    // console.log(` ----- read struct field ${fn}`)\n                    const value = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        fieldData\n                    );\n                    // console.log(` <----- struct field ${fn}`, value);\n\n                    return [fn, value];\n                })\n            )\n        );\n    }\n\n    private async readUplcEnumVariant(\n        uplcType: any,\n        enumDataDef: any,\n        uplcData: ConstrData & UplcData\n    ) {\n        const fieldNames: string[] = enumDataDef.fieldNames;\n\n        //@ts-expect-error TS doesn't understand this enum variant data\n        const { fields } = uplcData;\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn, i) => {\n                    const fieldData = fields[i];\n                    const fieldType = enumDataDef.fields[i].type;\n                    const value = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        fieldData\n                    ).catch(nestedError => {\n                        console.warn(\"error parsing nested data inside enum variant\", {fn, fieldType, fieldData})\n                        debugger\n                        throw nestedError;\n                    });\n                    return [fn, value];\n                })\n            )\n        );\n    }\n\n    private async readUplcDatum(uplcType: any, uplcData: UplcData) {\n        const { fieldNames, instanceMembers } = uplcType as any;\n        if (!fieldNames) {\n            const enumVariant = uplcType.prototype._enumVariantStatement;\n            if (enumVariant) {\n                //@ts-expect-error because TS doesn't grok ConstrData here\n                const foundIndex = uplcData.index;\n                const { dataDefinition: enumDataDef, constrIndex } =\n                    enumVariant;\n                if (!(uplcData instanceof ConstrData))\n                    throw new Error(\n                        `uplcData mismatch - no constrData, expected constData#${constrIndex}`\n                    );\n                if (!(foundIndex == constrIndex))\n                    throw new Error(\n                        `uplcData expected constrData#${constrIndex}, got #${foundIndex}`\n                    );\n\n                const t = this.readUplcEnumVariant(\n                    uplcType,\n                    enumDataDef,\n                    uplcData\n                );\n                return t  // caller can deal with catching the error\n            }\n            throw new Error(\n                `can't determine how to parse UplcDatum without 'fieldNames'.  Tried enum`\n            );\n        }\n\n        // const heliosTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         return [fn, instanceMembers[fn].name];\n        //     })\n        // );\n        // const inputTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         return [fn, instanceMembers[fn].typeDetails.inputType];\n        //     })\n        // );\n        // const outputTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         debugger\n        //         return [fn, instanceMembers[fn].typeDetails.outputType];\n        //     })\n        // );\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn, i) => {\n                    let current;\n\n                    //@ts-expect-error\n                    const uplcDataField = uplcData.fields[i];\n                    const fieldType = instanceMembers[fn];\n                    // console.log(` ----- read field ${fn}`)\n\n                    current = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        uplcDataField\n                    );\n\n                    return [fn, current];\n                })\n            )\n        );\n    }\n\n    private async readUplcField(\n        fn: string,\n        fieldType: any,\n        uplcDataField: any\n    ) {\n        let value;\n        const { offChainType } = fieldType;\n        const internalType = fieldType.typeDetails.internalType.type;\n        if (\"Struct\" == internalType) {\n            value = await this.readUplcStructList(fieldType, uplcDataField);\n            // console.log(`  <-- field value`, value)\n            return value;\n        }\n        try {\n            value = fieldType.uplcToJs(uplcDataField);\n            if (value.then) value = await value;\n\n            if (\"Enum\" === internalType && 0 === uplcDataField.fields.length) {\n                value = Object.keys(value)[0];\n            }\n        } catch (e: any) {\n            if (e.message?.match(/doesn't support converting from Uplc/)) {\n                try {\n                    value = await offChainType.fromUplcData(uplcDataField);\n                    if (\"some\" in value) value = value.some;\n                } catch (e: any) {\n                    console.error(`datum: field ${fn}: ${e.message}`);\n                    // console.log({outputTypes, fieldNames, offChainTypes, inputTypes, heliosTypes, thisDatumType});\n                    debugger;\n                    throw e;\n                }\n            } else {\n                throw e;\n            }\n        }\n        // console.log(`  <-- field value`, value)\n        return value;\n    }\n\n    findSmallestUnusedUtxo(\n        lovelace: bigint,\n        utxos: TxInput[],\n        tcx?: StellarTxnContext\n    ): TxInput | undefined {\n        const value = new Value({ lovelace });\n        const toSortInfo = this._mkUtxoSortInfo(value.lovelace);\n\n        const found = utxos\n            .map(toSortInfo)\n            .filter(this._utxoIsPureADA)\n            .filter(this._utxoIsSufficient)\n            .filter((uInfo: utxoInfo) => {\n                if (!tcx) return true;\n                return !!tcx?.utxoNotReserved(uInfo.u);\n            })\n            .sort(this._utxoSortSmallerAndPureADA)\n            .map(this._infoBackToUtxo);\n        console.log(\"smallest utxos: \", utxosAsString(found));\n        const chosen = found.at(0);\n\n        return chosen;\n    }\n\n    //! creates a filtering function, currently for TxInput-filtering only.\n    //! with the optional tcx argument, utxo's already reserved\n    //  ... in that transaction context will be skipped.\n    mkValuePredicate(\n        lovelace: bigint,\n        tcx?: StellarTxnContext\n    ): tokenPredicate<TxInput> {\n        const value = new Value({ lovelace });\n        const predicate = _adaPredicate.bind(this, tcx) as tokenPredicate<any>;\n        predicate.value = value;\n        return predicate;\n\n        function _adaPredicate(\n            this: StellarContract<ConfigType>,\n            tcx: StellarTxnContext | undefined,\n            utxo: TxInput\n        ): TxInput | undefined {\n            return this.hasOnlyAda(value, tcx, utxo);\n        }\n    }\n\n    mkMinTv(mph: MintingPolicyHash, tn: string | UutName, count: bigint = 1n) {\n        return this.mkMinAssetValue(\n            new AssetClass([mph, stringToNumberArray(tn.toString())]),\n            count\n        );\n    }\n\n    mkAssetValue(tokenId: AssetClass, count: bigint = 1n) {\n        const assets = [[tokenId, count] as [AssetClass, bigint]];\n        const v = new Value(undefined, assets);\n        return v;\n    }\n\n    mkMinAssetValue(tokenId: AssetClass, count: bigint = 1n) {\n        const v = this.mkAssetValue(tokenId, count);\n        // uses a dummy address so it can be used even during bootstrap\n        const txo = new TxOutput(\n            new Address(Array<number>(29).fill(0)),\n            this.mkAssetValue(tokenId, count)\n        );\n        txo.correctLovelace(this.networkParams);\n        return txo.value;\n    }\n\n    mkTokenPredicate(val: Value): tokenPredicate<any>;\n    mkTokenPredicate(\n        mph: MintingPolicyHash,\n        tokenName: string,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        vOrMph: AssetClass,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        specifier: Value | MintingPolicyHash | AssetClass,\n        quantOrTokenName?: string | bigint,\n        quantity?: bigint\n    ): tokenPredicate<any> {\n        let v: Value;\n        let mph: MintingPolicyHash;\n        let tokenName: string;\n        //!!! todo: support (AssetClass, quantity) input form\n        if (!specifier)\n            throw new Error(\n                `missing required Value or MintingPolicyHash in arg1`\n            );\n        const predicate = _tokenPredicate.bind(this) as tokenPredicate<any>;\n\n        const isValue = specifier instanceof Value;\n        if (isValue) {\n            v = predicate.value = specifier;\n            return predicate;\n        } else if (specifier instanceof MintingPolicyHash) {\n            mph = specifier;\n            if (\"string\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with minting policy hash, token-name must be a string (or ByteArray support is TODO)`\n                );\n            tokenName = quantOrTokenName;\n            quantity = quantity || 1n;\n\n            v = predicate.value = this.tokenAsValue(tokenName, quantity, mph);\n            return predicate;\n        } else if (specifier instanceof AssetClass) {\n            mph = specifier.mintingPolicyHash;\n            if (!quantOrTokenName) quantOrTokenName = 1n;\n            if (\"bigint\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with AssetClass, the second arg must be a bigint like 3n, or omitted`\n                );\n            quantity = quantOrTokenName;\n\n            v = predicate.value = new Value(0n, [[specifier, quantity]]);\n            return predicate;\n        } else {\n            throw new Error(\n                `wrong token specifier (need Value, MPH+tokenName, or AssetClass`\n            );\n        }\n\n        function _tokenPredicate<tokenBearer extends canHaveToken>(\n            this: StellarContract<ConfigType>,\n            something: tokenBearer\n        ): tokenBearer | undefined {\n            return this.hasToken(something, v);\n        }\n    }\n\n    private hasToken<tokenBearer extends canHaveToken>(\n        something: tokenBearer,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ): tokenBearer | undefined {\n        if (something instanceof TxInput)\n            return (\n                (this.utxoHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n        if (something instanceof TxOutput)\n            return (\n                (this.outputHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n        if (something instanceof Assets)\n            return (\n                (this.assetsHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n\n        //!!! todo: more explicit match for TxInput, which seems to be a type but not an 'instanceof'-testable thing.\n        return (\n            (this.inputHasToken(something, value, tokenName, quantity) &&\n                something) ||\n            undefined\n        );\n    }\n\n    private utxoHasToken(\n        u: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return (\n            this.outputHasToken(u.origOutput, value, tokenName, quantity) && u\n        );\n    }\n    private inputHasToken(\n        i: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return (\n            this.outputHasToken(i.origOutput, value, tokenName, quantity) && i\n        );\n    }\n\n    private assetsHasToken(\n        a: Assets,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        const v =\n            vOrMph instanceof MintingPolicyHash\n                ? this.tokenAsValue(tokenName!, quantity!, vOrMph)\n                : vOrMph;\n\n        return a.ge(v.assets);\n    }\n\n    private outputHasToken(\n        o: TxOutput,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        if (vOrMph instanceof MintingPolicyHash && !tokenName)\n            throw new Error(\n                `missing required tokenName (or use a Value in arg2`\n            );\n        if (vOrMph instanceof MintingPolicyHash && !quantity)\n            throw new Error(\n                `missing required quantity (or use a Value in arg2`\n            );\n\n        const v =\n            vOrMph instanceof MintingPolicyHash\n                ? this.tokenAsValue(tokenName!, quantity!, vOrMph)\n                : vOrMph;\n\n        return o.value.ge(v);\n    }\n\n    //! deprecated tokenAsValue - use Capo\n    tokenAsValue(\n        tokenName: string,\n        quantity: bigint,\n        mph?: MintingPolicyHash\n    ): Value {\n        throw new Error(\n            `deprecated tokenAsValue on StellarContract base class (Capo has mph, not so much any StellarContract`\n        );\n        // if (!mph) {\n        //     mph = (this as any).mph;\n        //     if (!mph)\n        //         throw new Error(\n        //             `tokenAsValue: mph in arg3 required unless the stellar contract (${this.constructor.name}) has an 'mph' getter.`\n        //         );\n        // }\n\n        // const v = new Value(\n        //     this.ADA(0),\n        //     new Assets([[mph, [this.mkValuesEntry(tokenName, quantity)]]])\n        // );\n        // const o = new TxOutput(this.address, v);\n        // v.setLovelace(o.calcMinLovelace(this.networkParams));\n\n        // return v;\n    }\n\n    hasOnlyAda(value: Value, tcx: StellarTxnContext | undefined, u: TxInput) {\n        const toSortInfo = this._mkUtxoSortInfo(value.lovelace);\n\n        const found = [u]\n            .map(toSortInfo)\n            .filter(this._utxoIsSufficient)\n            .filter(this._utxoIsPureADA)\n            .map(this._infoBackToUtxo)\n            .at(0);\n\n        return found;\n    }\n\n    /**\n     * @internal\n     **/\n    protected _utxoSortSmallerAndPureADA(\n        { free: free1, minAdaAmount: r1 }: utxoInfo,\n        { free: free2, minAdaAmount: r2 }: utxoInfo\n    ) {\n        {\n            //! primary: treats pure-ada utxos as always better\n            if (!r1 && r2) {\n                return -1;\n            }\n            if (r1 && !r2) {\n                return 1; //\n            }\n        }\n        //! secondary: smaller utxos are more preferred than larger ones\n        if (free2 > free1) return -1;\n        if (free2 < free1) return 1;\n        return 0;\n    }\n\n    /**\n     * @internal\n     **/\n    protected _utxoIsSufficient({ sufficient }: utxoInfo) {\n        return !!sufficient;\n    }\n    /**\n     * @internal\n     **/\n    protected _utxoIsPureADA({ u }: utxoInfo) {\n        return u.value.assets.isZero() ? u : undefined;\n    }\n    /*\n     * @internal\n     **/\n    protected _infoBackToUtxo({ u }: utxoInfo) {\n        return u;\n    }\n    /**\n     * @internal\n     **/\n    protected _mkUtxoSortInfo(min: bigint, max?: bigint) {\n        return (u: TxInput): utxoInfo => {\n            const minAdaAmount = u.value.assets.isZero()\n                ? BigInt(0)\n                : u.origOutput.calcMinLovelace(this.networkParams);\n            const free = u.value.lovelace - minAdaAmount;\n            const sufficient = free > min && (max ? free < max : true);\n            const t = { u, sufficient, free, minAdaAmount };\n            // console.log(t, utxoAsString(u))\n            return t;\n        };\n    }\n    /**\n     * @internal\n     **/\n    protected _utxoCountAdaOnly(c: number, { minAdaAmount }: utxoInfo): number {\n        return c + (minAdaAmount ? 0 : 1);\n    }\n\n    async findAnySpareUtxos(\n        tcx: StellarTxnContext\n    ): Promise<TxInput[] | never> {\n        if (!this.myActor) throw this.missingActorError;\n\n        const mightNeedFees = this.ADA(3.5);\n\n        const toSortInfo = this._mkUtxoSortInfo(mightNeedFees);\n        const notReserved = tcx\n            ? tcx.utxoNotReserved.bind(tcx)\n            : (u: TxInput) => u;\n\n        return this.myActor.utxos.then((utxos) => {\n            const allSpares = utxos\n                .filter(notReserved)\n                .map(toSortInfo)\n                .filter(this._utxoIsSufficient)\n                .sort(this._utxoSortSmallerAndPureADA);\n\n            if (allSpares.reduce(this._utxoCountAdaOnly, 0) > 0) {\n                return allSpares\n                    .filter(this._utxoIsPureADA)\n                    .map(this._infoBackToUtxo);\n            }\n            return allSpares.map(this._infoBackToUtxo);\n        });\n    }\n\n    async submit(\n        tcx: StellarTxnContext,\n        {\n            signers = [],\n        }: {\n            signers?: Address[];\n        } = {}\n    ) {\n        let { tx, feeLimit = 2_000_000n } = tcx;\n        const { myActor: wallet } = this;\n        if (wallet || signers.length) {\n            const [changeAddress] = (await this.myActor?.usedAddresses) || [];\n            const spares = await this.findAnySpareUtxos(tcx);\n            const willSign = [...signers, ...tcx.neededSigners];\n\n            const wHelper = wallet && new WalletHelper(wallet);\n            if (wallet && wHelper) {\n                //@ts-expect-error on internal isSmart()\n                if (tx.isSmart() && !tcx.collateral) {\n                    let [c] = await wallet.collateral;\n                    if (!c) {\n                        c = await wHelper.pickCollateral(this.ADA(5n));\n                        if (c.value.lovelace > this.ADA(20n))\n                            throw new Error(\n                                `The only collateral-eligible utxos in this wallet have more than 20 ADA.  It's recommended to create and maintain collateral values between 2 and 20 ADA (or 5 and 20, for more complex txns)`\n                            );\n                    }\n                    tcx.addCollateral(c); // adds it also to the tx.\n                }\n            }\n            // if (sign && this.myActor) {\n            //     willSign.push(this.myActor);\n            // }\n            for (const { pubKeyHash: pkh } of willSign) {\n                if (!pkh) continue;\n                if (tx.body.signers.find((s) => pkh.eq(s))) continue;\n\n                tx.addSigner(pkh);\n            }\n            // const feeEstimated = tx.estimateFee(this.networkParams);\n            // if (feeEstimated > feeLimit) {\n            //     console.log(\"outrageous fee - adjust tcx.feeLimit to get a different threshold\")\n            //     throw new Error(`outrageous fee-computation found - check txn setup for correctness`)\n            // }\n            try {\n                // const t1 = new Date().getTime();\n                await tx.finalize(this.networkParams, changeAddress, spares);\n                // const t2 = new Date().getTime();\n                // const elapsed = t2 - t1;\n                // console.log(`::::::::::::::::::::::::::::::::: tx validation time: ${elapsed}ms`);\n                // result: validations for non-trivial txns can take ~800+ ms\n                //  - validations with simplify:true, ~250ms - but ...\n                //    ... with elided error messages that don't support negative-testing very well\n            } catch (e) {\n                console.log(\"FAILED submitting:\", tcx.dump());\n                debugger;\n                throw e;\n            }\n            if (wallet && wHelper) {\n                let actorMustSign = false;\n                for (const a of willSign) {\n                    if (!(await wHelper.isOwnAddress(a))) continue;\n                    actorMustSign = true;\n                }\n                if (actorMustSign) {\n                    const sigs = await wallet.signTx(tx);\n                    //! doesn't need to re-verify a sig it just collected\n                    //   (sig verification is ~2x the cost of signing)\n                    tx.addSignatures(sigs, false);\n                }\n            }\n        } else {\n            console.warn(\"no 'myActor'; not finalizing\");\n        }\n        console.log(\"Submitting tx: \", tcx.dump());\n        const promises = [\n            this.network.submitTx(tx),\n        ]            \n        if (wallet) {\n           if (!this.setup.isTest) promises.push( wallet.submitTx(tx))\n        }\n        return Promise.all(promises)\n    }\n\n    ADA(n: bigint | number): bigint {\n        const bn =\n            \"number\" == typeof n\n                ? BigInt(Math.round(1_000_000 * n))\n                : ((BigInt(1_000_000) * n) as bigint);\n        return bn;\n    }\n\n    //! it requires an subclass to define a contractSource\n    contractSource(): string | never {\n        throw new Error(`missing contractSource impl`);\n    }\n\n    //!!! todo: implement more and/or test me:\n    // async findFreeLovelaceWithTokens(v: Value, w: Wallet) {\n    // it.todo(\"helps find spare lovelace in tokens\");\n    // it.todo(\"will help harvest spare lovelace in the future if minUtxo is changed\");\n    //     const utxos = await w.utxos;\n    //     const lovelaceOnly = v.assets.isZero();\n    //     //! it finds free lovelace in token bundles, if it can't find free lovelace otherwise\n    //     if (lovelaceOnly) {\n    //         let maxFree: TxInput, minToken: TxInput;\n    //         let minPolicyCount = Infinity;\n\n    //         for (const u of utxos) {\n    //             const policies = u.value.assets.mintingPolicies.length;\n    //             if (policies < minPolicyCount) {\n    //                 minPolicyCount = policies;\n    //                 minToken = u;\n    //             }\n\n    //             const free =\n    //                 u.value.lovelace -\n    //                 u.origOutput.calcMinLovelace(this.networkParams);\n    //             //@ts-ignore\n    //             if (!maxFree) {\n    //                 maxFree = u;\n    //             } else if (free > maxFree!.value.lovelace) {\n    //                 maxFree = u;\n    //             }\n    //         }\n    //     }\n    // }\n\n    importModules(): HeliosModuleSrc[] {\n        return [];\n    }\n\n    loadProgramScript(params?: Partial<ConfigType>): Program | undefined {\n        const src = this.contractSource();\n        const modules = this.importModules();\n\n        // console.log({src, Program)\n\n        try {\n            const script = Program.new(src, modules);\n            if (params) script.parameters = params;\n\n            const simplify = this.setup.optimize || ( !this.setup.isTest && !this.setup.isDev );\n            // const t = new Date().getTime();\n            if (simplify) {\n                console.warn(\n                    `Loading optimized contract code for ` + script.name\n                );\n            }\n\n            //!!! todo: consider pushing this to JIT or async\n            this.compiledScript = script.compile(simplify);\n            // const t2 = new Date().getTime();\n\n            // Result: ~80ms cold-start or (much) faster on additional compiles\n            // console.log(\"::::::::::::::::::::::::compile time \"+ (t2 - t) + \"ms\")\n            // -> caching would not improve\n\n            // const configured = Program.new(source)\n            // configured.parameters = params;\n            // const compiledScript = configured.compile(simplify)\n            // const addr = Address.fromHashes(compiledScript.validatorHash)\n\n            return script;\n        } catch (e: any) {\n            if (e.message.match(/invalid parameter name/)) {\n                throw new Error(\n                    e.message +\n                        `\\n   ... this typically occurs when your StellarContract class (${this.constructor.name})` +\n                        \"\\n   ... can be missing a getContractScriptParams() method \" +\n                        \"\\n   ... to map from the configured settings to contract parameters\"\n                );\n            }\n            if (!e.src) {\n                console.error(\n                    `unexpected error while compiling helios program (or its imported module) \\n` +\n                        `> ${e.message}\\n` +\n                        `Suggested: connect with debugger (we provided a debugging point already)\\n` +\n                        `  ... and use 'break on caught exceptions' to analyze the error \\n` +\n                        `This likely indicates a problem in Helios' error reporting - \\n` +\n                        `   ... please provide a minimal reproducer as an issue report for repair!\\n\\n` +\n                        e.stack.split(\"\\n\").slice(1).join(\"\\n\")\n                );\n                try {\n                    debugger;\n                    // debugger'ing?  YOU ARE AWESOME!\n                    //  reminder: ensure \"pause on caught exceptions\" is enabled\n                    //  before playing this next line to dig deeper into the error.\n                    Program.new(src, modules);\n                } catch (sameError) {\n                    throw sameError;\n                }\n                throw e;\n            }\n            const moduleName = e.src.name;\n            const errorModule = [src, ...modules].find(\n                (m) => (m as any).moduleName == moduleName\n            );\n            const { srcFile = \"‹unknown path to module›\" } =\n                (errorModule as any) || {};\n            const [sl, sc, el, ec] = e.getFilePos();\n            const t = new Error(\"\");\n            const modifiedStack = t.stack!.split(\"\\n\").slice(1).join(\"\\n\");\n            const additionalErrors = e.src.errors\n                .slice(1)\n                .map((x) => `       |         ⚠️  also: ${x}`);\n            const addlErrorText = additionalErrors.length\n                ? [\"\", ...additionalErrors, \"       v\"].join(\"\\n\")\n                : \"\";\n            t.message = e.message + addlErrorText;\n\n            t.stack =\n                `${e.message}\\n    at ${moduleName} (${srcFile}:${1 + sl}:${\n                    1 + sc\n                })\\n` + modifiedStack;\n\n            throw t;\n        }\n    }\n\n    private get missingActorError(): string | undefined {\n        return `Wallet not connected to Stellar Contract '${this.constructor.name}'`;\n    }\n\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        exceptInTcx: StellarTxnContext<any>,\n        extraErrorHint?: string\n    ): Promise<TxInput | never>;\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        extraErrorHint?: string\n    ): Promise<TxInput | never>;\n\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        hintOrExcept?: string | StellarTxnContext<any>,\n        hint?: string\n    ): Promise<TxInput | never> {\n        const wallet = this.myActor;\n\n        if (!wallet) throw new Error(this.missingActorError);\n        const isTcx = hintOrExcept instanceof StellarTxnContext;\n        const exceptInTcx = isTcx ? hintOrExcept : undefined;\n        const extraErrorHint = isTcx\n            ? hint\n            : \"string\" == typeof hintOrExcept\n            ? hintOrExcept\n            : undefined;\n\n        return this.mustFindUtxo(\n            name,\n            predicate,\n            { wallet, exceptInTcx },\n            extraErrorHint\n        );\n    }\n\n    /**\n     * Locates a UTxO locked in a validator contract address\n     * @remarks\n     *\n     * Throws an error if no matching UTxO can be found\n     * @param semanticName - descriptive name; used in diagnostic messages and any errors thrown\n     * @param predicate - filter function; returns its utxo if it matches expectations\n     * @param exceptInTcx - any utxos already in the transaction context are disregarded and not passed to the predicate function\n     * @param extraErrorHint - user- or developer-facing guidance for guiding them to deal with the miss\n     * @public\n     **/\n    //! finds a utxo (\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        exceptInTcx: StellarTxnContext<any>,\n        extraErrorHint?: string\n    ): Promise<TxInput>;\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        extraErrorHint?: string\n    ): Promise<TxInput>;\n\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        hintOrExcept?: string | StellarTxnContext<any>,\n        hint?: string\n    ): Promise<TxInput> {\n        const { address } = this;\n        const isTcx = hintOrExcept instanceof StellarTxnContext;\n        const exceptInTcx = isTcx ? hintOrExcept : undefined;\n        const extraErrorHint = isTcx\n            ? hint\n            : \"string\" == typeof hintOrExcept\n            ? hintOrExcept\n            : undefined;\n\n        return this.mustFindUtxo(\n            semanticName,\n            predicate,\n            { address, exceptInTcx },\n            extraErrorHint\n        );\n    }\n\n    async mustFindUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        { address, wallet, exceptInTcx }: UtxoSearchScope,\n        extraErrorHint: string = \"\"\n    ): Promise<TxInput | never> {\n        const found = await this.hasUtxo(semanticName, predicate, {\n            address,\n            wallet,\n            exceptInTcx,\n        });\n        if (!found) {\n            const where = address ? \"address\" : \"connected wallet\";\n            throw new Error(\n                `${this.constructor.name}: '${semanticName}' utxo not found (${extraErrorHint}) in ${where}`\n            );\n        }\n\n        return found;\n    }\n    toUtxoId(u: TxInput) {\n        return `${u.outputId.txId.hex}@${u.outputId.utxoIdx}`;\n    }\n\n    async hasUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        { address, wallet, exceptInTcx }: UtxoSearchScope\n    ): Promise<TxInput | undefined> {\n        const utxos = address\n            ? await this.network.getUtxos(address)\n            : await wallet!.utxos;\n\n        const collateral = wallet ? await wallet.collateral : [];\n        // const filterUtxos = [\n        //     ...collateral,\n        //     ...(exceptInTcx?.reservedUtxos() || []),\n        // ];\n        const notCollateral = utxos.filter(\n            (u) => !collateral.find((c) => c.eq(u))\n        );\n        const filtered = exceptInTcx\n            ? notCollateral.filter(\n                  exceptInTcx.utxoNotReserved.bind(exceptInTcx)\n              )\n            : notCollateral;\n\n        console.log(\n            `finding '${semanticName}' utxo${\n                exceptInTcx ? \" (not already being spent in txn)\" : \"\"\n            } from set:\\n  ${utxosAsString(filtered, \"\\n  \")}`\n            // ...(exceptInTcx && filterUtxos?.length\n            //     ? [\n            //           \"\\n  ... after filtering out:\\n \",\n            //           utxosAsString(exceptInTcx.reservedUtxos(), \"\\n  \"),\n            //       ]\n            //     : [])\n        );\n\n        const found = filtered.find(predicate);\n        if (found) {\n            console.log(\"  <- found:\" + utxosAsString([found]));\n        } else {\n            console.log(\"  (not found)\");\n        }\n        return found;\n    }\n\n    async hasMyUtxo(\n        semanticName: string,\n        predicate: utxoPredicate\n    ): Promise<TxInput | undefined> {\n        return this.hasUtxo(semanticName, predicate, { address: this.address });\n    }\n}\n","import {\n    NetworkParams,\n    SimpleWallet as WalletEmulator,\n    SimpleWallet,\n} from \"@hyperionbt/helios\";\n\nimport { promises as fs } from \"fs\";\nimport { Vitest, vitest } from \"vitest\";\nimport { ConfigFor, StellarContract, configBase } from \"../StellarContract.js\";\nimport { StellarTestContext } from \"./StellarTestContext.js\";\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport ppParams from \"../../preprod.json\" assert { type: \"json\" };\n\nexport const preProdParams = ppParams;\n\nexport type enhancedNetworkParams = NetworkParams & {\n    slotToTimestamp(n: bigint): Date;\n};\n\nexport type stellarTestHelperSubclass<SC extends StellarContract<any>> = new (\n    config: ConfigFor<SC> & canHaveRandomSeed\n) => StellarTestHelper<SC>;\n\nexport type canHaveRandomSeed = {\n    randomSeed?: number;\n};\nexport type canSkipSetup = {\n    skipSetup?: true;\n};\n\n/**\n * Adds a test helper class to a `vitest` testing context.\n * @remarks\n * \n * @param context -  a vitest context, typically created with StellarTestContext\n * @param TestHelperClass - typically created with DefaultCapoTestHelper\n * @param params - preset configuration for the contract under test\n * @public\n **/\nexport async function addTestContext<\n    SC extends StellarContract<any>,\n    P extends configBase = SC extends StellarContract<infer PT> ? PT : never\n>(\n    context: StellarTestContext<any, SC>,\n    TestHelperClass: stellarTestHelperSubclass<SC>,\n    params?: P\n) {\n    console.log(\" ======== ========= ======== +test context\");\n    Object.defineProperty(context, \"strella\", {\n        get: function () {\n            return this.h.strella;\n        },\n    });\n\n    context.initHelper = async (params) => {\n        //@ts-expect-error\n        const helper = new TestHelperClass(params);\n        if (context.h) {\n            if (!params.skipSetup)\n                throw new Error(\n                    `re-initializing shouldn't be necessary without skipSetup`\n                );\n            console.log(\n                \"   ............. reinitializing test helper without setup\"\n            );\n        }\n        context.h = helper;\n        // console.log(\"context IS \", context)\n        return helper;\n    };\n    try {\n        //@ts-expect-error\n        await context.initHelper(params);\n    } catch (e) {\n        if (!params) {\n            // console.error(e.stack || e.message || JSON.stringify(e));\n            console.error(\n                `${TestHelperClass.name}: error during initialization; does this test helper require initialization with explicit params?`\n            );\n            throw e;\n        } else {\n            console.error(\"urgh\");\n            throw e;\n        }\n    }\n}\n\nexport type actorMap = Record<string, WalletEmulator>;\n\n/**\n * 1 million as bigint.  Multiply by this ADA value to get lovelace\n * @public\n **/\nexport const ADA = 1_000_000n; // lovelace\n","import * as helios from \"@hyperionbt/helios\";\nimport {\n    Address,\n    Crypto,\n    NetworkEmulator,\n    NetworkParams,\n    Tx,\n    TxId,\n    TxOutput,\n    Value,\n    SimpleWallet,\n    SimpleWallet as WalletEmulator,\n} from \"@hyperionbt/helios\";\nimport {\n    StellarContract,\n    findInputsInWallets,\n    configBase,\n    stellarSubclass,\n    ConfigFor,\n    StellarConstructorArgs,\n} from \"../StellarContract.js\";\nimport { lovelaceToAda, txAsString, utxosAsString } from \"../diagnostics.js\";\nimport {\n    actorMap,\n    ADA,\n    canHaveRandomSeed,\n    canSkipSetup,\n    preProdParams,\n    enhancedNetworkParams,\n} from \"./types.js\";\n\n/**\n * Base class for test-helpers on generic Stellar contracts\n * @remarks\n * \n * NOTE: DefaultCapoTestHelper is likely to be a better fit for typical testing needs and typical contract-development scenarios.\n * Use this class for specific unit-testing needs not sufficiently served by integration-testing on a Capo.\n * @public\n **/\nexport abstract class StellarTestHelper<SC extends StellarContract<any>> {\n    state: Record<string, any>;\n    abstract get stellarClass(): stellarSubclass<SC, any>;\n    config?: ConfigFor<SC>;\n    defaultActor?: string;\n    strella!: SC;\n    actors: actorMap;\n    optimize = false;\n    liveSlotParams: NetworkParams;\n    networkParams: NetworkParams;\n    network: NetworkEmulator;\n    private actorName: string;\n\n    //@ts-ignore type mismatch in getter/setter until ts v5\n    get currentActor(): WalletEmulator {\n        return this.actors[this.actorName];\n    }\n    set currentActor(actorName: string) {\n        const thisActor = this.actors[actorName];\n        if (!thisActor)\n            throw new Error(\n                `setCurrentActor: invalid actor name '${actorName}'`\n            );\n        if (this.strella) this.strella.myActor = thisActor;\n        this.actorName = actorName;\n    }\n\n    address?: Address;\n\n    setupPending?: Promise<any>;\n    setupActors() {\n        console.warn(\n            `using 'hiro' as default actor because ${this.constructor.name} doesn't define setupActors()`\n        );\n        this.addActor(\"hiro\", 1863n * ADA);\n        this.currentActor = \"hiro\";\n    }\n\n    constructor(config?: ConfigFor<SC> & canHaveRandomSeed & canSkipSetup) {\n        this.state = {};\n        if (config) {\n            console.log(\n                \"XXXXXXXXXXXXXXXXXXXXXXXXXX test helper with config\",\n                config\n            );\n\n            this.config = config;\n        }\n\n        const [theNetwork, emuParams] = this.mkNetwork();\n        this.liveSlotParams = emuParams;\n        this.network = theNetwork;\n        this.networkParams = new NetworkParams(preProdParams);\n\n        this.actors = {};\n        this.actorName = \"\"; //only to make typescript happy\n        this.setupActors();\n        if (!this.actorName)\n            throw new Error(\n                `${this.constructor.name} doesn't set currentActor in setupActors()`\n            );\n        const now = new Date();\n        this.waitUntil(now);\n        if (config?.skipSetup) {\n            console.log(\"test helper skipping setup\");\n            return;\n        }\n\n        //@ts-expect-error - can serve no-params case or params case\n        this.setupPending = this.initialize(config);\n    }\n\n    async initialize(config: ConfigFor<SC> & canHaveRandomSeed) {\n        const { randomSeed, ...p } = config;\n        if (this.setupPending) await this.setupPending;\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate setup() in test helper\"\n            );\n            return this.strella;\n        }\n        if (this.strella) {\n            console.warn(\n                \".... warning: new test helper setup with new seed....\"\n            );\n            this.rand = undefined;\n            this.randomSeed = randomSeed;\n        } else {\n            console.log(\n                \" - Test helper bootstrapping (will emit details to onInstanceCreated())\"\n            );\n        }\n\n        return this.initStellarClass();\n    }\n\n    initStellarClass() {\n        const TargetClass = this.stellarClass;\n\n        const strella = this.initStrella(TargetClass, this.config);\n\n        this.strella = strella;\n        this.address = strella.address;\n        return strella;\n    }\n\n    //!!! reconnect tests to tcx-based config-capture\n    // onInstanceCreated: async (config: ConfigFor<SC>) => {\n    //     this.config = config\n    //     return {\n    //         evidence: this,\n    //         id: \"empheral\",\n    //         scope: \"unit test\"\n    //     }\n    // }\n\n    initStrella(\n        TargetClass: stellarSubclass<SC, ConfigFor<SC>>,\n        config?: ConfigFor<SC>\n    ) {\n        const setup = {\n            network: this.network,\n            myActor: this.currentActor,\n            networkParams: this.networkParams,\n            isTest: true,\n        };\n\n        let cfg: StellarConstructorArgs<ConfigFor<SC>> = {\n            setup,\n            config: config!,\n        };\n\n        if (!config)\n            cfg = {\n                setup,\n                partialConfig: {},\n            };\n        return new TargetClass(cfg);\n    }\n\n    //! it has a seed for mkRandomBytes, which must be set by caller\n    randomSeed?: number;\n    //! it makes a rand() function based on the randomSeed after first call to mkRandomBytes\n    rand?: () => number;\n\n    delay(ms) {\n        return new Promise((res) => setTimeout(res, ms));\n    }\n\n    async mkSeedUtxo(seedIndex: bigint = 0n) {\n        const { currentActor } = this;\n        const { network } = this;\n\n        const tx = new Tx();\n        const actorMoney = await currentActor.utxos;\n        console.log(\n            `${this.actorName} has money: \\n` + utxosAsString(actorMoney)\n        );\n\n        tx.addInput(\n            await findInputsInWallets(\n                new helios.Value(30n * ADA),\n                { wallets: [currentActor] },\n                network\n            )\n        );\n\n        tx.addOutput(new TxOutput(currentActor.address, new Value(10n * ADA)));\n        tx.addOutput(new TxOutput(currentActor.address, new Value(10n * ADA)));\n        let si = 2;\n        for (; si < seedIndex; si++) {\n            tx.addOutput(\n                new TxOutput(currentActor.address, new Value(10n * ADA))\n            );\n        }\n        const txId = await this.submitTx(tx, \"force\");\n\n        return txId;\n    }\n\n    async submitTx(tx: Tx, force?: \"force\"): Promise<TxId> {\n        const sendChangeToCurrentActor = this.currentActor.address;\n        const isAlreadyInitialized = !!this.strella;\n        try {\n            await tx.finalize(this.networkParams, sendChangeToCurrentActor);\n        } catch (e: any) {\n            throw new Error(\n                e.message +\n                    \"\\nin tx: \" +\n                    txAsString(tx) +\n                    \"\\nprofile: \" +\n                    tx.profileReport\n            );\n        }\n        if (isAlreadyInitialized && !force) {\n            throw new Error(\n                `helper is already initialized; use the submitTx from the testing-context's 'strella' object instead`\n            );\n        }\n\n        console.log(\n            `Test helper ${force || \"\"} submitting tx${\n                (force && \"\") || \" prior to instantiateWithParams()\"\n            }:\\n` + txAsString(tx)\n            // new Error(`at stack`).stack\n        );\n\n        try {\n            const txId = await this.network.submitTx(tx);\n            console.log(\"test helper submitted direct txn:\" + txAsString(tx));\n            this.network.tick(1n);\n            // await this.delay(1000)\n            // debugger\n            // this.network.dump();\n            return txId;\n        } catch (e: any) {\n            console.error(\n                `submit failed: ${e.message}\\n  ... in tx ${txAsString(tx)}`\n            );\n            throw e;\n        }\n    }\n\n    mkRandomBytes(length: number): number[] {\n        if (!this.randomSeed)\n            throw new Error(\n                `test must set context.randomSeed for deterministic randomness in tests`\n            );\n        if (!this.rand) this.rand = Crypto.rand(this.randomSeed);\n\n        const bytes: number[] = [];\n        for (let i = 0; i < length; i++) {\n            bytes.push(Math.floor(this.rand() * 256));\n        }\n        return bytes;\n    }\n\n    addActor(roleName: string, walletBalance: bigint) {\n        if (this.actors[roleName])\n            throw new Error(`duplicate role name '${roleName}'`);\n        //! it instantiates a wallet with the indicated balance pre-set\n\n        const a = this.network.createWallet(walletBalance);\n        console.log(\n            `+🎭 Actor: ${roleName}: ${a.address\n                .toBech32()\n                .substring(0, 18)}… ${lovelaceToAda(\n                walletBalance\n            )} (🔑#${a.address.pubKeyHash?.hex.substring(0, 8)}…)`\n        );\n\n        //! it makes collateral for each actor, above and beyond the initial balance,\n        //  ... so that the full balance is spendable and the actor can immediately\n        //  ... engage in smart-contract interactions.\n        this.network.tick(BigInt(2));\n        this.network.createUtxo(a, 5n * ADA);\n        this.network.createUtxo(a, 5n * ADA);\n        this.network.createUtxo(a, 5n * ADA);\n        this.network.tick(BigInt(1));\n\n        this.actors[roleName] = a;\n        return a;\n    }\n\n    mkNetwork(): [NetworkEmulator, enhancedNetworkParams] {\n        const theNetwork = new NetworkEmulator();\n\n        //@ts-expect-error with missing methods\n        const emuParams = theNetwork.initNetworkParams({\n            ...preProdParams,\n            raw: { ...preProdParams },\n        }) as enhancedNetworkParams;\n\n        // debugger\n        //@xxxts-expect-error\n        // emuParams.timeToSlot = function (t) {\n        //     const seconds = BigInt(t / 1000n);\n        //     return seconds;\n        // };\n        // emuParams.slotToTimestamp = this.slotToTimestamp;\n\n        return [theNetwork, emuParams];\n    }\n\n    slotToTimestamp(s: bigint) {\n        return this.networkParams.slotToTime(s);\n\n        const num = parseInt(BigInt.asIntN(52, s * 1000n).toString());\n        return new Date(num);\n    }\n\n    currentSlot() {\n        return this.liveSlotParams.liveSlot;\n    }\n\n    waitUntil(time: Date) {\n        const targetTimeMillis = BigInt(time.getTime());\n        // debugger\n        const targetSlot = this.networkParams.timeToSlot(targetTimeMillis);\n        const c = this.currentSlot();\n\n        const slotsToWait = targetSlot - (c || 0n);\n        if (slotsToWait < 1) {\n            throw new Error(`the indicated time is not in the future`);\n        }\n        // console.warn(`waiting ${slotsToWait} slots -> ${time}`);\n        this.network.tick(slotsToWait);\n        return slotsToWait;\n    }\n}\n","import { TxId } from \"@hyperionbt/helios\";\nimport { ArgumentsType, expect } from \"vitest\";\nimport {\n    Capo,\n    CapoBaseConfig,\n    MinterBaseMethods,\n    anyDatumArgs,\n    hasBootstrappedConfig,\n    hasUutContext,\n} from \"../Capo.js\";\nimport { SeedTxnParams } from \"../SeedTxn.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport { MinimalDefaultCharterDatumArgs } from \"../DefaultCapo.js\";\nimport { AuthorityPolicy } from \"../authority/AuthorityPolicy.js\";\nimport { ConfigFor } from \"../StellarContract.js\";\nimport { DefaultMinter } from \"../minting/DefaultMinter.js\";\n\n/**\n * Base class for test helpers for Capo contracts\n * @remarks\n * \n * Unless you have a custom Capo not based on DefaultCapo, you \n * should probably use DefaultCapoTestHelper instead of this class.\n * @public\n **/\nexport abstract class CapoTestHelper<\n    SC extends Capo<DefaultMinter & MinterBaseMethods, CDT, CT>,\n    CDT extends anyDatumArgs = //prettier-ignore\n        SC extends Capo<DefaultMinter, infer iCDT> ? iCDT : anyDatumArgs, //prettier-ignore\n    CT extends CapoBaseConfig  =  //prettier-ignore\n        SC extends Capo<any, any, infer iCT> ? iCT : never //prettier-ignore\n> extends StellarTestHelper<SC> {\n    async initialize({\n        randomSeed = 42,\n        config,\n    }: { config?: CT; randomSeed?: number } = {}): Promise<SC> {\n        if (this.setupPending) await this.setupPending;\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate setup() in test helper\"\n            );\n\n            return this.strella;\n        }\n        if (this.strella)\n            console.log(\n                `  ---  new test helper setup with new seed (was ${this.randomSeed}, now ${randomSeed})...\\n` +\n                    new Error(\"stack\")\n                        .stack!.split(\"\\n\")\n                        .slice(1)\n                        .filter(\n                            (line) =>\n                                !line.match(/node_modules/) &&\n                                !line.match(/node:internal/)\n                        )\n                        .join(\"\\n\")\n            );\n        this.randomSeed = randomSeed;\n        this.state.mintedCharterToken = undefined;\n        // console.log(new Error(\"setup from\").stack)\n\n        //! when there's not a preset config, it leaves the detailed setup to be done just-in-time\n        //   based on seedUtxo in mkTxnMintCharterToken\n        if (!config)\n            return (this.strella = this.initStrella(this.stellarClass));\n\n        //@ts-expect-error either we got too fancy for Typescript, or the other way round\n        const strella = this.initStrella(this.stellarClass, config);\n\n        this.strella = strella;\n        const { address, mintingPolicyHash: mph } = strella;\n\n        const { name } = strella.scriptProgram!;\n        console.log(\n            name,\n            address.toBech32().substring(0, 18) + \"…\",\n            \"vHash 📜 \" +\n                strella.compiledScript.validatorHash.hex.substring(0, 12) +\n                \"…\",\n            \"mph 🏦 \" + mph?.hex.substring(0, 12) + \"…\"\n        );\n        return strella;\n    }\n\n    async bootstrap(args?: MinimalDefaultCharterDatumArgs) {\n        let strella = this.strella || (await this.initialize());\n\n        await this.mintCharterToken(args);\n        return strella;\n    }\n    abstract mkDefaultCharterArgs(): Partial<MinimalDefaultCharterDatumArgs<any>>\n    abstract mintCharterToken(\n        args?: MinimalDefaultCharterDatumArgs<any>\n    ): Promise<\n        & StellarTxnContext<any> \n        & hasUutContext<\"govAuthority\" | \"capoGov\" | \"mintDelegate\" | \"mintDgt\">\n        & hasBootstrappedConfig<CapoBaseConfig>\n    >\n}\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport cmh from \"./CapoMintHelpers.hl\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\nexport const CapoMintHelpers: HeliosModuleSrc = cmh;\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport { HeliosModuleSrc } from \"lib/HeliosModuleSrc.js\";\nimport cdh from \"./CapoDelegateHelpers.hl\";\n\nexport const CapoDelegateHelpers: HeliosModuleSrc = cdh;\n","import { Address, MintingPolicyHash, ValidatorHash, bytesToHex, bytesToText } from \"@hyperionbt/helios\";\nimport {\n    ConfigFor,\n    StellarContract,\n    configBase,\n    stellarSubclass,\n} from \"../StellarContract.js\";\n\nimport { StellarDelegate } from \"./StellarDelegate.js\";\n\nconst _uutName = Symbol(\"uutName\");\nconst maxUutName = 32;\n/**\n * a unique utility token having a unique name\n * @remarks\n *\n * This class contains a general 'purpose' name, mapped to a unique\n * `name`, which is generated using a seed-utxo pattern.\n *\n * @public\n **/\nexport class UutName {\n    private [_uutName]: string;\n    purpose: string;\n    constructor(purpose: string, fullUutName: string) {\n        this.purpose = purpose;\n        if (fullUutName.length > maxUutName) {\n            throw new Error(\n                `uut name '${fullUutName}' exceeds max length of ${maxUutName}`\n            );\n        }\n        this[_uutName] = fullUutName;\n    }\n    /**\n     * the full uniquified name of this UUT\n     * @remarks\n     *\n     * format: `purpose-‹...uniqifier...›`\n     * @public\n     **/\n    get name() {\n        return this[_uutName];\n    }\n    toString() {\n        return this[_uutName];\n    }\n}\n\n/**\n * An error type for reflecting configuration problems at time of delegate setup\n * @remarks\n * \n * acts like a regular error, plus has an `errors` object mapping field names\n * to problems found in those fields.   \n *\n * When a strategy-selection failure happens, the `availableStrategies` property \n * also has a list of known strategies for a selected delegation role.\n *  \n * @param ‹pName› - descr\n * @public\n **/\nexport class DelegateConfigNeeded extends Error {\n    errors?: ErrorMap;\n    availableStrategies?: string[];\n    constructor(\n        message: string,\n        options: {\n            errors?: ErrorMap;\n            availableStrategies?: string[];\n            errorRole? : string;\n        }\n    ) {\n        super(message);\n        const { errors, availableStrategies } = options;\n        if (errors) this.errors = errors;\n        if (availableStrategies) this.availableStrategies = availableStrategies;\n    }\n}\n\n/**\n * Reveals errors found during delegate selection\n * @remarks\n * \n * Each field name is mapped to an array of string error messages found on that field.\n * @public\n **/\nexport type ErrorMap = Record<string, string[]>;\n\n/**\n * return type for strategy's validateScriptParams()\n * @internal\n **/\nexport type strategyValidation = ErrorMap | undefined;\n\n/**\n * Captures normal details of every delegate relationship\n * @remarks\n * \n * Includes the address of the leader contract, its minting policy, and the token-name\n * used for the delegate\n * @public\n **/\nexport type DelegationDetail = {\n    capoAddr: Address;\n    mph: MintingPolicyHash;\n    tn: number[];\n};\n\n/**\n * Allows any targeted delegate class to access & use certain details originating in the leader contract\n * @remarks\n *\n * This setting is implicitly defined on all Delegate configurations.\n *\n * These allow any Capo delegate class to reference details from its essential\n * delegation context\n *\n * @public\n **/\nexport type capoDelegateConfig = configBase & {\n    capoAddr: Address;\n    mph: MintingPolicyHash;\n    tn: number[];\n    rev: bigint;\n    addrHint: Address[];\n};\n\n/**\n * Richly-typed structure that can capture the various delegation roles available\n * in a Capo contract\n * @remarks\n * \n * Defined in a delegateRoles() method using the standalone delegateRoles() \n * and defineRole() helper functions.\n * @typeParam KR - deep, strong type of the role map - always inferred by \n * delegateRoles() helper.\n * @public\n **/\nexport type RoleMap<KR extends Record<string, RoleInfo<any, any, any, any>>> = {\n    [roleName in keyof KR]: KR[roleName];\n};\n\n/**\n * Standalone helper method defining a specific RoleMap; used in a Capo's delegateRoles() instance method\n * @remarks\n * \n * Called with a set of literal role defintitions, the full type  of the RoleMap is inferred.\n * \n * Use {@link defineRole}() to create each role entry\n * \n * @param roleMap - maps role-names to role-definitions\n * @typeParam RM - inferred type of the `roleMap` param\n * @public\n **/\nexport function delegateRoles<const RM extends RoleMap<any>>(\n    roleMap: RM\n): RoleMap<RM> {\n    return roleMap;\n}\n\n/**\n * toJSON adapter for delegate links\n * @internal\n **/\nexport function delegateLinkSerializer(key: string, value: any) {\n    if (typeof value === \"bigint\") {\n        return value.toString();\n    } else if (\"bytes\" == key && Array.isArray(value)) {\n        return bytesToHex(value)\n    } else if (value instanceof Address) {\n        return value.toBech32()\n    } else if (\"tn\" == key && Array.isArray(value)) {\n        return bytesToText(value)\n    }\n    return value; // return everything else unchanged\n}\n\n/**\n * Describes one delegation role used in a Capo contract\n * @remarks\n * \n * Includes the base class for all the variants of the role, a \n * uutPurpose (base name for their authority tokens), and\n * named variants for that role\n * \n * All type-parameters are normally inferred from {@link defineRole}()\n * \n * @public\n **/\nexport type RoleInfo<\n    SC extends StellarContract<any>,\n    VM extends Record<variants, VariantStrategy<SC>>,\n    UUTP extends string,\n    variants extends string = string & keyof VM\n> = {\n    uutPurpose: UUTP;\n    baseClass: stellarSubclass<SC>;\n    variants: { [variant in variants]: VM[variant] };\n};\n\n/**\n * Creates a strongly-typed definition of a delegation role used in a Capo contract\n * \n * @remarks\n * The definition ncludes the different strategy variants that can serve in that role.\n * \n * NOTE: all type parameters are inferred from the function params.\n * \n* @param uutBaseName - token-name prefix for the tokens connecting delegates for the role\n * @param baseClass - each variant is expected to inherit from this base class\n * @param variants - maps each strategy-variant name to a detailed {@link VariantStrategy}  definition\n * @public\n **/\nexport function defineRole<\n    const UUTP extends string,\n    SC extends StellarContract<any>,\n    const VMv extends RoleInfo<SC, any, UUTP>[\"variants\"]\n>(\n    uutBaseName: UUTP,\n    baseClass: stellarSubclass<SC> & any,\n    variants: VMv\n): RoleInfo<SC, VMv, UUTP> {\n    return {\n        uutPurpose: uutBaseName,\n        baseClass,\n        variants,\n    };\n}\n\n//!!! todo: develop this further to allow easily enhancing a parent role-definition\n// ... with an additional strategy variant\n\n// type vmapBuilder<\n//     SC extends StellarContract<any>,\n//     UUTP extends string,\n//     VMv extends RoleInfo<SC, any, UUTP>[\"variants\"]\n// > = (variants: VMv) => RoleInfo<SC, VMv, UUTP>;\n// export function defineRole<\n//     SC extends StellarContract<any>,\n//     const PUUTP extends string,\n// >(\n//     inheritedRoleDefinition: RoleInfo<SC, any, PUUTP>\n// ) : vmapBuilder<SC, PUUTP, RoleInfo<SC, any, PUUTP>[\"variants\"]>\n// export function defineRole<\n//     const UUTP extends string,\n//     SC extends StellarContract<any>,\n// >(\n//     uutBaseName: UUTP,\n//     subclass: stellarSubclass<SC> & any,\n// ) : vmapBuilder<SC, UUTP, RoleInfo<SC, any, UUTP>[\"variants\"]>\n// export function defineRole<\n//     const UUTP extends string,\n//     SC extends StellarContract<any>,\n//     const Puutp extends string,\n// >(\n//     uBNorParentDef: Puutp | RoleInfo<SC, any, UUTP>,\n//     subclass?: stellarSubclass<SC> & any,\n// ) : vmapBuilder<SC, Puutp | UUTP, RoleInfo<SC, any, Puutp | UUTP>[\"variants\"]> {\n//     const uutBaseName = (\n//         \"string\" == typeof uBNorParentDef\n//      ) ? uBNorParentDef\n//         : uBNorParentDef.uutPurpose;\n\n//     return function vmapBuilder<\n//         const VMv extends RoleInfo<SC, any, UUTP>[\"variants\"]\n//     >(\n//         variants: VMv\n//     ): RoleInfo<SC, VMv, UUTP> {\n//         return {\n//             uutPurpose: uutBaseName,\n//             variants,\n//         };\n//     }\n\nexport type strategyParams = configBase;\nexport type delegateScriptParams = configBase;\n\nexport type PartialParamConfig<CT extends configBase> = Partial<CT>;\n\n/**\n * declaration for one strategy-variant of a delegate role\n * @remarks\n * \n * Indicates the details needed to construct a delegate script\n * \n * NOTE: the Type param is always inferred by defineRole()\n * @public\n **/\nexport type VariantStrategy<\n    DT extends StellarContract<capoDelegateConfig & any>\n> = {\n    delegateClass: stellarSubclass<DT>;\n    //! it MAY provide a partial configuration to be used for parameterizing\n    //  the underlying contract script, to be further customized by a delegate-selection\n    partialConfig?: PartialParamConfig<ConfigFor<DT>>;\n    //! it has a function used for validating parameter details\n    validateConfig?: (p: ConfigFor<DT>) => strategyValidation;\n};\n\n//! a map of delegate selections needed for a transaction\n//  ... to construct a concrete delegate that hasn't yet been manifested.\n//  ... This commonly is needed during initial setup of a contract,\n//  ... but may happen also at later moments in the contract's lifecycle.\nexport type SelectedDelegates = {\n    [roleName: string]: SelectedDelegate<StellarContract<any>>;\n};\n\n//! a single delegate selection, where a person chooses\n//  ... one of the strategy variants\n//  ... and the settings (script parameters) needed to create the on-chain contract\nexport type SelectedDelegate<SC extends StellarContract<any>> = {\n    strategyName: string;\n    config?: Partial<ConfigFor<SC>>;\n};\n\n// export type StellarDelegate =\n//     StellarDelegateClass<any & configBase & capoDelegateConfig> &\n//     StellarContract<any & configBase & capoDelegateConfig>;\n\n// export function selectDelegate<T extends StellarContract<any>>(\n//     sd: SelectedDelegate<T>\n// ) {\n//     return sd;\n// }\n\n/**\n * A complete, validated and resolved configuration for a specific delegate\n * @public\n * @remarks\n *\n * Use StellarContract's `txnCreateDelegateSettings()` method to resolve\n * from any (minimal or better) delegate details to a ResolvedDelegate object.\n * @typeParam DT - a StellarContract class conforming to the `roleName`,\n *     within the scope of a Capo class's `roles()`.\n **/\nexport type ConfiguredDelegate<DT extends StellarDelegate<any>> = {\n    delegateClass: stellarSubclass<DT>;\n    delegate: DT;\n    roleName: string;\n    config: ConfigFor<DT>;\n} & RelativeDelegateLink<DT>;\n\n/**\n * Minimal structure for connecting a specific Capo contract to a configured StellarDelegate\n * @remarks\n * \n * This structure can always resolve to a reproducible delegate class (a {@link StellarDelegate}),\n * given a specific Capo and roleName.  \n * \n * When the delegate isn't backed by a specific on-chain contract script, the delegateValidatorHash \n * is optional.\n * \n * @typeParam DT - the base class, to which all role-strategy variants conform\n * @public\n **/\nexport type RelativeDelegateLink<DT extends StellarDelegate<any>> = {\n    uutName: string;\n    strategyName: string;\n    config: Partial<ConfigFor<DT>>;\n    delegateValidatorHash?: ValidatorHash;\n    // reqdAddress?: Address; removed\n    // addrHint?: Address[]; moved to config\n};\n","import {\n    Address,\n    Value,\n    MintingPolicyHash,\n    Assets,\n    Crypto,\n    TxInput,\n    bytesToHex,\n} from \"@hyperionbt/helios\";\nimport {\n    Activity,\n    StellarContract,\n    configBase,\n    isActivity,\n    partialTxn,\n    txn,\n} from \"../StellarContract.js\";\n\n//@ts-expect-error\nimport contract from \"./DefaultMinter.hl\";\nexport const MinterContract = contract\n\n//@ts-expect-error\nimport StellarHeliosHelpers from \"../StellarHeliosHelpers.hl\";\n\nimport { CapoMintHelpers } from \"../CapoMintHelpers.js\";\n\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport {\n    MintUutActivityArgs,\n    MinterBaseMethods,\n    hasUutContext,\n    uutPurposeMap,\n} from \"../Capo.js\";\nimport { SeedTxnParams } from \"../SeedTxn.js\";\nimport { valuesEntry } from \"../HeliosPromotedTypes.js\";\nimport { CapoDelegateHelpers } from \"../delegation/CapoDelegateHelpers.js\";\nimport {\n    RelativeDelegateLink,\n    UutName,\n} from \"../delegation/RolesAndDelegates.js\";\nimport { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport { mkUutValuesEntries, mkValuesEntry } from \"../utils.js\";\nimport { dumpAny } from \"../diagnostics.js\";\nimport { DefaultCapo } from \"../DefaultCapo.js\";\n\ntype MintCharterActivityArgs<T = {}> = T & {\n    owner: Address;\n};\n\nexport type BasicMinterParams = SeedTxnParams & {\n    capo: DefaultCapo<any, any,any>\n}\n\n/**\n * A basic minting validator serving a Capo's family of contract scripts\n * @remarks\n * \n * Mints charter tokens based on seed UTxOs.  Can also mint UUTs and \n * other tokens as approved by the Capo's minting delegate.\n* @public\n **/\nexport class DefaultMinter\n    extends StellarContract<BasicMinterParams>\n    implements MinterBaseMethods\n{\n    contractSource() {\n        return contract;\n    }\n    getContractScriptParams(config: BasicMinterParams): configBase & SeedTxnParams {\n        const {seedIndex, seedTxn} = config\n\n        return { seedIndex, seedTxn }\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        return [\n            //prettier-ignore\n            StellarHeliosHelpers,\n            CapoDelegateHelpers,\n            CapoMintHelpers,\n            this.configIn!.capo.specializedCapo,\n            this.configIn!.capo.capoHelpers,\n        ];\n    }\n\n\n    //!!! todo: fold args 2 & 4, allowing either array or map but not both.\n    @partialTxn\n    async txnWillMintUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES,purposes>,\n        const ROLES extends string & keyof RM = string & keyof RM\n    >(\n        tcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo: TxInput,\n        //@ts-expect-error\n        roles: RM = {} as Record<string, purposes>,\n    ): Promise<\n        hasUutContext<ROLES | purposes> & existingTcx \n    > {\n        const { txId, utxoIdx } = seedUtxo.outputId;\n\n        const { blake2b } = Crypto;\n\n        const uutMap: uutPurposeMap<ROLES | purposes> = Object.fromEntries(\n            uutPurposes.map((uutPurpose) => {\n                const txoId = txId.bytes.concat([\"@\".charCodeAt(0), utxoIdx]);\n                // console.warn(\"&&&&&&&& txoId\", bytesToHex(txoId));\n                const uutName = new UutName(\n                    uutPurpose,\n                    `${uutPurpose}-${bytesToHex(blake2b(txoId).slice(0, 6))}`\n                );\n                return [uutPurpose, uutName];\n            })\n        ) as uutPurposeMap<ROLES | purposes>;\n        for (const [role, uutPurpose] of Object.entries(roles)) {\n            uutMap[role] = uutMap[uutPurpose as string];\n        }\n        \n        if (!tcx.state) tcx.state = {};\n        if (tcx.state.uuts) throw new Error(`uuts are already there`);\n        tcx.state.uuts = uutMap;\n\n        return tcx as hasUutContext<ROLES | purposes> & existingTcx \n    }\n\n    @txn\n    async mkTxnMintingUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM,\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput,\n        //@ts-expect-error\n        roles: RM = {} as Record<string, purposes>,\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx> {\n        const gettingSeed = seedUtxo\n            ? Promise.resolve<TxInput>(seedUtxo)\n            : new Promise<TxInput>((res) => {\n                  //!!! make it big enough to serve minUtxo for the new UUT(s)\n                  const uutSeed = this.mkValuePredicate(\n                      BigInt(42_000),\n                      initialTcx\n                  );\n\n                  this.mustFindActorUtxo(\n                      `seed-for-uut ${uutPurposes.join(\"+\")}`,\n                      uutSeed,\n                      initialTcx\n                  ).then(res);\n              });\n\n        return gettingSeed.then(async (seedUtxo) => {\n            const tcx = await this.txnWillMintUuts(\n                initialTcx,\n                uutPurposes,\n                seedUtxo,\n                roles,\n            );\n            const vEntries = mkUutValuesEntries(tcx.state.uuts);\n\n            tcx.addInput(seedUtxo);\n            const { txId: seedTxn, utxoIdx: seedIndex } = seedUtxo.outputId;\n            tcx.attachScript(this.compiledScript).mintTokens(\n                this.mintingPolicyHash!,\n                vEntries,\n                this.mintingUuts({\n                    seedTxn,\n                    seedIndex,\n                    purposes: uutPurposes,\n                }).redeemer\n            );\n\n            return tcx;\n        });\n    }\n\n    //! overrides base getter type with undefined not being allowed\n    get mintingPolicyHash(): MintingPolicyHash {\n        return super.mintingPolicyHash!;\n    }\n\n    @Activity.redeemer\n    protected mintingCharter({ owner }: MintCharterActivityArgs): isActivity {\n        const {mintingCharter} =this.onChainActivitiesType;\n        const { DelegateDetails: hlDelegateDetails } = this.onChainTypes;\n        const t = new mintingCharter(owner);\n\n        return { redeemer: t._toUplcData() };\n    }\n\n\n    @Activity.redeemer\n    protected mintingUuts({\n        seedTxn,\n        seedIndex: sIdx,\n        purposes,\n    }: MintUutActivityArgs): isActivity {\n        // debugger\n        const seedIndex = BigInt(sIdx);\n        console.log(\"UUT redeemer seedTxn\", seedTxn.hex);\n        const {mintingUuts} = this.onChainActivitiesType;\n        const t = new mintingUuts(\n            seedTxn,\n            seedIndex,\n            purposes\n        );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    get charterTokenAsValuesEntry(): valuesEntry {\n        return mkValuesEntry(\"charter\", BigInt(1));\n    }\n\n    tvCharter() {\n        const { mintingPolicyHash } = this;\n\n        const v = new Value(\n            undefined,\n            new Assets([[mintingPolicyHash, [this.charterTokenAsValuesEntry]]])\n        );\n        return v;\n    }\n\n    get charterTokenAsValue() {\n        console.warn(\n            \"deprecated use of `get minter.charterTokenAsValue`; use tvCharter() instead\"\n        );\n        return this.tvCharter();\n    }\n\n    @Activity.partialTxn\n    async txnMintingCharter<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        {\n            owner,\n            capoGov,\n            mintDgt,\n        }: {\n            owner: Address;\n            capoGov: UutName;\n            mintDgt: UutName;\n        }\n    ): Promise<TCX & StellarTxnContext<any>> {\n        const charterVE = this.charterTokenAsValuesEntry;\n        const capoGovVE = mkValuesEntry(capoGov.name, BigInt(1));\n        const mintDgtVE = mkValuesEntry(mintDgt.name, BigInt(1));\n\n        return tcx\n            .mintTokens(\n                this.mintingPolicyHash!,\n                [\n                    charterVE, \n                    capoGovVE,\n                    mintDgtVE\n                ],\n                this.mintingCharter({\n                    owner,\n                }).redeemer\n            )\n            .attachScript(this.compiledScript) as TCX;\n    }\n}\n","/**\n * Documents one specific requirement\n * @remarks\n *\n * Describes the purpose, details, and implementation mechanism for a single requirement for a unit of software.\n *\n * Also references any other requirements in the host ReqtsMap structure, whose behavior this requirement\n * depends on.  The details of those other dependencies, are delegated entirely to the other requirement, facilitating\n * narrowly-focused capture of for key expectations within each individual semantic expectation of a software unit's\n * behavior.\n *\n * @typeParam reqts - constrains `requires` entries to the list of requirements in the host ReqtsMap structure\n * @public\n **/\nexport type RequirementEntry<reqts extends string> = {\n    purpose: string;\n    details: string[];\n    mech: string[];\n    impl?: string; // todo: constrained to method names of the object meeting the requirements\n    requires?: reqts[];\n};\n\nconst TODO = Symbol(\"needs to be implemented\");\n/**\n * tags requirement that aren't yet implemented\n * @public\n **/\nexport type TODO_TYPE = typeof TODO;\n\n/**\n * Describes the requirements for a unit of software\n * @remarks\n *\n * A requirements map is a list of described requirements, in which each requirement\n * has a synopsis, a description of its purpose, descriptive detail, and technical requirements\n * for the mechanism used for implementation.  The mech strings should be usable as unit-test titles.\n *\n * use the hasReqts() helper method to declare a type-safe set of requirements following this data structure.\n *\n * Each requirement also has space for nested 'requires', without the need for deeply nested data structures;\n * these reference other requirements in the same hasReqts() data structure. As a result, high-level and detail-\n * level requirements and 'impl' details can have progressive levels of detail.\n *\n * @typeParam reqts - the list of known requirement names.  Implicitly detected by the hasReqts() helper.\n * @public\n **/\nexport type ReqtsMap<validReqts extends string> = {\n    [reqtDescription in validReqts]: TODO_TYPE | RequirementEntry<validReqts>;\n};\n\n\n/**\n * Factory for type-safe requirements details for a unit of software\n * @remarks\n * \n * return `hasReqts({... requirements})` from a requirements() or other method in a class, to express\n * requirements using a standardized form that supports arbitrary amounts of detailed requirements\n * with references to unit-test labels that can verify the impl details.\n *\n * You don't need to provide the type params or TS type annotations.  `requirements() { return hasReqts({...yourReqts}) }` will work fine.\n *\n * See the {@link ReqtsMap} and {@link RequirementEntry} types for more details about expressing requirements.\n *\n * NOTE: Type parameters are inferred from the provided data structure\n * @param reqtsMap - the ReqtsMap structure for the software unit\n * @public\n **/\nexport function hasReqts<\n    R extends ReqtsMap<validReqts>,\n    const validReqts extends string = string & keyof R\n>(reqtsMap: R): ReqtsMap<validReqts> {\n    return reqtsMap;\n}\n/** @public **/\nhasReqts.TODO = TODO;\n","import {\n    Address,\n    Assets,\n    Datum,\n    MintingPolicyHash,\n    TxId,\n    TxOutput,\n    TxInput,\n    Value,\n    AssetClass,\n    ValidatorHash,\n} from \"@hyperionbt/helios\";\nimport { BasicMinterParams, DefaultMinter } from \"./minting/DefaultMinter.js\";\nimport {\n    Activity,\n    StellarConstructorArgs,\n    StellarContract,\n    isActivity,\n    configBase,\n    partialTxn,\n    stellarSubclass,\n    ConfigFor,\n    txn,\n} from \"./StellarContract.js\";\nimport { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport {\n    ConfiguredDelegate,\n    SelectedDelegates,\n    DelegateConfigNeeded,\n    ErrorMap,\n    RoleMap,\n    SelectedDelegate,\n    VariantStrategy,\n    PartialParamConfig,\n    UutName,\n    RelativeDelegateLink,\n    capoDelegateConfig,\n    RoleInfo,\n    delegateLinkSerializer,\n} from \"./delegation/RolesAndDelegates.js\";\nimport { CapoDelegateHelpers } from \"./delegation/CapoDelegateHelpers.js\";\nimport { SeedTxnParams } from \"./SeedTxn.js\";\nimport { CapoMintHelpers } from \"./CapoMintHelpers.js\";\n//@ts-expect-error\nimport StellarHeliosHelpers from \"./StellarHeliosHelpers.hl\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { errorMapAsString } from \"./diagnostics.js\";\nimport { hasReqts } from \"./Requirements.js\";\nimport {\n    mkUutValuesEntries,\n    mkValuesEntry,\n    stringToNumberArray,\n} from \"./utils.js\";\nimport { DefaultCharterDatumArgs, MinimalDelegateLink } from \"./DefaultCapo.js\";\nimport { DelegationDetail } from \"./delegation/RolesAndDelegates.js\";\nimport { StellarDelegate } from \"./delegation/StellarDelegate.js\";\n\nexport type {\n    RoleMap,\n    strategyValidation,\n} from \"./delegation/RolesAndDelegates.js\";\n\n/**\n * strongly-typed map of purpose-names to Uut objects\n *\n * @public\n */\nexport type uutPurposeMap<unionPurpose extends string> = {\n    [purpose in unionPurpose]: UutName;\n};\n\n// export type hasSomeUuts<uutEntries extends string> = {\n//     uuts: Partial<uutPurposeMap<uutEntries>>;\n// };\n\n/**\n * used for transaction-context state having specific uut-purposes\n *\n * @public\n */\nexport type hasAllUuts<uutEntries extends string> = {\n    uuts: uutPurposeMap<uutEntries>;\n};\n\n/**\n * the uut-factory interface\n *\n * @public\n */\ninterface hasUutCreator {\n    txnWillMintUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo: TxInput,\n        roles?: RM\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx>;\n    mkTxnMintingUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput,\n        roles?: RM\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx>;\n}\n\n/**\n * UUT minting should always use these settings to guard for uniqueness\n *\n * @public\n */\nexport type MintUutActivityArgs = {\n    seedTxn: TxId;\n    seedIndex: bigint | number;\n    purposes: string[];\n};\n/**\n * A txn context having specifically-purposed UUTs in its state\n *\n * @public\n */\nexport type hasUutContext<uutEntries extends string> = StellarTxnContext<\n    hasAllUuts<uutEntries>\n>;\n\n/**\n * charter-minting interface\n *\n * @public\n */\nexport interface MinterBaseMethods extends hasUutCreator {\n    get mintingPolicyHash(): MintingPolicyHash;\n    txnMintingCharter<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        charterMintArgs: {\n            owner: Address;\n            capoGov: UutName;\n        },\n        tVal: valuesEntry\n    ): Promise<TCX & StellarTxnContext<any>>;\n}\n\nexport type anyDatumArgs = Record<string, any>;\n\nexport type rootCapoConfig = {\n    rootCapoScriptHash?: ValidatorHash;\n};\n\n//!!! todo: let this be parameterized for more specificity\nexport type CapoBaseConfig = configBase &\n    rootCapoConfig &\n    SeedTxnParams & {\n        mph: MintingPolicyHash;\n        rev: bigint;\n        bootstrapping?: true;\n    };\n\n/**\n * StellarTransactionContext exposing a bootstrapped Capo configuration\n * @remarks\n *\n * During first-time setup of a Capo contract, its manifest configuration details\n * should be captured for reproducibility, and this type allows the bootstrap\n * transaction to expose that configuration.\n *\n * Capo's {@link Capo.mkTxnMintCharterToken | mkTxnMintCharterToken()} returns a transaction context\n * of this type, with `state.bootstrappedConfig`;\n * @public\n **/\nexport type hasBootstrappedConfig<CT extends CapoBaseConfig> =\n    StellarTxnContext<{\n        bsc: CT;\n        bootstrappedConfig: any;\n    }>;\n\ntype PreconfiguredDelegate<T extends StellarDelegate<any>> = Omit<\n    ConfiguredDelegate<T>,\n    \"delegate\" | \"delegateValidatorHash\"\n>;\n\n/**\n * Base class for the leader of a set of contracts\n * @remarks\n *\n * A Capo contract provides a central contract address that can act as a treasury or data registry;\n * it can mint tokens using its connected minting-policy, and it can delegate policies to other contract\n * scripts.  Subclasses of Capo can use these capabilities in custom ways for strong flexibility.\n *\n * Any Capo contract can (and must) define delegateRoles() to establish collaborating scripts; these are used for\n * separating granular responsbilities for different functional purposes within your (on-chain and off-chain)\n * application; this approach enables delegates to use any one of multiple strategies with different\n * functional logic to serve in any given role, thus providing flexibility and extensibility.\n *\n * The delegation pattern uses UUTs, which are non-fungible / unique utility tokens.  See DefaultCapo for more about them.\n *\n * **Capo is a foundational class**; you should consider using DefaultCapo as a starting point,\n * unless its govAuthority role conflicts with your goals.\n *\n * Inherits from: {@link StellarContract}\\<`configType`\\> (is this a redundant doc entry?) .\n *\n * @typeParam minterType - allows setting a different contract (script & off-chain class) for the minting policy\n * @typeParam charterDatumType - specifies schema for datum information held in the Capo's primary or \"charter\" UTXO\n * @typeParam configType - specifies schema for details required to pre-configure the contract suite, or to reproduce it in a specific application instance.\n * @public\n */\nexport abstract class Capo<\n        minterType extends MinterBaseMethods & DefaultMinter = DefaultMinter,\n        charterDatumType extends anyDatumArgs = anyDatumArgs,\n        configType extends CapoBaseConfig = CapoBaseConfig\n    >\n    extends StellarContract<configType>\n    implements hasUutCreator\n{\n    abstract get delegateRoles(): RoleMap<any>;\n    abstract verifyCoreDelegates(): Promise<any>;\n    verifyConfigs(): Promise<any> {\n        return this.verifyCoreDelegates();\n    }\n    abstract mkFullConfig(baseConfig: CapoBaseConfig): configType;\n    get isConfigured(): Promise<boolean> {\n        if (!this.configIn) return Promise.resolve(false);\n        if (this._verifyingConfigs) return this._verifyingConfigs;\n        return Promise.resolve(true);\n    }\n    _verifyingConfigs?: Promise<any>;\n    constructor(args: StellarConstructorArgs<CapoBaseConfig>) {\n        //@ts-expect-error spurious \"could be instantiated with a different subtype\"\n        super(args);\n\n        const {\n            scriptDatumName: onChainDatumName,\n            scriptActivitiesName: onChainActivitiesName,\n        } = this;\n\n        const { CharterToken } = this.onChainDatumType;\n        const { updatingCharter, usingAuthority } = this.onChainActivitiesType;\n\n        if (!CharterToken)\n            throw new Error(\n                `datum type ${onChainDatumName} must have a 'CharterToken' variant`\n            );\n        if (!updatingCharter)\n            throw new Error(\n                `activities type ${onChainActivitiesName} must have a 'updatingCharter' variant`\n            );\n        if (!usingAuthority)\n            throw new Error(\n                `activities type${onChainActivitiesName} must have a 'usingAuthority' variant`\n            );\n\n        if (this.configIn && !this.configIn.bootstrapping) {\n            this._verifyingConfigs = this.verifyConfigs().then((r) => {\n                this._verifyingConfigs = undefined;\n                return r;\n            });\n        }\n    }\n    static bootstrapWith(args: StellarConstructorArgs<CapoBaseConfig>) {\n        const { setup, config } = args;\n        const Class = this;\n        //@ts-expect-error this is just Javascript.  Sorry, typescript!\n        return new Class({ setup, config: { ...config, bootstrapping: true } });\n    }\n    abstract contractSource(): HeliosModuleSrc;\n    abstract mkDatumCharterToken(args: charterDatumType): InlineDatum;\n    // abstract txnMustUseCharterUtxo(\n    //     tcx: StellarTxnContext,\n    //     newDatum?: InlineDatum\n    // ): Promise<TxInput | never>;\n\n    get minterClass(): stellarSubclass<DefaultMinter, BasicMinterParams> {\n        return DefaultMinter;\n    }\n\n    minter?: minterType;\n    @partialTxn\n    txnWillMintUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo: TxInput,\n        //@ts-expect-error\n        roles: RM = {} as Record<string, purposes>\n    ): Promise<existingTcx & hasUutContext<ROLES | purposes>> {\n        return this.minter!.txnWillMintUuts(\n            initialTcx,\n            uutPurposes,\n            seedUtxo,\n            roles\n        );\n    }\n\n    @txn\n    async mkTxnMintingUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput,\n        //@ts-expect-error\n        roles: RM = {} as Record<string, purposes>\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx> {\n        const tcx = await this.minter!.mkTxnMintingUuts(\n            initialTcx,\n            uutPurposes,\n            seedUtxo,\n            roles\n        );\n        return tcx;\n    }\n    // P extends paramsBase = SC extends StellarContract<infer P> ? P : never\n\n    /**\n     * returns a value representing the provided UUT(s)\n     * @remarks\n     *\n     * The inputs can be of a few forms - see the overload variants\n     * @param uutMap - a set of UUTs, all of which will be represented in the returned value\n     * @param tcx - a transaction context, whose `state.uuts` will be processed as in the `uutMap` variant\n     * @param uutName - a UutName object representinga single UUT\n     * @public\n     **/\n    uutsValue(uutMap: uutPurposeMap<any>): Value;\n    uutsValue(tcx: hasUutContext<any>): Value;\n    uutsValue(uutName: UutName): Value;\n    uutsValue(x: UutName | uutPurposeMap<any> | hasUutContext<any>): Value {\n        const uutMap =\n            x instanceof StellarTxnContext\n                ? x.state.uuts!\n                : x instanceof UutName\n                ? { single: x }\n                : x;\n        const vEntries = mkUutValuesEntries(uutMap);\n\n        return new Value(\n            undefined,\n            new Assets([[this.mintingPolicyHash!, vEntries]])\n        );\n    }\n\n    @Activity.redeemer\n    usingAuthority(): isActivity {\n        const { usingAuthority } = this.onChainActivitiesType;\n        if (!usingAuthority) {\n            throw new Error(\n                `invalid contract without a usingAuthority redeemer`\n            );\n        }\n        const t = new usingAuthority();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    protected abstract updatingCharter(args: charterDatumType): isActivity;\n\n    tvCharter() {\n        return this.minter!.tvCharter();\n    }\n\n    get charterTokenAsValue() {\n        console.warn(\n            \"deprecated get charterTokenAsValue; use tvCharter() instead\"\n        );\n        return this.tvCharter();\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        return [StellarHeliosHelpers, CapoDelegateHelpers, CapoMintHelpers];\n    }\n\n    /**\n     * Initiates a seeding transaction, creating a new Capo contract of this type\n     * @remarks\n     *\n     * The returned transaction context has `state.bootstrappedConfig` for\n     * capturing the details for reproducing the contract's settings and on-chain\n     * address.\n     *\n     * @param charterDatumArgs - initial details for the charter datum\n     * @param tcx - any existing transaction context\n     * @typeParam TCX - inferred type of a provided transaction context\n     * @public\n     **/\n    abstract mkTxnMintCharterToken<TCX extends StellarTxnContext>(\n        charterDatumArgs: Partial<charterDatumType>,\n        existingTcx?: TCX\n    ): Promise<\n        | never\n        | (TCX &\n              // & hasUutContext<\"govAuthority\" | \"capoGov\" | \"mintDelegate\" | \"mintDgt\">\n              hasBootstrappedConfig<CapoBaseConfig & configType>)\n    >;\n\n    get charterTokenPredicate() {\n        const predicate = this.mkTokenPredicate(this.tvCharter());\n\n        return predicate;\n    }\n\n    //! forms a Value with minUtxo included\n    tokenAsValue(tokenName: string | UutName, count: bigint = 1n) {\n        const { mph } = this;\n\n        const tn = tokenName.toString();\n        return this.mkMinTv(mph, tn, count);\n    }\n\n    async mustFindCharterUtxo() {\n        const predicate = this.mkTokenPredicate(this.tvCharter());\n\n        return this.mustFindMyUtxo(\"charter\", predicate, \"has it been minted?\");\n    }\n\n    abstract txnAddGovAuthority<TCX extends StellarTxnContext<any>>(\n        tcx: TCX\n    ): Promise<TCX & StellarTxnContext<any>>;\n\n    async txnMustUseCharterUtxo<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        redeemer: isActivity,\n        newDatum?: InlineDatum\n    ): Promise<TCX>;\n    async txnMustUseCharterUtxo<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        useReferenceInput: \"refInput\" | true,\n        forceAddRefScript?: true\n    ): Promise<TCX>;\n    @partialTxn // non-activity partial\n    async txnMustUseCharterUtxo<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        redeemerOrRefInput: isActivity | \"refInput\" | true,\n        newDatumOrForceRefScript?: InlineDatum | true\n    ): Promise<TCX> {\n        return this.mustFindCharterUtxo().then(async (ctUtxo: TxInput) => {\n            // await this.txnAddCharterAuthz(\n            //     tcx,\n            //     ctUtxo.origOutput.datum as InlineDatum\n            // );\n\n            if (\n                true === redeemerOrRefInput ||\n                \"refInput\" === redeemerOrRefInput\n            ) {\n                // using reference-input has been requested\n                if (\n                    newDatumOrForceRefScript &&\n                    true !== newDatumOrForceRefScript\n                )\n                    throw new Error(\n                        `when using reference input for charter, arg3 can only be true (or may be omitted)`\n                    );\n                tcx.tx.addRefInput(\n                    ctUtxo,\n                    newDatumOrForceRefScript ? this.compiledScript : undefined\n                );\n            } else {\n                // caller requested to **spend** the charter token with a speciic activity / redeemer\n                const redeemer = redeemerOrRefInput;\n                const newDatum = newDatumOrForceRefScript;\n                if (true === newDatum)\n                    throw new Error(\n                        `wrong type for newDatum when not using reference input for charter`\n                    );\n                tcx.addInput(ctUtxo, redeemer).attachScript(\n                    this.compiledScript\n                );\n                const datum =\n                    newDatum || (ctUtxo.origOutput.datum as InlineDatum);\n\n                this.txnKeepCharterToken(tcx, datum);\n            }\n            return tcx;\n        });\n    }\n\n    @partialTxn // non-activity partial\n    async txnUpdateCharterUtxo(\n        tcx: StellarTxnContext,\n        redeemer: isActivity,\n        newDatum: InlineDatum\n    ): Promise<StellarTxnContext | never> {\n        // this helper function is very simple.  Why have it?\n        //   -> its 3rd arg is required,\n        //   -> and its name gives a more specific meaning.\n        return this.txnMustUseCharterUtxo(tcx, redeemer, newDatum);\n    }\n\n    @partialTxn // non-activity partial\n    txnKeepCharterToken(tcx: StellarTxnContext<any>, datum: InlineDatum) {\n        const txo = new TxOutput(this.address, this.tvCharter(), datum);\n        txo.correctLovelace(this.networkParams);\n        tcx.addOutput(txo);\n\n        return tcx;\n    }\n\n    /**\n     * adds the charter-token, along with its gov **`authZor`** UUT, to a transaction context\n     * @remarks\n     *\n     * The charter-token is included as a reference input.\n     *\n     * @param tcx - the transaction context\n     * @public\n     **/\n    //!!! todo: If the Capo's mintDelegate is using the (TODO) \"undelegated\" strategy, this method can be used (?)\n    // ... to approve token-minting by the authority of the gov authZor\n    @partialTxn\n    async txnAddCharterAuthorityTokenRef<TCX extends StellarTxnContext<any>>(\n        tcx: TCX\n    ): Promise<TCX & StellarTxnContext<any>> {\n        const tcx2 = await this.txnMustUseCharterUtxo(tcx, \"refInput\");\n\n        const tcx3 = await this.txnAddGovAuthority(tcx2);\n        return tcx3;\n    }\n\n    /**\n     * provides minter-targeted params extracted from the input configuration\n     * @remarks\n     *\n     * extracts the seed-txn details that are key to parameterizing the minter contract\n     * @public\n     **/\n    getMinterParams() {\n        const { seedTxn, seedIndex } = this.configIn!;\n        return { seedTxn, seedIndex };\n    }\n    getCapoRev() {\n        return 1n;\n    }\n\n    /**\n     * extracts from the input configuration the key details needed to construct/reconstruct the on-chain contract address\n     * @remarks\n     *\n     * extracts the details that are key to parameterizing the Capo / leader's on-chain contract script\n     * @public\n     **/\n    getContractScriptParams(\n        config: configType\n    ): configBase & Partial<configType> {\n        if (this.configIn && config.mph && !config.mph.eq(this.mph))\n            throw new Error(`mph mismatch`);\n        const { mph } = config;\n        const rev = this.getCapoRev();\n        // console.log(\"this treasury uses mph\", mph?.hex);\n\n        //@ts-expect-error because TS only sees the abstract configType, not its constraint's props\n        return {\n            mph,\n            rev,\n        };\n    }\n    connectMinter() {\n        return this.minter || this.connectMintingScript(this.getMinterParams());\n    }\n    get mph() {\n        return this.connectMinter().mintingPolicyHash!;\n    }\n\n    get mintingPolicyHash() {\n        return this.mph;\n    }\n\n    connectMintingScript(params: SeedTxnParams): minterType {\n        if (this.minter)\n            throw new Error(`just use this.minter when it's already present`);\n        const { minterClass } = this;\n        const { seedTxn, seedIndex } = params;\n        const { mph: expectedMph } = this.configIn || {};\n\n        const minter = this.addStrellaWithConfig(minterClass, {\n            seedTxn,\n            seedIndex,\n            //@ts-expect-error - subclassing Capo in a different way than DefaultCapo\n            //   isn't actively supported yet\n            capo: this,\n        });\n        if (expectedMph && !minter.mintingPolicyHash.eq(expectedMph)) {\n            throw new Error(\n                `This minter script with this seed-utxo doesn't produce the required  minting policy hash\\n`\n                + \"expected: \"+ expectedMph.hex +\"\\nactual: \"+minter.mintingPolicyHash.hex\n            );\n        } else if (!expectedMph) {\n            console.log(`${this.constructor.name}: seeding new minting policy`);\n        }\n        const { mintingCharter, mintingUuts } = minter.onChainActivitiesType;\n        if (!mintingCharter)\n            throw new Error(\n                `minting script doesn't offer required 'mintingCharter' activity-redeemer`\n            );\n        if (!mintingUuts)\n            throw new Error(\n                `minting script doesn't offer required 'mintingUuts' activity-redeemer`\n            );\n\n        //@ts-ignore-error - can't seem to indicate to typescript that minter's type can be relied on to be enough\n        return (this.minter = minter);\n    }\n\n    /**\n     * Finds a sufficient-sized utxo for seeding one or more named tokens\n     * @remarks\n     *\n     * For allocating a charter token (/its minter), one or more UUTs, or other token name(s)\n     * to be minted, this function calculates the size of minUtxo needed for all the needed tokens,\n     * assuming they'll each be stored in separate utxos.  It then finds and returns a UTxO from the\n     * current actor's wallet.  The utxo is NOT added to the transaction.\n     *\n     * When the transaction context already has some utxo's being consumed, they're not\n     * eligible for selection.\n     *\n     * If the transaction doesn't store the new tokens in separate utxos, any spare lovelace\n     * are returned as change in the transaction.\n     *\n     * @param tcx - transaction context\n     * @param purpose - a descriptive purpose used during utxo-finding in case of problems\n     * @param tokenNames - the token names to be seeded.\n     * @public\n     **/\n    async txnMustGetSeedUtxo(\n        tcx: StellarTxnContext,\n        purpose: string,\n        tokenNames: string[]\n    ): Promise<TxInput | never> {\n        //! given a Capo-based contract instance having a free TxInput to seed its validator address,\n        //! prior to initial on-chain creation of contract,\n        //! it finds that specific TxInput in the current user's wallet.\n\n        const fakeMph = new MintingPolicyHash([]);\n\n        const totalMinUtxoValue = tokenNames.reduce(\n            addTokenValue.bind(this),\n            new Value(0n)\n        );\n        //! accumulates min-utxos for each stringy token-name in a reduce()\n        function addTokenValue(\n            this: Capo<any>,\n            accumulator: Value,\n            tn: string\n        ): Value {\n            const vMin = this.mkMinTv(fakeMph, tn);\n            return accumulator.add(vMin);\n        }\n\n        const uutSeed = this.mkValuePredicate(totalMinUtxoValue.lovelace, tcx);\n        const seedUtxo = await this.mustFindActorUtxo(\n            purpose,\n            uutSeed,\n            tcx\n        ).catch((x) => {\n            throw x;\n        });\n\n        const { txId: seedTxn, utxoIdx } = seedUtxo.outputId;\n        const seedIndex = BigInt(utxoIdx);\n        const count =\n            tokenNames.length > 1 ? `${tokenNames.length} uuts for ` : \"\";\n        console.log(\n            `Seed tx for ${count}${purpose}: ${seedTxn.hex.slice(\n                0,\n                8\n            )}…${seedTxn.hex.slice(-4)}#${seedIndex}`\n        );\n        return seedUtxo;\n    }\n\n    mockMinter?: minterType;\n\n    /**\n     * Creates a new delegate link, given a delegation role and and strategy-selection details\n     * @remarks\n     *\n     * Combines partal and implied configuration settings, validating the resulting configuration.\n     *\n     * The resulting \"relative\" delegate link can be used directly in a Datum field of type RelativeDelegateLink\n     * or can be stored off-chain in any way suitable for your dApp.\n     *\n     * To get a full DelegateSettings object, use txnCreateDelegateSettings() instead.\n     *\n     * @reqt throws DelegateConfigNeeded with an `errors` entry\n     *   ... if there are any problems in validating the net configuration settings.\n     * @reqt EXPECTS the `tcx` to be minting a UUT for the delegation,\n     *   ... whose UutName can be found in `tcx.state.uuts[roleName]`\n     * @reqt combines base settings from the selected delegate class's `defaultParams`\n     *   ... adding the delegateRoles()[roleName] configuration for the selected roleName,\n     *   ... along with any explicit `config` from the provided `delegateInfo`\n     *   ... and automatically applies a `uut` setting.\n     *   ... The later properties in this sequence take precedence.\n     *\n     * @param tcx - A transaction-context\n     * @param roleName - the role of the delegate, matched with the `delegateRoles()` of `this`\n     * @param delegateInfo - partial detail of the delegation, with `strategyName` and any other\n     *     details required by the particular role.  Its delegate type must be matchy with the type indicated by the `roleName`.\n     * @public\n     **/\n    async txnCreateDelegateLink<\n        DT extends StellarDelegate,\n        const RN extends string\n    >(\n        tcx: hasUutContext<RN>,\n        roleName: RN,\n        delegateInfo: MinimalDelegateLink<DT> = { strategyName: \"default\" }\n    ) {\n        const configured = this.txnCreateConfiguredDelegate(\n            tcx,\n            roleName,\n            delegateInfo\n        );\n        await configured.delegate.txnReceiveAuthorityToken(\n            tcx,\n            this.mkMinTv(this.mph, tcx.state.uuts[roleName])\n        );\n\n        return this.relativeLink(configured);\n    }\n\n    relativeLink<DT extends StellarDelegate<any>>(\n        configured: ConfiguredDelegate<DT>\n    ): RelativeDelegateLink<DT> {\n        const {\n            strategyName,\n            delegateValidatorHash,\n            uutName,\n            config,\n        }: // addrHint,  //moved to config\n        // reqdAddress,  // removed\n        RelativeDelegateLink<DT> = configured;\n\n        return {\n            strategyName,\n            uutName,\n            delegateValidatorHash,\n            config,\n            // addrHint,  //moved to config\n            // reqdAddress,  // removed\n        };\n    }\n\n    /**\n     * Returns a complete set of delegate settings, given a delegation role and strategy-selection details\n     * @remarks\n     *\n     * Behaves exactly like (and provides the core implementation of) {@link Capo.txnCreateDelegateLink | txnCreateDelegateLink()},\n     * returning additional `roleName` and `delegateClass`, to conform with the DelegateSettings type.\n     *\n     * See txnCreateDelegateLink for further details.\n     * @public\n     **/\n    txnCreateConfiguredDelegate<\n        DT extends StellarDelegate<any>,\n        const RN extends string\n    >(\n        tcx: hasUutContext<RN>,\n        roleName: RN & keyof this[\"delegateRoles\"],\n        delegateInfo: MinimalDelegateLink<DT> = { strategyName: \"default\" }\n    ): ConfiguredDelegate<DT> {\n        const { strategyName, config: selectedConfig = {} } = delegateInfo;\n\n        const { delegateRoles } = this;\n        const uut = tcx.state.uuts[roleName];\n        const impliedDelegationDetails = this.mkImpliedDelegationDetails(uut);\n\n        const foundStrategies = \n            delegateRoles[roleName] as RoleInfo<DT, any, any, RN>; //prettier-ignore\n        const selectedStrategy = foundStrategies.variants[\n            strategyName\n        ] as VariantStrategy<DT>;\n        if (!selectedStrategy) {\n            let msg = `invalid strategyName '${strategyName}' for role '${roleName}'`;\n            if (strategyName == \"default\") {\n                msg = `no selected or default delegate for role '${roleName}'.  Specify strategyName`;\n            }\n            const e = new DelegateConfigNeeded(msg, {\n                errorRole: roleName,\n                availableStrategies: Object.keys(foundStrategies.variants),\n            });\n            throw e;\n        }\n        const { delegateClass, validateConfig } = selectedStrategy;\n        const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;\n\n        const scriptParamsFromStrategyVariant =\n            selectedStrategy.partialConfig || {};\n        const mergedConfig: ConfigFor<DT> = {\n            ...defaultParamsFromDelegateClass,\n            ...(scriptParamsFromStrategyVariant || {}),\n            ...selectedConfig,\n            ...impliedDelegationDetails,\n        } as unknown as ConfigFor<DT>;\n\n        //! it validates the net configuration so it can return a working config.\n        const errors: ErrorMap | undefined =\n            validateConfig && validateConfig(mergedConfig);\n        if (errors) {\n            throw new DelegateConfigNeeded(\n                `validation errors in delegateInfo.config for ${roleName} '${strategyName}':\\n` +\n                    errorMapAsString(errors),\n                { errors }\n            );\n        }\n\n        const delegateSettings: PreconfiguredDelegate<DT> = {\n            ...delegateInfo,\n            roleName,\n            delegateClass,\n            uutName: uut.name,\n            config: mergedConfig,\n        };\n        let delegate: DT = this.mustGetDelegate(delegateSettings);\n\n        // const reqdAddress = delegate.delegateReqdAddress();\n        // if (reqdAddress) {\n        //     delegateSettings.reqdAddress = reqdAddress;\n        // } else {\n        //     const addrHint = delegate.delegateAddrHint();\n        //     if (addrHint) {\n        //         delegateSettings.addrHint = addrHint;\n        //     }\n        // }\n        const { delegateValidatorHash } = delegate;\n        const pcd: ConfiguredDelegate<DT> = {\n            ...delegateSettings,\n            delegateValidatorHash,\n            delegate,\n        };\n        return pcd;\n    }\n\n    mkImpliedDelegationDetails(uut: UutName): DelegationDetail {\n        return {\n            capoAddr: this.address,\n            mph: this.mph,\n            tn: stringToNumberArray(uut.name),\n        };\n    }\n\n    #_delegateCache: {\n        [roleName: string]: {\n            [delegateLink: string]: StellarDelegate<any>;\n        };\n    } = {};\n\n    // get connectDelegate()\n    async connectDelegateWithLink<\n        DelegateType extends StellarDelegate<any>,\n        configType extends (\n            DelegateType extends StellarContract<infer c> ? c : configBase //prettier-ignore\n         ) = DelegateType extends StellarContract<infer c> ? c : configBase //prettier-ignore\n    >(\n        roleName: string,\n        delegateLink: RelativeDelegateLink<DelegateType>\n    ): Promise<DelegateType> {\n        const cache = this.#_delegateCache;\n\n        const cacheKey = JSON.stringify(\n            delegateLink,\n            delegateLinkSerializer,\n            4\n        );\n        // console.log(`   ----- delegate '${roleName}' cache key `, cacheKey);\n        if (!cache[roleName]) cache[roleName] = {};\n        const roleCache = cache[roleName];\n        const cachedRole = roleCache[cacheKey];\n        if (cachedRole) {\n            // console.log(  \"   <---- cached delegate\");\n            return cachedRole as DelegateType;\n        }\n        const role = this.delegateRoles[roleName];\n        //!!! work on type-safety with roleName + available roles\n        const {\n            strategyName,\n            uutName,\n            delegateValidatorHash: edvh,\n            // addrHint,  //moved to config\n            // reqdAddress,  // removed\n            config: linkedConfig,\n        } = delegateLink;\n        const selectedStrat = role.variants[\n            strategyName\n        ] as unknown as ConfiguredDelegate<DelegateType>;\n        if (!selectedStrat) {\n            throw new Error(\n                `mismatched strategyName '${strategyName}' in delegate link for role '${roleName}'\\n` +\n                    `  ...available strategies: ${Object.keys(\n                        role.variants\n                    ).join(\", \")}.\\n\\n link details: ${this.showDelegateLink(\n                        delegateLink\n                    )}`\n            );\n        }\n        const { delegateClass, config: stratSettings } = selectedStrat;\n        const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;\n        const impliedDelegationDetails = this.mkImpliedDelegationDetails(\n            new UutName(roleName, uutName)\n        );\n\n        //@xxxts-expect-error because this stack of generically partial\n        //  ... config elements isn't recognized as adding up to a full config type.\n        const config: configType = {\n            ...defaultParamsFromDelegateClass,\n            ...stratSettings,\n            // addrHint,  //moved to config\n            // reqdAddress,  // removed\n            ...linkedConfig,\n            ...impliedDelegationDetails,\n        };\n        //configured delegate:\n        // delegateClass: stellarSubclass<DT>;\n        //!  //  delegate: DT // omitted in \"pre-configured\";\n        // roleName: string;\n        // config: ConfigFor<DT>;\n        //... from relativeDelegateLink:\n        //      uutName: string;\n        //      strategyName: string;\n        //      config: Partial<ConfigFor<T>>;\n        //      reqdAddress?: Address;\n        //      addrHint?: Address[];\n\n        const delegate = this.mustGetDelegate({\n            delegateClass,\n            config,\n            roleName,\n            uutName,\n            strategyName,\n            // reqdAddress,\n            // addrHint,\n        });\n        const dvh = delegate.delegateValidatorHash;\n        if (edvh && dvh && !edvh.eq(dvh)) {\n            throw new Error(\n                `${this.constructor.name}: ${roleName}: mismatched delegate: expected validator ${edvh?.hex}, got ${dvh.hex}`\n            );\n        }\n        console.log(\n            `    <--- caching first instance of delegate ${roleName} @ key = ${cacheKey}`\n        );\n        roleCache[cacheKey] = delegate;\n        return delegate;\n    }\n\n    private showDelegateLink(delegateLink: RelativeDelegateLink<any>) {\n        return JSON.stringify(delegateLink, null, 2);\n    }\n\n    mustGetDelegate<T extends StellarDelegate<any>>(\n        configuredDelegate: PreconfiguredDelegate<T>\n    ): T {\n        const { delegateClass, config } = configuredDelegate;\n        try {\n            // delegate\n            const configured = this.addStrellaWithConfig(delegateClass, config);\n            return configured as T;\n        } catch (e: any) {\n            const t = e.message.match(/invalid parameter name '([^']+)'$/);\n\n            const [_, badParamName] = t || [];\n            if (badParamName) {\n                throw new DelegateConfigNeeded(\n                    \"configuration error while parameterizing contract script\",\n                    { errors: { [badParamName]: e.message } }\n                );\n            }\n            throw e;\n        }\n    }\n\n    tvForDelegate(dgtLink: RelativeDelegateLink<any>) {\n        return this.tokenAsValue(dgtLink.uutName)\n    }\n    mkDelegatePredicate(dgtLink: RelativeDelegateLink<any>) {\n        return this.mkTokenPredicate(this.tvForDelegate(dgtLink))\n    }\n\n    capoRequirements() {\n        return hasReqts({\n            \"is a base class for leader/Capo pattern\": {\n                purpose:\n                    \"so that smart contract developers can easily start multi-script development\",\n                details: [\n                    \"Instantiating a Capo contract always uses the seed-utxo pattern for uniqueness.\",\n                    \"Subclassing Capo with no type-params gives the default minter,\",\n                    \"  ... which only allows UUTs to be created\",\n                    \"Subclassing Capo<CustomMinter> gives an overloaded minter,\",\n                    \"  ... which must allow UUT minting and may allow more Activities too.\",\n                ],\n                mech: [\n                    \"provides a default minter\",\n                    \"allows the minter class to be overridden\",\n                ],\n            },\n            \"can create unique utility tokens\": {\n                purpose:\n                    \"so the contract can use UUTs for scoped-authority semantics\",\n                details: [\n                    \"That UUT (a Value) is returned, and then should be added to a TxOutput.\",\n                    \"The partial-helper doesn't constrain the semantics of the UUT.\",\n                    \"The uniqueness level can be iterated in future as needed.\",\n                    \"The UUT's token-name combines its textual purpose with a short hash \",\n                    \"   ... of the seed UTxO, formatted with bech32\",\n                ],\n                mech: [\n                    \"Building a txn with a UUT involves using the txnMintingUuts partial-helper on the Capo.\",\n                    \"Fills tcx.state.uuts with purpose-keyed unique token-names\",\n                    \"The UUT uses the seed-utxo pattern to form 64 bits of uniqueness, so that token-names stay short-ish.\",\n                ],\n            },\n            \"supports the Delegation pattern using roles and strategy-variants\":\n                {\n                    purpose: \"enables structured modularity and extensibility\",\n                    details: [\n                        \"A Capo constellation can declare a set of roles to be filled in the contract logic.\",\n                        \"The roles are typed, so that implementers of extensibility can know \",\n                        \"  ... which capabilities their plugins need to provide\",\n                        \"Each role should be filled by a StellarContract class, \",\n                        \"  ... which is required at the time it is needed during creation of a transaction.\",\n                        \"Each role should normally provide a base implementation \",\n                        \"  ... of a delegate that can serve the role.\",\n                        \"Strategies, strategy-variants, or simple 'variants' are all similar ways \",\n                        \"  ... of indicating different named plugins that can serve a particular role.\",\n                        \"Variant-names are human-readable, while the actual code\",\n                        \"  ... behind each variant name are the strategies\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"supports well-typed role declarations and strategy-adding\",\n                        \"supports just-in-time strategy-selection using txnCreateDelegateLink()\",\n                        \"given a configured delegate-link, it can create a ready-to-use Stellar subclass with all the right settings\",\n                        \"supports concrete resolution of existing role delegates\",\n                    ],\n                },\n            \"supports well-typed role declarations and strategy-adding\": {\n                purpose:\n                    \"for plugin implementers to have a clear picture of what to implement\",\n                details: [\n                    \"Each Capo class may declare a roles data structure.\",\n                    \"GOAL: The required type for each role must be matched when adding a plugin class serving a role\",\n                    \"A dApp using a Capo class can add strategy variants by subclassing\",\n                ],\n                mech: [\n                    \"Capo EXPECTS a synchronous getter for 'delegateRoles' to be defined\",\n                    \"Capo provides a default 'delegateRoles' having no specific roles (or maybe just minter - TBD)\",\n                    \"Subclasses can define their own get delegateRoles(), return a role-map-to-variant-map structure\",\n                ],\n                requires: [\n                    \"Each role uses a RoleVariants structure which can accept new variants\",\n                ],\n            },\n            \"supports just-in-time strategy-selection using txnCreateDelegateLink()\":\n                {\n                    purpose:\n                        \"enabling each transaction to select appropriate plugins for its contextual needs\",\n                    details: [\n                        \"When a transaction having an extensibility-point is being created,\",\n                        \"  ... it SHOULD require an explicit choice of the delegate to use in that role.\",\n                        \"When a 'mkTxn‹DoesThings›' method creates a new role-delegated UTxO, \",\n                        \"  ... it sets essential configuration details for the delegation \",\n                        \"  ... including a specific UUT that provides a linking mechanism for the delegate\",\n                        \"The delegate contract, including its address and/or reference-script UTxO \",\n                        \"  ... and/or its parameters and its StellarContract class, MUST be captured \",\n                        \"  ... so that it can be easily resolved and used/referenced\",\n                        \"  .... during a later transaction whose UTxO-spending is governed by the delegate contract.\",\n                        \"When the delegate serving the role is selected, \",\n                        \"  ... that delegate will be manifested as a concrete pair of StellarContract subclass \",\n                        \"  ... and contract address.  The contract address MAY be pre-existing \",\n                        \"  ... or be instantiated as a result of the delegation details.\",\n                    ],\n                    mech: [\n                        \"txnCreateDelegateLink(tcx, role, delegationSettings) method configures a new delegate\",\n                        \"txnCreateDelegateLink() will use a 'default' delegate strategy\",\n                        \"If there is no delegate configured (or defaulted) for the needed role, txnCreateDelegateLink throws a DelegateConfigNeeded error.\",\n                        \"If the strategy-configuration doesn't match available variants, the DelegateConfigNeeded error offers suggested strategy-names\",\n                        \"If the strategy-configuration has any configuration problems, the DelegateConfigNeeded error contains an 'errors' object\",\n                        \"txnCreateDelegateSettings(tcx, role, delegationSettings) returns the delegate link plus a concreted delegate instance\",\n                    ],\n                },\n            \"given a configured delegate-link, it can create a ready-to-use Stellar subclass with all the right settings\":\n                {\n                    purpose:\n                        \"allows the known facts about a delegate to be resolved to working SC class\",\n                    details: [\n                        \"A delegate link created by txnCreateDelegateLink(), can be captured in different ways\",\n                        \"  ... e.g. as a Datum property in a contract, \",\n                        \"  ... or in any off-chain way.\",\n                        \"A dApp then reconstitutes this key information to a StellarContract, \",\n                        \"  ... enabling simple multi-contract collaboration\",\n                    ],\n                    mech: [\n                        \"mustGetDelegate(configuredDelegate) method retrieves a configured delegate\",\n                    ],\n                },\n\n            \"Each role uses a RoleVariants structure which can accept new variants\":\n                {\n                    purpose:\n                        \"provides a type-safe container for adding strategy-variants to a role\",\n                    details: [\n                        \"Adding a strategy variant requires a human-readable name for the variant\",\n                        \"  ... and a reference to the StellarContract class implementing that variant.\",\n                        \"Each variant may indicate a type for its configuration data-structure\",\n                        \"  ... and may include a factory function accepting a data-structure of that type.\",\n                        \"TBD: base configuration type?  Capo txn-builders supporting utxo-creation can provide baseline details of the base type, \",\n                        \"  ... with additional strategy-specific details provided in the transaction-context.\",\n                        \"When adding strategies, existing variants cannot be removed or replaced.\",\n                    ],\n                    mech: [\n                        \"RoleVariants has type-parameters indicating the baseline types & interfaces for delegates in that role\",\n                        \"TODO: variants can augment the delegateRoles object without removing or replacing any existing variant\",\n                    ],\n                    requires: [\n                        \"provides a Strategy type for binding a contract to a strategy-variant name\",\n                    ],\n                },\n            \"provides a Strategy type for binding a contract to a strategy-variant name\":\n                {\n                    purpose:\n                        \"has all the strategy-specific bindings between a variant and the contract delegate\",\n                    details: [\n                        \"When adding a contract as a delegate serving in a role, its name\",\n                        \"  ... and its Strategy binding creates the connection between the host contract (suite) \",\n                        \"  ... and the StellarContract subclass implementing the details of the strategy.\",\n                        \"The Strategy and its underlying contract are type-matched\",\n                        \"  ... with the interface needed by the Role.\",\n                        \"The Strategy is a well-typed structure supporting \",\n                        \"  ... any strategy-specific configuration details (script parameters)\",\n                        \"  ... and validation of script parameters\",\n                    ],\n                    mech: [\n                        \"Each strategy must reference a type-matched implementation class\",\n                        \"Each strategy may define scriptParams always used for that strategy\",\n                        \"Each strategy may defer the definition of other script-params to be defined when a specific delegation relationship is being created\",\n                        \"Each strategy must define a validateScriptParams(allScriptParams) function, returning an errors object if there are problems\",\n                        \"validateScriptParams() should return undefined if there are no problems\",\n                    ],\n                    requires: [\n                        \"supports concrete resolution of existing role delegates\",\n                    ],\n                },\n            \"supports concrete resolution of existing role delegates\": {\n                purpose:\n                    \"so that transactions involving delegated responsibilities can be executed\",\n                details: [\n                    \"When a transaction needs to involve a UTxO governed by a delegate contract\",\n                    \"   ... the need for that delegate contract is signalled through Capo callbacks \",\n                    \"   ... during the transaction-building process.\",\n                    \"Those callbacks contain key information, such as role-name, parameters, and address\",\n                    \"  ... needed in the collaboration to find the correct concrete delegate.\",\n                    \"Once the delegate is resolved to a configured StellarContract class, \",\n                    \"   ... its established transaction-building interface is triggered, \",\n                    \"   ... augmenting the transaction with the correct details, \",\n                    \"   ... and enabling the right on-chain behaviors / verifications\",\n                    \"The Strategy adapter is expected to return the proper delegate with its matching address.\",\n                ],\n                mech: [\n                    \"TODO: with an existing delegate, the selected strategy class MUST exactly match the known delegate-address\",\n                ],\n            },\n        });\n    }\n}\n","import {\n    Datum,\n    TxInput,\n    ValidatorHash,\n    Value,\n    bytesToText,\n} from \"@hyperionbt/helios\";\nimport {\n    Activity,\n    StellarContract,\n    configBase,\n    datum,\n} from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { mkTv } from \"../utils.js\";\nimport { InlineDatum } from \"../HeliosPromotedTypes.js\";\nimport { DelegationDetail, capoDelegateConfig } from \"./RolesAndDelegates.js\";\nimport { hasReqts } from \"../Requirements.js\";\nimport { dumpAny } from \"../diagnostics.js\";\n\n/**\n * Base class for modules that can serve as Capo delegates\n * @public\n * @remarks\n *\n * establishes a base protocol for delegates.\n * @typeParam CT - type of any specialized configuration; use capoDelegateConfig by default.\n **/\n\nexport abstract class StellarDelegate<\n    CT extends configBase & capoDelegateConfig = capoDelegateConfig,\n    DCCT extends Record<string, any> | string = string\n> extends StellarContract<CT> {\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev };\n    }\n\n    /**\n     * Finds and adds the delegate's authority token to the transaction\n     * @remarks\n     *\n     * calls the delegate-specific DelegateAddsAuthorityToken() method,\n     * with the uut found by DelegateMustFindAuthorityToken().\n     *\n     * returns the token back to the contract using {@link StellarDelegate.txnReceiveAuthorityToken | txnReceiveAuthorityToken() }\n     * @param tcx - transaction context\n     * @public\n     **/\n    async txnGrantAuthority<TCX extends StellarTxnContext<any>>(tcx: TCX) {\n        const label = `${this.constructor.name} authority`;\n        const uutxo = await this.DelegateMustFindAuthorityToken(\n            tcx,\n            label\n        );\n        const authorityVal = this.tvAuthorityToken();\n\n        console.log(`   ------- delegate ${label} grants authority with ${dumpAny(authorityVal)}`)\n\n        try {\n            const tcx2 = await this.DelegateAddsAuthorityToken(tcx, uutxo);\n            return this.txnReceiveAuthorityToken(\n                tcx2,\n                authorityVal,\n                uutxo\n            );\n        } catch(error: any) {\n            if (error.message.match(/input already added/)) {\n                throw new Error(`Delegate ${label}: already added: ${dumpAny(authorityVal)}`)\n            }\n            throw error\n        }\n    }\n\n    /**\n     * Finds the authority token and adds it to the transaction, tagged for retirement\n     * @public\n     * @remarks\n     * Doesn't return the token back to the contract.\n     **/\n    async txnRetireAuthorityToken<TCX extends StellarTxnContext<any>>(\n        tcx: TCX\n    ) {\n        const uutxo = await this.DelegateMustFindAuthorityToken(\n            tcx,\n            `${this.constructor.name} authority`\n        );\n        return this.DelegateRetiresAuthorityToken(tcx, uutxo);\n    }\n\n    /**\n     * Standard delegate method for receiving the authority token as a txn output\n     * @remarks\n     *\n     * creates a UTxO / TxOutput, depositing the indicated token-name into the delegated destination.\n     *\n     * Each implemented subclass can use it's own style to match its strategy & mechanism,\n     * and is EXPECTED to use tcx.addOutput() to receive the indicated `tokenValue` into the\n     * contract or other destination address.\n     *\n     * This method is used both for the original deposit and for returning the token during a grant-of-authority.\n     *\n     * Impls should normally preserve the datum from an already-present sourceUtxo, possibly with evolved details.\n     *\n     * @param tcx - transaction-context\n     * @param tokenValue - the Value of the token that needs to be received.  Always includes\n     *   the minUtxo needed for this authority token\n     * @param fromFoundUtxo - always present when the authority token already existed; can be\n     *   used to duplicate or iterate on an existing datum, or to include any additional Value in the new\n     *   UTxO, to match the previous UTxO with minimal extra heuristics\n     * @public\n     **/\n\n    abstract txnReceiveAuthorityToken<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        tokenValue: Value,\n        // delegateAddr: Address,\n        fromFoundUtxo?: TxInput\n    ): Promise<TCX>;\n\n    /**\n     * redeemer for exercising the authority of this delegate via its authority UUT\n     * @public\n     * @remarks\n     *\n     * The Authorizing redeemer indicates that the delegate is authorizing (certain parts of)\n     * a transaction.\n     *\n     **/\n    @Activity.redeemer\n    activityAuthorizing() {\n        const thisActivity = this.mustGetActivity(\"Authorizing\");\n        const t = new thisActivity();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * redeemer for spending the authority UUT for burning it.\n     * @public\n     * @remarks\n     *\n     * The Retiring redeemer indicates that the delegate is being\n     * removed.\n     *\n     **/\n    @Activity.redeemer\n    activityRetiring() {\n        const thisActivity = this.mustGetActivity(\"Retiring\");\n        const t = new thisActivity();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * creates the essential datum for a delegate UTxO\n     * @remarks\n     *\n     * Every delegate is expected to have a two-field 'IsDelegation' variant\n     * in the first position of its on-chain Datum type.  This helper method\n     * constructs a suitable UplcData structure, given appropriate inputs.\n     * @param dd - Delegation details\n     * @public\n     **/\n    @datum\n    mkDatumIsDelegation(\n        dd: DelegationDetail,\n        ...args: DCCT extends string ? [string] | [] : [DCCT]\n    ): InlineDatum {\n        const [customConfig = \"\"] = args;\n        const { IsDelegation } = this.onChainDatumType;\n        const { DelegationDetail } = this.onChainTypes;\n        const t = new IsDelegation(new DelegationDetail(dd), customConfig);\n        return Datum.inline(t._toUplcData());\n    }\n    /**\n     * returns the ValidatorHash of the delegate script, if relevant\n     * @public\n     * @remarks\n     *\n     * A delegate that doesn't use an on-chain validator should override this method and return undefined.\n     **/\n    get delegateValidatorHash(): ValidatorHash | undefined {\n        if (!this.compiledScript.validatorHash) {\n            throw new Error(\n                `${this.constructor.name}: address doesn't use a validator hash!\\n`+\n                `  ... if that's by design, you may wish to override 'get delegateValidatorHash()' -> undefined`\n            );\n        }\n        return this.compiledScript.validatorHash;\n    }\n\n    mkAuthorityTokenPredicate() {\n        return this.mkTokenPredicate(this.tvAuthorityToken())\n    }\n    tvAuthorityToken() {\n        if (!this.configIn)\n            throw new Error(`must be instantiated with a configIn`);\n\n        const {\n            mph,\n            tn,\n            // reqdAddress,  // removed\n        } = this.configIn;\n        return mkTv(mph, tn);\n    }\n\n    /**\n     * Finds the delegate authority token, normally in the delegate's contract address\n     * @public\n     * @remarks\n     *\n     * The default implementation finds the UTxO having the authority token\n     * in the delegate's contract address.\n     *\n     * It's possible to have a delegate that doesn't have an on-chain contract script.\n     * ... in this case, the delegate should use this.{@link StellarDelegate.tvAuthorityToken | tvAuthorityToken()} and a\n     * delegate-specific heuristic to locate the needed token.  It might consult the\n     * addrHint in its `configIn` or another technique for resolution.\n     *\n     * @param tcx - the transaction context\n     * @reqt It MUST resolve and return the UTxO (a TxInput type ready for spending)\n     *  ... or throw an informative error\n     **/\n    async DelegateMustFindAuthorityToken(\n        tcx: StellarTxnContext<any>,\n        label: string\n    ): Promise<TxInput> {\n        return this.mustFindMyUtxo(\n            `${label}: ${bytesToText(this.configIn!.tn)}`,\n            this.mkTokenPredicate(this.tvAuthorityToken()),\n            \"this delegate strategy might need to override txnMustFindAuthorityToken()\"\n        );\n    }\n\n    /**\n     * Adds the delegate's authority token to a transaction\n     * @public\n     * @remarks\n     * Given a delegate already configured by a Capo, this method implements\n     * transaction-building logic needed to include the UUT into the `tcx`.\n     * the `utxo` is discovered by {@link StellarDelegate.DelegateMustFindAuthorityToken | DelegateMustFindAuthorityToken() }\n     * \n     * The default implementation adds the `uutxo` to the transaction \n     * using {@link StellarDelegate.activityAuthorizing | activityAuthorizing() }.\n     * \n     * The off-chain code shouldn't need to check the details; it can simply\n     * arrange the details properly and spend the delegate's authority token, \n     * using this method.\n     * \n     * ### Reliance on this delegate\n     * \n    * Other contract scripts can rely on the delegate script to have validated its \n     * on-chain policy and enforced its own \"return to the delegate script\" logic.\n     * \n     * ### Enforcing on-chain policy\n     * \n     * When spending the authority token in this way, the delegate's authority is typically \n     * narrowly scoped, and it's expected that the delegate's on-chain script validates that \n     * those parts of the transaction detail should be authorized, in accordance with the \n     * delegate's core purpose/responsbility - i.e. that the txn does all of what the delegate \n     * expects, and none of what it shouldn't do in that department.\n     * \n     * The on-chain code SHOULD typically enforce:\n     *  * that the token is spent with Authorizing activity (redeemer).  NOTE:\n     *     the **CapoDelegateHelpers** helios module provides the `requiresDelegateAuthorizing()` \n     *     function for just this purpose\n    \n     *  * that the authority token is returned to the contract with its datum unchanged \n     *  * that any other tokens it may also hold in the same UTxO do not become \n     *     inaccessible as a result of the transactions - perhaps by requiring them to be \n     *     returned together with the authority token.\n     * \n     * It MAY enforce additional requirements as well.\n     *\n     * @example\n     * A minting delegate should check that all the expected tokens are \n     * minted, AND that no other tokens are minted.  \n     * \n     * @example\n     * A role-based authentication/signature-checking delegate can \n     * require an appropriate signature on the txn.\n     * \n    * @param tcx - the transaction context\n    * @param utxo - the utxo having the authority UUT for this delegate\n    * @reqt Adds the uutxo to the transaction inputs with appropriate redeemer.\n    * @reqt Does not output the value; can EXPECT txnReceiveAuthorityToken to be called for that purpose.\n     **/\n    protected async DelegateAddsAuthorityToken<\n        TCX extends StellarTxnContext<any>\n    >(tcx: TCX, uutxo: TxInput) {\n        return tcx\n            .addInput(\n                uutxo,\n                this\n                    .activityAuthorizing\n                    //!!!!! todo: include tagged info on which specific activity is being authorized\n                    ()\n            )\n            .attachScript(this.compiledScript);\n\n        // return this.txnKeepValue(\n        //     tcx,\n        //     uutxo.value,\n        //     uutxo.origOutput.datum as InlineDatum\n        // );\n    }\n\n    /**\n     * Adds any important transaction elemements supporting the authority token being retired, closing the delegate contracts' utxo.\n     * @remarks\n     *\n     * EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n     *\n     * EXPECTS the `burn` instruction to be separately added to the transaction.\n     *\n     * The default implementation uses the conventional `Retiring` activity\n     * to spend the token.\n     *\n     * @reqt\n     * It MUST add the indicated utxo to the transaction as an input\n     *\n     * @reqt\n     * When backed by a contract:\n     *   * it should use an activity/redeemer allowing the token to be spent\n     *      **and NOT returned**.\n     *   * the contract script SHOULD ensure any other UTXOs it may also hold, related to this delegation,\n     *      do not become inaccessible as a result.\n     *\n     * It MAY enforce additional requirements and/or block the action.\n     *\n     *\n     * @param tcx - transaction context\n     * @param fromFoundUtxo - the utxo having the authority otken\n     * @public\n     **/\n    protected async DelegateRetiresAuthorityToken(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext> {\n        const utxo = fromFoundUtxo;\n        return tcx.addInput(\n            new TxInput(utxo.outputId, utxo.origOutput),\n            this.activityRetiring()\n        );\n    }\n\n    /**\n     * Captures requirements as data\n     * @remarks\n     *\n     * see reqts structure\n     * @public\n     **/\n    delegateRequirements() {\n        return hasReqts({\n            \"provides an interface for providing arms-length proof of authority to any other contract\":\n                {\n                    purpose:\n                        \"to decouple authority administration from its effects\",\n                    details: [\n                        \"Any contract can create a UUT for use with an authority policy.\",\n                        \"By depositing that UUT to the authority contract, it can delegate completely\",\n                        \"  ... all the implementation details for administration of the authority itself.\",\n                        \"It can then focus on implementing the effects of authority, requiring only \",\n                        \"  ... that the correct UUT has been spent, to indicate that the authority is granted.\",\n                        \"The authority contract can have its own internal details \",\n                        \"A subclass of this authority policy may provide additional administrative dynamics.\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"implementations SHOULD positively govern spend of the UUT\",\n                        \"implementations MUST provide an essential interface for transaction-building\",\n                    ],\n                },\n\n            \"implementations SHOULD positively govern spend of the UUT\": {\n                purpose: \"for sufficient assurance of desirable safeguards\",\n                details: [\n                    \"A subclass of the GenericAuthority should take care of guarding the UUT's spend\",\n                    \"  ... in whatever way is appropriate for its use-case\",\n                ],\n                mech: [],\n                requires: [],\n            },\n\n            \"implementations MUST provide an essential interface for transaction-building\":\n                {\n                    purpose:\n                        \"enabling a strategy-agnostic interface for making transactions using any supported strategy-variant\",\n                    details: [\n                        \"Subclasses MUST implement the interface methods\",\n                        \"  ... in whatever way is considered appropriate for its use-case.\",\n                        \"An interface method whose requirement is marked with 'MAY/SHOULD' behavior, \",\n                        \"  ... MUST still implement the method satisfying the interface, \",\n                        \"  ... but MAY throw an UnsupportedAction error, to indicate that\",\n                        \"  ... the strategy variant has no meaningful action to perform \",\n                        \"  ... that would serve the method's purpose\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"requires a txnReceiveAuthorityToken(tcx, delegateAddr, fromFoundUtxo?)\",\n                        \"requires a mustFindAuthorityToken(tcx)\",\n                        \"requires a txnGrantAuthority(tcx, delegateAddr, fromFoundUtxo)\",\n                        \"requires txnRetireCred(tcx, fromFoundUtxo)\",\n                    ],\n                },\n\n            \"requires a txnReceiveAuthorityToken(tcx, delegateAddr, fromFoundUtxo?)\":\n                {\n                    purpose:\n                        \"to deposit the authority token (back) to the delegated destination\",\n                    details: [\n                        \"impls MUST implement txnReceiveAuthorityToken\",\n                        \"Each implemented subclass can use it's own style to match its strategy & mechanism\",\n                        \"This is used both for the original deposit and for returning the token during a grant-of-authority\",\n                    ],\n                    mech: [\n                        \"impls MUST create a UTxO depositing the indicated token-name into the delegated destination.\",\n                        \"impls should normally preserve the datum from an already-present sourceUtxo\",\n                    ],\n                    requires: [],\n                },\n\n            \"requires a mustFindAuthorityToken(tcx)\": {\n                purpose: \"to locate the given authority token\",\n                details: [\n                    \"allows different strategies for finding the UTxO having the authority token\",\n                    \"impls MAY use details seen in the txn context to find the indicated token\",\n                ],\n                mech: [\n                    \"impls MUST resolve the indicated token to a specific UTxO or throw an informative error\",\n                ],\n            },\n\n            \"requires a txnGrantAuthority(tcx, delegateAddr, fromFoundUtxo)\": {\n                purpose: \"to use the delegated authority\",\n                details: [\n                    \"Adds the indicated utxo to the transaction with appropriate activity/redeemer\",\n                    \"Contracts needing the authority within a transaction can rely on the presence of this spent authority\",\n                    \"Impls can EXPECT the token will be returned via txnReceiveAuthorityToken\",\n                    \"a contract-backed impl SHOULD enforce the expected return in its on-chain code\",\n                ],\n                mech: [\n                    \"the base AuthorityPolicy MUST call txnReceiveAuthorityToken() with the token's sourceUtxo\",\n                ],\n            },\n\n            \"requires txnRetireCred(tcx, fromFoundUtxo)\": {\n                purpose: \"to allow burning the authority token\",\n                details: [\n                    \"Adds the indicated utxo to the transaction with appropriate activity/redeemer\",\n                    \"  ... allowing the token to be burned by the minting policy.\",\n                    \"Impls SHOULD ensure any other UTXOs it may hold do not become inaccessible as a result\",\n                ],\n                mech: [\n                    \"impls MUST add the token to the txn if it can be retired\",\n                    \"if the token cannot be retired, by appropriate policy, it SHOULD throw an informative error\",\n                ],\n            },\n        });\n    }\n}\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport { HeliosModuleSrc } from \"lib/HeliosModuleSrc.js\";\nimport basics from \"./UnspecializedMintDelegate.hl\";\n\nexport const UnspecializedMintDelegate: HeliosModuleSrc = basics;\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport { HeliosModuleSrc } from \"lib/HeliosModuleSrc.js\";\nimport basics from \"./UnspecializedCapo.hl\";\n\nexport const UnspecializedCapo: HeliosModuleSrc = basics;\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport ch from \"./CapoHelpers.hl\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\nexport const CapoHelpers: HeliosModuleSrc = ch;\n","import {\n    Address,\n    AssetClass,\n    Datum,\n    TxInput,\n    TxOutput,\n    Value,\n} from \"@hyperionbt/helios\";\n\n//@ts-expect-error because TS can't import non-ts content : /\nimport contract from \"./BasicMintDelegate.hl\";\n//@ts-expect-error because TS can't import non-ts content : /\nimport StellarHeliosHelpers from \"../StellarHeliosHelpers.hl\";\n\nimport {\n    Activity,\n    StellarContract,\n    configBase,\n    datum,\n} from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport {\n    DelegationDetail,\n    capoDelegateConfig,\n} from \"../delegation/RolesAndDelegates.js\";\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\nimport { InlineDatum } from \"../HeliosPromotedTypes.js\";\nimport { CapoDelegateHelpers } from \"../delegation/CapoDelegateHelpers.js\";\nimport { CapoMintHelpers } from \"../CapoMintHelpers.js\";\nimport { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport { UnspecializedMintDelegate } from \"./UnspecializedMintDelegate.js\";\nimport { UnspecializedCapo } from \"../UnspecializedCapo.js\";\nimport { CapoHelpers } from \"../CapoHelpers.js\";\n\nexport type MintDelegateArgs = capoDelegateConfig & {\n    rev: bigint;\n};\n\n//!!! TODO: include adapter(s) for Datum, which has the same essential shape\ntype MintDelegateDatumProps = {\n    tokenName: string;\n    maxMintSize: bigint;\n};\n\n/**\n * Serves a delegated minting-policy role for Capo contracts\n * @remarks\n * \n * shifts detailed minting policy out of the minter and into the delegate.\n * @public\n **/\nexport class BasicMintDelegate extends StellarDelegate<MintDelegateArgs> {\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev };\n    }\n\n    contractSource() {\n        return contract;\n    }\n\n    /**\n     * specializedMintDelegate module for customizing policies atop the basic mint delegate\n     * @public\n     * @remarks\n     * \n     * The basic mint delegate contains an \"unspecialized\" implementation of this customization,\n     * which doesn't have any special restrictions.  It reserves a CustomConfig field\n     * at position 2 in the IsDelegation datum, allowing customizations to use any \n     * struct in that position to express any custom configurations.  \n     **/\n    get specializedMintDelegate(): HeliosModuleSrc {\n        return UnspecializedMintDelegate;\n    }\n\n    get specializedCapo(): HeliosModuleSrc {\n        return UnspecializedCapo;\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        const specializedMintDelegate = this.specializedMintDelegate;\n        if (specializedMintDelegate.moduleName !== \"specializedMintDelegate\") {\n            throw new Error(\n                `${this.constructor.name}: specializedMintDelegate() module name must be ` +\n                    `'specializedMintDelegate', not '${specializedMintDelegate.moduleName}'\\n  ... in ${specializedMintDelegate.srcFile}`\n            );\n        }\n\n        return [\n            StellarHeliosHelpers,\n            CapoDelegateHelpers,\n            CapoHelpers,\n            CapoMintHelpers,\n            specializedMintDelegate,\n            this.specializedCapo\n        ];\n    }\n\n    get scriptDatumName() {\n        return \"MintDelegateDatum\";\n    }\n    get scriptActivitiesName() {\n        return \"MintDelegateActivity\";\n    }\n\n    getContractScriptParams(config: MintDelegateArgs): configBase {\n        return {\n            rev: config.rev,\n        };\n    }\n\n    /**\n     * Adds a mint-delegate-specific authority token to the txn output\n     * @remarks\n     * \n     * Implements {@link StellarDelegate.txnReceiveAuthorityToken | txnReceiveAuthorityToken() }.\n     * \n     * Uses {@link BasicMintDelegate.mkDelegationDatum | mkDelegationDatum()} to make the inline Datum for the output.\n     * @see {@link StellarDelegate.txnReceiveAuthorityToken | baseline txnReceiveAuthorityToken()'s doc }\n     * @public\n     **/\n    async txnReceiveAuthorityToken<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        tokenValue: Value,\n        fromFoundUtxo?: TxInput\n    ): Promise<TCX> {\n        console.log(\n            `     ----- minting delegate validator receiving mintDgt token at `+\n            this.address.validatorHash!.hex\n        )\n        // const ffu = fromFoundUtxo;\n        // const v : Value = ffu?.value || this.mkMinAssetValue(this.configIn!.uut);\n        const datum = this.mkDelegationDatum(fromFoundUtxo);\n        return tcx.addOutput(new TxOutput(this.address, tokenValue, datum));\n    }\n\n    mkDelegationDatum(txin?: TxInput) {\n        if (txin) return txin.origOutput.datum!;\n        const { capoAddr, mph, tn, ..._otherCfgSettings } = this.configIn!;\n\n        return this.mkDatumIsDelegation({\n            capoAddr,\n            mph,\n            tn,\n        });\n    }\n\n    @Activity.partialTxn\n    async txnCreatingTokenPolicy(tcx: StellarTxnContext, tokenName: string) {\n        return tcx;\n    }\n\n    static mkDelegateWithArgs(a: MintDelegateArgs) {}\n}\n","import { capoDelegateConfig } from \"../delegation/RolesAndDelegates.js\";\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\n\n/**\n * Generic class as base for pure authorization\n * @remarks\n * \n * This isn't different from StellarDelegate, but\n * using it as a base class more specific than \"any delegate\"\n * gives useful semantics for Capo's govAuthority role\n * @public\n **/\nexport abstract class AuthorityPolicy<\n    T extends capoDelegateConfig = capoDelegateConfig\n> extends StellarDelegate<T> {\n\n}\n","import {\n    Address,\n    AssetClass,\n    Assets,\n    TxInput,\n    TxOutput,\n    Value,\n    bytesToText,\n} from \"@hyperionbt/helios\";\nimport { SeedTxnParams } from \"../SeedTxn.js\";\nimport {\n    Activity,\n    StellarContract,\n    isActivity,\n    partialTxn,\n} from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\nimport { AuthorityPolicy } from \"./AuthorityPolicy.js\";\n\n/**\n * Token-based authority\n * @remarks\n * \n * Transferrable authority using a unique token and no smart-contract.\n * \n * This simple strategy relies entirely on the presence of a specific, unique token\n * held in a wallet.  Authorizing activities using this strategy requires diligent review\n * by the person controlling the wallet, since it has no enforced validation logic.\n * \n * @public\n **/\nexport class AnyAddressAuthorityPolicy extends AuthorityPolicy {\n    loadProgramScript(params) {\n        return undefined;\n    }\n    \n\n    get delegateValidatorHash() {\n        return undefined\n    }\n\n    @Activity.redeemer\n    protected usingAuthority(): isActivity {\n        const { usingAuthority } = this.onChainActivitiesType;\n        if (!usingAuthority) {\n            throw new Error(\n                `invalid contract without a usingAuthority activity`\n            );\n        }\n        const t = new usingAuthority();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    //! impls MUST resolve the indicated token to a specific UTxO\n    //  ... or throw an informative error\n    async DelegateMustFindAuthorityToken(tcx: StellarTxnContext<any>, label: string): Promise<TxInput> {\n        const v = this.tvAuthorityToken()\n        const {addrHint} = this.configIn!\n\n        return this.mustFindActorUtxo(\n            `${label}: ${bytesToText(this.configIn!.tn)}`,\n            this.mkTokenPredicate(v),\n            tcx,\n            \"are you connected to the right wallet address? \" +\n                (addrHint?.length\n                    ? \"  maybe at:\\n    \" + addrHint.join(\"\\n or \")\n                    : \"\")\n        );\n    }\n\n    async txnReceiveAuthorityToken<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        tokenValue: Value,\n        fromFoundUtxo: TxInput\n    ): Promise<TCX> {\n        let dest : Address;\n        if (fromFoundUtxo) { \n            dest = fromFoundUtxo.address\n        } else {\n            if (!this.configIn?.addrHint?.[0])\n                throw new Error(\n                    `missing addrHint`\n                );\n            const {\n                addrHint,\n                // reqdAddress,  // removed\n            } = this.configIn;\n            dest = addrHint[0]\n        }\n\n        const output = new TxOutput(dest, tokenValue);\n        output.correctLovelace(this.networkParams);\n        tcx.addOutput(output);\n\n        return tcx;\n    }\n\n    //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    async DelegateAddsAuthorityToken<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        fromFoundUtxo: TxInput\n    ): Promise<TCX & StellarTxnContext<any>> {\n        //! no need to specify a redeemer\n        return tcx.addInput(fromFoundUtxo);\n    }\n\n    //! Adds the indicated utxo to the transaction with appropriate activity/redeemer\n    //  ... allowing the token to be burned by the minting policy.\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    async DelegateRetiresAuthorityToken(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext> {\n        //! no need to specify a redeemer\n        return tcx.addInput(fromFoundUtxo);\n    }\n}\n","import { Address, AssetClass, TxInput, Value } from \"@hyperionbt/helios\";\n\n//@ts-expect-error\nimport contract from \"./MultisigAuthorityPolicy.hl\";\nexport const MultisigAuthorityScript = contract;\n\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { hasReqts } from \"../Requirements.js\";\nimport { AuthorityPolicy } from \"./AuthorityPolicy.js\";\n\n//! a contract enforcing policy for a registered credential\nexport class MultisigAuthorityPolicy extends AuthorityPolicy {\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev };\n    }\n    contractSource() {\n        return contract;\n    }\n\n    // @Activity.partialTxn\n    // async txnFresheningCredInfo(\n    //     tcx: StellarTxnContext,\n    //     tokenName: string\n    // ): Promise<StellarTxnContext> {\n    //     return tcx\n    // }\n\n    async txnReceiveAuthorityToken<\n        TCX extends StellarTxnContext<any>\n    >(\n        tcx: TCX, \n        val: Value, \n        fromFoundUtxo?: TxInput | undefined\n    ): Promise<TCX> {\n        throw new Error(`todo`)        \n    }\n\n    //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer\n    async DelegateAddsAuthorityToken<TCX extends StellarTxnContext<any>>(\n        tcx: TCX,\n        fromFoundUtxo: TxInput\n    ): Promise<TCX & StellarTxnContext<any>> {\n        throw new Error(`todo`)\n        return tcx;\n    }\n\n    //! Adds the indicated utxo to the transaction with appropriate activity/redeemer\n    //  ... allowing the token to be burned by the minting policy.\n    async DelegateRetiresAuthorityToken(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext> {\n        return tcx;\n    }\n\n    requirements() {\n        return hasReqts({\n            \"provides arms-length proof of authority to any other contract\": {\n                purpose:\n                    \"to decouple authority administration from its effects\",\n                details: [\n                    \"See GenericAuthority for more background on authority delegation.\",\n                    \"This policy uses a trustee list and minSigs threshold to provide multisig-based authority\",\n                ],\n                mech: [],\n                requires: [\n                    \"positively governs spend of the UUT\",\n                    \"the trustee threshold is required to spend its UUT\",\n                    \"the trustee group can be changed\",\n                ],\n            },\n            \"positively governs spend of the UUT\": {\n                purpose: \"to maintain clear control by a trustee group\",\n                details: [\n                    // descriptive details of the requirement (not the tech):\n                    \"a trustee group is defined during contract creation\",\n                    \"the trustee list's signatures provide consent\",\n                    \"the trustee group can evolve by consent of the trustee group\",\n                    \"a threshold set of the trustee group can give consent for the whole group\",\n                ],\n                mech: [\n                    // descriptive details of the chosen mechanisms for implementing the reqts:\n                    \"the UUT has a trustee list in its Datum structure\",\n                    \"the UUT has a threshold setting in its Datum structure\",\n                    \"the Settings datum is updated when needed to reflect new trustees/thresholds\",\n                ],\n                requires: [\n                    \"TODO: has a unique authority UUT\",\n                    \"TODO: the trustee threshold is required to spend its UUT\",\n                    \"TODO: the trustee group can be changed\",\n                ],\n            },\n            \"TODO: has a unique authority UUT\": hasReqts.TODO,\n            \"TODO: the trustee threshold is required to spend its UUT\":\n                hasReqts.TODO,\n            \"TODO: the trustee group can be changed\": hasReqts.TODO,\n\n            \"the trustee threshold is required to spend its UUT\": {\n                purpose:\n                    \"allows progress in case a small fraction of trustees may not be available\",\n                details: [\n                    \"A group can indicate how many of the trustees are required to provide their explicit approval\",\n                    \"If a small number of trustees lose their keys, this allows the remaining trustees to directly regroup\",\n                    \"For example, they can replace the trustee list with a new set of trustees and a new approval threshold\",\n                    \"Normal day-to-day administrative activities can also be conducted while a small number of trustees are on vacation or otherwise temporarily unavailable\",\n                ],\n                mech: [\n                    \"TODO: doesn't allow the UUT to be spent without enough minSigs from the trustee list\",\n                ],\n                requires: [],\n            },\n\n            \"the trustee group can be changed\": {\n                purpose: \"to ensure administrative continuity for the group\",\n                details: [\n                    \"When the needed threshold for administrative modifications is achieved, the Settings datum can be updated\",\n                    \"When changing trustees, it should guard against mistakes in the new trustee list, \",\n                    \"  ... by validating signatures of the new trustees\",\n                    \"  ... and by validating new minSigs\",\n                ],\n                mech: [\n                    \"TODO: trustee list can be changed if the signature threshold is met\",\n                    \"TODO: the new trustees must sign any change of trustees\",\n                    \"TODO: does not allow minSigs to exceed the number of trustees\",\n                ],\n                requires: [],\n            },\n        });\n    }\n}\n","import {\n    Address,\n    Program,\n    Tx,\n    UplcProgram,\n    TxOutput,\n    Value,\n    //@ts-expect-error\n    Option,\n    Datum,\n    Wallet,\n    TxInput,\n    DatumHash,\n    ByteArray,\n    Assets,\n    TxId,\n    UplcData,\n    Signature,\n    AssetClass,\n    ValidatorHash,\n    MintingPolicyHash,\n} from \"@hyperionbt/helios\";\n\nimport {\n    Activity,\n    configBase,\n    ConfigFor,\n    datum,\n    isActivity,\n    partialTxn,\n    StellarContract,\n    stellarSubclass,\n    txn,\n} from \"./StellarContract.js\";\nimport { InlineDatum } from \"./HeliosPromotedTypes.js\";\n\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\n\n//@ts-expect-error\nimport contract from \"./DefaultCapo.hl\";\nexport { contract }\n// import contract from \"./BaselineCapo.hl\";\nimport {\n    Capo,\n    CapoBaseConfig,\n    hasBootstrappedConfig,\n    hasUutContext,\n    rootCapoConfig,\n} from \"./Capo.js\";\nimport { DefaultMinter } from \"./minting/DefaultMinter.js\";\nimport {\n    ErrorMap,\n    delegateRoles,\n    RelativeDelegateLink,\n    RoleMap,\n    strategyValidation,\n    defineRole,\n    delegateLinkSerializer,\n} from \"./delegation/RolesAndDelegates.js\";\nimport { BasicMintDelegate } from \"./minting/BasicMintDelegate.js\";\nimport { AnyAddressAuthorityPolicy } from \"./authority/AnyAddressAuthorityPolicy.js\";\nimport { txAsString } from \"./diagnostics.js\";\nimport { MultisigAuthorityPolicy } from \"./authority/MultisigAuthorityPolicy.js\";\nimport { hasReqts } from \"./Requirements.js\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { UnspecializedCapo } from \"./UnspecializedCapo.js\";\nimport { NoMintDelegation } from \"./minting/NoMintDelegation.js\";\nimport { CapoHelpers } from \"./CapoHelpers.js\";\nimport { AuthorityPolicy } from \"./authority/AuthorityPolicy.js\";\nimport { StellarDelegate } from \"./delegation/StellarDelegate.js\";\n\n/**\n * Schema for Charter Datum, which allows state to be stored in the Leader contract\n * together with it's primary or \"charter\" utxo.\n * @public\n **/\nexport type DefaultCharterDatumArgs = {\n    govAuthorityLink: RelativeDelegateLink<AuthorityPolicy>;\n    mintDelegateLink: RelativeDelegateLink<BasicMintDelegate>;\n};\n\n/**\n * Includes key details needed to create a delegate link\n * @remarks\n *\n * Requires a `strategyName` and may include a partial `config` for the targeted SC contract type\n *\n * Because delegates can be of different subtypes, the SC and `config` are typically\n * generic at the type level.  When using the `config` entry for a specific delegate subtype,\n * additional details might be needed (not expected to be the norm).\n *\n * uutName can't be specified in this structure because creating a delegate link\n * should use txnMustGetSeedUtxo() instead, minting a new UUT for the purpose.\n * If you seek to reuse an existing uutName, probably you're modifying an existing\n * full RelativeDelegateLink structure instead - e.g. with a different `strategy` and\n * `config`; this type wouldn't be involved in that case.\n *\n * @typeParam SC - the type of StellarContract targeted for delegation\n * @public\n **/\nexport type MinimalDelegateLink<SC extends StellarDelegate<any>> = Required<\n    Pick<RelativeDelegateLink<SC>, \"strategyName\">\n> &\n    Partial<Omit<RelativeDelegateLink<SC>, \"uutName\">>;\n\n/**\n * Establishes minimum requirements for creating a charter-datum\n * @remarks\n *\n * requires a baseline configuration for the gov authority and mint delegate.\n *\n * @typeParam DAT - a charter-datum type that may have additional properties in case of advanced extensions to DefaultCapo.\n * @public\n **/\nexport type MinimalDefaultCharterDatumArgs<\n    DAT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs\n> = {\n    // RemainingMinimalCharterDatumArgs<DAT> & {\n    govAuthorityLink: MinimalDelegateLink<AuthorityPolicy>;\n    mintDelegateLink?: MinimalDelegateLink<BasicMintDelegate>;\n};\n//!!! todo enable \"other\" datum args - (ideally, those other than delegate-link types) to be inlcuded in MDCDA above.\nexport type RemainingMinimalCharterDatumArgs<\n    DAT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs\n> = Omit<DAT, \"govAuthorityLink\" | \"mintDelegateLink\">;\n\nexport type HeldAssetsArgs = {\n    purposeId?: string;\n    purpose?: string;\n};\n\n/**\n * Base class for leader contracts, with predefined roles for delegating governance authority and minting policies\n * @remarks\n * \n *  * A Capo contract provides a central contract address that can act as a treasury or data registry;\n * it can mint tokens using its connected minting-policy, and it can delegate policies to other contract \n * scripts.  Subclasses of Capo can use these capabilities in custom ways for strong flexibility.\n\n * Subclass and customize DefaultCapo's type-parameters if you need to customize further.\n * \n * Any Capo contract can (and must) define roles() to establish collaborating scripts; these are used for \n * separating granular responsbilities for different functional purposes within your (on-chain and off-chain) \n * application; this approach enables delegates to use any one of multiple strategies with different\n * functional logic to serve in any given role, thus providing flexibility and extensibility.\n *\n * DefaultCapo provides roles for govAuthority and mintDelegate, and methods to facilitate \n * the lifecycle of charter creation & update. \n * \n * **Example: Multisig authority delegation** - a Capo contract would get much more complicated if it \n * contained multisig logic.  Instead, the governance authority for the Capo can be delegated to a \n * standalone multi-sig contract, which can contain all (and only) the multi-sig logic.  Separating the \n * responsibilities makes each part simpler, easing the process of ensuring each part is doing its job \n * perfectly :pray:\n * \n * A Capo subclass can decorate an existing entry from `super.roles()` with additional strategy entries, or can add \n * extra roles useful in the operation of its application.\n * \n * The Capo base class provides utilities for creating and using UUT's, or **unique utility tokens**, \n * which are non-fungible assets that can form a positive linkage between the Capo (which should \n * normally retain a reference to that UUT) and any delegate; that delegate is most commonly another \n * contract script also referenced within the roles() definition, with a selected strategy.  \n * \n * Architecturally, UUTs provide a simple and unique handle for the Capo to use as a  **required transaction element** \n * in key operational activities (like updating the charter details); so that the delegate holding the UUT is entrusted to\n * approved the UUT's inclusion in a transaction, with all the policy-enforcement implicated on the other end of the \n * delegation.\n * \n * Customizing Datum and Activity\n * \n * The baseline contract script can have specialized Datum and Activity (\"redeemer\")\n * definitions by subclassing DefaultCapo with a `get specializedCapo()`.  This\n * should be an imported helios script having `module specializedCapo` at the top.\n * It MUST export Datum and Activity enums, with variants matching those in the provided \n * baseline/unspecializedCapo module.  \n * \n * A customized Datum::validateSpend(self, ctx) -\\> Bool method\n * should be defined, even if it doesn't put constraints on spending Datum.  \n * If it does choose to add hard constraints, note that this method doesn't\n * have access to the Activity (\"redeemer\") type.  It's a simple place to express simple\n * constraints on spending a custom Datum that only needs one 'spendingDatum' \n * activity.  \n * \n * A customized Activity: allowActivity(self, datum, ctx) -\\> Bool method\n * has access to both the redeemer (in self), as well as Datum and the transaction \n * context.  In this method, use self.switch\\{...\\} to implement activity-specific\n * validations.\n* \n * See the {@link Capo | Capo base class} and {@link StellarContract} for addition context.\n * @public\n */\n\nexport class DefaultCapo<\n    MinterType extends DefaultMinter = DefaultMinter,\n    CDT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs,\n    configType extends CapoBaseConfig = CapoBaseConfig\n> extends Capo<MinterType, CDT, configType> {\n    contractSource() {\n        return contract;\n    }\n    static parseConfig(jsonConfig) {\n        const { mph, rev, seedTxn, seedIndex, rootCapoScriptHash } = jsonConfig;\n\n        const outputConfig: any = {};\n        if (mph) outputConfig.mph = MintingPolicyHash.fromHex(mph.bytes);\n        if (rev) outputConfig.rev = BigInt(rev);\n        if (seedTxn) outputConfig.seedTxn = TxId.fromHex(seedTxn.bytes);\n        if (seedIndex) outputConfig.seedIndex = BigInt(seedIndex);\n        if (rootCapoScriptHash) outputConfig.rootCapoScriptHash = ValidatorHash.fromHex(rootCapoScriptHash.bytes)\n\n        return outputConfig;\n    }\n\n    /**\n     * indicates any specialization of the baseline Capo types\n     * @remarks\n     *\n     * The default implementation is an UnspecialiedCapo, which\n     * you can use as a template for your specialized Capo.\n     *\n     * Every specalization MUST include Datum and Activity (\"redeemer\") enums,\n     * and MAY include additional functions, and methods on Datum / Activity.\n     *\n     * The datum SHOULD have a validateSpend(self, datum, ctx) method.\n     *\n     * The redeemer SHOULD have an allowActivity(self, datum, ctx) method.\n     *\n     * @public\n     **/\n    get specializedCapo(): HeliosModuleSrc {\n        return UnspecializedCapo;\n    }\n\n    /**\n     * indicates any specialization of the baseline Capo types\n     * @remarks\n     *\n     * The default implementation is an UnspecialiedCapo, which\n     * you can use as a template for your specialized Capo.\n     *\n     * Every specalization MUST include Datum and  Activity (\"redeemer\") enums,\n     * and MAY include additional functions, and methods on Datum / Activity.\n     *\n     * The datum enum SHOULD have a validateSpend(self, datum, ctx) method.\n     *\n     * The activity enum SHOULD have an allowActivity(self, datum, ctx) method.\n     *\n     * @public\n     **/\n    get capoHelpers(): HeliosModuleSrc {\n        return CapoHelpers;\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        const parentModules = super.importModules();\n        const specializedCapo = this.specializedCapo;\n        if (specializedCapo.moduleName !== \"specializedCapo\") {\n            throw new Error(\n                `${this.constructor.name}: specializedCapo() module name must be ` +\n                    `'specializedCapo', not '${specializedCapo.moduleName}'\\n  ... in ${specializedCapo.srcFile}`\n            );\n        }\n\n        return [specializedCapo, this.capoHelpers, ...parentModules];\n    }\n\n    // // @Activity.redeemer\n    // updatingCharter() : isActivity {\n    //     return this.updatingDefaultCharter()\n    // }\n\n    /**\n     * Use the `delegateRoles` getter instead\n     * @remarks\n     * \n     * this no-op method is a convenience for Stellar Contracts maintainers\n     * and intuitive developers using autocomplete.  Including it enables an entry\n     * in VSCode \"Outline\" view, which doesn't include the delegateRoles getter : /\n     * @deprecated but please keep as a kind of redirect\n     * @public\n     **/\n    getDelegateRoles() {\n        throw new Error(`use the delegateRoles getter instead`); // for javascript devs\n    }\n\n    get delegateRoles() {\n        return delegateRoles({\n            govAuthority: defineRole(\"capoGov\", AuthorityPolicy, {\n                address: {\n                    delegateClass: AnyAddressAuthorityPolicy,\n                    validateConfig(args): strategyValidation {\n                        const { rev, tn, addrHint } = args;\n\n                        const errors: ErrorMap = {};\n                        if (!rev) errors.rev = [\"required\"];\n                        if (!tn?.length) errors.tn = [\"(token-name) required\"];\n\n                        if (!addrHint?.length)\n                            errors.addrHint = [\"destination address required\"];\n                        if (Object.keys(errors).length > 0) return errors;\n\n                        return undefined;\n                    },\n                },\n                multisig: {\n                    delegateClass: MultisigAuthorityPolicy,\n                    validateConfig(args): strategyValidation {\n                        const { rev, uut } = args;\n                        const errors: ErrorMap = {};\n                        if (!rev) errors.rev = [\"required\"];\n                        if (!uut) errors.uut = [\"required\"];\n                        if (Object.keys(errors).length > 0) return errors;\n\n                        return undefined;\n                    },\n                },\n            }),\n            mintDelegate: defineRole(\"mintDgt\", BasicMintDelegate, {\n                default: {\n                    delegateClass: BasicMintDelegate,\n                    partialConfig: {},\n                    validateConfig(args): strategyValidation {\n                        return undefined;\n                    },\n                },\n                // undelegated: { ... todo ... }\n            }),\n        });\n    }\n\n    /**\n     * Performs a validation of all critical delegate connections\n     * @remarks\n     *\n     * Checks that each delegate connection is correct and that the underlying\n     * scripts for those delegates have not been modified in unplanned ways.\n     *\n     * Every Capo subclass that adds new delegate types SHOULD implement\n     * this method, performing any checks needed to verify the scripts underlying\n     * those delegate-types.  It should return `Promise.all([ super(), ...myOwnChecks])`.\n     * @public\n     **/\n    async verifyCoreDelegates() {\n        const rcsh = this.configIn?.rootCapoScriptHash;\n        if (\n            rcsh && !rcsh.eq(this.address.validatorHash!)\n        ) {\n            console.error(`expected: `+rcsh.hex + `\\n  actual: `+this.address.validatorHash!.hex);\n\n            throw new Error(`${this.constructor.name}: the leader contract script '${this.scriptProgram?.name}', or one of its dependencies, has been modified`)\n        }\n        this.connectMinter();\n\n        const charter = await this.findCharterDatum();\n        const { govAuthorityLink, mintDelegateLink } = charter;\n\n        return Promise.all([\n            this.connectDelegateWithLink(\"govAuthority\", govAuthorityLink),\n            this.connectDelegateWithLink(\"mintDelegate\", mintDelegateLink),\n        ]);\n    }\n\n    mkOnchainDelegateLink(dl: RelativeDelegateLink<any>) {\n        const { RelativeDelegateLink: hlRelativeDelegateLink } =\n            this.onChainTypes;\n\n        let {\n            uutName,\n            strategyName,\n            delegateValidatorHash,\n            config,\n            // reqdAddress: canRequireAddr,\n            // addrHint = [],\n        } = dl;\n        const OptValidator = Option(ValidatorHash);\n        // const needsAddr = new OptAddr(canRequireAddr);\n\n        return new hlRelativeDelegateLink(\n            uutName,\n            strategyName,\n            new OptValidator(delegateValidatorHash)\n            // config //!!! todo - support inline config if/when needed\n            // needsAddr,\n            // addrHint\n        );\n    }\n\n    @datum\n    mkDatumCharterToken(args: CDT): InlineDatum {\n        //!!! todo: make it possible to type these datum helpers more strongly\n        //  ... at the interface to Helios\n        console.log(\"--> mkDatumCharter\", args);\n        const { CharterToken: hlCharterToken } = this.onChainDatumType;\n\n        const govAuthority = this.mkOnchainDelegateLink(args.govAuthorityLink);\n        const mintDelegate = this.mkOnchainDelegateLink(args.mintDelegateLink);\n        const t = new hlCharterToken(govAuthority, mintDelegate);\n        return Datum.inline(t._toUplcData());\n    }\n\n    async findCharterDatum() {\n        return this.mustFindCharterUtxo().then(async (ctUtxo: TxInput) => {\n            const charterDatum = await this.readDatum<DefaultCharterDatumArgs>(\n                \"CharterToken\",\n                ctUtxo.origOutput.datum as InlineDatum\n            );\n            if (!charterDatum) throw Error(`invalid charter UTxO datum`);\n            return charterDatum;\n        });\n    }\n\n    async txnAddGovAuthority<TCX extends StellarTxnContext<any>>(\n        tcx: TCX\n    ): Promise<TCX & StellarTxnContext<any>> {\n        const charterDatum = await this.findCharterDatum();\n\n        console.log(\n            \"adding charter's govAuthority via delegate\",\n            charterDatum.govAuthorityLink\n        );\n        const capoGov = await this.connectDelegateWithLink<AuthorityPolicy>(\n            \"govAuthority\",\n            charterDatum.govAuthorityLink\n        );\n\n        return capoGov.txnGrantAuthority(tcx);\n    }\n\n    // getMinterParams() {\n    //     const { seedTxn, seedIdx } = this.configIn\n    //     return { seedTxn, seedIdx }\n    // }\n\n    /**\n     * should emit a complete configuration structure that can reconstitute a contract (suite) after its first bootstrap transaction\n     * @remarks\n     *\n     * mkFullConfig is called during a bootstrap transaction.  The default implementation works\n     * for subclasses as long as they use CapoBaseConfig for their config type.  Or, if they're\n     * instantiated with a partialConfig that augments CapoBaseConfig with concrete details that\n     * fulfill their extensions to the config type.\n     *\n     * If you have a custom mkBootstrapTxn() that uses techniques to explicitly add config\n     * properties not provided by your usage of `partialConfig` in the constructor, then you'll\n     * need to provide a more specific impl of mkFullConfig().  It's recommended that you\n     * call super.mkFullConfig() from your impl.\n     * @param baseConfig - receives the BaseConfig properties: mph, seedTxn and seedIndex\n     * @public\n     **/\n\n    mkFullConfig(\n        baseConfig: CapoBaseConfig\n    ): CapoBaseConfig & configType & rootCapoConfig {\n        const pCfg = this.partialConfig || {};\n\n        const newClass = this.constructor;\n        // @ts-expect-error using constructor in this way\n        const newCapo = newClass.bootstrapWith({setup:this.setup, config: {...baseConfig,...pCfg}})\n        return {\n            ...baseConfig,\n            ...pCfg,\n            rootCapoScriptHash: newCapo.compiledScript.validatorHash,\n        } as configType & CapoBaseConfig & rootCapoConfig;\n    }\n\n    async mkTxnMintingUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext<any>,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput | undefined,\n        roles?: RM\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx> {\n        const tcx = await super.mkTxnMintingUuts(\n            initialTcx,\n            uutPurposes,\n            seedUtxo,\n            roles\n        );\n        const tcx2 = await this.txnMustUseCharterUtxo(tcx, \"refInput\");\n        return this.txnAddMintDelegate(tcx);\n    }\n\n    async getMintDelegate() {\n        const charterDatum = await this.findCharterDatum();\n\n        return this.connectDelegateWithLink(\n            \"mintDelegate\",\n            charterDatum.mintDelegateLink\n        );\n    }\n\n    async getGovDelegate() {\n        const charterDatum = await this.findCharterDatum();\n\n        return this.connectDelegateWithLink(\n            \"govDelegate\",\n            charterDatum.govAuthorityLink\n        );\n    }\n\n    async txnAddMintDelegate<TCX extends StellarTxnContext<any>>(\n        tcx: TCX\n    ): Promise<TCX> {\n        const mintDelegate = await this.getMintDelegate();\n\n        await mintDelegate.txnGrantAuthority(tcx);\n        return tcx;\n    }\n\n    /**\n     * {@inheritdoc Capo.mkTxnMintCharterToken}\n     * @public\n     **/\n    @txn\n    //@ts-expect-error - typescript can't seem to understand that\n    //    <Type> - govAuthorityLink + govAuthorityLink is <Type> again\n    async mkTxnMintCharterToken<TCX extends StellarTxnContext<any>>(\n        charterDatumArgs: MinimalDefaultCharterDatumArgs<CDT>,\n        existingTcx?: TCX\n    ): Promise<\n        | never\n        | (TCX &\n              hasUutContext<\n                  \"govAuthority\" | \"capoGov\" | \"mintDelegate\" | \"mintDgt\"\n              > &\n              hasBootstrappedConfig<CapoBaseConfig & configType>)\n    > {\n        if (this.configIn)\n            throw new Error(\n                `this contract suite is already configured and can't be re-chartered`\n            );\n\n        type hasBsc = hasBootstrappedConfig<CapoBaseConfig & configType>;\n        //@ts-expect-error yet another case of seemingly spurious \"could be instantiated with a different subtype\" (actual fixes welcome :pray:)\n        const initialTcx: TCX & hasBsc =\n            existingTcx || (new StellarTxnContext(this.myActor) as hasBsc);\n\n        return this.txnMustGetSeedUtxo(initialTcx, \"charter bootstrapping\", [\n            \"charter\",\n        ]).then(async (seedUtxo) => {\n            const { txId: seedTxn, utxoIdx } = seedUtxo.outputId;\n            const seedIndex = BigInt(utxoIdx);\n\n            this.connectMintingScript({ seedIndex, seedTxn });\n\n            const { mintingPolicyHash: mph } = this.minter!;\n            const rev = this.getCapoRev();\n            const bsc = this.mkFullConfig({\n                mph,\n                rev,\n                seedTxn,\n                seedIndex,\n            });\n            initialTcx.state.bsc = bsc;\n            initialTcx.state.bootstrappedConfig = JSON.parse(\n                JSON.stringify(bsc, delegateLinkSerializer)\n            );\n            const fullScriptParams = (this.contractParams =\n                this.getContractScriptParams(bsc));\n            this.configIn = bsc;\n\n            this.scriptProgram = this.loadProgramScript(fullScriptParams);\n\n            const tcx = await this.minter!.txnWillMintUuts(\n                initialTcx,\n                [\"capoGov\", \"mintDgt\"],\n                seedUtxo,\n                {\n                    govAuthority: \"capoGov\",\n                    mintDelegate: \"mintDgt\",\n                }\n            );\n            const { capoGov, govAuthority, mintDgt, mintDelegate } =\n                tcx.state.uuts;\n            {\n                if (govAuthority !== capoGov)\n                    throw new Error(`assertion can't fail`);\n            }\n\n            const govAuthorityLink = await this.txnCreateDelegateLink<\n                AuthorityPolicy,\n                \"govAuthority\"\n            >(tcx, \"govAuthority\", charterDatumArgs.govAuthorityLink);\n\n            const mintDelegateLink = await this.txnCreateDelegateLink<\n                BasicMintDelegate,\n                \"mintDelegate\"\n            >(tcx, \"mintDelegate\", charterDatumArgs.mintDelegateLink);\n            //@ts-expect-error - typescript can't seem to understand that\n            //    <Type> - govAuthorityLink + govAuthorityLink is <Type> again\n            const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n                ...charterDatumArgs,\n                govAuthorityLink,\n                mintDelegateLink,\n            };\n            const datum = this.mkDatumCharterToken(fullCharterArgs);\n\n            const charterOut = new TxOutput(\n                this.address,\n                this.tvCharter(),\n                datum\n            );\n            charterOut.correctLovelace(this.networkParams);\n\n            tcx.addInput(seedUtxo);\n            tcx.addOutputs([charterOut]);\n\n            console.log(\n                \" ---------------- CHARTER MINT ---------------------\\n\",\n                txAsString(tcx.tx)\n            );\n            // debugger\n\n            return this.minter!.txnMintingCharter(tcx, {\n                owner: this.address,\n                capoGov, // same as govAuthority,\n                mintDgt,\n            });\n        });\n    }\n\n    @Activity.redeemer\n    updatingCharter(): // args: CDT\n    isActivity {\n        const { updatingCharter } = this.onChainActivitiesType;\n        // let {uut, strategyName, reqdAddress: canRequireAddr, addrHint=[]} = args.govAuthority\n\n        // // const {Option} = this.onChainTypes;\n        // debugger\n        // const OptAddr = Option(Address);\n        // const needsAddr = new OptAddr(canRequireAddr);\n        const t = new updatingCharter();\n        // args.govDelegate,\n        // new hlRelativeDelegateLink(uut, strategyName, needsAddr, addrHint)\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    @txn\n    async mkTxnUpdateCharter(\n        args: CDT,\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor)\n    ): Promise<StellarTxnContext> {\n        return this.txnUpdateCharterUtxo(\n            tcx,\n            this.updatingCharter(),\n            this.mkDatumCharterToken(args)\n        );\n    }\n\n    requirements() {\n        return hasReqts({\n            \"positively governs all administrative actions\": {\n                purpose: \"to maintain clear control by a trustee group\",\n                details: [\n                    // descriptive details of the requirement (not the tech):\n                    \"a trustee group is defined during contract creation\",\n                    \"the trustee list's signatures provide consent\",\n                    \"the trustee group can evolve by consent of the trustee group\",\n                    \"a threshold set of the trustee group can give consent for the whole group\",\n                ],\n                mech: [\n                    // descriptive details of the chosen mechanisms for implementing the reqts:\n                    \"uses a 'charter' token specialized for this contract\",\n                    \"the charter token has a trustee list in its Datum structure\",\n                    \"the charter token has a threshold setting in its Datum structure\",\n                    \"the charter Datum is updated when needed to reflect new trustees/thresholds\",\n                ],\n                requires: [\n                    \"has a unique, permanent charter token\",\n                    \"has a unique, permanent treasury address\",\n                    \"the trustee threshold is enforced on all administrative actions\",\n                    \"the trustee group can be changed\",\n                    \"the charter token is always kept in the contract\",\n                    \"can mint other tokens, on the authority of the Charter token\",\n                ],\n            },\n\n            \"has a singleton minting policy\": {\n                purpose: \"to mint various tokens authorized by the treasury\",\n                details: [\n                    \"A chosen minting script is bound deterministically to the contract constellation\",\n                    \"Its inaugural (aka 'initial Charter' or 'Charter Mint') transaction creates a charter token\",\n                    \"The minting script can issue further tokens approved by Treasury Trustees\",\n                    \"The minting script does not need to concern itself with details of Treasury Trustee approval\",\n                ],\n                mech: [\n                    \"has an initial UTxO chosen arbitrarily, and that UTxO is consumed during initial Charter\",\n                    \"makes a different address depending on (txId, outputIndex) parameters of the Minting script\",\n                ],\n                requires: [],\n            },\n\n            \"has a unique, permanent treasury address\": {\n                purpose: \"to give continuity for its stakeholders\",\n                details: [\n                    \"One-time creation is ensured by UTxO's unique-spendability property\",\n                    \"Determinism is transferred from the charter utxo to the MPH and to the treasury address\",\n                ],\n                mech: [\n                    \"uses the Minting Policy Hash as the sole parameter for the treasury spending script\",\n                ],\n                requires: [\"has a singleton minting policy\"],\n            },\n\n            \"has a unique, permanent charter token\": {\n                purpose:\n                    \"to guarantee permanent identity of a token constraining administrative actions\",\n                details: [\n                    \"a charter token is uniquely created when bootstrapping the constellation contract\",\n                    \"the charter token can't ever be recreated (it's non-fungible and can't be re-minted)\",\n                    \"the treasury address, minting policy hash, and charter token are all deterministic based on input utxo\",\n                ],\n                impl: \"txnMintCharterToken()\",\n                mech: [\n                    \"creates a unique 'charter' token, with assetId determined from minting-policy-hash+'charter'\",\n                    \"TODO: fails if minSigs is longer than trustee list\",\n                    \"doesn't work with a different spent utxo\",\n                ],\n                requires: [\n                    \"has a singleton minting policy\",\n                    \"the charter token is always kept in the contract\",\n                ],\n            },\n\n            \"the charter token is always kept in the contract\": {\n                purpose:\n                    \"so that the treasury contract is always in control of administrative changes\",\n                details: [\n                    \"The charter token's spendability' is used as a signal of administrative authority for transactions wanting proof of authority\",\n                    \"... thus, other scripts don't need to express any of the authority policy, but can simply verify the token's presence in the txn\",\n                    \"It shouldn't ever be possible to interfere with its spendability, e.g. by bundling it in an inconvenient way with other assets\",\n                    \"By enforcing that the charter token is always returned to the contract, \",\n                    \"... it has assurance of continuing ability to govern the next activity using that token\",\n                    \"Note: the charter mint can bind with any contract having suitable assurances, \",\n                    \"... but we only focus on the case of binding to this treasury contract\",\n                ],\n                mech: [\n                    \"builds transactions with the charter token returned to the contract\",\n                    \"fails to spend the charter token if it's not returned to the contract\",\n                    \"TODO: keeps the charter token separate from other assets in the contract\",\n                ],\n                requires: [],\n            },\n\n            \"can mint other tokens, on the authority of the Charter token\": {\n                purpose:\n                    \"to simplify the logic of minting, while being sure of minting authority\",\n                details: [\n                    \"the minting policy doesn't have to directly enforce the trustee-list policy\",\n                    \"instead, it delegates that to the treasury spending script, \",\n                    \"... and simply requires that the charter token is used for minting anything else\",\n                ],\n                mech: [\n                    \"can build transactions that mint non-'charter' tokens\",\n                    \"requires the charter-token to be spent as proof of authority\",\n                    \"fails if the charter-token is not returned to the treasury\",\n                    \"fails if the charter-token parameters are modified\",\n                ],\n            },\n\n            \"the trustee group can be changed\": {\n                purpose: \"to ensure administrative continuity for the group\",\n                details: [\n                    \"When the needed threshold for administrative modifications is achieved, the Charter Datum can be updated\",\n                    \"This type of administrative action should be explicit and separate from any other administrative activity\",\n                    \"If the CharterToken's Datum is being changed, no other redeemer activities are allowed\",\n                ],\n                mech: [\n                    \"requires the existing threshold of existing trustees to be met\",\n                    \"requires all of the new trustees to sign the transaction\",\n                    \"does not allow minSigs to exceed the number of trustees\",\n                ],\n                requires: [\n                    \"the trustee threshold is enforced on all administrative actions\",\n                ],\n            },\n\n            \"the trustee threshold is enforced on all administrative actions\": {\n                purpose:\n                    \"allows progress in case a small fraction of trustees may not be available\",\n                details: [\n                    \"A group can indicate how many of the trustees are required to provide their explicit approval\",\n                    \"If a small number of trustees lose their keys, this allows the remaining trustees to directly regroup\",\n                    \"For example, they can replace the trustee list with a new set of trustees and a new approval threshold\",\n                    \"Normal day-to-day administrative activities can also be conducted while a small number of trustees are on vacation or otherwise temporarily unavailable\",\n                ],\n                mech: [\n                    \"doesn't allow the charterToken to be sent without enough minSigs from the trustee list\",\n                ],\n                requires: [],\n            },\n\n            foo: {\n                purpose: \"\",\n                details: [],\n                mech: [],\n                requires: [],\n            },\n        });\n    }\n}\n","import {\n    DefaultCharterDatumArgs,\n    DefaultCapo,\n    MinimalDefaultCharterDatumArgs,\n} from \"../DefaultCapo.js\";\nimport { Address } from \"@hyperionbt/helios\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { ADA, canHaveRandomSeed, stellarTestHelperSubclass } from \"./types.js\";\nimport { CapoTestHelper } from \"./CapoTestHelper.js\";\nimport { stellarSubclass } from \"../StellarContract.js\";\nimport { Capo, CapoBaseConfig, hasBootstrappedConfig, hasUutContext } from \"../Capo.js\";\nimport { DefaultMinter } from \"../minting/DefaultMinter.js\";\nimport { expect } from \"vitest\";\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\n\n/**\n * Test helper for classes extending DefaultCapo\n * @remarks\n *\n * Arranges an test environment with predefined actor-names having various amounts of ADA in their (emulated) wallets,\n * and default helpers for setting up test scenarios.  Provides a simplified framework for testing Stellar contracts extending\n * the DefaultCapo class.\n *\n * To use it, you MUST extend DefaultCapoTestHelper<YourStellarCapoClass>.\n *\n * You MUST also implement a getter  for stellarClass, returning the specific class for YourStellarCapoClass\n *\n * You SHOULD also implement a setupActors method to arrange named actors for your test scenarios.\n * It's recommended to identify general roles of different people who will interact with the contract, and create\n * one or more actor names for each role, where the actor names start with the same letter as the role-names.\n * For example, a set of Trustees in a contract might have actor names tina, tracy and tom, while\n * unprivileged Public users might have actor names like pablo and peter.  setupActors() also\n * should pre-assign some ADA funds to each actor: e.g. `this.addActor(‹actorName›, 142n * ADA)`\n *\n * @typeParam DC - the specific DefaultCapo subclass under test\n * @public\n **/\nexport class DefaultCapoTestHelper<\n    //@ts-expect-error spurious fail on mkFullConfig type; it tries to strongly match the generic abstract type\n    //    from (abstract) Capo, instead of paying attention to the clearly-matching concrete version in DefaultCapo\n    DC extends DefaultCapo<DefaultMinter, CDT, CT> = DefaultCapo, //prettier-ignore\n    CDT extends DefaultCharterDatumArgs =        \n        DC extends Capo<DefaultMinter, infer iCDT> ? iCDT : DefaultCharterDatumArgs, //prettier-ignore\n    CT extends CapoBaseConfig  = \n        DC extends Capo<any, any, infer iCT> ? iCT : never //prettier-ignore\n    //@ts-expect-error because of a mismatch between the Capo's abstract mkTxnMintCharterToken's defined constraints\n    //    ... vs the only concrete impl in DefaultCapo, with types that are actually nicely matchy.\n> extends CapoTestHelper<DC, CDT, CT> {\n    static forCapoClass<DC extends DefaultCapo<DefaultMinter, any, any>>(\n        s: stellarSubclass<DC>\n    ): stellarTestHelperSubclass<DC> {\n        class specificCapoHelper extends DefaultCapoTestHelper<DC> {\n            get stellarClass() {\n                return s;\n            }\n        }\n        return specificCapoHelper;\n    }\n\n    //@ts-expect-error\n    get stellarClass(): stellarSubclass<DC> {\n        //@ts-expect-error\n        return DefaultCapo;\n    }\n\n    //!!! todo: create type-safe ActorMap helper hasActors(), on same pattern as hasRequirements\n    setupActors() {\n        this.addActor(\"tina\", 1100n * ADA);\n        this.addActor(\"tracy\", 13n * ADA);\n        this.addActor(\"tom\", 120n * ADA);\n        this.currentActor = \"tina\";\n    }\n\n    async mkCharterSpendTx(): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n\n        const treasury = this.strella!;\n        const tcx: StellarTxnContext = new StellarTxnContext(this.currentActor);\n        const tcx2 = await treasury.txnAddGovAuthority(tcx);\n        return treasury.txnMustUseCharterUtxo(tcx2, treasury.usingAuthority())\n\n        // return treasury.txnAddCharterWithAuthority(tcx);\n    }\n\n    mkDefaultCharterArgs(): Partial<MinimalDefaultCharterDatumArgs<CDT>> {\n        const addr = this.currentActor.address;\n        console.log(\"test helper charter -> actor addr\", addr.toBech32())\n        return {\n            govAuthorityLink: {\n                strategyName: \"address\",\n                config: {\n                    addrHint: [addr],\n                },\n            },\n            // mintDelegateLink: {\n            //     strategyName: \"default\",\n            // },\n        };\n    }\n\n    async mintCharterToken(\n        args?: MinimalDefaultCharterDatumArgs<CDT>\n    ): Promise<\n        & hasUutContext<\"govAuthority\" | \"capoGov\" | \"mintDelegate\" | \"mintDgt\">\n        & StellarTxnContext<any> \n        & hasBootstrappedConfig<CapoBaseConfig>\n    >{\n        const { delay } = this;\n        const { tina, tom, tracy } = this.actors;\n\n        if (this.state.mintedCharterToken) {\n            console.warn(\n                \"reusing minted charter from existing testing-context\"\n            );\n            return this.state.mintedCharterToken;\n        }\n\n        if (!this.strella) await this.initialize();\n        const script = this.strella!;\n        const goodArgs = (args ||\n            this.mkDefaultCharterArgs()) as MinimalDefaultCharterDatumArgs<CDT>;\n        // debugger\n\n        const tcx = await script.mkTxnMintCharterToken(\n            goodArgs\n        );\n        this.state.config = tcx.state.bootstrappedConfig;\n\n        expect(script.network).toBe(this.network);\n\n        await script.submit(tcx);\n        console.log(`----- charter token minted at slot ${this.network.currentSlot}`);\n\n        this.network.tick(1n);\n        this.state.mintedCharterToken = tcx\n        return tcx;\n    }\n\n    async updateCharter(args: CDT): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n        const treasury = this.strella!;\n\n        const { signers } = this.state;\n\n        const tcx = await treasury.mkTxnUpdateCharter(args);\n        return treasury.submit(tcx, { signers }).then(() => {\n            this.network.tick(1n);\n            return tcx;\n        });\n    }\n}\n","export { CapoTestHelper } from \"./CapoTestHelper.js\";\n\nexport { ADA, addTestContext } from \"./types.js\";\nexport const insufficientInputError =\n    /(need .* lovelace, but only have|transaction doesn't have enough inputs)/;\n\nexport type { StellarTestContext } from \"./StellarTestContext.js\";\n\nError.stackTraceLimit = 100;\n\nexport { DefaultCapoTestHelper } from \"./DefaultCapoTestHelper.js\";\nexport { StellarTestHelper } from \"./StellarTestHelper.js\";\n"],"names":["x","datum","name","e","tcx","__decorateClass","params","cmh","cdh","contract","StellarHeliosHelpers","seedUtxo","DelegationDetail","basics","ch"],"mappings":";;;;AAuBO,SAAS,qBAAqB,MAAQ,EAAA;AACzC,EAAA,IAAI,MAAS,GAAA,EAAA,CAAA;AACb,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACvC,IAAA,IAAI,OAAU,GAAA,MAAA,CAAO,SAAU,CAAA,CAAA,EAAG,IAAI,CAAC,CAAA,CAAA;AACvC,IAAI,IAAA,QAAA,GAAW,QAAS,CAAA,OAAA,EAAS,EAAE,CAAA,CAAA;AAGnC,IAAI,IAAA,QAAA,IAAY,EAAM,IAAA,QAAA,IAAY,GAAK,EAAA;AACnC,MAAU,MAAA,IAAA,MAAA,CAAO,aAAa,QAAQ,CAAA,CAAA;AAAA,KACnC,MAAA;AACH,MAAA,MAAA,IAAU,SAAI,OAAO,CAAA,MAAA,CAAA,CAAA;AAAA,KACzB;AAAA,GAiBJ;AACA,EAAO,OAAA,MAAA,CAAA;AACX,CAAA;AASO,SAAS,eAAe,CAAW,EAAA;AAEtC,EAAA,MAAM,SAAS,CAAE,CAAA,MAAA,CAAA;AACjB,EAAA,OAAO,OACF,GAAI,CAAA,CAAC,CAAC,QAAA,EAAU,YAAY,CAAM,KAAA;AAC/B,IAAA,MAAM,SAAS,QAAS,CAAA,GAAA,CAAA;AAExB,IAAA,MAAM,cAAc,YACf,CAAA,GAAA;AAAA,MACG,CAAC,CAAC,SAAW,EAAA,KAAK,CAAM,KAAA;AACpB,QAAM,MAAA,UAAA,GAAa,oBAAqB,CAAA,SAAA,CAAU,GAAG,CAAA,CAAA;AACrD,QAAO,OAAA,CAAA,EAAG,KAAK,CAAA,cAAA,EAAO,UAAU,CAAA,CAAA,CAAA;AAAA,OACpC;AAAA,KACJ,CACC,KAAK,KAAK,CAAA,CAAA;AACf,IAAA,OAAO,mBAAO,MAAO,CAAA,KAAA,CAAM,GAAG,CAAC,CAAC,SAAI,MAAO,CAAA,KAAA;AAAA,MACvC,CAAA,CAAA;AAAA,KACH,IAAI,WAAW,CAAA,MAAA,CAAA,CAAA;AAAA,GACnB,CACA,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACpB,CAAA;AAKO,SAAS,cAAc,CAAoB,EAAA;AAC9C,EAAA,MAAM,KAAQ,GAAA,QAAA,CAAS,CAAE,CAAA,QAAA,EAAU,CAAA,CAAA;AACnC,EAAA,MAAM,GACD,GAAA,KAAA,IAAS,CAAI,EAAA,CAAA,IAAA,CAAK,KAAM,CAAA,KAAA,GAAQ,GAAI,CAAA,GAAI,GAAM,EAAA,OAAA,CAAQ,CAAC,CAAC,CAAW,IAAA,CAAA,IAAA,EAAA,CAAA;AACxE,EAAO,OAAA,GAAA,CAAA;AACX,CAAA;AAMO,SAAS,cAAc,CAAU,EAAA;AACpC,EAAM,MAAA,GAAA,GAAM,aAAc,CAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACpC,EAAM,MAAA,MAAA,GAAS,cAAe,CAAA,CAAA,CAAE,MAAM,CAAA,CAAA;AACtC,EAAA,OAAO,CAAC,GAAA,EAAK,MAAM,CAAA,CAAE,MAAO,CAAA,CAAC,CAAM,KAAA,CAAC,CAAC,CAAC,CAAE,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACtD,CAAA;AAMO,SAAS,WAAW,EAAgB,EAAA;AACvC,EAAA,MAAM,SAAY,GAAA;AAAA,IACd,QAAA;AAAA,IACA,QAAA;AAAA,IACA,YAAA;AAAA,IACA,WAAA;AAAA,IACA,SAAA;AAAA,IACA,KAAA;AAAA,IACA,eAAA;AAAA,IACA,gBAAA;AAAA,IACA,cAAA;AAAA,IACA,gBAAA;AAAA,IACA,SAAA;AAAA,IACA,kBAAA;AAAA,GACJ,CAAA;AACA,EAAA,MAAM,YAAe,GAAA;AAAA,IACjB,YAAA;AAAA,IACA,QAAA;AAAA,IACA,YAAA;AAAA,IACA,SAAA;AAAA,IACA,WAAA;AAAA,IACA,eAAA;AAAA,GACJ,CAAA;AAEA,EAAA,IAAI,OAAU,GAAA,EAAA,CAAA;AAEd,EAAM,MAAA,CAAA,GAAI,GAAG,IAAK,EAAA,CAAA;AAAA;AAClB;AACA;AAEA,EAAA,KAAA,MAAW,KAAK,SAAW,EAAA;AACvB,IAAA,IAAI,OAAO,EAAG,CAAA,IAAA,CAAK,CAAC,CAAM,IAAA,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAClC,IAAA,IAAI,SAAY,GAAA,KAAA,CAAA;AAEhB,IAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAA,IAAK,CAAC,IAAK,CAAA,MAAA;AAAQ,MAAA,SAAA;AAEzC,IAAA,IAAI,CAAC,IAAA;AAAM,MAAA,SAAA;AACX,IAAA,IAAI,YAAY,CAAG,EAAA;AACf,MAAO,IAAA,GAAA,CAAA;AAAA,EAAO,EAAA,IAAA,CAAK,GAAI,CAAA,CAACA,EAAM,KAAA,eAAA,CAAgBA,EAAC,CAAC,CAAA,CAAE,IAAK,CAAA,MAAM,CAAC,CAAA,CAAA,CAAA;AAAA,KAClE;AACA,IAAA,IAAI,eAAe,CAAG,EAAA;AAClB,MAAO,IAAA,GAAA,CAAA;AAAA,EAAO,EAAA,IAAA,CACT,GAAI,CAAA,CAACA,EAAM,KAAA,eAAA,CAAgBA,EAAG,EAAA,gBAAM,CAAC,CAAA,CACrC,IAAK,CAAA,MAAM,CAAC,CAAA,CAAA,CAAA;AAAA,KACrB;AACA,IAAA,IAAI,gBAAgB,CAAG,EAAA;AAAA;AACnB;AAIA,MAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAACA,EAAM,KAAA,eAAA,CAAgBA,IAAG,WAAI,CAAC,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAAA,KAClE;AACA,IAAA,IAAI,YAAY,CAAG,EAAA;AACf,MAAO,IAAA,GAAA,CAAA,eAAA,EAAQ,cAAe,CAAA,IAAI,CAAC,CAAA,CAAA,CAAA;AAAA,KACvC;AACA,IAAA,IAAI,aAAa,CAAG,EAAA;AAChB,MAAO,IAAA,GAAA,CAAA;AAAA,EAAA,EAAO,IACT,CAAA,GAAA,CAAI,CAACA,EAAAA,EAAG,MAAM,gBAAiBA,CAAAA,EAAAA,EAAG,CAAG,EAAA,CAAC,CAAM,IAAA,CAAA,CAAC,CAC7C,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA,CAAA,CAAA;AAAA,KACrB;AACA,IAAA,IAAI,aAAa,CAAG,EAAA;AAChB,MAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAACA,EAAM,KAAA;AACnB,QAAA,IAAI,CAACA,EAAE,CAAA,GAAA;AAAK,UAAA,SAAA;AACZ,QAAA,OAAO,CAAMA,UAAAA,EAAAA,EAAAA,CAAE,GAAI,CAAA,KAAA,CAAM,CAAG,EAAA,CAAC,CAAC,CAAA,MAAA,EAAIA,EAAE,CAAA,GAAA,CAAI,KAAM,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA,CAAA;AAAA,OACpD,CAAA,CAAA;AAAA,KACL;AAEA,IAAA,IAAI,SAAS,CAAG,EAAA;AACZ,MAAA,IAAA,GAAO,SAAS,IAAI,CAAA,CAAA;AACpB,MAAA,IAAA,GACI,IAAI,IAAK,CAAA,KAAA,CAAM,IAAO,GAAA,GAAI,IAAI,GAAM,EAAA,OAAA,CAAQ,CAAC,CAAC,UAC9C,EAAG,CAAA,aAAA,CAAc,KAAM,CAAA,IAAI,EAAE,CAAC,CAAA,CAAA;AAAA,KAGtC;AAEA,IAAA,IAAI,sBAAsB,CAAG,EAAA;AACzB,MAAY,SAAA,GAAA,IAAA,CAAA;AACZ,MAAA,IAAA,GAAO,CAAK,EAAA,EAAA,gBAAA;AAAA,QACR,IAAA;AAAA,QACA,CAAA,YAAA,CAAA;AAAA,OACH,CAAA,iEAAA,CAAA,CAAA;AAAA,KACL;AAEA,IAAA,OAAA,IAAW,GAAG,SAAY,GAAA,EAAA,GAAK,OAAO,CAAI,GAAA,IAAI,GAAG,IAAI,CAAA;AAAA,CAAA,CAAA;AAAA,GACzD;AACA,EAAA,IAAI,QAAW,GAAA,KAAA,CAAA;AACf,EAAA,MAAM,QAAQ,EAAC,CAAA;AACf,EAAA,KAAA,MAAW,KAAK,YAAc,EAAA;AAC1B,IAAA,IAAI,OAAO,EAAG,CAAA,SAAA,CAAU,CAAC,CAAM,IAAA,CAAA,CAAE,UAAU,CAAC,CAAA,CAAA;AAC5C,IAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,IAAI,CAAA,IAAK,CAAC,IAAK,CAAA,MAAA;AAAQ,MAAA,SAAA;AACzC,IAAI,IAAA,QAAA,IAAY,KAAK,CAAC,MAAA,CAAO,QAAQ,IAAQ,IAAA,EAAE,CAAE,CAAA,MAAA;AAAQ,MAAA,SAAA;AACzD,IAAA,IAAI,gBAAgB,CAAG,EAAA;AACnB,MAAA,IAAI,CAAC,IAAA;AAAM,QAAA,SAAA;AACX,MAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAM,KAAA;AACnB,QAAA,MAAM,IAAO,GAAA,OAAA,CAAQ,QAAS,CAAA,CAAA,CAAE,UAAU,CAAA,CAAA;AAC1C,QAAA,OAAO,mBAAO,YAAa,CAAA,IAAI,CAAC,CAAS,kBAAA,EAAA,CAAA,CAAE,WAAW,GAAI,CAAA,KAAA;AAAA,UACtD,CAAA,CAAA;AAAA,SACH,CAAA,CAAA,CAAA;AAAA,OACJ,CAAA,CAAA;AACD,MAAA,IAAI,KAAK,MAAS,GAAA,CAAA;AAAG,QAAA,IAAA,CAAK,QAAQ,EAAE,CAAA,CAAA;AACpC,MAAO,IAAA,GAAA,IAAA,CAAK,KAAK,QAAQ,CAAA,CAAA;AAAA,KAC7B;AACA,IAAA,IAAI,eAAe,CAAG,EAAA;AAClB,MAAA,IAAI,CAAC,IAAA;AAAM,QAAA,SAAA;AAAA;AAEX,MAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAACA,EAAM,KAAA;AAEnB,QAAA,MAAM,SACFA,GAAAA,EAAAA,CAAE,UAAc,IAAA,CAAA,CAAA,GACV,gCACA,YAAgBA,IAAAA,EAAAA,GAChB,CAAe,YAAA,EAAA,CAAA,GAAIA,GAAE,UAAU,CAAA,CAAA,GAC/B,CAAe,YAAA,EAAA,CAAA,GAAIA,GAAE,QAAQ,CAAA,CAAA,CAAA;AAEvC,QAAA,OAAO,cAAO,SAAS,CAAA,CAAA,EAAIA,EAAE,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;AAAA,OAC/C,CAAA,CAAA;AACD,MAAA,IAAI,KAAK,MAAS,GAAA,CAAA;AAAG,QAAA,IAAA,CAAK,QAAQ,EAAE,CAAA,CAAA;AACpC,MAAO,IAAA,GAAA,IAAA,CAAK,KAAK,QAAQ,CAAA,CAAA;AAAA,KAC7B;AACA,IAAA,IAAI,aAAa,CAAG,EAAA;AAChB,MAAA,IAAI,CAAC,IAAA;AAAM,QAAA,SAAA;AACX,MAAO,IAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAM,KAAA;AACnB,QAAI,IAAA;AACA,UAAM,MAAA,GAAA,GAAM,EAAE,iBAAkB,CAAA,GAAA,CAAA;AAChC,UAAO,OAAA,CAAA,UAAA,EAAM,GAAI,CAAA,KAAA,CAAM,CAAG,EAAA,CAAC,CAAC,CAAI,MAAA,EAAA,GAAA,CAAI,KAAM,CAAA,CAAA,CAAE,CAAC,CAAA,UAAA,CAAA,CAAA;AAAA,iBACxC,CAAG,EAAA;AACR,UAAM,MAAA,EAAA,GAAK,EAAE,aAAc,CAAA,GAAA,CAAA;AAC3B,UAAA,MAAM,IAAO,GAAA,OAAA,CAAQ,QAAS,CAAA,CAAA,CAAE,aAAa,CAAA,CAAA;AAC7C,UAAA,OAAO,aAAM,EAAG,CAAA,KAAA,CAAM,GAAG,CAAC,CAAC,SAAI,EAAG,CAAA,KAAA;AAAA,YAC9B,CAAA,CAAA;AAAA,WACH,CAAA,eAAA,EAAkB,YAAa,CAAA,IAAI,CAAC,CAAA,CAAA,CAAA,CAAA;AAAA,SACzC;AAAA,OACH,CAAA,CAAA;AACD,MAAA,IAAI,KAAK,MAAS,GAAA,CAAA;AAAG,QAAA,IAAA,CAAK,QAAQ,EAAE,CAAA,CAAA;AACpC,MAAO,IAAA,GAAA,IAAA,CAAK,KAAK,QAAQ,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAA,IAAI,CAAC,IAAA;AAAM,MAAA,SAAA;AACX,IAAW,QAAA,GAAA,IAAA,CAAA;AACX,IAAA,KAAA,CAAM,CAAC,CAAI,GAAA,IAAA,CAAA;AAAA,GACf;AACA,EAAA,IAAI,QAAU,EAAA;AACV,IAAA,OAAA,IAAW,MAAO,CAAA,OAAA,CAAQ,KAAK,CAAA,CAC1B,GAAI,CAAA,CAAC,CAAC,CAAA,EAAG,CAAC,CAAA,KAAM,CAAK,EAAA,EAAA,CAAC,KAAK,CAAC,CAAA;AAAA,CAAI,CAAA,CAChC,KAAK,EAAE,CAAA,CAAA;AAAA,GAChB;AACA,EAAI,IAAA;AACA,IAAA,OAAA,GAAU,OAAU,GAAA,CAAA,QAAA,EAAW,EAAG,CAAA,EAAA,GAAK,GAAG,CAAA,CAAA,CAAA;AAAA,WACrC,CAAG,EAAA;AACR,IAAA,OAAA,GAAU,OAAU,GAAA,CAAA,yBAAA,CAAA,CAAA;AAAA,GACxB;AACA,EAAO,OAAA,OAAA,CAAA;AACX,CAAA;AASgB,SAAA,eAAA,CAAgB,CAAY,EAAA,MAAA,GAAS,KAAe,EAAA;AAChE,EAAM,MAAA,GAAA,GAAM,CAAE,CAAA,QAAA,CAAS,IAAK,CAAA,GAAA,CAAA;AAC5B,EAAM,MAAA,IAAA,GAAO,EAAE,QAAS,CAAA,OAAA,CAAA;AACxB,EAAA,OAAO,GAAG,MAAM,CAAA,EAAG,aAAa,CAAE,CAAA,OAAO,CAAC,CAAI,CAAA,EAAA,aAAA;AAAA,IAC1C,CAAE,CAAA,KAAA;AAAA,GACL,CAAA,aAAA,EAAS,GAAI,CAAA,KAAA,CAAM,CAAG,EAAA,CAAC,CAAC,CAAA,MAAA,EAAI,GAAI,CAAA,KAAA,CAAM,CAAE,CAAA,CAAC,IAAI,IAAI,CAAA,CAAA,CAAA;AACtD,CAAA;AASgB,SAAA,aAAA,CAAc,KAAkB,EAAA,MAAA,GAAS,IAAc,EAAA;AACnE,EAAO,OAAA,KAAA,CAAM,GAAI,CAAA,CAAC,CAAM,KAAA,YAAA,CAAa,GAAG,YAAK,CAAC,CAAE,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC/D,CAAA;AASgB,SAAA,YAAA,CAAa,CAAY,EAAA,MAAA,GAAS,WAAc,EAAA;AAC5D,EAAM,MAAA,GAAA,GAAM,CAAE,CAAA,QAAA,CAAS,IAAK,CAAA,GAAA,CAAA;AAC5B,EAAM,MAAA,IAAA,GAAO,EAAE,QAAS,CAAA,OAAA,CAAA;AAExB,EAAA,OAAO,CAAO,WAAA,EAAA,GAAA,CAAI,KAAM,CAAA,CAAA,EAAG,CAAC,CAAC,CAAI,MAAA,EAAA,GAAA,CAAI,KAAM,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA,EAAI,IAAI,CAAK,EAAA,EAAA,gBAAA;AAAA,IACvD,CAAE,CAAA,UAAA;AAAA,IACF,MAAA;AAAA,GACH,CAAA,CAAA,CAAA;AACL,CAAA;AASO,SAAS,cAAc,CAAqC,EAAA;AAC/D,EAAA,IAAI,CAAC,CAAA;AAAG,IAAO,OAAA,EAAA,CAAA;AAGf,EAAM,MAAA,EAAA,GAAK,EAAE,IAAK,CAAA,GAAA,CAAA;AAClB,EAAM,MAAA,IAAA,GAAO,CAAG,EAAA,EAAA,CAAG,KAAM,CAAA,CAAA,EAAG,CAAC,CAAC,CAAI,MAAA,EAAA,EAAA,CAAG,KAAM,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA,CAAA;AAC9C,EAAA,IAAI,EAAE,QAAS,EAAA;AAAG,IAAA,OAAO,iBAAY,IAAI,CAAA,MAAA,CAAA,CAAA;AACzC,EAAA,OAAO,eAAU,IAAI,CAAA,YAAA,CAAA,CAAA;AACzB,CAAA;AASgB,SAAA,gBAAA,CAAiB,CAAa,EAAA,MAAA,GAAS,IAAc,EAAA;AACjE,EAAA,OAAO,GAAG,MAAM,CAAA,CAAA,EAAI,aAAa,CAAE,CAAA,OAAO,CAAC,CAAI,CAAA,EAAA,aAAA;AAAA,IAC3C,CAAE,CAAA,KAAA;AAAA,GACL,CAAA,CAAA,EAAI,aAAc,CAAA,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA,CAAA;AAC/B,CAAA;AAQO,SAAS,aAAa,OAA0B,EAAA;AACnD,EAAA,MAAM,MAAU,GAAA,OAAA,CAAgB,MAAU,IAAA,OAAA,CAAQ,QAAS,EAAA,CAAA;AAE3D,EAAO,OAAA,CAAA,EAAG,MAAO,CAAA,KAAA,CAAM,CAAG,EAAA,EAAE,CAAC,CAAI,MAAA,EAAA,MAAA,CAAO,KAAM,CAAA,CAAA,CAAE,CAAC,CAAA,CAAA,CAAA;AACrD,CAAA;AAMgB,SAAA,gBAAA,CAAiB,EAAc,EAAA,MAAA,GAAS,IAAM,EAAA;AAC1D,EAAO,OAAA,MAAA,CAAO,KAAK,EAAE,CAAA,CAChB,IAAI,CAAC,CAAA,KAAM,YAAY,MAAM,CAAA,EAAG,CAAC,CAAK,EAAA,EAAA,IAAA,CAAK,UAAU,EAAG,CAAA,CAAC,CAAC,CAAC,CAAA,CAAE,CAC7D,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAClB,CAAA;AASO,SAAS,QACZ,CACF,EAAA;AACE,EAAA,IAAI,aAAa,EAAI,EAAA;AACjB,IAAA,OAAO,WAAW,CAAC,CAAA,CAAA;AAAA,GACvB;AACA,EAAA,IAAI,aAAa,QAAU,EAAA;AACvB,IAAA,OAAO,iBAAiB,CAAC,CAAA,CAAA;AAAA,GAC7B;AAEA,EAAA,IAAI,aAAa,KAAO,EAAA;AACpB,IAAA,OAAO,cAAc,CAAC,CAAA,CAAA;AAAA,GAC1B;AACA,EAAA,IAAI,aAAa,OAAS,EAAA;AACtB,IAAA,OAAO,aAAa,CAAC,CAAA,CAAA;AAAA,GACzB;AACA,EAAA,IAAI,aAAa,iBAAmB,EAAA;AAChC,IAAO,OAAA,UAAA,CAAW,EAAE,EAAE,CAAA,CAAA;AAAA,GAC1B;AACJ,CAAA;AAEA,IAAI,WAAA,IAAe,OAAO,MAAQ,EAAA;AAC9B,EAAA,UAAA,CAAW,IAAO,GAAA,OAAA,CAAA;AACtB,CAAO,MAAA;AAEH,EAAA,MAAA,CAAO,IAAO,GAAA,OAAA,CAAA;AAClB;;AC1XA;AA+BO,MAAM,iBAA+B,CAAA;AAAA,EACxC,EAAA,GAAK,IAAI,EAAG,EAAA,CAAA;AAAA,EACZ,SAAoB,EAAC,CAAA;AAAA,EACrB,UAAA,CAAA;AAAA,EACA,UAAsB,EAAC,CAAA;AAAA,EACvB,QAAA,CAAA;AAAA,EACA,KAAA,CAAA;AAAA,EACA,KAAA,CAAA;AAAA,EACA,gBAA2B,EAAC,CAAA;AAAA,EAC5B,WAAY,CAAA,KAAA,EAAgB,KAAoB,GAAA,EAAI,EAAA;AAChD,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAEb,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,GACjB;AAAA,EAEA,IAAO,GAAA;AACH,IAAM,MAAA,EAAE,IAAO,GAAA,IAAA,CAAA;AACf,IAAA,OAAO,WAAW,EAAE,CAAA,CAAA;AAAA,GACxB;AAAA,EAEA,cAAc,IAA0D,EAAA;AACpE,IAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,GAAG,IAAI,CAAA,CAAA;AAE1B,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,aAA2B,GAAA;AACvB,IAAA,OAAO,CAAC,GAAG,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,UAAU,CAAE,CAAA,MAAA;AAAA,MACrC,CAAC,CAAM,KAAA,CAAC,CAAC,CAAA;AAAA,KACb,CAAA;AAAA,GACJ;AAAA,EAEA,gBAAgB,CAAiC,EAAA;AAC7C,IAAI,IAAA,IAAA,CAAK,UAAY,EAAA,EAAA,CAAG,CAAC,CAAA;AAAG,MAAO,OAAA,KAAA,CAAA,CAAA;AACnC,IAAI,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,CAAC,MAAM,CAAE,CAAA,EAAA,CAAG,CAAC,CAAC,CAAA;AAAG,MAAO,OAAA,KAAA,CAAA,CAAA;AAC7C,IAAO,OAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAEA,cAAc,UAAqB,EAAA;AAC/B,IAAA,IAAI,CAAC,UAAA,CAAW,KAAM,CAAA,MAAA,CAAO,QAAU,EAAA;AACnC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,sDAAA,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AACA,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAElB,IAAK,IAAA,CAAA,EAAA,CAAG,cAAc,UAAU,CAAA,CAAA;AAChC,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,QAAA,CAEI,OACA,CACK,EAAA;AACL,IAAA,IAAI,MAAM,OAAQ,CAAA,UAAA;AAAY,MAAK,IAAA,CAAA,aAAA,CAAc,IAAK,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AACnE,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,EAAG,CAAA,QAAA,CAAS,KAAO,EAAA,CAAA,EAAG,QAAQ,CAAA,CAAA;AAEnC,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,SAAA,CAEI,QACA,CACG,EAAA;AACH,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AACxB,MAAA,IAAI,MAAM,OAAQ,CAAA,UAAA;AAAY,QAAK,IAAA,CAAA,aAAA,CAAc,IAAK,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AAAA,KACvE;AACA,IAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,GAAG,MAAM,CAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,EAAG,CAAA,SAAA,CAAU,MAAQ,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAEpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,aAEO,IACA,EAAA;AACH,IAAA,MAAM,CAAC,MAAA,EAAQ,GAAG,UAAU,CAAI,GAAA,IAAA,CAAA;AAChC,IAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,MAAM,CAAA,CAAA;AACxB,IAAK,IAAA,CAAA,EAAA,CAAG,SAAU,CAAA,GAAG,IAAI,CAAA,CAAA;AACzB,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,cAEQ,IACD,EAAA;AACH,IAAA,MAAM,CAAC,OAAA,EAAS,GAAG,UAAU,CAAI,GAAA,IAAA,CAAA;AACjC,IAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,GAAG,OAAO,CAAA,CAAA;AAC5B,IAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,GAAG,IAAI,CAAA,CAAA;AAE1B,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,gBAAgB,IAAsC,EAAA;AAClD,IAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,GAAG,IAAI,CAAA,CAAA;AAE5B,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,aAAa,MAAgB,EAAA;AAC/B,IAAA,MAAM,CAAC,GAAG,CAAA,GAAI,MAAM,MAAO,CAAA,MAAA,CAAO,KAAK,EAAE,CAAA,CAAA;AAEzC,IAAK,IAAA,CAAA,EAAA,CAAG,aAAa,GAAG,CAAA,CAAA;AAAA,GAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAY,GAAA;AAAA,GAAC;AACjB;;ACrIO,SAAS,mBACZ,IACa,EAAA;AACb,EAAM,MAAA,KAAA,GAAQ,MAAM,OAAQ,CAAA,IAAI,IAAI,IAAO,GAAA,MAAA,CAAO,OAAO,IAAI,CAAA,CAAA;AAC7D,EAAA,MAAM,QAAoB,EAAC,CAAA;AAC3B,EAAA,KAAA,MAAW,MAAM,KAAO,EAAA;AACpB,IAAI,IAAA,CAAC,KAAM,CAAA,QAAA,CAAS,EAAE,CAAA;AAAG,MAAA,KAAA,CAAM,KAAK,EAAE,CAAA,CAAA;AAAA,GAC1C;AACA,EAAO,OAAA,KAAA,CAAM,GAAI,CAAA,CAAC,GAAQ,KAAA,aAAA,CAAc,IAAI,IAAM,EAAA,MAAA,CAAO,CAAC,CAAC,CAAC,CAAA,CAAA;AAChE,CAAA;AAMO,MAAM,mBAAsB,GAAA,WAAA,CAAA;AAWnB,SAAA,aAAA,CACZ,WACA,KACW,EAAA;AACX,EAAA,MAAM,UAAU,KAAM,CAAA,OAAA,CAAQ,SAAS,CACjC,GAAA,SAAA,GACA,oBAAoB,SAAS,CAAA,CAAA;AAKnC,EAAO,OAAA,CAAC,SAAS,KAAK,CAAA,CAAA;AAC1B,CAAA;AAkBO,SAAS,IACZ,CAAA,GAAA,EACA,SACA,EAAA,KAAA,GAAgB,EACX,EAAA;AACL,EAAA,MAAM,IAAI,IAAI,KAAA;AAAA,IACV,KAAA,CAAA;AAAA,IACA,IAAI,MAAA,CAAO,CAAC,CAAC,GAAK,EAAA,CAAC,aAAc,CAAA,SAAA,EAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AAAA,GACzD,CAAA;AACA,EAAO,OAAA,CAAA,CAAA;AACX;;;;;;;;;;;;;ACGO,MAAM,QAAW,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYpB,UAAA,CAAW,KAAO,EAAA,SAAA,EAAW,UAAY,EAAA;AACrC,IAAA,eAAA,CAAgB,SAAS,CAAA,CAAA;AACzB,IAAO,OAAA,UAAA,CAAW,KAAO,EAAA,SAAA,EAAW,UAAU,CAAA,CAAA;AAAA,GAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAA,CAAS,KAAO,EAAA,SAAA,EAAW,UAAY,EAAA;AACnC,IAAA,eAAA,CAAgB,WAAW,IAAc,CAAA,CAAA;AACzC,IAAA,OAAO,QAAS,CAAA,YAAA,CAAa,KAAO,EAAA,SAAA,EAAW,UAAU,CAAA,CAAA;AAAA,GAC7D;AAAA,EACA,YAAA,CAAa,KAAO,EAAA,SAAA,EAAW,UAAY,EAAA;AAAA;AACvC;AAGA,IAAO,OAAA,UAAA,CAAA;AAAA,GACX;AACJ,CAAA,CAAA;AAEA,SAAS,eAAA,CAAgB,WAAmB,YAAwB,EAAA;AAChE,EAAA,IAAI,CAAC,SAAA,CAAU,KAAM,CAAA,KAAK,CAAG,EAAA;AACzB,IAAA,MAAM,eACF,YACA,IAAA,sDAAA,CAAA;AACJ,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,CAAA,UAAA,EAAa,SAAS,CAAA,+BAAA,EAAkC,YAAY,CAAA,CAAA;AAAA,KACxE,CAAA;AAAA,GACJ;AACA,EAAI,IAAA,SAAA,CAAU,KAAM,CAAA,MAAM,CAAG,EAAA;AACzB,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,aAAa,SAAS,CAAA,iCAAA,CAAA;AAAA,KAC1B,CAAA;AAAA,GACJ;AACJ,CAAA;AAcgB,SAAA,KAAA,CAAM,KAAO,EAAA,SAAA,EAAW,UAAY,EAAA;AAEhD,EAAA,IAAI,CAAC,SAAA,CAAU,KAAM,CAAA,UAAU,CAAG,EAAA;AAC9B,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,mBAAmB,SAAS,CAAA,qCAAA,CAAA;AAAA,KAChC,CAAA;AAAA,GACJ;AACA,EAAO,OAAA,UAAA,CAAA;AACX,CAAA;AASgB,SAAA,GAAA,CAAI,KAAO,EAAA,SAAA,EAAW,UAAY,EAAA;AAE9C,EAAA,IAAI,CAAC,SAAA,CAAU,KAAM,CAAA,QAAQ,CAAG,EAAA;AAC5B,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,iBAAiB,SAAS,CAAA,mCAAA,CAAA;AAAA,KAC9B,CAAA;AAAA,GACJ;AACA,EAAO,OAAA,UAAA,CAAA;AACX,CAAA;AAoBgB,SAAA,UAAA,CAAW,KAAO,EAAA,SAAA,EAAW,UAAY,EAAA;AAErD,EAAA,IAAI,CAAC,SAAA,CAAU,KAAM,CAAA,WAAW,CAAG,EAAA;AAC/B,IAAA,IAAI,IAAO,GAAA,EAAA,CAAA;AACX,IAAI,IAAA,SAAA,CAAU,KAAM,CAAA,QAAQ,CAAG,EAAA;AAC3B,MAAO,IAAA,GAAA,CAAA;AAAA,6EAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,CAAA,qBAAA,EAAwB,SAAS,CAAA,iCAAA,EAAoC,IAAI,CAAA,CAAA;AAAA,KAC7E,CAAA;AAAA,GACJ;AACA,EAAO,OAAA,UAAA,CAAA;AACX,CAAA;AAEsB,eAAA,mBAAA,CAClB,CACA,EAAA,QAAA,EACA,OACF,EAAA;AACE,EAAM,MAAA,EAAE,OAAS,EAAA,SAAA,EAAc,GAAA,QAAA,CAAA;AAE/B,EAAM,MAAA,YAAA,GAAe,CAAE,CAAA,MAAA,CAAO,MAAO,EAAA,CAAA;AACrC,EAAA,OAAA,CAAQ,KAAK,gBAAkB,EAAA;AAAA,IAC3B,YAAA;AAAA,GACH,CAAA,CAAA;AAED,EAAA,KAAA,MAAW,KAAK,OAAS,EAAA;AACrB,IAAA,MAAM,CAAC,CAAC,CAAI,GAAA,MAAM,CAAE,CAAA,aAAA,CAAA;AACpB,IAAQ,OAAA,CAAA,GAAA,CAAI,2BAA2B,CAAE,CAAA,QAAA,GAAW,SAAU,CAAA,CAAA,EAAG,EAAE,CAAC,CAAA,CAAA;AACpE,IAAM,MAAA,KAAA,GAAQ,MAAM,CAAE,CAAA,KAAA,CAAA;AACtB,IAAA,KAAA,MAAW,KAAK,KAAO,EAAA;AACnB,MAAA,IAAI,YAAc,EAAA;AACd,QAAI,IAAA,CAAA,CAAE,MAAM,MAAO,CAAA,MAAA,MAAY,CAAE,CAAA,KAAA,CAAM,QAAY,IAAA,CAAA,CAAE,QAAU,EAAA;AAC3D,UAAO,OAAA,CAAA,CAAA;AAAA,SACX;AACA,QAAA,OAAA,CAAQ,GAAI,CAAA,0BAAA,EAA4B,CAAE,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AAAA,OACnD,MAAA;AACH,QAAA,IAAI,CAAE,CAAA,KAAA,CAAM,EAAG,CAAA,CAAC,CAAG,EAAA;AACf,UAAO,OAAA,CAAA,CAAA;AAAA,SACX;AAAA,OACJ;AAAA,KACJ;AAAA,GACJ;AACA,EAAA,IAAI,YAAc,EAAA;AACd,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,CAAA,kFAAA,CAAA;AAAA,KACJ,CAAA;AAAA,GAEJ;AAAA;AAGA,EAAA,IAAI,SAAW,EAAA;AACX,IAAA,KAAA,MAAW,KAAK,SAAW,EAAA;AACvB,MAAA,MAAM,KAAQ,GAAA,MAAM,OAAQ,CAAA,QAAA,CAAS,CAAC,CAAA,CAAA;AACtC,MAAA,KAAA,MAAW,KAAK,KAAO,EAAA;AACnB,QAAA,IAAI,CAAE,CAAA,KAAA,CAAM,EAAG,CAAA,CAAC,CAAG,EAAA;AACf,UAAO,OAAA,CAAA,CAAA;AAAA,SACX;AAAA,OACJ;AAAA,KACJ;AAAA,GACJ;AAEA,EAAA,MAAM,IAAI,KAAA;AAAA,IACN,CAAA,qBAAA,EACK,SAAa,IAAA,eAAA,IAAoB,EACtC,CAAA,uBAAA,CAAA;AAAA,GACJ,CAAA;AACJ,CAAA;AAkEA;AAoBO,MAAM,eAGX,CAAA;AAAA;AAAA;AAAA,EAGE,aAAA,CAAA;AAAA,EACA,QAAA,CAAA;AAAA,EACA,aAAA,CAAA;AAAA,EACA,cAAA,CAAA;AAAA,EACA,KAAA,CAAA;AAAA,EACA,OAAA,CAAA;AAAA,EACA,aAAA,CAAA;AAAA,EACA,OAAA,CAAA;AAAA;AAAA,EAEA,WAAW,aAAgB,GAAA;AACvB,IAAA,OAAO,EAAC,CAAA;AAAA,GACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,MAAS,GAAA;AACT,IAAA,IAAI,CAAC,IAAK,CAAA,OAAA;AACN,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,oCAAA,EAAuC,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA,CAAA;AAAA,OAChE,CAAA;AACJ,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA,EAIA,wBACI,MACgC,EAAA;AAChC,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AAAA,EAEA,mBAAuC,GAAA;AACnC,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GAChB;AAAA,EACA,gBAA0C,GAAA;AACtC,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAEA,YAAY,IAA0C,EAAA;AAClD,IAAA,MAAM,EAAE,KAAA,EAAO,MAAQ,EAAA,aAAA,EAAkB,GAAA,IAAA,CAAA;AACzC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,MAAM,EAAE,OAAA,EAAS,aAAe,EAAA,MAAA,EAAQ,SAAY,GAAA,KAAA,CAAA;AACpD,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAA,IAAA,CAAK,aAAgB,GAAA,aAAA,CAAA;AAErB,IAAI,IAAA,OAAA;AAAS,MAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AAE5B,IAAA,IAAI,MAAQ,EAAA;AACR,MAAA,IAAA,CAAK,QAAW,GAAA,MAAA,CAAA;AAEhB,MAAA,MAAM,gBAAoB,GAAA,IAAA,CAAK,cAC3B,GAAA,IAAA,CAAK,wBAAwB,MAAM,CAAA,CAAA;AAEvC,MAAK,IAAA,CAAA,aAAA,GAAgB,IAAK,CAAA,iBAAA,CAAkB,gBAAgB,CAAA,CAAA;AAAA,KACzD,MAAA;AACH,MAAA,IAAA,CAAK,aAAgB,GAAA,aAAA,CAAA;AACrB,MAAK,IAAA,CAAA,aAAA,GAAgB,KAAK,iBAAkB,EAAA,CAAA;AAAA,KAChD;AAAA,GACJ;AAAA,EACA,cAAA,CAAA;AAAA;AAAA,EAEA,IAAI,SAAY,GAAA;AACZ,IAAA,OAAO,IAAK,CAAA,gBAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA;AAAA,EAIA,QAAA,CAAA;AAAA,EACA,IAAI,OAAU,GAAA;AACV,IAAA,IAAI,IAAK,CAAA,QAAA;AAAU,MAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAE/B,IAAM,MAAA,OAAA,GAAU,KAAK,aAAe,EAAA,OAAA,CAAA;AACpC,IAAA,IAAI,CAAC,OAAA;AAAS,MAAO,OAAA,YAAA,CAAA;AACrB,IAAA,OAAQ,KAAK,QAAW,GAAA,OAAA,CAAA;AAAA,GAC5B;AAAA,EAEA,IAAI,OAAmB,GAAA;AACnB,IAAA,OAAO,OAAQ,CAAA,UAAA,CAAW,IAAK,CAAA,cAAA,CAAe,aAAa,CAAA,CAAA;AAAA,GAC/D;AAAA,EAEA,IAAI,iBAAoB,GAAA;AACpB,IAAA,IAAI,aAAa,IAAK,CAAA,OAAA;AAAS,MAAO,OAAA,KAAA,CAAA,CAAA;AAEtC,IAAA,OAAO,KAAK,cAAe,CAAA,iBAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,IAAI,QAAW,GAAA;AACX,IAAI,IAAA,SAAA,IAAa,KAAK,OAAS,EAAA;AAC3B,MAAA,MAAM,GAAM,GAAA,IAAA,CAAK,cAAe,CAAA,iBAAA,CAAkB,QAAS,EAAA,CAAA;AAAA;AAE3D,MAAO,OAAA,GAAA,CAAI,OAAQ,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,KACtC;AAEA,IAAO,OAAA,IAAA,CAAK,QAAQ,QAAS,EAAA,CAAA;AAAA,GACjC;AAAA;AAAA;AAAA,EAIA,MAAM,mBAAmBC,MAAoB,EAAA;AACzC,IAAA,MAAM,UAAU,MAAM,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,KAAK,OAAO,CAAA,CAAA;AAIxD,IAAO,OAAA,OAAA,CAAQ,MAAO,CAAA,CAAC,CAAM,KAAA;AACzB,MAAA,OAAO,EAAE,UAAW,CAAA,KAAA,EAAO,IAAK,CAAA,GAAA,IAAOA,OAAM,IAAK,CAAA,GAAA,CAAA;AAAA,KACrD,CAAA,CAAA;AAAA,GACL;AAAA;AAAA,EAGA,WAAW,KAAyB,EAAA;AAChC,IAAA,OAAO,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,EAAU,CAAe,KAAA;AAC1C,MAAO,OAAA,CAAA,CAAE,GAAI,CAAA,CAAA,CAAE,KAAK,CAAA,CAAA;AAAA,KACrB,EAAA,IAAI,KAAM,CAAA,EAAE,CAAC,CAAA,CAAA;AAAA,GACpB;AAAA;AAAA,EAYA,YAAA,CAAa,GAAwB,EAAA,KAAA,EAAcA,MAAoB,EAAA;AACnE,IAAA,GAAA,CAAI,UAAU,IAAI,QAAA,CAAS,KAAK,OAAS,EAAA,KAAA,EAAOA,MAAK,CAAC,CAAA,CAAA;AAEtD,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAEA,oBAAA,CAII,aAKA,MACF,EAAA;AACE,IAAA,MAAM,IAA8C,GAAA;AAAA,MAChD,MAAA;AAAA,MACA,OAAO,IAAK,CAAA,KAAA;AAAA,KAChB,CAAA;AAEA,IAAM,MAAA,OAAA,GAAU,IAAI,WAAA,CAAY,IAAI,CAAA,CAAA;AACpC,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,IAAI,YAAe,GAAA;AACf,IAAA,MAAM,KAAQ,GAAA,EAAC,GAAG,IAAA,CAAK,cAAe,KAAK,EAAA,CAAA;AAE3C,IAAM,MAAA,UAAA,GAAa,KAAK,aAAe,CAAA,aAAA,CAAA;AAEvC,IAAA,KAAA,MAAW,CAAC,SAAA,EAAW,eAAe,CAAA,IAAK,UAAa,EAAA;AACpD,MAAM,MAAA,IAAA,GAAO,UAAU,IAAK,CAAA,KAAA,CAAA;AAC5B,MAAA,IAAI,MAAM,IAAI,CAAA;AAAG,QAAA,SAAA;AACjB,MAAA,IAAI,qBAAqB,MAAO,CAAA,cAAA,CAAe,SAAS,CAAA,CAAE,YAAY,IAAM,EAAA;AACxE,QAAM,MAAA,IAAA,GAAO,UAAU,eAAgB,EAAA,CAAA;AACvC,QAAMC,MAAAA,KAAAA,GAAO,KAAK,IAAK,CAAA,KAAA,CAAA;AACvB,QAAA,IAAI,MAAMA,KAAI,CAAA;AAAG,UAAM,MAAA,IAAI,MAAM,CAAS,OAAA,CAAA,CAAA,CAAA;AAC1C,QAAA,KAAA,CAAMA,KAAI,CAAI,GAAA,IAAA,CAAA;AAAA,OAClB;AAAA,KACJ;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,eAAkB,GAAA;AAClB,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,gBAAmB,GAAA;AACnB,IAAM,MAAA,EAAE,eAAiB,EAAA,gBAAA,EAAqB,GAAA,IAAA,CAAA;AAC9C,IAAA,MAAM,EAAE,CAAC,gBAAgB,GAAG,SAAU,EAAA,GAAI,KAAK,aAAe,CAAA,KAAA,CAAA;AAC9D,IAAO,OAAA,SAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,oBAAuB,GAAA;AACvB,IAAO,OAAA,UAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,qBAAwB,GAAA;AACxB,IAAM,MAAA,EAAE,oBAAsB,EAAA,qBAAA,EAA0B,GAAA,IAAA,CAAA;AACxD,IAAA,MAAM,EAAE,CAAC,qBAAqB,GAAG,cAAe,EAAA,GAC5C,KAAK,aAAe,CAAA,KAAA,CAAA;AACxB,IAAO,OAAA,cAAA,CAAA;AAAA,GACX;AAAA,EACA,gBAAgB,YAAc,EAAA;AAC1B,IAAA,MAAM,EAAE,CAAC,YAAY,GAAG,YAAA,KAAiB,IAAK,CAAA,qBAAA,CAAA;AAC9C,IAAA,IAAI,CAAC,YAAc,EAAA;AACf,MAAM,MAAA,EAAE,oBAAsB,EAAA,qBAAA,EAA0B,GAAA,IAAA,CAAA;AACxD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,IAAI,IAAK,CAAA,WAAA,CAAY,IAAI,CAA4B,yBAAA,EAAA,qBAAqB,KAAK,YAAY,CAAA;AAAA,oCAAA,EAChD,MAAO,CAAA,IAAA;AAAA,UAC1C,IAAK,CAAA,qBAAA;AAAA,SACT,CAAE,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA;AAAA,OACpB,CAAA;AAAA,KACJ;AACA,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,SACF,CAAA,SAAA,EACAD,MAC2B,EAAA;AAC3B,IAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,gBAAA,CAAiB,SAAS,CAAA,CAAA;AAIrD,IAAA,IAAI,CAAC,aAAA;AAAe,MAAA,MAAM,IAAI,KAAA,CAAM,CAAqB,kBAAA,EAAA,SAAS,CAAE,CAAA,CAAA,CAAA;AACpE,IAAI,IAAA,CAACA,OAAM,QAAS,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,6DAAA,CAAA;AAAA,OACJ,CAAA;AAEJ,IAAO,OAAA,IAAA,CAAK,cAAc,aAAeA,EAAAA,MAAAA,CAAM,IAAK,CAAE,CAAA,KAAA,CAAM,CAAC,CAAM,KAAA;AAC/D,MAAI,IAAA,CAAA,CAAE,OAAS,EAAA,KAAA,CAAM,qBAAqB,CAAA;AAAG,QAAO,OAAA,KAAA,CAAA,CAAA;AACpD,MAAM,MAAA,CAAA,CAAA;AAAA,KACT,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,MAAc,kBAAmB,CAAA,QAAA,EAAe,QAAoB,EAAA;AAChE,IAAM,MAAA,EAAE,UAAY,EAAA,eAAA,EAAoB,GAAA,QAAA,CAAA;AAExC,IAAI,IAAA,QAAA,CAAS,UAAY,EAAA,MAAA,IAAU,CAAG,EAAA;AAClC,MAAM,MAAA,IAAI,MAAM,CAAgD,8CAAA,CAAA,CAAA,CAAA;AAAA,KACpE;AAGA,IAAA,MAAM,kBAAkB,QAAS,CAAA,IAAA,CAAA;AACjC,IAAA,OAAO,MAAO,CAAA,WAAA;AAAA,MACV,MAAM,OAAQ,CAAA,GAAA;AAAA,QACV,UAAW,CAAA,GAAA,CAAI,OAAO,EAAA,EAAY,CAAc,KAAA;AAC5C,UAAM,MAAA,SAAA,GAAY,gBAAgB,CAAC,CAAA,CAAA;AACnC,UAAM,MAAA,SAAA,GAAY,gBAAgB,EAAE,CAAA,CAAA;AAEpC,UAAM,MAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,aAAA;AAAA,YACrB,EAAA;AAAA,YACA,SAAA;AAAA,YACA,SAAA;AAAA,WACJ,CAAA;AAGA,UAAO,OAAA,CAAC,IAAI,KAAK,CAAA,CAAA;AAAA,SACpB,CAAA;AAAA,OACL;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAEA,MAAc,mBAAA,CACV,QACA,EAAA,WAAA,EACA,QACF,EAAA;AACE,IAAA,MAAM,aAAuB,WAAY,CAAA,UAAA,CAAA;AAGzC,IAAM,MAAA,EAAE,QAAW,GAAA,QAAA,CAAA;AACnB,IAAA,OAAO,MAAO,CAAA,WAAA;AAAA,MACV,MAAM,OAAQ,CAAA,GAAA;AAAA,QACV,UAAW,CAAA,GAAA,CAAI,OAAO,EAAA,EAAI,CAAM,KAAA;AAC5B,UAAM,MAAA,SAAA,GAAY,OAAO,CAAC,CAAA,CAAA;AAC1B,UAAA,MAAM,SAAY,GAAA,WAAA,CAAY,MAAO,CAAA,CAAC,CAAE,CAAA,IAAA,CAAA;AACxC,UAAM,MAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,aAAA;AAAA,YACrB,EAAA;AAAA,YACA,SAAA;AAAA,YACA,SAAA;AAAA,WACJ,CAAE,MAAM,CAAe,WAAA,KAAA;AACnB,YAAA,OAAA,CAAQ,KAAK,+CAAiD,EAAA,EAAC,EAAI,EAAA,SAAA,EAAW,WAAU,CAAA,CAAA;AACxF,YAAA,SAAA;AACA,YAAM,MAAA,WAAA,CAAA;AAAA,WACT,CAAA,CAAA;AACD,UAAO,OAAA,CAAC,IAAI,KAAK,CAAA,CAAA;AAAA,SACpB,CAAA;AAAA,OACL;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAEA,MAAc,aAAc,CAAA,QAAA,EAAe,QAAoB,EAAA;AAC3D,IAAM,MAAA,EAAE,UAAY,EAAA,eAAA,EAAoB,GAAA,QAAA,CAAA;AACxC,IAAA,IAAI,CAAC,UAAY,EAAA;AACb,MAAM,MAAA,WAAA,GAAc,SAAS,SAAU,CAAA,qBAAA,CAAA;AACvC,MAAA,IAAI,WAAa,EAAA;AAEb,QAAA,MAAM,aAAa,QAAS,CAAA,KAAA,CAAA;AAC5B,QAAA,MAAM,EAAE,cAAA,EAAgB,WAAa,EAAA,WAAA,EACjC,GAAA,WAAA,CAAA;AACJ,QAAA,IAAI,EAAE,QAAoB,YAAA,UAAA,CAAA;AACtB,UAAA,MAAM,IAAI,KAAA;AAAA,YACN,yDAAyD,WAAW,CAAA,CAAA;AAAA,WACxE,CAAA;AACJ,QAAA,IAAI,EAAE,UAAc,IAAA,WAAA,CAAA;AAChB,UAAA,MAAM,IAAI,KAAA;AAAA,YACN,CAAA,6BAAA,EAAgC,WAAW,CAAA,OAAA,EAAU,UAAU,CAAA,CAAA;AAAA,WACnE,CAAA;AAEJ,QAAA,MAAM,IAAI,IAAK,CAAA,mBAAA;AAAA,UACX,QAAA;AAAA,UACA,WAAA;AAAA,UACA,QAAA;AAAA,SACJ,CAAA;AACA,QAAO,OAAA,CAAA,CAAA;AAAA,OACX;AACA,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,wEAAA,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AAkBA,IAAA,OAAO,MAAO,CAAA,WAAA;AAAA,MACV,MAAM,OAAQ,CAAA,GAAA;AAAA,QACV,UAAW,CAAA,GAAA,CAAI,OAAO,EAAA,EAAI,CAAM,KAAA;AAC5B,UAAI,IAAA,OAAA,CAAA;AAGJ,UAAM,MAAA,aAAA,GAAgB,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AACvC,UAAM,MAAA,SAAA,GAAY,gBAAgB,EAAE,CAAA,CAAA;AAGpC,UAAA,OAAA,GAAU,MAAM,IAAK,CAAA,aAAA;AAAA,YACjB,EAAA;AAAA,YACA,SAAA;AAAA,YACA,aAAA;AAAA,WACJ,CAAA;AAEA,UAAO,OAAA,CAAC,IAAI,OAAO,CAAA,CAAA;AAAA,SACtB,CAAA;AAAA,OACL;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAEA,MAAc,aAAA,CACV,EACA,EAAA,SAAA,EACA,aACF,EAAA;AACE,IAAI,IAAA,KAAA,CAAA;AACJ,IAAM,MAAA,EAAE,cAAiB,GAAA,SAAA,CAAA;AACzB,IAAM,MAAA,YAAA,GAAe,SAAU,CAAA,WAAA,CAAY,YAAa,CAAA,IAAA,CAAA;AACxD,IAAA,IAAI,YAAY,YAAc,EAAA;AAC1B,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,kBAAmB,CAAA,SAAA,EAAW,aAAa,CAAA,CAAA;AAE9D,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AACA,IAAI,IAAA;AACA,MAAQ,KAAA,GAAA,SAAA,CAAU,SAAS,aAAa,CAAA,CAAA;AACxC,MAAA,IAAI,KAAM,CAAA,IAAA;AAAM,QAAA,KAAA,GAAQ,MAAM,KAAA,CAAA;AAE9B,MAAA,IAAI,MAAW,KAAA,YAAA,IAAgB,CAAM,KAAA,aAAA,CAAc,OAAO,MAAQ,EAAA;AAC9D,QAAA,KAAA,GAAQ,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,OAChC;AAAA,aACK,CAAQ,EAAA;AACb,MAAA,IAAI,CAAE,CAAA,OAAA,EAAS,KAAM,CAAA,sCAAsC,CAAG,EAAA;AAC1D,QAAI,IAAA;AACA,UAAQ,KAAA,GAAA,MAAM,YAAa,CAAA,YAAA,CAAa,aAAa,CAAA,CAAA;AACrD,UAAA,IAAI,MAAU,IAAA,KAAA;AAAO,YAAA,KAAA,GAAQ,KAAM,CAAA,IAAA,CAAA;AAAA,iBAC9BE,EAAQ,EAAA;AACb,UAAA,OAAA,CAAQ,MAAM,CAAgB,aAAA,EAAA,EAAE,CAAKA,EAAAA,EAAAA,EAAAA,CAAE,OAAO,CAAE,CAAA,CAAA,CAAA;AAEhD,UAAA,SAAA;AACA,UAAMA,MAAAA,EAAAA,CAAAA;AAAA,SACV;AAAA,OACG,MAAA;AACH,QAAM,MAAA,CAAA,CAAA;AAAA,OACV;AAAA,KACJ;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,sBAAA,CACI,QACA,EAAA,KAAA,EACA,GACmB,EAAA;AACnB,IAAA,MAAM,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAE,UAAU,CAAA,CAAA;AACpC,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,eAAgB,CAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AAEtD,IAAA,MAAM,KAAQ,GAAA,KAAA,CACT,GAAI,CAAA,UAAU,EACd,MAAO,CAAA,IAAA,CAAK,cAAc,CAAA,CAC1B,OAAO,IAAK,CAAA,iBAAiB,CAC7B,CAAA,MAAA,CAAO,CAAC,KAAoB,KAAA;AACzB,MAAA,IAAI,CAAC,GAAA;AAAK,QAAO,OAAA,IAAA,CAAA;AACjB,MAAA,OAAO,CAAC,CAAC,GAAK,EAAA,eAAA,CAAgB,MAAM,CAAC,CAAA,CAAA;AAAA,KACxC,EACA,IAAK,CAAA,IAAA,CAAK,0BAA0B,CACpC,CAAA,GAAA,CAAI,KAAK,eAAe,CAAA,CAAA;AAC7B,IAAA,OAAA,CAAQ,GAAI,CAAA,kBAAA,EAAoB,aAAc,CAAA,KAAK,CAAC,CAAA,CAAA;AACpD,IAAM,MAAA,MAAA,GAAS,KAAM,CAAA,EAAA,CAAG,CAAC,CAAA,CAAA;AAEzB,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAA,CACI,UACA,GACuB,EAAA;AACvB,IAAA,MAAM,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAE,UAAU,CAAA,CAAA;AACpC,IAAA,MAAM,SAAY,GAAA,aAAA,CAAc,IAAK,CAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAC9C,IAAA,SAAA,CAAU,KAAQ,GAAA,KAAA,CAAA;AAClB,IAAO,OAAA,SAAA,CAAA;AAEP,IAAS,SAAA,aAAA,CAELC,MACA,IACmB,EAAA;AACnB,MAAA,OAAO,IAAK,CAAA,UAAA,CAAW,KAAOA,EAAAA,IAAAA,EAAK,IAAI,CAAA,CAAA;AAAA,KAC3C;AAAA,GACJ;AAAA,EAEA,OAAQ,CAAA,GAAA,EAAwB,EAAsB,EAAA,KAAA,GAAgB,EAAI,EAAA;AACtE,IAAA,OAAO,IAAK,CAAA,eAAA;AAAA,MACR,IAAI,WAAW,CAAC,GAAA,EAAK,oBAAoB,EAAG,CAAA,QAAA,EAAU,CAAC,CAAC,CAAA;AAAA,MACxD,KAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAEA,YAAA,CAAa,OAAqB,EAAA,KAAA,GAAgB,EAAI,EAAA;AAClD,IAAA,MAAM,MAAS,GAAA,CAAC,CAAC,OAAA,EAAS,KAAK,CAAyB,CAAA,CAAA;AACxD,IAAA,MAAM,CAAI,GAAA,IAAI,KAAM,CAAA,KAAA,CAAA,EAAW,MAAM,CAAA,CAAA;AACrC,IAAO,OAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAEA,eAAA,CAAgB,OAAqB,EAAA,KAAA,GAAgB,EAAI,EAAA;AACrD,IAAU,IAAA,CAAK,YAAa,CAAA,OAAA,EAAS,KAAK,EAAA;AAE1C,IAAA,MAAM,MAAM,IAAI,QAAA;AAAA,MACZ,IAAI,OAAQ,CAAA,KAAA,CAAc,EAAE,CAAE,CAAA,IAAA,CAAK,CAAC,CAAC,CAAA;AAAA,MACrC,IAAA,CAAK,YAAa,CAAA,OAAA,EAAS,KAAK,CAAA;AAAA,KACpC,CAAA;AACA,IAAI,GAAA,CAAA,eAAA,CAAgB,KAAK,aAAa,CAAA,CAAA;AACtC,IAAA,OAAO,GAAI,CAAA,KAAA,CAAA;AAAA,GACf;AAAA,EAYA,gBAAA,CACI,SACA,EAAA,gBAAA,EACA,QACmB,EAAA;AACnB,IAAI,IAAA,CAAA,CAAA;AACJ,IAAI,IAAA,GAAA,CAAA;AACJ,IAAI,IAAA,SAAA,CAAA;AAAA;AAEJ,IAAA,IAAI,CAAC,SAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,mDAAA,CAAA;AAAA,OACJ,CAAA;AACJ,IAAM,MAAA,SAAA,GAAY,eAAgB,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAE3C,IAAA,MAAM,UAAU,SAAqB,YAAA,KAAA,CAAA;AACrC,IAAA,IAAI,OAAS,EAAA;AACT,MAAA,CAAA,GAAI,UAAU,KAAQ,GAAA,SAAA,CAAA;AACtB,MAAO,OAAA,SAAA,CAAA;AAAA,KACX,MAAA,IAAW,qBAAqB,iBAAmB,EAAA;AAC/C,MAAM,GAAA,GAAA,SAAA,CAAA;AACN,MAAA,IAAI,aAAa,OAAO,gBAAA;AACpB,QAAA,MAAM,IAAI,KAAA;AAAA,UACN,CAAA,oFAAA,CAAA;AAAA,SACJ,CAAA;AACJ,MAAY,SAAA,GAAA,gBAAA,CAAA;AACZ,MAAA,QAAA,GAAW,QAAY,IAAA,EAAA,CAAA;AAEvB,MAAA,CAAA,GAAI,UAAU,KAAQ,GAAA,IAAA,CAAK,YAAa,CAAA,SAAA,EAAW,UAAU,GAAG,CAAA,CAAA;AAChE,MAAO,OAAA,SAAA,CAAA;AAAA,KACX,MAAA,IAAW,qBAAqB,UAAY,EAAA;AACxC,MAAA,GAAA,GAAM,SAAU,CAAA,iBAAA,CAAA;AAChB,MAAA,IAAI,CAAC,gBAAA;AAAkB,QAAmB,gBAAA,GAAA,EAAA,CAAA;AAC1C,MAAA,IAAI,aAAa,OAAO,gBAAA;AACpB,QAAA,MAAM,IAAI,KAAA;AAAA,UACN,CAAA,oEAAA,CAAA;AAAA,SACJ,CAAA;AACJ,MAAW,QAAA,GAAA,gBAAA,CAAA;AAEX,MAAI,CAAA,GAAA,SAAA,CAAU,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAA,EAAI,CAAC,CAAC,SAAA,EAAW,QAAQ,CAAC,CAAC,CAAA,CAAA;AAC3D,MAAO,OAAA,SAAA,CAAA;AAAA,KACJ,MAAA;AACH,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,+DAAA,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AAEA,IAAA,SAAS,gBAEL,SACuB,EAAA;AACvB,MAAO,OAAA,IAAA,CAAK,QAAS,CAAA,SAAA,EAAW,CAAC,CAAA,CAAA;AAAA,KACrC;AAAA,GACJ;AAAA,EAEQ,QACJ,CAAA,SAAA,EACA,KACA,EAAA,SAAA,EACA,QACuB,EAAA;AACvB,IAAA,IAAI,SAAqB,YAAA,OAAA;AACrB,MAAA,OACK,KAAK,YAAa,CAAA,SAAA,EAAW,OAAO,SAAW,EAAA,QAAQ,KACpD,SACJ,IAAA,KAAA,CAAA,CAAA;AAER,IAAA,IAAI,SAAqB,YAAA,QAAA;AACrB,MAAA,OACK,KAAK,cAAe,CAAA,SAAA,EAAW,OAAO,SAAW,EAAA,QAAQ,KACtD,SACJ,IAAA,KAAA,CAAA,CAAA;AAER,IAAA,IAAI,SAAqB,YAAA,MAAA;AACrB,MAAA,OACK,KAAK,cAAe,CAAA,SAAA,EAAW,OAAO,SAAW,EAAA,QAAQ,KACtD,SACJ,IAAA,KAAA,CAAA,CAAA;AAAA;AAIR,IAAA,OACK,KAAK,aAAc,CAAA,SAAA,EAAW,OAAO,SAAW,EAAA,QAAQ,KACrD,SACJ,IAAA,KAAA,CAAA,CAAA;AAAA,GAER;AAAA,EAEQ,YACJ,CAAA,CAAA,EACA,KACA,EAAA,SAAA,EACA,QACF,EAAA;AACE,IAAA,OACI,KAAK,cAAe,CAAA,CAAA,CAAE,YAAY,KAAO,EAAA,SAAA,EAAW,QAAQ,CAAK,IAAA,CAAA,CAAA;AAAA,GAEzE;AAAA,EACQ,aACJ,CAAA,CAAA,EACA,KACA,EAAA,SAAA,EACA,QACF,EAAA;AACE,IAAA,OACI,KAAK,cAAe,CAAA,CAAA,CAAE,YAAY,KAAO,EAAA,SAAA,EAAW,QAAQ,CAAK,IAAA,CAAA,CAAA;AAAA,GAEzE;AAAA,EAEQ,cACJ,CAAA,CAAA,EACA,MACA,EAAA,SAAA,EACA,QACF,EAAA;AACE,IAAM,MAAA,CAAA,GACF,kBAAkB,iBACZ,GAAA,IAAA,CAAK,aAAa,SAAY,EAAA,QAAA,EAAW,MAAM,CAC/C,GAAA,MAAA,CAAA;AAEV,IAAO,OAAA,CAAA,CAAE,EAAG,CAAA,CAAA,CAAE,MAAM,CAAA,CAAA;AAAA,GACxB;AAAA,EAEQ,cACJ,CAAA,CAAA,EACA,MACA,EAAA,SAAA,EACA,QACF,EAAA;AACE,IAAI,IAAA,MAAA,YAAkB,qBAAqB,CAAC,SAAA;AACxC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,kDAAA,CAAA;AAAA,OACJ,CAAA;AACJ,IAAI,IAAA,MAAA,YAAkB,qBAAqB,CAAC,QAAA;AACxC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,iDAAA,CAAA;AAAA,OACJ,CAAA;AAEJ,IAAM,MAAA,CAAA,GACF,kBAAkB,iBACZ,GAAA,IAAA,CAAK,aAAa,SAAY,EAAA,QAAA,EAAW,MAAM,CAC/C,GAAA,MAAA,CAAA;AAEV,IAAO,OAAA,CAAA,CAAE,KAAM,CAAA,EAAA,CAAG,CAAC,CAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,YAAA,CACI,SACA,EAAA,QAAA,EACA,GACK,EAAA;AACL,IAAA,MAAM,IAAI,KAAA;AAAA,MACN,CAAA,oGAAA,CAAA;AAAA,KACJ,CAAA;AAAA,GAiBJ;AAAA,EAEA,UAAA,CAAW,KAAc,EAAA,GAAA,EAAoC,CAAY,EAAA;AACrE,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,eAAgB,CAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AAEtD,IAAM,MAAA,KAAA,GAAQ,CAAC,CAAC,CAAA,CACX,IAAI,UAAU,CAAA,CACd,OAAO,IAAK,CAAA,iBAAiB,EAC7B,MAAO,CAAA,IAAA,CAAK,cAAc,CAC1B,CAAA,GAAA,CAAI,KAAK,eAAe,CAAA,CACxB,GAAG,CAAC,CAAA,CAAA;AAET,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA,EAKU,0BACN,CAAA,EAAE,IAAM,EAAA,KAAA,EAAO,YAAc,EAAA,EAAA,EAC7B,EAAA,EAAE,IAAM,EAAA,KAAA,EAAO,YAAc,EAAA,EAAA,EAC/B,EAAA;AACE,IAAA;AAAA;AAEI,MAAI,IAAA,CAAC,MAAM,EAAI,EAAA;AACX,QAAO,OAAA,CAAA,CAAA,CAAA;AAAA,OACX;AACA,MAAI,IAAA,EAAA,IAAM,CAAC,EAAI,EAAA;AACX,QAAO,OAAA,CAAA,CAAA;AAAA,OACX;AAAA,KACJ;AAAA;AAEA,IAAA,IAAI,KAAQ,GAAA,KAAA;AAAO,MAAO,OAAA,CAAA,CAAA,CAAA;AAC1B,IAAA,IAAI,KAAQ,GAAA,KAAA;AAAO,MAAO,OAAA,CAAA,CAAA;AAC1B,IAAO,OAAA,CAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA,EAKU,iBAAA,CAAkB,EAAE,UAAA,EAAwB,EAAA;AAClD,IAAA,OAAO,CAAC,CAAC,UAAA,CAAA;AAAA,GACb;AAAA;AAAA;AAAA;AAAA,EAIU,cAAA,CAAe,EAAE,CAAA,EAAe,EAAA;AACtC,IAAA,OAAO,CAAE,CAAA,KAAA,CAAM,MAAO,CAAA,MAAA,KAAW,CAAI,GAAA,KAAA,CAAA,CAAA;AAAA,GACzC;AAAA;AAAA;AAAA;AAAA,EAIU,eAAA,CAAgB,EAAE,CAAA,EAAe,EAAA;AACvC,IAAO,OAAA,CAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA,EAIU,eAAA,CAAgB,KAAa,GAAc,EAAA;AACjD,IAAA,OAAO,CAAC,CAAyB,KAAA;AAC7B,MAAA,MAAM,YAAe,GAAA,CAAA,CAAE,KAAM,CAAA,MAAA,CAAO,MAAO,EAAA,GACrC,MAAO,CAAA,CAAC,CACR,GAAA,CAAA,CAAE,UAAW,CAAA,eAAA,CAAgB,KAAK,aAAa,CAAA,CAAA;AACrD,MAAM,MAAA,IAAA,GAAO,CAAE,CAAA,KAAA,CAAM,QAAW,GAAA,YAAA,CAAA;AAChC,MAAA,MAAM,UAAa,GAAA,IAAA,GAAO,GAAQ,KAAA,GAAA,GAAM,OAAO,GAAM,GAAA,IAAA,CAAA,CAAA;AACrD,MAAA,MAAM,CAAI,GAAA,EAAE,CAAG,EAAA,UAAA,EAAY,MAAM,YAAa,EAAA,CAAA;AAE9C,MAAO,OAAA,CAAA,CAAA;AAAA,KACX,CAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA,EAIU,iBAAkB,CAAA,CAAA,EAAW,EAAE,YAAA,EAAkC,EAAA;AACvE,IAAO,OAAA,CAAA,IAAK,eAAe,CAAI,GAAA,CAAA,CAAA,CAAA;AAAA,GACnC;AAAA,EAEA,MAAM,kBACF,GAC0B,EAAA;AAC1B,IAAA,IAAI,CAAC,IAAK,CAAA,OAAA;AAAS,MAAA,MAAM,IAAK,CAAA,iBAAA,CAAA;AAE9B,IAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAElC,IAAM,MAAA,UAAA,GAAa,IAAK,CAAA,eAAA,CAAgB,aAAa,CAAA,CAAA;AACrD,IAAM,MAAA,WAAA,GAAc,MACd,GAAI,CAAA,eAAA,CAAgB,KAAK,GAAG,CAAA,GAC5B,CAAC,CAAe,KAAA,CAAA,CAAA;AAEtB,IAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,IAAA,CAAK,CAAC,KAAU,KAAA;AACtC,MAAA,MAAM,SAAY,GAAA,KAAA,CACb,MAAO,CAAA,WAAW,EAClB,GAAI,CAAA,UAAU,CACd,CAAA,MAAA,CAAO,IAAK,CAAA,iBAAiB,CAC7B,CAAA,IAAA,CAAK,KAAK,0BAA0B,CAAA,CAAA;AAEzC,MAAA,IAAI,UAAU,MAAO,CAAA,IAAA,CAAK,iBAAmB,EAAA,CAAC,IAAI,CAAG,EAAA;AACjD,QAAA,OAAO,UACF,MAAO,CAAA,IAAA,CAAK,cAAc,CAC1B,CAAA,GAAA,CAAI,KAAK,eAAe,CAAA,CAAA;AAAA,OACjC;AACA,MAAO,OAAA,SAAA,CAAU,GAAI,CAAA,IAAA,CAAK,eAAe,CAAA,CAAA;AAAA,KAC5C,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,MAAM,OACF,GACA,EAAA;AAAA,IACI,UAAU,EAAC;AAAA,GACf,GAEI,EACN,EAAA;AACE,IAAA,IAAI,EAAE,EAAA,EAAI,QAAW,GAAA,QAAA,EAAe,GAAA,GAAA,CAAA;AACpC,IAAM,MAAA,EAAE,OAAS,EAAA,MAAA,EAAW,GAAA,IAAA,CAAA;AAC5B,IAAI,IAAA,MAAA,IAAU,QAAQ,MAAQ,EAAA;AAC1B,MAAA,MAAM,CAAC,aAAa,CAAA,GAAK,MAAM,IAAK,CAAA,OAAA,EAAS,iBAAkB,EAAC,CAAA;AAChE,MAAA,MAAM,MAAS,GAAA,MAAM,IAAK,CAAA,iBAAA,CAAkB,GAAG,CAAA,CAAA;AAC/C,MAAA,MAAM,WAAW,CAAC,GAAG,OAAS,EAAA,GAAG,IAAI,aAAa,CAAA,CAAA;AAElD,MAAA,MAAM,OAAU,GAAA,MAAA,IAAU,IAAI,YAAA,CAAa,MAAM,CAAA,CAAA;AACjD,MAAA,IAAI,UAAU,OAAS,EAAA;AAEnB,QAAA,IAAI,EAAG,CAAA,OAAA,EAAa,IAAA,CAAC,IAAI,UAAY,EAAA;AACjC,UAAA,IAAI,CAAC,CAAC,CAAI,GAAA,MAAM,MAAO,CAAA,UAAA,CAAA;AACvB,UAAA,IAAI,CAAC,CAAG,EAAA;AACJ,YAAA,CAAA,GAAI,MAAM,OAAQ,CAAA,cAAA,CAAe,IAAK,CAAA,GAAA,CAAI,EAAE,CAAC,CAAA,CAAA;AAC7C,YAAA,IAAI,CAAE,CAAA,KAAA,CAAM,QAAW,GAAA,IAAA,CAAK,IAAI,GAAG,CAAA;AAC/B,cAAA,MAAM,IAAI,KAAA;AAAA,gBACN,CAAA,6LAAA,CAAA;AAAA,eACJ,CAAA;AAAA,WACR;AACA,UAAA,GAAA,CAAI,cAAc,CAAC,CAAA,CAAA;AAAA,SACvB;AAAA,OACJ;AAIA,MAAA,KAAA,MAAW,EAAE,UAAA,EAAY,GAAI,EAAA,IAAK,QAAU,EAAA;AACxC,QAAA,IAAI,CAAC,GAAA;AAAK,UAAA,SAAA;AACV,QAAI,IAAA,EAAA,CAAG,KAAK,OAAQ,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,GAAA,CAAI,EAAG,CAAA,CAAC,CAAC,CAAA;AAAG,UAAA,SAAA;AAE5C,QAAA,EAAA,CAAG,UAAU,GAAG,CAAA,CAAA;AAAA,OACpB;AAMA,MAAI,IAAA;AAEA,QAAA,MAAM,EAAG,CAAA,QAAA,CAAS,IAAK,CAAA,aAAA,EAAe,eAAe,MAAM,CAAA,CAAA;AAAA,eAOtD,CAAG,EAAA;AACR,QAAA,OAAA,CAAQ,GAAI,CAAA,oBAAA,EAAsB,GAAI,CAAA,IAAA,EAAM,CAAA,CAAA;AAC5C,QAAA,SAAA;AACA,QAAM,MAAA,CAAA,CAAA;AAAA,OACV;AACA,MAAA,IAAI,UAAU,OAAS,EAAA;AACnB,QAAA,IAAI,aAAgB,GAAA,KAAA,CAAA;AACpB,QAAA,KAAA,MAAW,KAAK,QAAU,EAAA;AACtB,UAAA,IAAI,CAAE,MAAM,OAAQ,CAAA,YAAA,CAAa,CAAC,CAAA;AAAI,YAAA,SAAA;AACtC,UAAgB,aAAA,GAAA,IAAA,CAAA;AAAA,SACpB;AACA,QAAA,IAAI,aAAe,EAAA;AACf,UAAA,MAAM,IAAO,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,EAAE,CAAA,CAAA;AAAA;AAGnC,UAAG,EAAA,CAAA,aAAA,CAAc,MAAM,KAAK,CAAA,CAAA;AAAA,SAChC;AAAA,OACJ;AAAA,KACG,MAAA;AACH,MAAA,OAAA,CAAQ,KAAK,8BAA8B,CAAA,CAAA;AAAA,KAC/C;AACA,IAAA,OAAA,CAAQ,GAAI,CAAA,iBAAA,EAAmB,GAAI,CAAA,IAAA,EAAM,CAAA,CAAA;AACzC,IAAA,MAAM,QAAW,GAAA;AAAA,MACb,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,EAAE,CAAA;AAAA,KAC5B,CAAA;AACA,IAAA,IAAI,MAAQ,EAAA;AACT,MAAI,IAAA,CAAC,KAAK,KAAM,CAAA,MAAA;AAAQ,QAAA,QAAA,CAAS,IAAM,CAAA,MAAA,CAAO,QAAS,CAAA,EAAE,CAAC,CAAA,CAAA;AAAA,KAC7D;AACA,IAAO,OAAA,OAAA,CAAQ,IAAI,QAAQ,CAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,IAAI,CAA4B,EAAA;AAC5B,IAAA,MAAM,EACF,GAAA,QAAA,IAAY,OAAO,CAAA,GACb,MAAO,CAAA,IAAA,CAAK,KAAM,CAAA,GAAA,GAAY,CAAC,CAAC,CAC9B,GAAA,MAAA,CAAO,GAAS,CAAI,GAAA,CAAA,CAAA;AAChC,IAAO,OAAA,EAAA,CAAA;AAAA,GACX;AAAA;AAAA,EAGA,cAAiC,GAAA;AAC7B,IAAM,MAAA,IAAI,MAAM,CAA6B,2BAAA,CAAA,CAAA,CAAA;AAAA,GACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,aAAmC,GAAA;AAC/B,IAAA,OAAO,EAAC,CAAA;AAAA,GACZ;AAAA,EAEA,kBAAkB,MAAmD,EAAA;AACjE,IAAM,MAAA,GAAA,GAAM,KAAK,cAAe,EAAA,CAAA;AAChC,IAAM,MAAA,OAAA,GAAU,KAAK,aAAc,EAAA,CAAA;AAInC,IAAI,IAAA;AACA,MAAA,MAAM,MAAS,GAAA,OAAA,CAAQ,GAAI,CAAA,GAAA,EAAK,OAAO,CAAA,CAAA;AACvC,MAAI,IAAA,MAAA;AAAQ,QAAA,MAAA,CAAO,UAAa,GAAA,MAAA,CAAA;AAEhC,MAAM,MAAA,QAAA,GAAW,IAAK,CAAA,KAAA,CAAM,QAAc,IAAA,CAAC,KAAK,KAAM,CAAA,MAAA,IAAU,CAAC,IAAA,CAAK,KAAM,CAAA,KAAA,CAAA;AAE5E,MAAA,IAAI,QAAU,EAAA;AACV,QAAQ,OAAA,CAAA,IAAA;AAAA,UACJ,yCAAyC,MAAO,CAAA,IAAA;AAAA,SACpD,CAAA;AAAA,OACJ;AAAA;AAGA,MAAK,IAAA,CAAA,cAAA,GAAiB,MAAO,CAAA,OAAA,CAAQ,QAAQ,CAAA,CAAA;AAY7C,MAAO,OAAA,MAAA,CAAA;AAAA,aACF,CAAQ,EAAA;AACb,MAAA,IAAI,CAAE,CAAA,OAAA,CAAQ,KAAM,CAAA,wBAAwB,CAAG,EAAA;AAC3C,QAAA,MAAM,IAAI,KAAA;AAAA,UACN,EAAE,OACE,GAAA,CAAA;AAAA,8DAAmE,EAAA,IAAA,CAAK,YAAY,IAAI,CAAA;AAAA;AAAA,iEAAA,CAAA;AAAA,SAGhG,CAAA;AAAA,OACJ;AACA,MAAI,IAAA,CAAC,EAAE,GAAK,EAAA;AACR,QAAQ,OAAA,CAAA,KAAA;AAAA,UACJ,CAAA;AAAA,EAAA,EACS,EAAE,OAAO,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAKd,GAAA,CAAA,CAAE,MAAM,KAAM,CAAA,IAAI,EAAE,KAAM,CAAA,CAAC,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,SAC9C,CAAA;AACA,QAAI,IAAA;AACA,UAAA,SAAA;AAIA,UAAQ,OAAA,CAAA,GAAA,CAAI,KAAK,OAAO,CAAA,CAAA;AAAA,iBACnB,SAAW,EAAA;AAChB,UAAM,MAAA,SAAA,CAAA;AAAA,SACV;AACA,QAAM,MAAA,CAAA,CAAA;AAAA,OACV;AACA,MAAM,MAAA,UAAA,GAAa,EAAE,GAAI,CAAA,IAAA,CAAA;AACzB,MAAA,MAAM,WAAc,GAAA,CAAC,GAAK,EAAA,GAAG,OAAO,CAAE,CAAA,IAAA;AAAA,QAClC,CAAC,CAAO,KAAA,CAAA,CAAU,UAAc,IAAA,UAAA;AAAA,OACpC,CAAA;AACA,MAAA,MAAM,EAAE,OAAA,GAAU,oCAA2B,EAAA,GACxC,eAAuB,EAAC,CAAA;AAC7B,MAAA,MAAM,CAAC,EAAI,EAAA,EAAA,EAAI,IAAI,EAAE,CAAA,GAAI,EAAE,UAAW,EAAA,CAAA;AACtC,MAAM,MAAA,CAAA,GAAI,IAAI,KAAA,CAAM,EAAE,CAAA,CAAA;AACtB,MAAM,MAAA,aAAA,GAAgB,CAAE,CAAA,KAAA,CAAO,KAAM,CAAA,IAAI,EAAE,KAAM,CAAA,CAAC,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC7D,MAAA,MAAM,gBAAmB,GAAA,CAAA,CAAE,GAAI,CAAA,MAAA,CAC1B,KAAM,CAAA,CAAC,CACP,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,CAA8B,qCAAA,EAAA,CAAC,CAAE,CAAA,CAAA,CAAA;AACjD,MAAM,MAAA,aAAA,GAAgB,gBAAiB,CAAA,MAAA,GACjC,CAAC,EAAA,EAAI,GAAG,gBAAA,EAAkB,UAAU,CAAA,CAAE,IAAK,CAAA,IAAI,CAC/C,GAAA,EAAA,CAAA;AACN,MAAE,CAAA,CAAA,OAAA,GAAU,EAAE,OAAU,GAAA,aAAA,CAAA;AAExB,MAAE,CAAA,CAAA,KAAA,GACE,CAAG,EAAA,CAAA,CAAE,OAAO,CAAA;AAAA,OAAY,EAAA,UAAU,KAAK,OAAO,CAAA,CAAA,EAAI,IAAI,EAAE,CAAA,CAAA,EACpD,IAAI,EACR,CAAA;AAAA,CAAQ,GAAA,aAAA,CAAA;AAEZ,MAAM,MAAA,CAAA,CAAA;AAAA,KACV;AAAA,GACJ;AAAA,EAEA,IAAY,iBAAwC,GAAA;AAChD,IAAO,OAAA,CAAA,0CAAA,EAA6C,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA,CAAA,CAAA;AAAA,GAC7E;AAAA,EAcA,MAAM,iBAAA,CACF,IACA,EAAA,SAAA,EACA,cACA,IACwB,EAAA;AACxB,IAAA,MAAM,SAAS,IAAK,CAAA,OAAA,CAAA;AAEpB,IAAA,IAAI,CAAC,MAAA;AAAQ,MAAM,MAAA,IAAI,KAAM,CAAA,IAAA,CAAK,iBAAiB,CAAA,CAAA;AACnD,IAAA,MAAM,QAAQ,YAAwB,YAAA,iBAAA,CAAA;AACtC,IAAM,MAAA,WAAA,GAAc,QAAQ,YAAe,GAAA,KAAA,CAAA,CAAA;AAC3C,IAAA,MAAM,iBAAiB,KACjB,GAAA,IAAA,GACA,QAAY,IAAA,OAAO,eACnB,YACA,GAAA,KAAA,CAAA,CAAA;AAEN,IAAA,OAAO,IAAK,CAAA,YAAA;AAAA,MACR,IAAA;AAAA,MACA,SAAA;AAAA,MACA,EAAE,QAAQ,WAAY,EAAA;AAAA,MACtB,cAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EA0BA,MAAM,cAAA,CACF,YACA,EAAA,SAAA,EACA,cACA,IACgB,EAAA;AAChB,IAAM,MAAA,EAAE,SAAY,GAAA,IAAA,CAAA;AACpB,IAAA,MAAM,QAAQ,YAAwB,YAAA,iBAAA,CAAA;AACtC,IAAM,MAAA,WAAA,GAAc,QAAQ,YAAe,GAAA,KAAA,CAAA,CAAA;AAC3C,IAAA,MAAM,iBAAiB,KACjB,GAAA,IAAA,GACA,QAAY,IAAA,OAAO,eACnB,YACA,GAAA,KAAA,CAAA,CAAA;AAEN,IAAA,OAAO,IAAK,CAAA,YAAA;AAAA,MACR,YAAA;AAAA,MACA,SAAA;AAAA,MACA,EAAE,SAAS,WAAY,EAAA;AAAA,MACvB,cAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAEA,MAAM,YACF,CAAA,YAAA,EACA,SACA,EAAA,EAAE,SAAS,MAAQ,EAAA,WAAA,EACnB,EAAA,cAAA,GAAyB,EACD,EAAA;AACxB,IAAA,MAAM,KAAQ,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,cAAc,SAAW,EAAA;AAAA,MACtD,OAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAA;AAAA,KACH,CAAA,CAAA;AACD,IAAA,IAAI,CAAC,KAAO,EAAA;AACR,MAAM,MAAA,KAAA,GAAQ,UAAU,SAAY,GAAA,kBAAA,CAAA;AACpC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,EAAG,KAAK,WAAY,CAAA,IAAI,MAAM,YAAY,CAAA,kBAAA,EAAqB,cAAc,CAAA,KAAA,EAAQ,KAAK,CAAA,CAAA;AAAA,OAC9F,CAAA;AAAA,KACJ;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EACA,SAAS,CAAY,EAAA;AACjB,IAAO,OAAA,CAAA,EAAG,EAAE,QAAS,CAAA,IAAA,CAAK,GAAG,CAAI,CAAA,EAAA,CAAA,CAAE,SAAS,OAAO,CAAA,CAAA,CAAA;AAAA,GACvD;AAAA,EAEA,MAAM,QACF,YACA,EAAA,SAAA,EACA,EAAE,OAAS,EAAA,MAAA,EAAQ,aACS,EAAA;AAC5B,IAAM,MAAA,KAAA,GAAQ,UACR,MAAM,IAAA,CAAK,QAAQ,QAAS,CAAA,OAAO,CACnC,GAAA,MAAM,MAAQ,CAAA,KAAA,CAAA;AAEpB,IAAA,MAAM,UAAa,GAAA,MAAA,GAAS,MAAM,MAAA,CAAO,aAAa,EAAC,CAAA;AAKvD,IAAA,MAAM,gBAAgB,KAAM,CAAA,MAAA;AAAA,MACxB,CAAC,CAAM,KAAA,CAAC,UAAW,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,CAAA,CAAE,EAAG,CAAA,CAAC,CAAC,CAAA;AAAA,KAC1C,CAAA;AACA,IAAM,MAAA,QAAA,GAAW,cACX,aAAc,CAAA,MAAA;AAAA,MACV,WAAA,CAAY,eAAgB,CAAA,IAAA,CAAK,WAAW,CAAA;AAAA,KAEhD,GAAA,aAAA,CAAA;AAEN,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,CAAY,SAAA,EAAA,YAAY,CACpB,MAAA,EAAA,WAAA,GAAc,sCAAsC,EACxD,CAAA;AAAA,EAAiB,EAAA,aAAA,CAAc,QAAU,EAAA,MAAM,CAAC,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOpD,CAAA;AAEA,IAAM,MAAA,KAAA,GAAQ,QAAS,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACrC,IAAA,IAAI,KAAO,EAAA;AACP,MAAA,OAAA,CAAQ,IAAI,aAAgB,GAAA,aAAA,CAAc,CAAC,KAAK,CAAC,CAAC,CAAA,CAAA;AAAA,KAC/C,MAAA;AACH,MAAA,OAAA,CAAQ,IAAI,eAAe,CAAA,CAAA;AAAA,KAC/B;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,SACF,CAAA,YAAA,EACA,SAC4B,EAAA;AAC5B,IAAO,OAAA,IAAA,CAAK,QAAQ,YAAc,EAAA,SAAA,EAAW,EAAE,OAAS,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAAA,GAC1E;AACJ,CAAA;AArjCIC,iBAAA,CAAA;AAAA,EADC,UAAA;AAAA,CAAA,EAvIQ,eAwIT,CAAA,SAAA,EAAA,cdG,MAAM,aAAgB,GAAA,QAAA,CAAA;AA0BP,eAAA,cAAA,CAIlB,OACA,EAAA,eAAA,EACA,MACF,EAAA;AACE,EAAA,OAAA,CAAQ,IAAI,4CAA4C,CAAA,CAAA;AACxD,EAAO,MAAA,CAAA,cAAA,CAAe,SAAS,SAAW,EAAA;AAAA,IACtC,KAAK,WAAY;AACb,MAAA,OAAO,KAAK,CAAE,CAAA,OAAA,CAAA;AAAA,KAClB;AAAA,GACH,CAAA,CAAA;AAED,EAAQ,OAAA,CAAA,UAAA,GAAa,OAAOC,OAAW,KAAA;AAEnC,IAAM,MAAA,MAAA,GAAS,IAAI,eAAA,CAAgBA,OAAM,CAAA,CAAA;AACzC,IAAA,IAAI,QAAQ,CAAG,EAAA;AACX,MAAA,IAAI,CAACA,OAAO,CAAA,SAAA;AACR,QAAA,MAAM,IAAI,KAAA;AAAA,UACN,CAAA,wDAAA,CAAA;AAAA,SACJ,CAAA;AACJ,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,2DAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AACA,IAAA,OAAA,CAAQ,CAAI,GAAA,MAAA,CAAA;AAEZ,IAAO,OAAA,MAAA,CAAA;AAAA,GACX,CAAA;AACA,EAAI,IAAA;AAEA,IAAM,MAAA,OAAA,CAAQ,WAAW,MAAM,CAAA,CAAA;AAAA,WAC1B,CAAG,EAAA;AACR,IAAA,IAAI,CAAC,MAAQ,EAAA;AAET,MAAQ,OAAA,CAAA,KAAA;AAAA,QACJ,CAAA,EAAG,gBAAgB,IAAI,CAAA,iGAAA,CAAA;AAAA,OAC3B,CAAA;AACA,MAAM,MAAA,CAAA,CAAA;AAAA,KACH,MAAA;AACH,MAAA,OAAA,CAAQ,MAAM,MAAM,CAAA,CAAA;AACpB,MAAM,MAAA,CAAA,CAAA;AAAA,KACV;AAAA,GACJ;AACJ,CAAA;AAQO,MAAM,GAAM,GAAA;;ACtDZ,MAAe,iBAAmD,CAAA;AAAA,EACrE,KAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EACA,YAAA,CAAA;AAAA,EACA,OAAA,CAAA;AAAA,EACA,MAAA,CAAA;AAAA,EACA,QAAW,GAAA,KAAA,CAAA;AAAA,EACX,cAAA,CAAA;AAAA,EACA,aAAA,CAAA;AAAA,EACA,OAAA,CAAA;AAAA,EACQ,SAAA,CAAA;AAAA;AAAA,EAGR,IAAI,YAA+B,GAAA;AAC/B,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAAA,GACrC;AAAA,EACA,IAAI,aAAa,SAAmB,EAAA;AAChC,IAAM,MAAA,SAAA,GAAY,IAAK,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACvC,IAAA,IAAI,CAAC,SAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,wCAAwC,SAAS,CAAA,CAAA,CAAA;AAAA,OACrD,CAAA;AACJ,IAAA,IAAI,IAAK,CAAA,OAAA;AAAS,MAAA,IAAA,CAAK,QAAQ,OAAU,GAAA,SAAA,CAAA;AACzC,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;AAAA,GACrB;AAAA,EAEA,OAAA,CAAA;AAAA,EAEA,YAAA,CAAA;AAAA,EACA,WAAc,GAAA;AACV,IAAQ,OAAA,CAAA,IAAA;AAAA,MACJ,CAAA,sCAAA,EAAyC,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,6BAAA,CAAA;AAAA,KAClE,CAAA;AACA,IAAK,IAAA,CAAA,QAAA,CAAS,MAAQ,EAAA,KAAA,GAAQ,GAAG,CAAA,CAAA;AACjC,IAAA,IAAA,CAAK,YAAe,GAAA,MAAA,CAAA;AAAA,GACxB;AAAA,EAEA,YAAY,MAA2D,EAAA;AACnE,IAAA,IAAA,CAAK,QAAQ,EAAC,CAAA;AACd,IAAA,IAAI,MAAQ,EAAA;AACR,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,oDAAA;AAAA,QACA,MAAA;AAAA,OACJ,CAAA;AAEA,MAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAAA,KAClB;AAEA,IAAA,MAAM,CAAC,UAAA,EAAY,SAAS,CAAA,GAAI,KAAK,SAAU,EAAA,CAAA;AAC/C,IAAA,IAAA,CAAK,cAAiB,GAAA,SAAA,CAAA;AACtB,IAAA,IAAA,CAAK,OAAU,GAAA,UAAA,CAAA;AACf,IAAK,IAAA,CAAA,aAAA,GAAgB,IAAI,aAAA,CAAc,aAAa,CAAA,CAAA;AAEpD,IAAA,IAAA,CAAK,SAAS,EAAC,CAAA;AACf,IAAA,IAAA,CAAK,SAAY,GAAA,EAAA,CAAA;AACjB,IAAA,IAAA,CAAK,WAAY,EAAA,CAAA;AACjB,IAAA,IAAI,CAAC,IAAK,CAAA,SAAA;AACN,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,0CAAA,CAAA;AAAA,OAC5B,CAAA;AACJ,IAAM,MAAA,GAAA,uBAAU,IAAK,EAAA,CAAA;AACrB,IAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAClB,IAAA,IAAI,QAAQ,SAAW,EAAA;AACnB,MAAA,OAAA,CAAQ,IAAI,4BAA4B,CAAA,CAAA;AACxC,MAAA,OAAA;AAAA,KACJ;AAGA,IAAK,IAAA,CAAA,YAAA,GAAe,IAAK,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEA,MAAM,WAAW,MAA2C,EAAA;AACxD,IAAA,MAAM,EAAE,UAAA,EAAY,GAAG,CAAA,EAAM,GAAA,MAAA,CAAA;AAC7B,IAAA,IAAI,IAAK,CAAA,YAAA;AAAc,MAAA,MAAM,IAAK,CAAA,YAAA,CAAA;AAClC,IAAA,IAAI,IAAK,CAAA,OAAA,IAAW,IAAK,CAAA,UAAA,IAAc,UAAY,EAAA;AAC/C,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,uDAAA;AAAA,OACJ,CAAA;AACA,MAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,KAChB;AACA,IAAA,IAAI,KAAK,OAAS,EAAA;AACd,MAAQ,OAAA,CAAA,IAAA;AAAA,QACJ,uDAAA;AAAA,OACJ,CAAA;AACA,MAAA,IAAA,CAAK,IAAO,GAAA,KAAA,CAAA,CAAA;AACZ,MAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAAA,KACf,MAAA;AACH,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,yEAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AAEA,IAAA,OAAO,KAAK,gBAAiB,EAAA,CAAA;AAAA,GACjC;AAAA,EAEA,gBAAmB,GAAA;AACf,IAAA,MAAM,cAAc,IAAK,CAAA,YAAA,CAAA;AAEzB,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,WAAY,CAAA,WAAA,EAAa,KAAK,MAAM,CAAA,CAAA;AAEzD,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAA,IAAA,CAAK,UAAU,OAAQ,CAAA,OAAA,CAAA;AACvB,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAA,CACI,aACA,MACF,EAAA;AACE,IAAA,MAAM,KAAQ,GAAA;AAAA,MACV,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,SAAS,IAAK,CAAA,YAAA;AAAA,MACd,eAAe,IAAK,CAAA,aAAA;AAAA,MACpB,MAAQ,EAAA,IAAA;AAAA,KACZ,CAAA;AAEA,IAAA,IAAI,GAA6C,GAAA;AAAA,MAC7C,KAAA;AAAA,MACA,MAAA;AAAA,KACJ,CAAA;AAEA,IAAA,IAAI,CAAC,MAAA;AACD,MAAM,GAAA,GAAA;AAAA,QACF,KAAA;AAAA,QACA,eAAe,EAAC;AAAA,OACpB,CAAA;AACJ,IAAO,OAAA,IAAI,YAAY,GAAG,CAAA,CAAA;AAAA,GAC9B;AAAA;AAAA,EAGA,UAAA,CAAA;AAAA;AAAA,EAEA,IAAA,CAAA;AAAA,EAEA,MAAM,EAAI,EAAA;AACN,IAAA,OAAO,IAAI,OAAQ,CAAA,CAAC,QAAQ,UAAW,CAAA,GAAA,EAAK,EAAE,CAAC,CAAA,CAAA;AAAA,GACnD;AAAA,EAEA,MAAM,UAAW,CAAA,SAAA,GAAoB,EAAI,EAAA;AACrC,IAAM,MAAA,EAAE,cAAiB,GAAA,IAAA,CAAA;AACzB,IAAM,MAAA,EAAE,SAAY,GAAA,IAAA,CAAA;AAEpB,IAAM,MAAA,EAAA,GAAK,IAAI,EAAG,EAAA,CAAA;AAClB,IAAM,MAAA,UAAA,GAAa,MAAM,YAAa,CAAA,KAAA,CAAA;AACtC,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,CAAA,EAAG,KAAK,SAAS,CAAA;AAAA,CAAA,GAAmB,cAAc,UAAU,CAAA;AAAA,KAChE,CAAA;AAEA,IAAG,EAAA,CAAA,QAAA;AAAA,MACC,MAAM,mBAAA;AAAA,QACF,IAAI,MAAA,CAAO,KAAM,CAAA,GAAA,GAAM,GAAG,CAAA;AAAA,QAC1B,EAAE,OAAA,EAAS,CAAC,YAAY,CAAE,EAAA;AAAA,QAC1B,OAAA;AAAA,OACJ;AAAA,KACJ,CAAA;AAEA,IAAG,EAAA,CAAA,SAAA,CAAU,IAAI,QAAA,CAAS,YAAa,CAAA,OAAA,EAAS,IAAI,KAAM,CAAA,GAAA,GAAM,GAAG,CAAC,CAAC,CAAA,CAAA;AACrE,IAAG,EAAA,CAAA,SAAA,CAAU,IAAI,QAAA,CAAS,YAAa,CAAA,OAAA,EAAS,IAAI,KAAM,CAAA,GAAA,GAAM,GAAG,CAAC,CAAC,CAAA,CAAA;AACrE,IAAA,IAAI,EAAK,GAAA,CAAA,CAAA;AACT,IAAO,OAAA,EAAA,GAAK,WAAW,EAAM,EAAA,EAAA;AACzB,MAAG,EAAA,CAAA,SAAA;AAAA,QACC,IAAI,SAAS,YAAa,CAAA,OAAA,EAAS,IAAI,KAAM,CAAA,GAAA,GAAM,GAAG,CAAC,CAAA;AAAA,OAC3D,CAAA;AAAA,KACJ;AACA,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,QAAA,CAAS,IAAI,OAAO,CAAA,CAAA;AAE5C,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,QAAS,CAAA,EAAA,EAAQ,KAAgC,EAAA;AACnD,IAAM,MAAA,wBAAA,GAA2B,KAAK,YAAa,CAAA,OAAA,CAAA;AACnD,IAAM,MAAA,oBAAA,GAAuB,CAAC,CAAC,IAAK,CAAA,OAAA,CAAA;AACpC,IAAI,IAAA;AACA,MAAA,MAAM,EAAG,CAAA,QAAA,CAAS,IAAK,CAAA,aAAA,EAAe,wBAAwB,CAAA,CAAA;AAAA,aACzD,CAAQ,EAAA;AACb,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,EAAE,OACE,GAAA,WAAA,GACA,WAAW,EAAE,CAAA,GACb,gBACA,EAAG,CAAA,aAAA;AAAA,OACX,CAAA;AAAA,KACJ;AACA,IAAI,IAAA,oBAAA,IAAwB,CAAC,KAAO,EAAA;AAChC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,mGAAA,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AAEA,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,eAAe,KAAS,IAAA,EAAE,CACrB,cAAA,EAAA,KAAA,IAAS,MAAO,mCACrB,CAAA;AAAA,CAAA,GAAQ,WAAW,EAAE,CAAA;AAAA;AAAA,KAEzB,CAAA;AAEA,IAAI,IAAA;AACA,MAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,SAAS,EAAE,CAAA,CAAA;AAC3C,MAAA,OAAA,CAAQ,GAAI,CAAA,mCAAA,GAAsC,UAAW,CAAA,EAAE,CAAC,CAAA,CAAA;AAChE,MAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,EAAE,CAAA,CAAA;AAIpB,MAAO,OAAA,IAAA,CAAA;AAAA,aACF,CAAQ,EAAA;AACb,MAAQ,OAAA,CAAA,KAAA;AAAA,QACJ,CAAA,eAAA,EAAkB,EAAE,OAAO,CAAA;AAAA,YAAiB,EAAA,UAAA,CAAW,EAAE,CAAC,CAAA,CAAA;AAAA,OAC9D,CAAA;AACA,MAAM,MAAA,CAAA,CAAA;AAAA,KACV;AAAA,GACJ;AAAA,EAEA,cAAc,MAA0B,EAAA;AACpC,IAAA,IAAI,CAAC,IAAK,CAAA,UAAA;AACN,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,sEAAA,CAAA;AAAA,OACJ,CAAA;AACJ,IAAA,IAAI,CAAC,IAAK,CAAA,IAAA;AAAM,MAAA,IAAA,CAAK,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAEvD,IAAA,MAAM,QAAkB,EAAC,CAAA;AACzB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AAC7B,MAAA,KAAA,CAAM,KAAK,IAAK,CAAA,KAAA,CAAM,KAAK,IAAK,EAAA,GAAI,GAAG,CAAC,CAAA,CAAA;AAAA,KAC5C;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,QAAA,CAAS,UAAkB,aAAuB,EAAA;AAC9C,IAAI,IAAA,IAAA,CAAK,OAAO,QAAQ,CAAA;AACpB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAwB,qBAAA,EAAA,QAAQ,CAAG,CAAA,CAAA,CAAA,CAAA;AAAA;AAGvD,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,OAAQ,CAAA,YAAA,CAAa,aAAa,CAAA,CAAA;AACjD,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,CAAA,kBAAA,EAAc,QAAQ,CAAA,EAAA,EAAK,CAAE,CAAA,OAAA,CACxB,QAAS,EAAA,CACT,SAAU,CAAA,CAAA,EAAG,EAAE,CAAC,CAAK,OAAA,EAAA,aAAA;AAAA,QACtB,aAAA;AAAA,OACH,eAAQ,CAAE,CAAA,OAAA,CAAQ,YAAY,GAAI,CAAA,SAAA,CAAU,CAAG,EAAA,CAAC,CAAC,CAAA,OAAA,CAAA;AAAA,KACtD,CAAA;AAAA;AAKA,IAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AAC3B,IAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAW,CAAG,EAAA,EAAA,GAAK,GAAG,CAAA,CAAA;AACnC,IAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAW,CAAG,EAAA,EAAA,GAAK,GAAG,CAAA,CAAA;AACnC,IAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAW,CAAG,EAAA,EAAA,GAAK,GAAG,CAAA,CAAA;AACnC,IAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AAE3B,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,CAAI,GAAA,CAAA,CAAA;AACxB,IAAO,OAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAEA,SAAsD,GAAA;AAClD,IAAM,MAAA,UAAA,GAAa,IAAI,eAAgB,EAAA,CAAA;AAGvC,IAAM,MAAA,SAAA,GAAY,WAAW,iBAAkB,CAAA;AAAA,MAC3C,GAAG,aAAA;AAAA,MACH,GAAA,EAAK,EAAE,GAAG,aAAc,EAAA;AAAA,KAC3B,CAAA,CAAA;AAUD,IAAO,OAAA,CAAC,YAAY,SAAS,CAAA,CAAA;AAAA,GACjC;AAAA,EAEA,gBAAgB,CAAW,EAAA;AACvB,IAAO,OAAA,IAAA,CAAK,aAAc,CAAA,UAAA,CAAW,CAAC,CAAA,CAAA;AAGnB,GACvB;AAAA,EAEA,WAAc,GAAA;AACV,IAAA,OAAO,KAAK,cAAe,CAAA,QAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,UAAU,IAAY,EAAA;AAClB,IAAA,MAAM,gBAAmB,GAAA,MAAA,CAAO,IAAK,CAAA,OAAA,EAAS,CAAA,CAAA;AAE9C,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,aAAc,CAAA,UAAA,CAAW,gBAAgB,CAAA,CAAA;AACjE,IAAM,MAAA,CAAA,GAAI,KAAK,WAAY,EAAA,CAAA;AAE3B,IAAM,MAAA,WAAA,GAAc,cAAc,CAAK,IAAA,EAAA,CAAA,CAAA;AACvC,IAAA,IAAI,cAAc,CAAG,EAAA;AACjB,MAAM,MAAA,IAAI,MAAM,CAAyC,uCAAA,CAAA,CAAA,CAAA;AAAA,KAC7D;AAEA,IAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,WAAW,CAAA,CAAA;AAC7B,IAAO,OAAA,WAAA,CAAA;AAAA,GACX;AACJ;;AClUO,MAAe,uBAMZ,iBAAsB,CAAA;AAAA,EAC5B,MAAM,UAAW,CAAA;AAAA,IACb,UAAa,GAAA,EAAA;AAAA,IACb,MAAA;AAAA,GACJ,GAA0C,EAAiB,EAAA;AACvD,IAAA,IAAI,IAAK,CAAA,YAAA;AAAc,MAAA,MAAM,IAAK,CAAA,YAAA,CAAA;AAClC,IAAA,IAAI,IAAK,CAAA,OAAA,IAAW,IAAK,CAAA,UAAA,IAAc,UAAY,EAAA;AAC/C,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,uDAAA;AAAA,OACJ,CAAA;AAEA,MAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,KAChB;AACA,IAAA,IAAI,IAAK,CAAA,OAAA;AACL,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,CAAmD,gDAAA,EAAA,IAAA,CAAK,UAAU,CAAA,MAAA,EAAS,UAAU,CAAA;AAAA,CACjF,GAAA,IAAI,KAAM,CAAA,OAAO,CACZ,CAAA,KAAA,CAAO,MAAM,IAAI,CAAA,CACjB,KAAM,CAAA,CAAC,CACP,CAAA,MAAA;AAAA,UACG,CAAC,IACG,KAAA,CAAC,IAAK,CAAA,KAAA,CAAM,cAAc,CAC1B,IAAA,CAAC,IAAK,CAAA,KAAA,CAAM,eAAe,CAAA;AAAA,SACnC,CACC,KAAK,IAAI,CAAA;AAAA,OACtB,CAAA;AACJ,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAClB,IAAA,IAAA,CAAK,MAAM,kBAAqB,GAAA,KAAA,CAAA,CAAA;AAAA;AAKhC,IAAA,IAAI,CAAC,MAAA;AACD,MAAA,OAAQ,IAAK,CAAA,OAAA,GAAU,IAAK,CAAA,WAAA,CAAY,KAAK,YAAY,CAAA,CAAA;AAG7D,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,cAAc,MAAM,CAAA,CAAA;AAE1D,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAA,MAAM,EAAE,OAAA,EAAS,iBAAmB,EAAA,GAAA,EAAQ,GAAA,OAAA,CAAA;AAE5C,IAAM,MAAA,EAAE,IAAK,EAAA,GAAI,OAAQ,CAAA,aAAA,CAAA;AACzB,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,IAAA;AAAA,MACA,QAAQ,QAAS,EAAA,CAAE,SAAU,CAAA,CAAA,EAAG,EAAE,CAAI,GAAA,QAAA;AAAA,MACtC,kBAAA,GACI,QAAQ,cAAe,CAAA,aAAA,CAAc,IAAI,SAAU,CAAA,CAAA,EAAG,EAAE,CACxD,GAAA,QAAA;AAAA,MACJ,mBAAY,GAAK,EAAA,GAAA,CAAI,SAAU,CAAA,CAAA,EAAG,EAAE,CAAI,GAAA,QAAA;AAAA,KAC5C,CAAA;AACA,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,UAAU,IAAuC,EAAA;AACnD,IAAA,IAAI,OAAU,GAAA,IAAA,CAAK,OAAY,IAAA,MAAM,KAAK,UAAW,EAAA,CAAA;AAErD,IAAM,MAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA,CAAA;AAChC,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AASJ;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FO,MAAM,eAAmC,GAAAC,MAAA;;;;;;;;ACAzC,MAAM,mBAAuC,GAAAC,MAAA;;ACEpD,MAAM,QAAA,GAAW,OAAO,SAAS,CAAA,CAAA;AACjC,MAAM,UAAa,GAAA,EAAA,CAAA;AAUZ,MAAM,OAAQ,CAAA;AAAA,EACjB,CAAS,QAAQ,EAAA;AAAA,EACjB,OAAA,CAAA;AAAA,EACA,WAAA,CAAY,SAAiB,WAAqB,EAAA;AAC9C,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAI,IAAA,WAAA,CAAY,SAAS,UAAY,EAAA;AACjC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,UAAA,EAAa,WAAW,CAAA,wBAAA,EAA2B,UAAU,CAAA,CAAA;AAAA,OACjE,CAAA;AAAA,KACJ;AACA,IAAA,IAAA,CAAK,QAAQ,CAAI,GAAA,WAAA,CAAA;AAAA,GACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,IAAO,GAAA;AACP,IAAA,OAAO,KAAK,QAAQ,CAAA,CAAA;AAAA,GACxB;AAAA,EACA,QAAW,GAAA;AACP,IAAA,OAAO,KAAK,QAAQ,CAAA,CAAA;AAAA,GACxB;AACJ,CAAA;AAeO,MAAM,6BAA6B,KAAM,CAAA;AAAA,EAC5C,MAAA,CAAA;AAAA,EACA,mBAAA,CAAA;AAAA,EACA,WAAA,CACI,SACA,OAKF,EAAA;AACE,IAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AACb,IAAM,MAAA,EAAE,MAAQ,EAAA,mBAAA,EAAwB,GAAA,OAAA,CAAA;AACxC,IAAI,IAAA,MAAA;AAAQ,MAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAC1B,IAAI,IAAA,mBAAA;AAAqB,MAAA,IAAA,CAAK,mBAAsB,GAAA,mBAAA,CAAA;AAAA,GACxD;AACJ,CAAA;AA6EO,SAAS,cACZ,OACW,EAAA;AACX,EAAO,OAAA,OAAA,CAAA;AACX,CAAA;AAMgB,SAAA,sBAAA,CAAuB,KAAa,KAAY,EAAA;AAC5D,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC3B,IAAA,OAAO,MAAM,QAAS,EAAA,CAAA;AAAA,aACf,OAAW,IAAA,GAAA,IAAO,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAC/C,IAAA,OAAO,WAAW,KAAK,CAAA,CAAA;AAAA,GAC3B,MAAA,IAAW,iBAAiB,OAAS,EAAA;AACjC,IAAA,OAAO,MAAM,QAAS,EAAA,CAAA;AAAA,aACf,IAAQ,IAAA,GAAA,IAAO,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAC5C,IAAA,OAAO,YAAY,KAAK,CAAA,CAAA;AAAA,GAC5B;AACA,EAAO,OAAA,KAAA,CAAA;AACX,CAAA;AAsCgB,SAAA,UAAA,CAKZ,WACA,EAAA,SAAA,EACA,QACuB,EAAA;AACvB,EAAO,OAAA;AAAA,IACH,UAAY,EAAA,WAAA;AAAA,IACZ,SAAA;AAAA,IACA,QAAA;AAAA,GACJ,CAAA;AACJ,CAAA;AAEA;AAsEA;AAQA;;;;;;;;;;;;;ACrPO,MAAM,sBACD,eAEZ,CAAA;AAAA,EACI,cAAiB,GAAA;AACb,IAAO,OAAAC,MAAA,CAAA;AAAA,GACX;AAAA,EACA,wBAAwB,MAAuD,EAAA;AAC3E,IAAM,MAAA,EAAC,SAAW,EAAA,OAAA,EAAW,GAAA,MAAA,CAAA;AAE7B,IAAO,OAAA,EAAE,WAAW,OAAQ,EAAA,CAAA;AAAA,GAChC;AAAA,EAEA,aAAmC,GAAA;AAC/B,IAAO,OAAA;AAAA;AAAA,MAEHC,MAAA;AAAA,MACA,mBAAA;AAAA,MACA,eAAA;AAAA,MACA,IAAA,CAAK,SAAU,IAAK,CAAA,eAAA;AAAA,MACpB,IAAA,CAAK,SAAU,IAAK,CAAA,WAAA;AAAA,KACxB,CAAA;AAAA,GACJ;AAAA,EAKA,MAAM,eAMF,CAAA,GAAA,EACA,aACA,QAEA,EAAA,KAAA,GAAY,EAGd,EAAA;AACE,IAAA,MAAM,EAAE,IAAA,EAAM,OAAQ,EAAA,GAAI,QAAS,CAAA,QAAA,CAAA;AAEnC,IAAM,MAAA,EAAE,SAAY,GAAA,MAAA,CAAA;AAEpB,IAAA,MAAM,SAA0C,MAAO,CAAA,WAAA;AAAA,MACnD,WAAA,CAAY,GAAI,CAAA,CAAC,UAAe,KAAA;AAC5B,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,MAAO,CAAA,CAAC,IAAI,UAAW,CAAA,CAAC,CAAG,EAAA,OAAO,CAAC,CAAA,CAAA;AAE5D,QAAA,MAAM,UAAU,IAAI,OAAA;AAAA,UAChB,UAAA;AAAA,UACA,CAAA,EAAG,UAAU,CAAA,CAAA,EAAI,UAAW,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAE,KAAM,CAAA,CAAA,EAAG,CAAC,CAAC,CAAC,CAAA,CAAA;AAAA,SAC3D,CAAA;AACA,QAAO,OAAA,CAAC,YAAY,OAAO,CAAA,CAAA;AAAA,OAC9B,CAAA;AAAA,KACL,CAAA;AACA,IAAA,KAAA,MAAW,CAAC,IAAM,EAAA,UAAU,KAAK,MAAO,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACpD,MAAO,MAAA,CAAA,IAAI,CAAI,GAAA,MAAA,CAAO,UAAoB,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,IAAI,CAAC,GAAI,CAAA,KAAA;AAAO,MAAA,GAAA,CAAI,QAAQ,EAAC,CAAA;AAC7B,IAAA,IAAI,IAAI,KAAM,CAAA,IAAA;AAAM,MAAM,MAAA,IAAI,MAAM,CAAwB,sBAAA,CAAA,CAAA,CAAA;AAC5D,IAAA,GAAA,CAAI,MAAM,IAAO,GAAA,MAAA,CAAA;AAEjB,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAGA,MAAM,gBAMF,CAAA,UAAA,EACA,aACA,QAEA,EAAA,KAAA,GAAY,EAC0C,EAAA;AACtD,IAAM,MAAA,WAAA,GAAc,WACd,OAAQ,CAAA,OAAA,CAAiB,QAAQ,CACjC,GAAA,IAAI,OAAiB,CAAA,CAAC,GAAQ,KAAA;AAAA;AAE1B,MAAA,MAAM,UAAU,IAAK,CAAA,gBAAA;AAAA,QACjB,OAAO,IAAM,CAAA;AAAA,QACb,UAAA;AAAA,OACJ,CAAA;AAEA,MAAK,IAAA,CAAA,iBAAA;AAAA,QACD,CAAgB,aAAA,EAAA,WAAA,CAAY,IAAK,CAAA,GAAG,CAAC,CAAA,CAAA;AAAA,QACrC,OAAA;AAAA,QACA,UAAA;AAAA,OACJ,CAAE,KAAK,GAAG,CAAA,CAAA;AAAA,KACb,CAAA,CAAA;AAEP,IAAO,OAAA,WAAA,CAAY,IAAK,CAAA,OAAOC,SAAa,KAAA;AACxC,MAAM,MAAA,GAAA,GAAM,MAAM,IAAK,CAAA,eAAA;AAAA,QACnB,UAAA;AAAA,QACA,WAAA;AAAA,QACAA,SAAAA;AAAA,QACA,KAAA;AAAA,OACJ,CAAA;AACA,MAAA,MAAM,QAAW,GAAA,kBAAA,CAAmB,GAAI,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAElD,MAAA,GAAA,CAAI,SAASA,SAAQ,CAAA,CAAA;AACrB,MAAA,MAAM,EAAE,IAAM,EAAA,OAAA,EAAS,OAAS,EAAA,SAAA,KAAcA,SAAS,CAAA,QAAA,CAAA;AACvD,MAAI,GAAA,CAAA,YAAA,CAAa,IAAK,CAAA,cAAc,CAAE,CAAA,UAAA;AAAA,QAClC,IAAK,CAAA,iBAAA;AAAA,QACL,QAAA;AAAA,QACA,KAAK,WAAY,CAAA;AAAA,UACb,OAAA;AAAA,UACA,SAAA;AAAA,UACA,QAAU,EAAA,WAAA;AAAA,SACb,CAAE,CAAA,QAAA;AAAA,OACP,CAAA;AAEA,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACL;AAAA;AAAA,EAGA,IAAI,iBAAuC,GAAA;AACvC,IAAA,OAAO,KAAM,CAAA,iBAAA,CAAA;AAAA,GACjB;AAAA,EAGU,cAAA,CAAe,EAAE,KAAA,EAA8C,EAAA;AACrE,IAAM,MAAA,EAAC,cAAc,EAAA,GAAG,IAAK,CAAA,qBAAA,CAAA;AAC7B,IAA+C,IAAK,CAAA,aAAA;AACpD,IAAM,MAAA,CAAA,GAAI,IAAI,cAAA,CAAe,KAAK,CAAA,CAAA;AAElC,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA,EAIU,WAAY,CAAA;AAAA,IAClB,OAAA;AAAA,IACA,SAAW,EAAA,IAAA;AAAA,IACX,QAAA;AAAA,GACgC,EAAA;AAEhC,IAAM,MAAA,SAAA,GAAY,OAAO,IAAI,CAAA,CAAA;AAC7B,IAAQ,OAAA,CAAA,GAAA,CAAI,sBAAwB,EAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;AAC/C,IAAM,MAAA,EAAC,WAAW,EAAA,GAAI,IAAK,CAAA,qBAAA,CAAA;AAC3B,IAAA,MAAM,IAAI,IAAI,WAAA;AAAA,MACV,OAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,KACJ,CAAA;AAEA,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA,EAEA,IAAI,yBAAyC,GAAA;AACzC,IAAA,OAAO,aAAc,CAAA,SAAA,EAAW,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,GAC7C;AAAA,EAEA,SAAY,GAAA;AACR,IAAM,MAAA,EAAE,mBAAsB,GAAA,IAAA,CAAA;AAE9B,IAAA,MAAM,IAAI,IAAI,KAAA;AAAA,MACV,KAAA,CAAA;AAAA,MACA,IAAI,MAAO,CAAA,CAAC,CAAC,iBAAA,EAAmB,CAAC,IAAK,CAAA,yBAAyB,CAAC,CAAC,CAAC,CAAA;AAAA,KACtE,CAAA;AACA,IAAO,OAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAI,mBAAsB,GAAA;AACtB,IAAQ,OAAA,CAAA,IAAA;AAAA,MACJ,6EAAA;AAAA,KACJ,CAAA;AACA,IAAA,OAAO,KAAK,SAAU,EAAA,CAAA;AAAA,GAC1B;AAAA,EAGA,MAAM,kBACF,GACA,EAAA;AAAA,IACI,KAAA;AAAA,IACA,OAAA;AAAA,IACA,OAAA;AAAA,GAMiC,EAAA;AACrC,IAAA,MAAM,YAAY,IAAK,CAAA,yBAAA,CAAA;AACvB,IAAA,MAAM,YAAY,aAAc,CAAA,OAAA,CAAQ,IAAM,EAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AACvD,IAAA,MAAM,YAAY,aAAc,CAAA,OAAA,CAAQ,IAAM,EAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AAEvD,IAAA,OAAO,GACF,CAAA,UAAA;AAAA,MACG,IAAK,CAAA,iBAAA;AAAA,MACL;AAAA,QACI,SAAA;AAAA,QACA,SAAA;AAAA,QACA,SAAA;AAAA,OACJ;AAAA,MACA,KAAK,cAAe,CAAA;AAAA,QAChB,KAAA;AAAA,OACH,CAAE,CAAA,QAAA;AAAA,KACP,CACC,YAAa,CAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GACzC;AACJ,CAAA;AApLUN,iBAAA,CAAA;AAAA,EADL,UAAA;AAAA,CAAA,EA1BQ,aA2BH,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA,CAAA,CAAA;AAyCAA,iBAAA,CAAA;AAAA,EADL,GAAA;AAAA,CAAA,EAnEQ,aAoEH,CAAA,SAAA,EAAA,kBAAA,EAAA,CAAA,CAAA,CAAA;AA2DIA,iBAAA,CAAA;AAAA,EADT,QAAS,CAAA,QAAA;AAAA,CAAA,EA9HD,aA+HC,CAAA,SAAA,EAAA,gBAAA,EAAA,CAAA,CAAA,CAAA;AAUAA,iBAAA,CAAA;AAAA,EADT,QAAS,CAAA,QAAA;AAAA,CAAA,EAxID,aAyIC,CAAA,SAAA,EAAA,aAAA,EAAA,CAAA,CAAA,CAAA;AAwCJA,iBAAA,CAAA;AAAA,EADL,QAAS,CAAA,UAAA;AAAA,CAAA,EAhLD,aAiLH,CAAA,SAAA,EAAA,mBAAA,EAAA,CAAA,CAAA;;ACzNV,MAAM,IAAA,GAAO,OAAO,yBAAyB,CAAA,CAAA;AA6CtC,SAAS,SAGd,QAAmC,EAAA;AACjC,EAAO,OAAA,QAAA,CAAA;AACX,CAAA;AAEA,QAAA,CAAS,IAAO,GAAA,IAAA;;;;;;;;;;;;;ACmFhB;AAyDO,MAAe,aAKV,eAEZ,CAAA;AAAA,EAGI,aAA8B,GAAA;AAC1B,IAAA,OAAO,KAAK,mBAAoB,EAAA,CAAA;AAAA,GACpC;AAAA,EAEA,IAAI,YAAiC,GAAA;AACjC,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAO,OAAA,OAAA,CAAQ,QAAQ,KAAK,CAAA,CAAA;AAChD,IAAA,IAAI,IAAK,CAAA,iBAAA;AAAmB,MAAA,OAAO,IAAK,CAAA,iBAAA,CAAA;AACxC,IAAO,OAAA,OAAA,CAAQ,QAAQ,IAAI,CAAA,CAAA;AAAA,GAC/B;AAAA,EACA,iBAAA,CAAA;AAAA,EACA,YAAY,IAA8C,EAAA;AAEtD,IAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAEV,IAAM,MAAA;AAAA,MACF,eAAiB,EAAA,gBAAA;AAAA,MACjB,oBAAsB,EAAA,qBAAA;AAAA,KACtB,GAAA,IAAA,CAAA;AAEJ,IAAM,MAAA,EAAE,YAAa,EAAA,GAAI,IAAK,CAAA,gBAAA,CAAA;AAC9B,IAAA,MAAM,EAAE,eAAA,EAAiB,cAAe,EAAA,GAAI,IAAK,CAAA,qBAAA,CAAA;AAEjD,IAAA,IAAI,CAAC,YAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,cAAc,gBAAgB,CAAA,mCAAA,CAAA;AAAA,OAClC,CAAA;AACJ,IAAA,IAAI,CAAC,eAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,mBAAmB,qBAAqB,CAAA,sCAAA,CAAA;AAAA,OAC5C,CAAA;AACJ,IAAA,IAAI,CAAC,cAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,kBAAkB,qBAAqB,CAAA,qCAAA,CAAA;AAAA,OAC3C,CAAA;AAEJ,IAAA,IAAI,IAAK,CAAA,QAAA,IAAY,CAAC,IAAA,CAAK,SAAS,aAAe,EAAA;AAC/C,MAAA,IAAA,CAAK,oBAAoB,IAAK,CAAA,aAAA,EAAgB,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA;AACtD,QAAA,IAAA,CAAK,iBAAoB,GAAA,KAAA,CAAA,CAAA;AACzB,QAAO,OAAA,CAAA,CAAA;AAAA,OACV,CAAA,CAAA;AAAA,KACL;AAAA,GACJ;AAAA,EACA,OAAO,cAAc,IAA8C,EAAA;AAC/D,IAAM,MAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,IAAA,CAAA;AAC1B,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAA;AAEd,IAAO,OAAA,IAAI,KAAM,CAAA,EAAE,KAAO,EAAA,MAAA,EAAQ,EAAE,GAAG,MAAQ,EAAA,aAAA,EAAe,IAAK,EAAA,EAAG,CAAA,CAAA;AAAA,GAC1E;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,WAAiE,GAAA;AACjE,IAAO,OAAA,aAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,gBAMI,UACA,EAAA,WAAA,EACA,QAEA,EAAA,KAAA,GAAY,EAC0C,EAAA;AACtD,IAAA,OAAO,KAAK,MAAQ,CAAA,eAAA;AAAA,MAChB,UAAA;AAAA,MACA,WAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAGA,MAAM,gBAMF,CAAA,UAAA,EACA,aACA,QAEA,EAAA,KAAA,GAAY,EAC0C,EAAA;AACtD,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,MAAQ,CAAA,gBAAA;AAAA,MAC3B,UAAA;AAAA,MACA,WAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA;AAAA,KACJ,CAAA;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAgBA,UAAU,CAA6D,EAAA;AACnE,IAAM,MAAA,MAAA,GACF,CAAa,YAAA,iBAAA,GACP,CAAE,CAAA,KAAA,CAAM,IACR,GAAA,CAAA,YAAa,OACb,GAAA,EAAE,MAAQ,EAAA,CAAA,EACV,GAAA,CAAA,CAAA;AACV,IAAM,MAAA,QAAA,GAAW,mBAAmB,MAAM,CAAA,CAAA;AAE1C,IAAA,OAAO,IAAI,KAAA;AAAA,MACP,KAAA,CAAA;AAAA,MACA,IAAI,OAAO,CAAC,CAAC,KAAK,iBAAoB,EAAA,QAAQ,CAAC,CAAC,CAAA;AAAA,KACpD,CAAA;AAAA,GACJ;AAAA,EAGA,cAA6B,GAAA;AACzB,IAAM,MAAA,EAAE,cAAe,EAAA,GAAI,IAAK,CAAA,qBAAA,CAAA;AAChC,IAAA,IAAI,CAAC,cAAgB,EAAA;AACjB,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,kDAAA,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AACA,IAAM,MAAA,CAAA,GAAI,IAAI,cAAe,EAAA,CAAA;AAE7B,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA,EAIA,SAAY,GAAA;AACR,IAAO,OAAA,IAAA,CAAK,OAAQ,SAAU,EAAA,CAAA;AAAA,GAClC;AAAA,EAEA,IAAI,mBAAsB,GAAA;AACtB,IAAQ,OAAA,CAAA,IAAA;AAAA,MACJ,6DAAA;AAAA,KACJ,CAAA;AACA,IAAA,OAAO,KAAK,SAAU,EAAA,CAAA;AAAA,GAC1B;AAAA,EAEA,aAAmC,GAAA;AAC/B,IAAO,OAAA,CAACK,MAAsB,EAAA,mBAAA,EAAqB,eAAe,CAAA,CAAA;AAAA,GACtE;AAAA,EAyBA,IAAI,qBAAwB,GAAA;AACxB,IAAA,MAAM,SAAY,GAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAExD,IAAO,OAAA,SAAA,CAAA;AAAA,GACX;AAAA;AAAA,EAGA,YAAA,CAAa,SAA6B,EAAA,KAAA,GAAgB,EAAI,EAAA;AAC1D,IAAM,MAAA,EAAE,KAAQ,GAAA,IAAA,CAAA;AAEhB,IAAM,MAAA,EAAA,GAAK,UAAU,QAAS,EAAA,CAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,GAAK,EAAA,EAAA,EAAI,KAAK,CAAA,CAAA;AAAA,GACtC;AAAA,EAEA,MAAM,mBAAsB,GAAA;AACxB,IAAA,MAAM,SAAY,GAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAExD,IAAA,OAAO,IAAK,CAAA,cAAA,CAAe,SAAW,EAAA,SAAA,EAAW,qBAAqB,CAAA,CAAA;AAAA,GAC1E;AAAA;AAAA,EAiBA,MAAM,qBAAA,CACF,GACA,EAAA,kBAAA,EACA,wBACY,EAAA;AACZ,IAAA,OAAO,IAAK,CAAA,mBAAA,EAAsB,CAAA,IAAA,CAAK,OAAO,MAAoB,KAAA;AAM9D,MACI,IAAA,IAAA,KAAS,kBACT,IAAA,UAAA,KAAe,kBACjB,EAAA;AAEE,QAAA,IACI,4BACA,IAAS,KAAA,wBAAA;AAET,UAAA,MAAM,IAAI,KAAA;AAAA,YACN,CAAA,iFAAA,CAAA;AAAA,WACJ,CAAA;AACJ,QAAA,GAAA,CAAI,EAAG,CAAA,WAAA;AAAA,UACH,MAAA;AAAA,UACA,wBAAA,GAA2B,KAAK,cAAiB,GAAA,KAAA,CAAA;AAAA,SACrD,CAAA;AAAA,OACG,MAAA;AAEH,QAAA,MAAM,QAAW,GAAA,kBAAA,CAAA;AACjB,QAAA,MAAM,QAAW,GAAA,wBAAA,CAAA;AACjB,QAAA,IAAI,IAAS,KAAA,QAAA;AACT,UAAA,MAAM,IAAI,KAAA;AAAA,YACN,CAAA,kEAAA,CAAA;AAAA,WACJ,CAAA;AACJ,QAAI,GAAA,CAAA,QAAA,CAAS,MAAQ,EAAA,QAAQ,CAAE,CAAA,YAAA;AAAA,UAC3B,IAAK,CAAA,cAAA;AAAA,SACT,CAAA;AACA,QAAM,MAAA,KAAA,GACF,QAAa,IAAA,MAAA,CAAO,UAAW,CAAA,KAAA,CAAA;AAEnC,QAAK,IAAA,CAAA,mBAAA,CAAoB,KAAK,KAAK,CAAA,CAAA;AAAA,OACvC;AACA,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACL;AAAA;AAAA,EAGA,MAAM,oBAAA,CACF,GACA,EAAA,QAAA,EACA,QACkC,EAAA;AAIlC,IAAA,OAAO,IAAK,CAAA,qBAAA,CAAsB,GAAK,EAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;AAAA,GAC7D;AAAA;AAAA,EAGA,mBAAA,CAAoB,KAA6B,KAAoB,EAAA;AACjE,IAAM,MAAA,GAAA,GAAM,IAAI,QAAS,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,SAAA,IAAa,KAAK,CAAA,CAAA;AAC9D,IAAI,GAAA,CAAA,eAAA,CAAgB,KAAK,aAAa,CAAA,CAAA;AACtC,IAAA,GAAA,CAAI,UAAU,GAAG,CAAA,CAAA;AAEjB,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAcA,MAAM,+BACF,GACqC,EAAA;AACrC,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,qBAAA,CAAsB,KAAK,UAAU,CAAA,CAAA;AAE7D,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,kBAAA,CAAmB,IAAI,CAAA,CAAA;AAC/C,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAkB,GAAA;AACd,IAAA,MAAM,EAAE,OAAA,EAAS,SAAU,EAAA,GAAI,IAAK,CAAA,QAAA,CAAA;AACpC,IAAO,OAAA,EAAE,SAAS,SAAU,EAAA,CAAA;AAAA,GAChC;AAAA,EACA,UAAa,GAAA;AACT,IAAO,OAAA,EAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,wBACI,MACgC,EAAA;AAChC,IAAI,IAAA,IAAA,CAAK,YAAY,MAAO,CAAA,GAAA,IAAO,CAAC,MAAO,CAAA,GAAA,CAAI,EAAG,CAAA,IAAA,CAAK,GAAG,CAAA;AACtD,MAAM,MAAA,IAAI,MAAM,CAAc,YAAA,CAAA,CAAA,CAAA;AAClC,IAAM,MAAA,EAAE,KAAQ,GAAA,MAAA,CAAA;AAChB,IAAM,MAAA,GAAA,GAAM,KAAK,UAAW,EAAA,CAAA;AAI5B,IAAO,OAAA;AAAA,MACH,GAAA;AAAA,MACA,GAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EACA,aAAgB,GAAA;AACZ,IAAA,OAAO,KAAK,MAAU,IAAA,IAAA,CAAK,oBAAqB,CAAA,IAAA,CAAK,iBAAiB,CAAA,CAAA;AAAA,GAC1E;AAAA,EACA,IAAI,GAAM,GAAA;AACN,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,iBAAA,CAAA;AAAA,GAChC;AAAA,EAEA,IAAI,iBAAoB,GAAA;AACpB,IAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,GAChB;AAAA,EAEA,qBAAqB,MAAmC,EAAA;AACpD,IAAA,IAAI,IAAK,CAAA,MAAA;AACL,MAAM,MAAA,IAAI,MAAM,CAAgD,8CAAA,CAAA,CAAA,CAAA;AACpE,IAAM,MAAA,EAAE,aAAgB,GAAA,IAAA,CAAA;AACxB,IAAM,MAAA,EAAE,OAAS,EAAA,SAAA,EAAc,GAAA,MAAA,CAAA;AAC/B,IAAA,MAAM,EAAE,GAAK,EAAA,WAAA,EAAgB,GAAA,IAAA,CAAK,YAAY,EAAC,CAAA;AAE/C,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,oBAAA,CAAqB,WAAa,EAAA;AAAA,MAClD,OAAA;AAAA,MACA,SAAA;AAAA;AAAA;AAAA,MAGA,IAAM,EAAA,IAAA;AAAA,KACT,CAAA,CAAA;AACD,IAAA,IAAI,eAAe,CAAC,MAAA,CAAO,iBAAkB,CAAA,EAAA,CAAG,WAAW,CAAG,EAAA;AAC1D,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA;AAAA,UAAA,CAAA,GACgB,WAAY,CAAA,GAAA,GAAK,YAAa,GAAA,MAAA,CAAO,iBAAkB,CAAA,GAAA;AAAA,OAC3E,CAAA;AAAA,KACJ,MAAA,IAAW,CAAC,WAAa,EAAA;AACrB,MAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAA8B,4BAAA,CAAA,CAAA,CAAA;AAAA,KACtE;AACA,IAAA,MAAM,EAAE,cAAA,EAAgB,WAAY,EAAA,GAAI,MAAO,CAAA,qBAAA,CAAA;AAC/C,IAAA,IAAI,CAAC,cAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,wEAAA,CAAA;AAAA,OACJ,CAAA;AACJ,IAAA,IAAI,CAAC,WAAA;AACD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,qEAAA,CAAA;AAAA,OACJ,CAAA;AAGJ,IAAA,OAAQ,KAAK,MAAS,GAAA,MAAA,CAAA;AAAA,GAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,kBAAA,CACF,GACA,EAAA,OAAA,EACA,UACwB,EAAA;AAAA;AACxB;AACA;AAGA,IAAA,MAAM,OAAU,GAAA,IAAI,iBAAkB,CAAA,EAAE,CAAA,CAAA;AAExC,IAAA,MAAM,oBAAoB,UAAW,CAAA,MAAA;AAAA,MACjC,aAAA,CAAc,KAAK,IAAI,CAAA;AAAA,MACvB,IAAI,MAAM,EAAE,CAAA;AAAA,KAChB,CAAA;AAAA;AAEA,IAAS,SAAA,aAAA,CAEL,aACA,EACK,EAAA;AACL,MAAA,MAAM,IAAO,GAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,EAAS,EAAE,CAAA,CAAA;AACrC,MAAO,OAAA,WAAA,CAAY,IAAI,IAAI,CAAA,CAAA;AAAA,KAC/B;AAEA,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,gBAAiB,CAAA,iBAAA,CAAkB,UAAU,GAAG,CAAA,CAAA;AACrE,IAAM,MAAA,QAAA,GAAW,MAAM,IAAK,CAAA,iBAAA;AAAA,MACxB,OAAA;AAAA,MACA,OAAA;AAAA,MACA,GAAA;AAAA,KACJ,CAAE,KAAM,CAAA,CAAC,CAAM,KAAA;AACX,MAAM,MAAA,CAAA,CAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAA,MAAM,EAAE,IAAA,EAAM,OAAS,EAAA,OAAA,KAAY,QAAS,CAAA,QAAA,CAAA;AAC5C,IAAM,MAAA,SAAA,GAAY,OAAO,OAAO,CAAA,CAAA;AAChC,IAAA,MAAM,QACF,UAAW,CAAA,MAAA,GAAS,IAAI,CAAG,EAAA,UAAA,CAAW,MAAM,CAAe,UAAA,CAAA,GAAA,EAAA,CAAA;AAC/D,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,eAAe,KAAK,CAAA,EAAG,OAAO,CAAA,EAAA,EAAK,QAAQ,GAAI,CAAA,KAAA;AAAA,QAC3C,CAAA;AAAA,QACA,CAAA;AAAA,OACH,SAAI,OAAQ,CAAA,GAAA,CAAI,MAAM,CAAE,CAAA,CAAC,IAAI,SAAS,CAAA,CAAA;AAAA,KAC3C,CAAA;AACA,IAAO,OAAA,QAAA,CAAA;AAAA,GACX;AAAA,EAEA,UAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BA,MAAM,sBAIF,GACA,EAAA,QAAA,EACA,eAAwC,EAAE,YAAA,EAAc,WAC1D,EAAA;AACE,IAAA,MAAM,aAAa,IAAK,CAAA,2BAAA;AAAA,MACpB,GAAA;AAAA,MACA,QAAA;AAAA,MACA,YAAA;AAAA,KACJ,CAAA;AACA,IAAA,MAAM,WAAW,QAAS,CAAA,wBAAA;AAAA,MACtB,GAAA;AAAA,MACA,IAAA,CAAK,QAAQ,IAAK,CAAA,GAAA,EAAK,IAAI,KAAM,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA;AAAA,KACnD,CAAA;AAEA,IAAO,OAAA,IAAA,CAAK,aAAa,UAAU,CAAA,CAAA;AAAA,GACvC;AAAA,EAEA,aACI,UACwB,EAAA;AACxB,IAAM,MAAA;AAAA,MACF,YAAA;AAAA,MACA,qBAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,KAGuB,GAAA,UAAA,CAAA;AAE3B,IAAO,OAAA;AAAA,MACH,YAAA;AAAA,MACA,OAAA;AAAA,MACA,qBAAA;AAAA,MACA,MAAA;AAAA;AAAA;AAAA,KAGJ,CAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,4BAII,GACA,EAAA,QAAA,EACA,eAAwC,EAAE,YAAA,EAAc,WAClC,EAAA;AACtB,IAAA,MAAM,EAAE,YAAc,EAAA,MAAA,EAAQ,cAAiB,GAAA,IAAO,GAAA,YAAA,CAAA;AAEtD,IAAM,MAAA,EAAE,eAAkB,GAAA,IAAA,CAAA;AAC1B,IAAA,MAAM,GAAM,GAAA,GAAA,CAAI,KAAM,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnC,IAAM,MAAA,wBAAA,GAA2B,IAAK,CAAA,0BAAA,CAA2B,GAAG,CAAA,CAAA;AAEpE,IAAM,MAAA,eAAA,GACF,cAAc,QAAQ,CAAA,CAAA;AAC1B,IAAM,MAAA,gBAAA,GAAmB,eAAgB,CAAA,QAAA,CACrC,YACJ,CAAA,CAAA;AACA,IAAA,IAAI,CAAC,gBAAkB,EAAA;AACnB,MAAA,IAAI,GAAM,GAAA,CAAA,sBAAA,EAAyB,YAAY,CAAA,YAAA,EAAe,QAAQ,CAAA,CAAA,CAAA,CAAA;AACtE,MAAA,IAAI,gBAAgB,SAAW,EAAA;AAC3B,QAAA,GAAA,GAAM,6CAA6C,QAAQ,CAAA,wBAAA,CAAA,CAAA;AAAA,OAC/D;AACA,MAAM,MAAA,CAAA,GAAI,IAAI,oBAAA,CAAqB,GAAK,EAAA;AAAA,QACpC,SAAW,EAAA,QAAA;AAAA,QACX,mBAAqB,EAAA,MAAA,CAAO,IAAK,CAAA,eAAA,CAAgB,QAAQ,CAAA;AAAA,OAC5D,CAAA,CAAA;AACD,MAAM,MAAA,CAAA,CAAA;AAAA,KACV;AACA,IAAM,MAAA,EAAE,aAAe,EAAA,cAAA,EAAmB,GAAA,gBAAA,CAAA;AAC1C,IAAM,MAAA,EAAE,aAAe,EAAA,8BAAA,EAAmC,GAAA,aAAA,CAAA;AAE1D,IAAM,MAAA,+BAAA,GACF,gBAAiB,CAAA,aAAA,IAAiB,EAAC,CAAA;AACvC,IAAA,MAAM,YAA8B,GAAA;AAAA,MAChC,GAAG,8BAAA;AAAA,MACH,GAAI,mCAAmC,EAAC;AAAA,MACxC,GAAG,cAAA;AAAA,MACH,GAAG,wBAAA;AAAA,KACP,CAAA;AAAA;AAGA,IAAM,MAAA,MAAA,GACF,cAAkB,IAAA,cAAA,CAAe,YAAY,CAAA,CAAA;AACjD,IAAA,IAAI,MAAQ,EAAA;AACR,MAAA,MAAM,IAAI,oBAAA;AAAA,QACN,CAAA,6CAAA,EAAgD,QAAQ,CAAA,EAAA,EAAK,YAAY,CAAA;AAAA,CAAA,GACrE,iBAAiB,MAAM,CAAA;AAAA,QAC3B,EAAE,MAAO,EAAA;AAAA,OACb,CAAA;AAAA,KACJ;AAEA,IAAA,MAAM,gBAA8C,GAAA;AAAA,MAChD,GAAG,YAAA;AAAA,MACH,QAAA;AAAA,MACA,aAAA;AAAA,MACA,SAAS,GAAI,CAAA,IAAA;AAAA,MACb,MAAQ,EAAA,YAAA;AAAA,KACZ,CAAA;AACA,IAAI,IAAA,QAAA,GAAe,IAAK,CAAA,eAAA,CAAgB,gBAAgB,CAAA,CAAA;AAWxD,IAAM,MAAA,EAAE,uBAA0B,GAAA,QAAA,CAAA;AAClC,IAAA,MAAM,GAA8B,GAAA;AAAA,MAChC,GAAG,gBAAA;AAAA,MACH,qBAAA;AAAA,MACA,QAAA;AAAA,KACJ,CAAA;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAEA,2BAA2B,GAAgC,EAAA;AACvD,IAAO,OAAA;AAAA,MACH,UAAU,IAAK,CAAA,OAAA;AAAA,MACf,KAAK,IAAK,CAAA,GAAA;AAAA,MACV,EAAA,EAAI,mBAAoB,CAAA,GAAA,CAAI,IAAI,CAAA;AAAA,KACpC,CAAA;AAAA,GACJ;AAAA,EAEA,kBAII,EAAC,CAAA;AAAA;AAAA,EAGL,MAAM,uBAMF,CAAA,QAAA,EACA,YACqB,EAAA;AACrB,IAAA,MAAM,QAAQ,IAAK,CAAA,eAAA,CAAA;AAEnB,IAAA,MAAM,WAAW,IAAK,CAAA,SAAA;AAAA,MAClB,YAAA;AAAA,MACA,sBAAA;AAAA,MACA,CAAA;AAAA,KACJ,CAAA;AAEA,IAAI,IAAA,CAAC,MAAM,QAAQ,CAAA;AAAG,MAAM,KAAA,CAAA,QAAQ,IAAI,EAAC,CAAA;AACzC,IAAM,MAAA,SAAA,GAAY,MAAM,QAAQ,CAAA,CAAA;AAChC,IAAM,MAAA,UAAA,GAAa,UAAU,QAAQ,CAAA,CAAA;AACrC,IAAA,IAAI,UAAY,EAAA;AAEZ,MAAO,OAAA,UAAA,CAAA;AAAA,KACX;AACA,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,aAAA,CAAc,QAAQ,CAAA,CAAA;AAAA;AAExC,IAAM,MAAA;AAAA,MACF,YAAA;AAAA,MACA,OAAA;AAAA,MACA,qBAAuB,EAAA,IAAA;AAAA;AAAA;AAAA,MAGvB,MAAQ,EAAA,YAAA;AAAA,KACR,GAAA,YAAA,CAAA;AACJ,IAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,QAAA,CACvB,YACJ,CAAA,CAAA;AACA,IAAA,IAAI,CAAC,aAAe,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,yBAAA,EAA4B,YAAY,CAAA,6BAAA,EAAgC,QAAQ,CAAA;AAAA,2BAAA,EAC9C,MAAO,CAAA,IAAA;AAAA,UACjC,IAAK,CAAA,QAAA;AAAA,SACT,CAAE,IAAK,CAAA,IAAI,CAAC,CAAA;AAAA;AAAA,eAAA,EAAuB,IAAK,CAAA,gBAAA;AAAA,UACpC,YAAA;AAAA,SACH,CAAA,CAAA;AAAA,OACT,CAAA;AAAA,KACJ;AACA,IAAA,MAAM,EAAE,aAAA,EAAe,MAAQ,EAAA,aAAA,EAAkB,GAAA,aAAA,CAAA;AACjD,IAAM,MAAA,EAAE,aAAe,EAAA,8BAAA,EAAmC,GAAA,aAAA,CAAA;AAC1D,IAAA,MAAM,2BAA2B,IAAK,CAAA,0BAAA;AAAA,MAClC,IAAI,OAAQ,CAAA,QAAA,EAAU,OAAO,CAAA;AAAA,KACjC,CAAA;AAIA,IAAA,MAAM,MAAqB,GAAA;AAAA,MACvB,GAAG,8BAAA;AAAA,MACH,GAAG,aAAA;AAAA;AAAA;AAAA,MAGH,GAAG,YAAA;AAAA,MACH,GAAG,wBAAA;AAAA,KACP,CAAA;AAAA;AAaA,IAAM,MAAA,QAAA,GAAW,KAAK,eAAgB,CAAA;AAAA,MAClC,aAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAA;AAAA,MACA,OAAA;AAAA,MACA,YAAA;AAAA;AAAA;AAAA,KAGH,CAAA,CAAA;AACD,IAAA,MAAM,MAAM,QAAS,CAAA,qBAAA,CAAA;AACrB,IAAA,IAAI,QAAQ,GAAO,IAAA,CAAC,IAAK,CAAA,EAAA,CAAG,GAAG,CAAG,EAAA;AAC9B,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,EAAA,EAAK,QAAQ,CAAA,0CAAA,EAA6C,IAAM,EAAA,GAAG,CAAS,MAAA,EAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAAA,OAC/G,CAAA;AAAA,KACJ;AACA,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,CAAA,4CAAA,EAA+C,QAAQ,CAAA,SAAA,EAAY,QAAQ,CAAA,CAAA;AAAA,KAC/E,CAAA;AACA,IAAA,SAAA,CAAU,QAAQ,CAAI,GAAA,QAAA,CAAA;AACtB,IAAO,OAAA,QAAA,CAAA;AAAA,GACX;AAAA,EAEQ,iBAAiB,YAAyC,EAAA;AAC9D,IAAA,OAAO,IAAK,CAAA,SAAA,CAAU,YAAc,EAAA,IAAA,EAAM,CAAC,CAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,gBACI,kBACC,EAAA;AACD,IAAM,MAAA,EAAE,aAAe,EAAA,MAAA,EAAW,GAAA,kBAAA,CAAA;AAClC,IAAI,IAAA;AAEA,MAAA,MAAM,UAAa,GAAA,IAAA,CAAK,oBAAqB,CAAA,aAAA,EAAe,MAAM,CAAA,CAAA;AAClE,MAAO,OAAA,UAAA,CAAA;AAAA,aACF,CAAQ,EAAA;AACb,MAAA,MAAM,CAAI,GAAA,CAAA,CAAE,OAAQ,CAAA,KAAA,CAAM,mCAAmC,CAAA,CAAA;AAE7D,MAAA,MAAM,CAAC,CAAA,EAAG,YAAY,CAAA,GAAI,KAAK,EAAC,CAAA;AAChC,MAAA,IAAI,YAAc,EAAA;AACd,QAAA,MAAM,IAAI,oBAAA;AAAA,UACN,0DAAA;AAAA,UACA,EAAE,QAAQ,EAAE,CAAC,YAAY,GAAG,CAAA,CAAE,SAAU,EAAA;AAAA,SAC5C,CAAA;AAAA,OACJ;AACA,MAAM,MAAA,CAAA,CAAA;AAAA,KACV;AAAA,GACJ;AAAA,EAEA,cAAc,OAAoC,EAAA;AAC9C,IAAO,OAAA,IAAA,CAAK,YAAa,CAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAAA,GAC5C;AAAA,EACA,oBAAoB,OAAoC,EAAA;AACpD,IAAA,OAAO,IAAK,CAAA,gBAAA,CAAiB,IAAK,CAAA,aAAA,CAAc,OAAO,CAAC,CAAA,CAAA;AAAA,GAC5D;AAAA,EAEA,gBAAmB,GAAA;AACf,IAAA,OAAO,QAAS,CAAA;AAAA,MACZ,yCAA2C,EAAA;AAAA,QACvC,OACI,EAAA,6EAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,iFAAA;AAAA,UACA,gEAAA;AAAA,UACA,4CAAA;AAAA,UACA,4DAAA;AAAA,UACA,uEAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,2BAAA;AAAA,UACA,0CAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACA,kCAAoC,EAAA;AAAA,QAChC,OACI,EAAA,6DAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,yEAAA;AAAA,UACA,gEAAA;AAAA,UACA,2DAAA;AAAA,UACA,sEAAA;AAAA,UACA,gDAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,yFAAA;AAAA,UACA,4DAAA;AAAA,UACA,uGAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACA,mEACI,EAAA;AAAA,QACI,OAAS,EAAA,iDAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,qFAAA;AAAA,UACA,sEAAA;AAAA,UACA,wDAAA;AAAA,UACA,yDAAA;AAAA,UACA,oFAAA;AAAA,UACA,0DAAA;AAAA,UACA,8CAAA;AAAA,UACA,2EAAA;AAAA,UACA,+EAAA;AAAA,UACA,yDAAA;AAAA,UACA,mDAAA;AAAA,SACJ;AAAA,QACA,MAAM,EAAC;AAAA,QACP,QAAU,EAAA;AAAA,UACN,2DAAA;AAAA,UACA,wEAAA;AAAA,UACA,6GAAA;AAAA,UACA,yDAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACJ,2DAA6D,EAAA;AAAA,QACzD,OACI,EAAA,sEAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,qDAAA;AAAA,UACA,iGAAA;AAAA,UACA,oEAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,qEAAA;AAAA,UACA,+FAAA;AAAA,UACA,iGAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,uEAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACA,wEACI,EAAA;AAAA,QACI,OACI,EAAA,kFAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,oEAAA;AAAA,UACA,iFAAA;AAAA,UACA,iFAAA;AAAA,UACA,mEAAA;AAAA,UACA,mFAAA;AAAA,UACA,4EAAA;AAAA,UACA,8EAAA;AAAA,UACA,6DAAA;AAAA,UACA,6FAAA;AAAA,UACA,kDAAA;AAAA,UACA,wFAAA;AAAA,UACA,wEAAA;AAAA,UACA,iEAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,uFAAA;AAAA,UACA,gEAAA;AAAA,UACA,mIAAA;AAAA,UACA,gIAAA;AAAA,UACA,0HAAA;AAAA,UACA,uHAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACJ,6GACI,EAAA;AAAA,QACI,OACI,EAAA,4EAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,uFAAA;AAAA,UACA,gDAAA;AAAA,UACA,gCAAA;AAAA,UACA,uEAAA;AAAA,UACA,oDAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,4EAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEJ,uEACI,EAAA;AAAA,QACI,OACI,EAAA,uEAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,0EAAA;AAAA,UACA,+EAAA;AAAA,UACA,uEAAA;AAAA,UACA,mFAAA;AAAA,UACA,2HAAA;AAAA,UACA,sFAAA;AAAA,UACA,0EAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,wGAAA;AAAA,UACA,wGAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,4EAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACJ,4EACI,EAAA;AAAA,QACI,OACI,EAAA,oFAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,kEAAA;AAAA,UACA,0FAAA;AAAA,UACA,kFAAA;AAAA,UACA,2DAAA;AAAA,UACA,8CAAA;AAAA,UACA,oDAAA;AAAA,UACA,uEAAA;AAAA,UACA,2CAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,kEAAA;AAAA,UACA,qEAAA;AAAA,UACA,sIAAA;AAAA,UACA,8HAAA;AAAA,UACA,yEAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,yDAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACJ,yDAA2D,EAAA;AAAA,QACvD,OACI,EAAA,2EAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,4EAAA;AAAA,UACA,iFAAA;AAAA,UACA,iDAAA;AAAA,UACA,qFAAA;AAAA,UACA,0EAAA;AAAA,UACA,uEAAA;AAAA,UACA,sEAAA;AAAA,UACA,8DAAA;AAAA,UACA,kEAAA;AAAA,UACA,2FAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,4GAAA;AAAA,SACJ;AAAA,OACJ;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AACJ,CAAA;AA33BIL,iBAAA,CAAA;AAAA,EADC,UAAA;AAAA,CAAA,EAtEiB,IAuElB,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA,CAAA,CAAA;AAqBMA,iBAAA,CAAA;AAAA,EADL,GAAA;AAAA,CAAA,EA3FiB,IA4FZ,CAAA,SAAA,EAAA,kBAAA,EAAA,CAAA,CAAA,CAAA;AAmDNA,iBAAA,CAAA;AAAA,EADC,QAAS,CAAA,QAAA;AAAA,CAAA,EA9IQ,IA+IlB,CAAA,SAAA,EAAA,gBAAA,EAAA,CAAA,CAAA,CAAA;AAuFMA,iBAAA,CAAA;AAAA,EADL,UAAA;AAAA,CAAA,EArOiB,IAsOZ,CAAA,SAAA,EAAA,uBAAA,EAAA,CAAA,CAAA,CAAA;AAgDAA,iBAAA,CAAA;AAAA,EADL,UAAA;AAAA,CAAA,EArRiB,IAsRZ,CAAA,SAAA,EAAA,sBAAA,EAAA,CAAA,CAAA,CAAA;AAYNA,iBAAA,CAAA;AAAA,EADC,UAAA;AAAA,CAAA,EAjSiB,IAkSlB,CAAA,SAAA,EAAA,qBAAA,EAAA,CAAA,CAAA,CAAA;AAoBMA,iBAAA,CAAA;AAAA,EADL,UAAA;AAAA,CAAA,EArTiB,IAsTZ,CAAA,SAAA,EAAA,gCAAA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;AC/eH,MAAe,wBAGZ,eAAoB,CAAA;AAAA,EAC1B,OAAO,UAAa,GAAA,EAAA,CAAA;AAAA,EACpB,WAAW,aAAgB,GAAA;AACvB,IAAO,OAAA,EAAE,GAAK,EAAA,IAAA,CAAK,UAAW,EAAA,CAAA;AAAA,GAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,kBAAsD,GAAU,EAAA;AAClE,IAAA,MAAM,KAAQ,GAAA,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,UAAA,CAAA,CAAA;AACtC,IAAM,MAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,8BAAA;AAAA,MACrB,GAAA;AAAA,MACA,KAAA;AAAA,KACJ,CAAA;AACA,IAAM,MAAA,YAAA,GAAe,KAAK,gBAAiB,EAAA,CAAA;AAE3C,IAAA,OAAA,CAAQ,IAAI,CAAuB,oBAAA,EAAA,KAAK,0BAA0B,OAAQ,CAAA,YAAY,CAAC,CAAE,CAAA,CAAA,CAAA;AAEzF,IAAI,IAAA;AACA,MAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,0BAAA,CAA2B,KAAK,KAAK,CAAA,CAAA;AAC7D,MAAA,OAAO,IAAK,CAAA,wBAAA;AAAA,QACR,IAAA;AAAA,QACA,YAAA;AAAA,QACA,KAAA;AAAA,OACJ,CAAA;AAAA,aACI,KAAY,EAAA;AAChB,MAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,KAAM,CAAA,qBAAqB,CAAG,EAAA;AAC5C,QAAM,MAAA,IAAI,MAAM,CAAY,SAAA,EAAA,KAAK,oBAAoB,OAAQ,CAAA,YAAY,CAAC,CAAE,CAAA,CAAA,CAAA;AAAA,OAChF;AACA,MAAM,MAAA,KAAA,CAAA;AAAA,KACV;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,wBACF,GACF,EAAA;AACE,IAAM,MAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,8BAAA;AAAA,MACrB,GAAA;AAAA,MACA,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,UAAA,CAAA;AAAA,KAC5B,CAAA;AACA,IAAO,OAAA,IAAA,CAAK,6BAA8B,CAAA,GAAA,EAAK,KAAK,CAAA,CAAA;AAAA,GACxD;AAAA,EA0CA,mBAAsB,GAAA;AAClB,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,eAAA,CAAgB,aAAa,CAAA,CAAA;AACvD,IAAM,MAAA,CAAA,GAAI,IAAI,YAAa,EAAA,CAAA;AAE3B,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA,EAYA,gBAAmB,GAAA;AACf,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,eAAA,CAAgB,UAAU,CAAA,CAAA;AACpD,IAAM,MAAA,CAAA,GAAI,IAAI,YAAa,EAAA,CAAA;AAE3B,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA,EAaA,mBAAA,CACI,OACG,IACQ,EAAA;AACX,IAAM,MAAA,CAAC,YAAe,GAAA,EAAE,CAAI,GAAA,IAAA,CAAA;AAC5B,IAAM,MAAA,EAAE,YAAa,EAAA,GAAI,IAAK,CAAA,gBAAA,CAAA;AAC9B,IAAA,MAAM,EAAE,gBAAA,EAAAO,iBAAiB,EAAA,GAAI,IAAK,CAAA,YAAA,CAAA;AAClC,IAAA,MAAM,IAAI,IAAI,YAAA,CAAa,IAAIA,iBAAiB,CAAA,EAAE,GAAG,YAAY,CAAA,CAAA;AACjE,IAAA,OAAO,KAAM,CAAA,MAAA,CAAO,CAAE,CAAA,WAAA,EAAa,CAAA,CAAA;AAAA,GACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,qBAAmD,GAAA;AACnD,IAAI,IAAA,CAAC,IAAK,CAAA,cAAA,CAAe,aAAe,EAAA;AACpC,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA;AAAA,8FAAA,CAAA;AAAA,OAE5B,CAAA;AAAA,KACJ;AACA,IAAA,OAAO,KAAK,cAAe,CAAA,aAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,yBAA4B,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,gBAAA,CAAiB,IAAK,CAAA,gBAAA,EAAkB,CAAA,CAAA;AAAA,GACxD;AAAA,EACA,gBAAmB,GAAA;AACf,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AACN,MAAM,MAAA,IAAI,MAAM,CAAsC,oCAAA,CAAA,CAAA,CAAA;AAE1D,IAAM,MAAA;AAAA,MACF,GAAA;AAAA,MACA,EAAA;AAAA;AAAA,QAEA,IAAK,CAAA,QAAA,CAAA;AACT,IAAO,OAAA,IAAA,CAAK,KAAK,EAAE,CAAA,CAAA;AAAA,GACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,8BACF,CAAA,GAAA,EACA,KACgB,EAAA;AAChB,IAAA,OAAO,IAAK,CAAA,cAAA;AAAA,MACR,GAAG,KAAK,CAAA,EAAA,EAAK,YAAY,IAAK,CAAA,QAAA,CAAU,EAAE,CAAC,CAAA,CAAA;AAAA,MAC3C,IAAK,CAAA,gBAAA,CAAiB,IAAK,CAAA,gBAAA,EAAkB,CAAA;AAAA,MAC7C,2EAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuDA,MAAgB,0BAEd,CAAA,GAAA,EAAU,KAAgB,EAAA;AACxB,IAAA,OAAO,GACF,CAAA,QAAA;AAAA,MACG,KAAA;AAAA,MACA,KACK,mBAEA,EAAA;AAAA,KACT,CACC,YAAa,CAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GAOzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,MAAgB,6BACZ,CAAA,GAAA,EACA,aAC0B,EAAA;AAC1B,IAAA,MAAM,IAAO,GAAA,aAAA,CAAA;AACb,IAAA,OAAO,GAAI,CAAA,QAAA;AAAA,MACP,IAAI,OAAA,CAAQ,IAAK,CAAA,QAAA,EAAU,KAAK,UAAU,CAAA;AAAA,MAC1C,KAAK,gBAAiB,EAAA;AAAA,KAC1B,CAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAuB,GAAA;AACnB,IAAA,OAAO,QAAS,CAAA;AAAA,MACZ,0FACI,EAAA;AAAA,QACI,OACI,EAAA,uDAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,iEAAA;AAAA,UACA,8EAAA;AAAA,UACA,kFAAA;AAAA,UACA,6EAAA;AAAA,UACA,uFAAA;AAAA,UACA,2DAAA;AAAA,UACA,qFAAA;AAAA,SACJ;AAAA,QACA,MAAM,EAAC;AAAA,QACP,QAAU,EAAA;AAAA,UACN,2DAAA;AAAA,UACA,8EAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEJ,2DAA6D,EAAA;AAAA,QACzD,OAAS,EAAA,kDAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,iFAAA;AAAA,UACA,uDAAA;AAAA,SACJ;AAAA,QACA,MAAM,EAAC;AAAA,QACP,UAAU,EAAC;AAAA,OACf;AAAA,MAEA,8EACI,EAAA;AAAA,QACI,OACI,EAAA,qGAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,iDAAA;AAAA,UACA,mEAAA;AAAA,UACA,8EAAA;AAAA,UACA,kEAAA;AAAA,UACA,kEAAA;AAAA,UACA,iEAAA;AAAA,UACA,6CAAA;AAAA,SACJ;AAAA,QACA,MAAM,EAAC;AAAA,QACP,QAAU,EAAA;AAAA,UACN,wEAAA;AAAA,UACA,wCAAA;AAAA,UACA,gEAAA;AAAA,UACA,4CAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEJ,wEACI,EAAA;AAAA,QACI,OACI,EAAA,oEAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,+CAAA;AAAA,UACA,oFAAA;AAAA,UACA,oGAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,8FAAA;AAAA,UACA,6EAAA;AAAA,SACJ;AAAA,QACA,UAAU,EAAC;AAAA,OACf;AAAA,MAEJ,wCAA0C,EAAA;AAAA,QACtC,OAAS,EAAA,qCAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,6EAAA;AAAA,UACA,2EAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,yFAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEA,gEAAkE,EAAA;AAAA,QAC9D,OAAS,EAAA,gCAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,+EAAA;AAAA,UACA,uGAAA;AAAA,UACA,0EAAA;AAAA,UACA,gFAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,2FAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEA,4CAA8C,EAAA;AAAA,QAC1C,OAAS,EAAA,sCAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,+EAAA;AAAA,UACA,8DAAA;AAAA,UACA,wFAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,0DAAA;AAAA,UACA,6FAAA;AAAA,SACJ;AAAA,OACJ;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AACJ,CAAA;AA5UIP,iBAAA,CAAA;AAAA,EADC,QAAS,CAAA,QAAA;AAAA,CAAA,EApGQ,eAqGlB,CAAA,SAAA,EAAA,qBAAA,EAAA,CAAA,CAAA,CAAA;AAiBAA,iBAAA,CAAA;AAAA,EADC,QAAS,CAAA,QAAA;AAAA,CAAA,EArHQ,eAsHlB,CAAA,SAAA,EAAA,kBAAA,EAAA,CAAA,CAAA,CAAA;AAkBAA,iBAAA,CAAA;AAAA,EADC,KAAA;AAAA,CAAA,EAvIiB,eAwIlB,CAAA,SAAA,EAAA,qBAAA,EAAA,CAAA,CAAA;;;;;;;;AC7JG,MAAM,yBAA6C,GAAAQ,MAAA;;;;;;;;ACAnD,MAAM,iBAAqC,GAAAA,MAAA;;;;;;;;ACA3C,MAAM,WAA+B,GAAAC,MAAA;;;;;;;;;;;;;AC8B5C;AAaO,MAAM,0BAA0B,eAAkC,CAAA;AAAA,EACrE,OAAO,UAAa,GAAA,EAAA,CAAA;AAAA,EACpB,WAAW,aAAgB,GAAA;AACvB,IAAO,OAAA,EAAE,GAAK,EAAA,IAAA,CAAK,UAAW,EAAA,CAAA;AAAA,GAClC;AAAA,EAEA,cAAiB,GAAA;AACb,IAAO,OAAAL,MAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,uBAA2C,GAAA;AAC3C,IAAO,OAAA,yBAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAI,eAAmC,GAAA;AACnC,IAAO,OAAA,iBAAA,CAAA;AAAA,GACX;AAAA,EAEA,aAAmC,GAAA;AAC/B,IAAA,MAAM,0BAA0B,IAAK,CAAA,uBAAA,CAAA;AACrC,IAAI,IAAA,uBAAA,CAAwB,eAAe,yBAA2B,EAAA;AAClE,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,GAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,gFAAA,EACe,wBAAwB,UAAU,CAAA;AAAA,SAAA,EAAe,wBAAwB,OAAO,CAAA,CAAA;AAAA,OAC3H,CAAA;AAAA,KACJ;AAEA,IAAO,OAAA;AAAA,MACHC,MAAA;AAAA,MACA,mBAAA;AAAA,MACA,WAAA;AAAA,MACA,eAAA;AAAA,MACA,uBAAA;AAAA,MACA,IAAK,CAAA,eAAA;AAAA,KACT,CAAA;AAAA,GACJ;AAAA,EAEA,IAAI,eAAkB,GAAA;AAClB,IAAO,OAAA,mBAAA,CAAA;AAAA,GACX;AAAA,EACA,IAAI,oBAAuB,GAAA;AACvB,IAAO,OAAA,sBAAA,CAAA;AAAA,GACX;AAAA,EAEA,wBAAwB,MAAsC,EAAA;AAC1D,IAAO,OAAA;AAAA,MACH,KAAK,MAAO,CAAA,GAAA;AAAA,KAChB,CAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,wBAAA,CACF,GACA,EAAA,UAAA,EACA,aACY,EAAA;AACZ,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,CAAA,iEAAA,CAAA,GACA,IAAK,CAAA,OAAA,CAAQ,aAAe,CAAA,GAAA;AAAA,KAChC,CAAA;AAGA,IAAMT,MAAAA,MAAAA,GAAQ,IAAK,CAAA,iBAAA,CAAkB,aAAa,CAAA,CAAA;AAClD,IAAO,OAAA,GAAA,CAAI,UAAU,IAAI,QAAA,CAAS,KAAK,OAAS,EAAA,UAAA,EAAYA,MAAK,CAAC,CAAA,CAAA;AAAA,GACtE;AAAA,EAEA,kBAAkB,IAAgB,EAAA;AAC9B,IAAI,IAAA,IAAA;AAAM,MAAA,OAAO,KAAK,UAAW,CAAA,KAAA,CAAA;AACjC,IAAA,MAAM,EAAE,QAAU,EAAA,GAAA,EAAK,IAAI,GAAG,iBAAA,KAAsB,IAAK,CAAA,QAAA,CAAA;AAEzD,IAAA,OAAO,KAAK,mBAAoB,CAAA;AAAA,MAC5B,QAAA;AAAA,MACA,GAAA;AAAA,MACA,EAAA;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AAAA,EAGA,MAAM,sBAAuB,CAAA,GAAA,EAAwB,SAAmB,EAAA;AACpE,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAEA,OAAO,mBAAmB,CAAqB,EAAA;AAAA,GAAC;AACpD,CAAA;AALUI,iBAAA,CAAA;AAAA,EADL,QAAS,CAAA,UAAA;AAAA,CAAA,EAhGD,iBAiGH,CAAA,SAAA,EAAA,wBAAA,EAAA,CAAA,CAAA;;ACxIH,MAAe,wBAEZ,eAAmB,CAAA;AAE7B;;;;;;;;;;;;;ACgBO,MAAM,kCAAkC,eAAgB,CAAA;AAAA,EAC3D,kBAAkB,MAAQ,EAAA;AACtB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAGA,IAAI,qBAAwB,GAAA;AACxB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACX;AAAA,EAGU,cAA6B,GAAA;AACnC,IAAM,MAAA,EAAE,cAAe,EAAA,GAAI,IAAK,CAAA,qBAAA,CAAA;AAChC,IAAA,IAAI,CAAC,cAAgB,EAAA;AACjB,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,kDAAA,CAAA;AAAA,OACJ,CAAA;AAAA,KACJ;AACA,IAAM,MAAA,CAAA,GAAI,IAAI,cAAe,EAAA,CAAA;AAE7B,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA;AAAA;AAAA,EAIA,MAAM,8BAA+B,CAAA,GAAA,EAA6B,KAAiC,EAAA;AAC/F,IAAM,MAAA,CAAA,GAAI,KAAK,gBAAiB,EAAA,CAAA;AAChC,IAAM,MAAA,EAAC,QAAQ,EAAA,GAAI,IAAK,CAAA,QAAA,CAAA;AAExB,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA,MACR,GAAG,KAAK,CAAA,EAAA,EAAK,YAAY,IAAK,CAAA,QAAA,CAAU,EAAE,CAAC,CAAA,CAAA;AAAA,MAC3C,IAAA,CAAK,iBAAiB,CAAC,CAAA;AAAA,MACvB,GAAA;AAAA,MACA,qDACK,QAAU,EAAA,MAAA,GACL,sBAAsB,QAAS,CAAA,IAAA,CAAK,QAAQ,CAC5C,GAAA,EAAA,CAAA;AAAA,KACd,CAAA;AAAA,GACJ;AAAA,EAEA,MAAM,wBAAA,CACF,GACA,EAAA,UAAA,EACA,aACY,EAAA;AACZ,IAAI,IAAA,IAAA,CAAA;AACJ,IAAA,IAAI,aAAe,EAAA;AACf,MAAA,IAAA,GAAO,aAAc,CAAA,OAAA,CAAA;AAAA,KAClB,MAAA;AACH,MAAA,IAAI,CAAC,IAAA,CAAK,QAAU,EAAA,QAAA,GAAW,CAAC,CAAA;AAC5B,QAAA,MAAM,IAAI,KAAA;AAAA,UACN,CAAA,gBAAA,CAAA;AAAA,SACJ,CAAA;AACJ,MAAM,MAAA;AAAA,QACF,QAAA;AAAA;AAAA,UAEA,IAAK,CAAA,QAAA,CAAA;AACT,MAAA,IAAA,GAAO,SAAS,CAAC,CAAA,CAAA;AAAA,KACrB;AAEA,IAAA,MAAM,MAAS,GAAA,IAAI,QAAS,CAAA,IAAA,EAAM,UAAU,CAAA,CAAA;AAC5C,IAAO,MAAA,CAAA,eAAA,CAAgB,KAAK,aAAa,CAAA,CAAA;AACzC,IAAA,GAAA,CAAI,UAAU,MAAM,CAAA,CAAA;AAEpB,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA,EAIA,MAAM,0BACF,CAAA,GAAA,EACA,aACqC,EAAA;AAAA;AAErC,IAAO,OAAA,GAAA,CAAI,SAAS,aAAa,CAAA,CAAA;AAAA,GACrC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,6BACF,CAAA,GAAA,EACA,aAC0B,EAAA;AAAA;AAE1B,IAAO,OAAA,GAAA,CAAI,SAAS,aAAa,CAAA,CAAA;AAAA,GACrC;AACJ,CAAA;AA5EcA,iBAAA,CAAA;AAAA,EADT,QAAS,CAAA,QAAA;AAAA,CAAA,EAVD,yBAWC,CAAA,SAAA,EAAA,gBAAA,EAAA,CAAA,CAAA;;;;;;;;ACjCd;AACO,MAAM,gCAAgC,eAAgB,CAAA;AAAA,EACzD,OAAO,UAAa,GAAA,EAAA,CAAA;AAAA,EACpB,WAAW,aAAgB,GAAA;AACvB,IAAO,OAAA,EAAE,GAAK,EAAA,IAAA,CAAK,UAAW,EAAA,CAAA;AAAA,GAClC;AAAA,EACA,cAAiB,GAAA;AACb,IAAO,OAAAI,IAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,wBAAA,CAGF,GACA,EAAA,GAAA,EACA,aACY,EAAA;AACZ,IAAM,MAAA,IAAI,MAAM,CAAM,IAAA,CAAA,CAAA,CAAA;AAAA,GAC1B;AAAA;AAAA,EAGA,MAAM,0BACF,CAAA,GAAA,EACA,aACqC,EAAA;AACrC,IAAM,MAAA,IAAI,MAAM,CAAM,IAAA,CAAA,CAAA,CAAA;AACf,GACX;AAAA;AAAA;AAAA,EAIA,MAAM,6BACF,CAAA,GAAA,EACA,aAC0B,EAAA;AAC1B,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAEA,YAAe,GAAA;AACX,IAAA,OAAO,QAAS,CAAA;AAAA,MACZ,+DAAiE,EAAA;AAAA,QAC7D,OACI,EAAA,uDAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,mEAAA;AAAA,UACA,2FAAA;AAAA,SACJ;AAAA,QACA,MAAM,EAAC;AAAA,QACP,QAAU,EAAA;AAAA,UACN,qCAAA;AAAA,UACA,oDAAA;AAAA,UACA,kCAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACA,qCAAuC,EAAA;AAAA,QACnC,OAAS,EAAA,8CAAA;AAAA,QACT,OAAS,EAAA;AAAA;AAAA,UAEL,qDAAA;AAAA,UACA,+CAAA;AAAA,UACA,8DAAA;AAAA,UACA,2EAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA;AAAA,UAEF,mDAAA;AAAA,UACA,wDAAA;AAAA,UACA,8EAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,kCAAA;AAAA,UACA,0DAAA;AAAA,UACA,wCAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MACA,oCAAoC,QAAS,CAAA,IAAA;AAAA,MAC7C,4DACI,QAAS,CAAA,IAAA;AAAA,MACb,0CAA0C,QAAS,CAAA,IAAA;AAAA,MAEnD,oDAAsD,EAAA;AAAA,QAClD,OACI,EAAA,2EAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,+FAAA;AAAA,UACA,uGAAA;AAAA,UACA,wGAAA;AAAA,UACA,yJAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,sFAAA;AAAA,SACJ;AAAA,QACA,UAAU,EAAC;AAAA,OACf;AAAA,MAEA,kCAAoC,EAAA;AAAA,QAChC,OAAS,EAAA,mDAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,2GAAA;AAAA,UACA,oFAAA;AAAA,UACA,oDAAA;AAAA,UACA,qCAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,qEAAA;AAAA,UACA,yDAAA;AAAA,UACA,+DAAA;AAAA,SACJ;AAAA,QACA,UAAU,EAAC;AAAA,OACf;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AACJ;;;;;;;;;;;;;ACTA;AAuEO,MAAM,oBAIH,IAAkC,CAAA;AAAA,EACxC,cAAiB,GAAA;AACb,IAAO,OAAAA,MAAA,CAAA;AAAA,GACX;AAAA,EACA,OAAO,YAAY,UAAY,EAAA;AAC3B,IAAA,MAAM,EAAE,GAAK,EAAA,GAAA,EAAK,OAAS,EAAA,SAAA,EAAW,oBAAuB,GAAA,UAAA,CAAA;AAE7D,IAAA,MAAM,eAAoB,EAAC,CAAA;AAC3B,IAAI,IAAA,GAAA;AAAK,MAAA,YAAA,CAAa,GAAM,GAAA,iBAAA,CAAkB,OAAQ,CAAA,GAAA,CAAI,KAAK,CAAA,CAAA;AAC/D,IAAI,IAAA,GAAA;AAAK,MAAa,YAAA,CAAA,GAAA,GAAM,OAAO,GAAG,CAAA,CAAA;AACtC,IAAI,IAAA,OAAA;AAAS,MAAA,YAAA,CAAa,OAAU,GAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAC9D,IAAI,IAAA,SAAA;AAAW,MAAa,YAAA,CAAA,SAAA,GAAY,OAAO,SAAS,CAAA,CAAA;AACxD,IAAI,IAAA,kBAAA;AAAoB,MAAA,YAAA,CAAa,kBAAqB,GAAA,aAAA,CAAc,OAAQ,CAAA,kBAAA,CAAmB,KAAK,CAAA,CAAA;AAExG,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,eAAmC,GAAA;AACnC,IAAO,OAAA,iBAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,WAA+B,GAAA;AAC/B,IAAO,OAAA,WAAA,CAAA;AAAA,GACX;AAAA,EAEA,aAAmC,GAAA;AAC/B,IAAM,MAAA,aAAA,GAAgB,MAAM,aAAc,EAAA,CAAA;AAC1C,IAAA,MAAM,kBAAkB,IAAK,CAAA,eAAA,CAAA;AAC7B,IAAI,IAAA,eAAA,CAAgB,eAAe,iBAAmB,EAAA;AAClD,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,GAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAA,gEAAA,EACO,gBAAgB,UAAU,CAAA;AAAA,SAAA,EAAe,gBAAgB,OAAO,CAAA,CAAA;AAAA,OACnG,CAAA;AAAA,KACJ;AAEA,IAAA,OAAO,CAAC,eAAA,EAAiB,IAAK,CAAA,WAAA,EAAa,GAAG,aAAa,CAAA,CAAA;AAAA,GAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,gBAAmB,GAAA;AACf,IAAM,MAAA,IAAI,MAAM,CAAsC,oCAAA,CAAA,CAAA,CAAA;AAAA,GAC1D;AAAA,EAEA,IAAI,aAAgB,GAAA;AAChB,IAAA,OAAO,aAAc,CAAA;AAAA,MACjB,YAAA,EAAc,UAAW,CAAA,SAAA,EAAW,eAAiB,EAAA;AAAA,QACjD,OAAS,EAAA;AAAA,UACL,aAAe,EAAA,yBAAA;AAAA,UACf,eAAe,IAA0B,EAAA;AACrC,YAAA,MAAM,EAAE,GAAA,EAAK,EAAI,EAAA,QAAA,EAAa,GAAA,IAAA,CAAA;AAE9B,YAAA,MAAM,SAAmB,EAAC,CAAA;AAC1B,YAAA,IAAI,CAAC,GAAA;AAAK,cAAO,MAAA,CAAA,GAAA,GAAM,CAAC,UAAU,CAAA,CAAA;AAClC,YAAA,IAAI,CAAC,EAAI,EAAA,MAAA;AAAQ,cAAO,MAAA,CAAA,EAAA,GAAK,CAAC,uBAAuB,CAAA,CAAA;AAErD,YAAA,IAAI,CAAC,QAAU,EAAA,MAAA;AACX,cAAO,MAAA,CAAA,QAAA,GAAW,CAAC,8BAA8B,CAAA,CAAA;AACrD,YAAA,IAAI,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAE,MAAS,GAAA,CAAA;AAAG,cAAO,OAAA,MAAA,CAAA;AAE3C,YAAO,OAAA,KAAA,CAAA,CAAA;AAAA,WACX;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,aAAe,EAAA,uBAAA;AAAA,UACf,eAAe,IAA0B,EAAA;AACrC,YAAM,MAAA,EAAE,GAAK,EAAA,GAAA,EAAQ,GAAA,IAAA,CAAA;AACrB,YAAA,MAAM,SAAmB,EAAC,CAAA;AAC1B,YAAA,IAAI,CAAC,GAAA;AAAK,cAAO,MAAA,CAAA,GAAA,GAAM,CAAC,UAAU,CAAA,CAAA;AAClC,YAAA,IAAI,CAAC,GAAA;AAAK,cAAO,MAAA,CAAA,GAAA,GAAM,CAAC,UAAU,CAAA,CAAA;AAClC,YAAA,IAAI,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAE,MAAS,GAAA,CAAA;AAAG,cAAO,OAAA,MAAA,CAAA;AAE3C,YAAO,OAAA,KAAA,CAAA,CAAA;AAAA,WACX;AAAA,SACJ;AAAA,OACH,CAAA;AAAA,MACD,YAAA,EAAc,UAAW,CAAA,SAAA,EAAW,iBAAmB,EAAA;AAAA,QACnD,OAAS,EAAA;AAAA,UACL,aAAe,EAAA,iBAAA;AAAA,UACf,eAAe,EAAC;AAAA,UAChB,eAAe,IAA0B,EAAA;AACrC,YAAO,OAAA,KAAA,CAAA,CAAA;AAAA,WACX;AAAA,SACJ;AAAA;AAAA,OAEH,CAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,mBAAsB,GAAA;AACxB,IAAM,MAAA,IAAA,GAAO,KAAK,QAAU,EAAA,kBAAA,CAAA;AAC5B,IAAA,IACI,QAAQ,CAAC,IAAA,CAAK,GAAG,IAAK,CAAA,OAAA,CAAQ,aAAc,CAC9C,EAAA;AACE,MAAQ,OAAA,CAAA,KAAA,CAAM,CAAa,UAAA,CAAA,GAAA,IAAA,CAAK,GAAM,GAAA,CAAA;AAAA,UAAe,CAAA,GAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,CAAe,GAAG,CAAA,CAAA;AAEpF,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAI,CAAiC,8BAAA,EAAA,IAAA,CAAK,aAAe,EAAA,IAAI,CAAkD,gDAAA,CAAA,CAAA,CAAA;AAAA,KACvJ;AACA,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAEnB,IAAM,MAAA,OAAA,GAAU,MAAM,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAC5C,IAAM,MAAA,EAAE,gBAAkB,EAAA,gBAAA,EAAqB,GAAA,OAAA,CAAA;AAE/C,IAAA,OAAO,QAAQ,GAAI,CAAA;AAAA,MACf,IAAA,CAAK,uBAAwB,CAAA,cAAA,EAAgB,gBAAgB,CAAA;AAAA,MAC7D,IAAA,CAAK,uBAAwB,CAAA,cAAA,EAAgB,gBAAgB,CAAA;AAAA,KAChE,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,sBAAsB,EAA+B,EAAA;AACjD,IAAA,MAAM,EAAE,oBAAA,EAAsB,sBAAuB,EAAA,GACjD,IAAK,CAAA,YAAA,CAAA;AAET,IAAI,IAAA;AAAA,MACA,OAAA;AAAA,MACA,YAAA;AAAA,MACA,qBAAA;AAAA,MACA,MAAA;AAAA;AAAA;AAAA,KAGA,GAAA,EAAA,CAAA;AACJ,IAAM,MAAA,YAAA,GAAe,OAAO,aAAa,CAAA,CAAA;AAGzC,IAAA,OAAO,IAAI,sBAAA;AAAA,MACP,OAAA;AAAA,MACA,YAAA;AAAA,MACA,IAAI,aAAa,qBAAqB,CAAA;AAAA;AAAA;AAAA;AAAA,KAI1C,CAAA;AAAA,GACJ;AAAA,EAGA,oBAAoB,IAAwB,EAAA;AAAA;AAGxC,IAAQ,OAAA,CAAA,GAAA,CAAI,sBAAsB,IAAI,CAAA,CAAA;AACtC,IAAA,MAAM,EAAE,YAAA,EAAc,cAAe,EAAA,GAAI,IAAK,CAAA,gBAAA,CAAA;AAE9C,IAAA,MAAM,YAAe,GAAA,IAAA,CAAK,qBAAsB,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AACrE,IAAA,MAAM,YAAe,GAAA,IAAA,CAAK,qBAAsB,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AACrE,IAAA,MAAM,CAAI,GAAA,IAAI,cAAe,CAAA,YAAA,EAAc,YAAY,CAAA,CAAA;AACvD,IAAA,OAAO,KAAM,CAAA,MAAA,CAAO,CAAE,CAAA,WAAA,EAAa,CAAA,CAAA;AAAA,GACvC;AAAA,EAEA,MAAM,gBAAmB,GAAA;AACrB,IAAA,OAAO,IAAK,CAAA,mBAAA,EAAsB,CAAA,IAAA,CAAK,OAAO,MAAoB,KAAA;AAC9D,MAAM,MAAA,YAAA,GAAe,MAAM,IAAK,CAAA,SAAA;AAAA,QAC5B,cAAA;AAAA,QACA,OAAO,UAAW,CAAA,KAAA;AAAA,OACtB,CAAA;AACA,MAAA,IAAI,CAAC,YAAA;AAAc,QAAA,MAAM,MAAM,CAA4B,0BAAA,CAAA,CAAA,CAAA;AAC3D,MAAO,OAAA,YAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,MAAM,mBACF,GACqC,EAAA;AACrC,IAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAEjD,IAAQ,OAAA,CAAA,GAAA;AAAA,MACJ,4CAAA;AAAA,MACA,YAAa,CAAA,gBAAA;AAAA,KACjB,CAAA;AACA,IAAM,MAAA,OAAA,GAAU,MAAM,IAAK,CAAA,uBAAA;AAAA,MACvB,cAAA;AAAA,MACA,YAAa,CAAA,gBAAA;AAAA,KACjB,CAAA;AAEA,IAAO,OAAA,OAAA,CAAQ,kBAAkB,GAAG,CAAA,CAAA;AAAA,GACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,aACI,UAC4C,EAAA;AAC5C,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,aAAA,IAAiB,EAAC,CAAA;AAEpC,IAAA,MAAM,WAAW,IAAK,CAAA,WAAA,CAAA;AAEtB,IAAA,MAAM,OAAU,GAAA,QAAA,CAAS,aAAc,CAAA,EAAC,OAAM,IAAK,CAAA,KAAA,EAAO,MAAQ,EAAA,EAAC,GAAG,UAAA,EAAW,GAAG,IAAA,IAAM,CAAA,CAAA;AAC1F,IAAO,OAAA;AAAA,MACH,GAAG,UAAA;AAAA,MACH,GAAG,IAAA;AAAA,MACH,kBAAA,EAAoB,QAAQ,cAAe,CAAA,aAAA;AAAA,KAC/C,CAAA;AAAA,GACJ;AAAA,EAEA,MAAM,gBAAA,CAMF,UACA,EAAA,WAAA,EACA,UACA,KACsD,EAAA;AACtD,IAAM,MAAA,GAAA,GAAM,MAAM,KAAM,CAAA,gBAAA;AAAA,MACpB,UAAA;AAAA,MACA,WAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA;AAAA,KACJ,CAAA;AACA,IAAa,MAAM,IAAK,CAAA,qBAAA,CAAsB,KAAK,UAAU,EAAA;AAC7D,IAAO,OAAA,IAAA,CAAK,mBAAmB,GAAG,CAAA,CAAA;AAAA,GACtC;AAAA,EAEA,MAAM,eAAkB,GAAA;AACpB,IAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAEjD,IAAA,OAAO,IAAK,CAAA,uBAAA;AAAA,MACR,cAAA;AAAA,MACA,YAAa,CAAA,gBAAA;AAAA,KACjB,CAAA;AAAA,GACJ;AAAA,EAEA,MAAM,cAAiB,GAAA;AACnB,IAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAEjD,IAAA,OAAO,IAAK,CAAA,uBAAA;AAAA,MACR,aAAA;AAAA,MACA,YAAa,CAAA,gBAAA;AAAA,KACjB,CAAA;AAAA,GACJ;AAAA,EAEA,MAAM,mBACF,GACY,EAAA;AACZ,IAAM,MAAA,YAAA,GAAe,MAAM,IAAA,CAAK,eAAgB,EAAA,CAAA;AAEhD,IAAM,MAAA,YAAA,CAAa,kBAAkB,GAAG,CAAA,CAAA;AACxC,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA,EASA,MAAM,qBACF,CAAA,gBAAA,EACA,WAQF,EAAA;AACE,IAAA,IAAI,IAAK,CAAA,QAAA;AACL,MAAA,MAAM,IAAI,KAAA;AAAA,QACN,CAAA,mEAAA,CAAA;AAAA,OACJ,CAAA;AAIJ,IAAA,MAAM,UACF,GAAA,WAAA,IAAgB,IAAI,iBAAA,CAAkB,KAAK,OAAO,CAAA,CAAA;AAEtD,IAAO,OAAA,IAAA,CAAK,kBAAmB,CAAA,UAAA,EAAY,uBAAyB,EAAA;AAAA,MAChE,SAAA;AAAA,KACH,CAAA,CAAE,IAAK,CAAA,OAAO,QAAa,KAAA;AACxB,MAAA,MAAM,EAAE,IAAA,EAAM,OAAS,EAAA,OAAA,KAAY,QAAS,CAAA,QAAA,CAAA;AAC5C,MAAM,MAAA,SAAA,GAAY,OAAO,OAAO,CAAA,CAAA;AAEhC,MAAA,IAAA,CAAK,oBAAqB,CAAA,EAAE,SAAW,EAAA,OAAA,EAAS,CAAA,CAAA;AAEhD,MAAA,MAAM,EAAE,iBAAA,EAAmB,GAAI,EAAA,GAAI,IAAK,CAAA,MAAA,CAAA;AACxC,MAAM,MAAA,GAAA,GAAM,KAAK,UAAW,EAAA,CAAA;AAC5B,MAAM,MAAA,GAAA,GAAM,KAAK,YAAa,CAAA;AAAA,QAC1B,GAAA;AAAA,QACA,GAAA;AAAA,QACA,OAAA;AAAA,QACA,SAAA;AAAA,OACH,CAAA,CAAA;AACD,MAAA,UAAA,CAAW,MAAM,GAAM,GAAA,GAAA,CAAA;AACvB,MAAW,UAAA,CAAA,KAAA,CAAM,qBAAqB,IAAK,CAAA,KAAA;AAAA,QACvC,IAAA,CAAK,SAAU,CAAA,GAAA,EAAK,sBAAsB,CAAA;AAAA,OAC9C,CAAA;AACA,MAAA,MAAM,gBAAoB,GAAA,IAAA,CAAK,cAC3B,GAAA,IAAA,CAAK,wBAAwB,GAAG,CAAA,CAAA;AACpC,MAAA,IAAA,CAAK,QAAW,GAAA,GAAA,CAAA;AAEhB,MAAK,IAAA,CAAA,aAAA,GAAgB,IAAK,CAAA,iBAAA,CAAkB,gBAAgB,CAAA,CAAA;AAE5D,MAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,MAAQ,CAAA,eAAA;AAAA,QAC3B,UAAA;AAAA,QACA,CAAC,WAAW,SAAS,CAAA;AAAA,QACrB,QAAA;AAAA,QACA;AAAA,UACI,YAAc,EAAA,SAAA;AAAA,UACd,YAAc,EAAA,SAAA;AAAA,SAClB;AAAA,OACJ,CAAA;AACA,MAAA,MAAM,EAAE,OAAS,EAAA,YAAA,EAAc,SAAS,YAAa,EAAA,GACjD,IAAI,KAAM,CAAA,IAAA,CAAA;AACd,MAAA;AACI,QAAA,IAAI,YAAiB,KAAA,OAAA;AACjB,UAAM,MAAA,IAAI,MAAM,CAAsB,oBAAA,CAAA,CAAA,CAAA;AAAA,OAC9C;AAEA,MAAA,MAAM,mBAAmB,MAAM,IAAA,CAAK,sBAGlC,GAAK,EAAA,cAAA,EAAgB,iBAAiB,gBAAgB,CAAA,CAAA;AAExD,MAAA,MAAM,mBAAmB,MAAM,IAAA,CAAK,sBAGlC,GAAK,EAAA,cAAA,EAAgB,iBAAiB,gBAAgB,CAAA,CAAA;AAGxD,MAAA,MAAM,eAAiD,GAAA;AAAA,QACnD,GAAG,gBAAA;AAAA,QACH,gBAAA;AAAA,QACA,gBAAA;AAAA,OACJ,CAAA;AACA,MAAMR,MAAAA,MAAAA,GAAQ,IAAK,CAAA,mBAAA,CAAoB,eAAe,CAAA,CAAA;AAEtD,MAAA,MAAM,aAAa,IAAI,QAAA;AAAA,QACnB,IAAK,CAAA,OAAA;AAAA,QACL,KAAK,SAAU,EAAA;AAAA,QACfA,MAAAA;AAAA,OACJ,CAAA;AACA,MAAW,UAAA,CAAA,eAAA,CAAgB,KAAK,aAAa,CAAA,CAAA;AAE7C,MAAA,GAAA,CAAI,SAAS,QAAQ,CAAA,CAAA;AACrB,MAAI,GAAA,CAAA,UAAA,CAAW,CAAC,UAAU,CAAC,CAAA,CAAA;AAE3B,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,wDAAA;AAAA,QACA,UAAA,CAAW,IAAI,EAAE,CAAA;AAAA,OACrB,CAAA;AAGA,MAAO,OAAA,IAAA,CAAK,MAAQ,CAAA,iBAAA,CAAkB,GAAK,EAAA;AAAA,QACvC,OAAO,IAAK,CAAA,OAAA;AAAA,QACZ,OAAA;AAAA;AAAA,QACA,OAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACL;AAAA,EAGA,eACW,GAAA;AACP,IAAM,MAAA,EAAE,eAAgB,EAAA,GAAI,IAAK,CAAA,qBAAA,CAAA;AAOjC,IAAM,MAAA,CAAA,GAAI,IAAI,eAAgB,EAAA,CAAA;AAI9B,IAAA,OAAO,EAAE,QAAA,EAAU,CAAE,CAAA,WAAA,EAAc,EAAA,CAAA;AAAA,GACvC;AAAA,EAGA,MAAM,mBACF,IACA,EAAA,GAAA,GAAyB,IAAI,iBAAkB,CAAA,IAAA,CAAK,OAAO,CACjC,EAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,oBAAA;AAAA,MACR,GAAA;AAAA,MACA,KAAK,eAAgB,EAAA;AAAA,MACrB,IAAA,CAAK,oBAAoB,IAAI,CAAA;AAAA,KACjC,CAAA;AAAA,GACJ;AAAA,EAEA,YAAe,GAAA;AACX,IAAA,OAAO,QAAS,CAAA;AAAA,MACZ,+CAAiD,EAAA;AAAA,QAC7C,OAAS,EAAA,8CAAA;AAAA,QACT,OAAS,EAAA;AAAA;AAAA,UAEL,qDAAA;AAAA,UACA,+CAAA;AAAA,UACA,8DAAA;AAAA,UACA,2EAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA;AAAA,UAEF,sDAAA;AAAA,UACA,6DAAA;AAAA,UACA,kEAAA;AAAA,UACA,6EAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,uCAAA;AAAA,UACA,0CAAA;AAAA,UACA,iEAAA;AAAA,UACA,kCAAA;AAAA,UACA,kDAAA;AAAA,UACA,8DAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEA,gCAAkC,EAAA;AAAA,QAC9B,OAAS,EAAA,mDAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,kFAAA;AAAA,UACA,6FAAA;AAAA,UACA,2EAAA;AAAA,UACA,8FAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,0FAAA;AAAA,UACA,6FAAA;AAAA,SACJ;AAAA,QACA,UAAU,EAAC;AAAA,OACf;AAAA,MAEA,0CAA4C,EAAA;AAAA,QACxC,OAAS,EAAA,yCAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,qEAAA;AAAA,UACA,yFAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,qFAAA;AAAA,SACJ;AAAA,QACA,QAAA,EAAU,CAAC,gCAAgC,CAAA;AAAA,OAC/C;AAAA,MAEA,uCAAyC,EAAA;AAAA,QACrC,OACI,EAAA,gFAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,mFAAA;AAAA,UACA,sFAAA;AAAA,UACA,wGAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA,uBAAA;AAAA,QACN,IAAM,EAAA;AAAA,UACF,8FAAA;AAAA,UACA,oDAAA;AAAA,UACA,0CAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,gCAAA;AAAA,UACA,kDAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEA,kDAAoD,EAAA;AAAA,QAChD,OACI,EAAA,8EAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,+HAAA;AAAA,UACA,kIAAA;AAAA,UACA,gIAAA;AAAA,UACA,0EAAA;AAAA,UACA,yFAAA;AAAA,UACA,gFAAA;AAAA,UACA,wEAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,qEAAA;AAAA,UACA,uEAAA;AAAA,UACA,0EAAA;AAAA,SACJ;AAAA,QACA,UAAU,EAAC;AAAA,OACf;AAAA,MAEA,8DAAgE,EAAA;AAAA,QAC5D,OACI,EAAA,yEAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,6EAAA;AAAA,UACA,8DAAA;AAAA,UACA,kFAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,uDAAA;AAAA,UACA,8DAAA;AAAA,UACA,4DAAA;AAAA,UACA,oDAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEA,kCAAoC,EAAA;AAAA,QAChC,OAAS,EAAA,mDAAA;AAAA,QACT,OAAS,EAAA;AAAA,UACL,0GAAA;AAAA,UACA,2GAAA;AAAA,UACA,wFAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,gEAAA;AAAA,UACA,0DAAA;AAAA,UACA,yDAAA;AAAA,SACJ;AAAA,QACA,QAAU,EAAA;AAAA,UACN,iEAAA;AAAA,SACJ;AAAA,OACJ;AAAA,MAEA,iEAAmE,EAAA;AAAA,QAC/D,OACI,EAAA,2EAAA;AAAA,QACJ,OAAS,EAAA;AAAA,UACL,+FAAA;AAAA,UACA,uGAAA;AAAA,UACA,wGAAA;AAAA,UACA,yJAAA;AAAA,SACJ;AAAA,QACA,IAAM,EAAA;AAAA,UACF,wFAAA;AAAA,SACJ;AAAA,QACA,UAAU,EAAC;AAAA,OACf;AAAA,MAEA,GAAK,EAAA;AAAA,QACD,OAAS,EAAA,EAAA;AAAA,QACT,SAAS,EAAC;AAAA,QACV,MAAM,EAAC;AAAA,QACP,UAAU,EAAC;AAAA,OACf;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AACJ,CAAA;AAjaI,eAAA,CAAA;AAAA,EADC,KAAA;AAAA,CAAA,EAnMQ,WAoMT,CAAA,SAAA,EAAA,qBAAA,EAAA,CAAA,CAAA,CAAA;AAoIM,eAAA,CAAA;AAAA,EAHL,GAAA;AAAA,CAAA,EArUQ,WAwUH,CAAA,SAAA,EAAA,uBAAA,EAAA,CAAA,CAAA,CAAA;AA0GN,eAAA,CAAA;AAAA,EADC,QAAS,CAAA,QAAA;AAAA,CAAA,EAjbD,WAkbT,CAAA,SAAA,EAAA,iBAAA,EAAA,CAAA,CAAA,CAAA;AAiBM,eAAA,CAAA;AAAA,EADL,GAAA;AAAA,CAAA,EAlcQ,WAmcH,CAAA,SAAA,EAAA,oBAAA,EAAA,CAAA,CAAA;;AC9lBH,MAAM,8BAUH,cAA4B,CAAA;AAAA,EAClC,OAAO,aACH,CAC6B,EAAA;AAAA,IAC7B,MAAM,2BAA2B,qBAA0B,CAAA;AAAA,MACvD,IAAI,YAAe,GAAA;AACf,QAAO,OAAA,CAAA,CAAA;AAAA,OACX;AAAA,KACJ;AACA,IAAO,OAAA,kBAAA,CAAA;AAAA,GACX;AAAA;AAAA,EAGA,IAAI,YAAoC,GAAA;AAEpC,IAAO,OAAA,WAAA,CAAA;AAAA,GACX;AAAA;AAAA,EAGA,WAAc,GAAA;AACV,IAAK,IAAA,CAAA,QAAA,CAAS,MAAQ,EAAA,KAAA,GAAQ,GAAG,CAAA,CAAA;AACjC,IAAK,IAAA,CAAA,QAAA,CAAS,OAAS,EAAA,GAAA,GAAM,GAAG,CAAA,CAAA;AAChC,IAAK,IAAA,CAAA,QAAA,CAAS,KAAO,EAAA,IAAA,GAAO,GAAG,CAAA,CAAA;AAC/B,IAAA,IAAA,CAAK,YAAe,GAAA,MAAA,CAAA;AAAA,GACxB;AAAA,EAEA,MAAM,gBAA+C,GAAA;AACjD,IAAA,MAAM,KAAK,gBAAiB,EAAA,CAAA;AAE5B,IAAA,MAAM,WAAW,IAAK,CAAA,OAAA,CAAA;AACtB,IAAA,MAAM,GAAyB,GAAA,IAAI,iBAAkB,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AACtE,IAAA,MAAM,IAAO,GAAA,MAAM,QAAS,CAAA,kBAAA,CAAmB,GAAG,CAAA,CAAA;AAClD,IAAA,OAAO,QAAS,CAAA,qBAAA,CAAsB,IAAM,EAAA,QAAA,CAAS,gBAAgB,CAAA,CAAA;AAAA,GAGzE;AAAA,EAEA,oBAAqE,GAAA;AACjE,IAAM,MAAA,IAAA,GAAO,KAAK,YAAa,CAAA,OAAA,CAAA;AAC/B,IAAA,OAAA,CAAQ,GAAI,CAAA,mCAAA,EAAqC,IAAK,CAAA,QAAA,EAAU,CAAA,CAAA;AAChE,IAAO,OAAA;AAAA,MACH,gBAAkB,EAAA;AAAA,QACd,YAAc,EAAA,SAAA;AAAA,QACd,MAAQ,EAAA;AAAA,UACJ,QAAA,EAAU,CAAC,IAAI,CAAA;AAAA,SACnB;AAAA,OACJ;AAAA;AAAA;AAAA;AAAA,KAIJ,CAAA;AAAA,GACJ;AAAA,EAEA,MAAM,iBACF,IAKH,EAAA;AAEG,IAA6B,IAAK,CAAA,OAAA;AAElC,IAAI,IAAA,IAAA,CAAK,MAAM,kBAAoB,EAAA;AAC/B,MAAQ,OAAA,CAAA,IAAA;AAAA,QACJ,sDAAA;AAAA,OACJ,CAAA;AACA,MAAA,OAAO,KAAK,KAAM,CAAA,kBAAA,CAAA;AAAA,KACtB;AAEA,IAAA,IAAI,CAAC,IAAK,CAAA,OAAA;AAAS,MAAA,MAAM,KAAK,UAAW,EAAA,CAAA;AACzC,IAAA,MAAM,SAAS,IAAK,CAAA,OAAA,CAAA;AACpB,IAAM,MAAA,QAAA,GAAY,IACd,IAAA,IAAA,CAAK,oBAAqB,EAAA,CAAA;AAG9B,IAAM,MAAA,GAAA,GAAM,MAAM,MAAO,CAAA,qBAAA;AAAA,MACrB,QAAA;AAAA,KACJ,CAAA;AACA,IAAK,IAAA,CAAA,KAAA,CAAM,MAAS,GAAA,GAAA,CAAI,KAAM,CAAA,kBAAA,CAAA;AAE9B,IAAA,MAAA,CAAO,MAAO,CAAA,OAAO,CAAE,CAAA,IAAA,CAAK,KAAK,OAAO,CAAA,CAAA;AAExC,IAAM,MAAA,MAAA,CAAO,OAAO,GAAG,CAAA,CAAA;AACvB,IAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,mCAAA,EAAsC,IAAK,CAAA,OAAA,CAAQ,WAAW,CAAE,CAAA,CAAA,CAAA;AAE5E,IAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,EAAE,CAAA,CAAA;AACpB,IAAA,IAAA,CAAK,MAAM,kBAAqB,GAAA,GAAA,CAAA;AAChC,IAAO,OAAA,GAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,cAAc,IAAuC,EAAA;AACvD,IAAA,MAAM,KAAK,gBAAiB,EAAA,CAAA;AAC5B,IAAA,MAAM,WAAW,IAAK,CAAA,OAAA,CAAA;AAEtB,IAAM,MAAA,EAAE,OAAQ,EAAA,GAAI,IAAK,CAAA,KAAA,CAAA;AAEzB,IAAA,MAAM,GAAM,GAAA,MAAM,QAAS,CAAA,kBAAA,CAAmB,IAAI,CAAA,CAAA;AAClD,IAAO,OAAA,QAAA,CAAS,OAAO,GAAK,EAAA,EAAE,SAAS,CAAA,CAAE,KAAK,MAAM;AAChD,MAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,EAAE,CAAA,CAAA;AACpB,MAAO,OAAA,GAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACL;AACJ;;ACnJO,MAAM,sBACT,GAAA,2EAAA;AAIJ,KAAA,CAAM,eAAkB,GAAA,GAAA;;;;"}