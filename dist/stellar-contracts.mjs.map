{"version":3,"file":"stellar-contracts.mjs","sources":["../src/HeliosModuleSrc.ts","../src/heliosRollupLoader.ts","../src/diagnostics.ts","../src/StellarTxnContext.ts","../src/StellarContract.ts","../src/CapoMintHelpers.ts","../src/StellarHeliosHelpers.ts","../src/delegation/CapoDelegateHelpers.ts","../src/delegation/RolesAndDelegates.ts","../src/DefaultMinter.ts","../src/Requirements.ts","../src/Capo.ts","../src/delegation/BasicMintDelegate.ts","../src/testing/types.ts","../src/testing/StellarTestHelper.ts","../src/testing/CapoTestHelper.ts","../src/authority/AuthorityPolicy.ts","../src/authority/AddressAuthorityPolicy.ts","../src/authority/MultisigAuthorityPolicy.ts","../src/DefaultCapo.ts","../src/testing/DefaultCapoTestHelper.ts"],"sourcesContent":["\n\nexport type HeliosModuleSrc = string & {\n    srcFile: string;\n    purpose: string;\n    moduleName: string;\n};\n\nexport function mkHeliosModule(src: string, filename: string) : HeliosModuleSrc {\n    //@ts-expect-error we didn't finish building yet.  Patience, grasshopper.\n    const module : HeliosModuleSrc = new String(src);\n    const [_, purpose, moduleName] = src.match(\n        /(module|minting|spending|endpoint)\\s+([a-zA-Z0-9]+)/m\n    ) || []\n\n    module.srcFile = filename;\n    module.purpose = purpose\n    module.moduleName = moduleName;\n\n    return module        \n}","import path from \"path\";\nimport { createFilter } from \"rollup-pluginutils\";\n\nexport function heliosRollupLoader(\n    opts = {\n        include: \"**/*.hl\",\n        exclude: []\n    }\n) {\n    if (!opts.include) {\n        throw Error(\"missing required 'include' option for helios loader\");\n    }\n\n    const filter = createFilter(opts.include, opts.exclude);\n\n    return {\n        name: \"helios\",\n\n        transform(content, id) {\n            if (filter(id)) {\n                const relPath = path.relative(\".\", id)\n                console.warn(`heliosLoader: generating javascript for ${relPath}`);\n                const [_, purpose, moduleName] = content.match(\n                    /(module|minting|spending|endpoint)\\s+([a-zA-Z0-9]+)/m\n                ) || []\n                if (!(purpose  && moduleName)) throw new Error(`Bad format for helios file ${id}`);\n\n                const code = new String(\n                    `const code = \nnew String(${JSON.stringify(content)});\ncode.srcFile = ${JSON.stringify(relPath)};\ncode.purpose = ${JSON.stringify(purpose)}\ncode.moduleName = ${JSON.stringify(moduleName)}\n\nexport default code\\n`\n                );\n                return {\n                    code: code,\n                    map: { mappings: \"\" },\n                };\n            }\n        },\n    };\n}\n\n","import {\n    Address, Datum, Tx,\n    TxOutput,\n    TxInput, Value\n} from \"@hyperionbt/helios\";\nimport { ErrorMap } from \"./delegation/RolesAndDelegates.js\";\n\n\nexport function hexToPrintableString(hexStr) {\n    let result = \"\";\n    for (let i = 0; i < hexStr.length; i += 2) {\n        let hexChar = hexStr.substring(i, i + 2);\n        let charCode = parseInt(hexChar, 16);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += String.fromCharCode(charCode);\n        } else {\n            result += `‹${hexChar}›`;\n        }\n    }\n    return result;\n}\nexport function assetsAsString(v: any) {\n    return Object.entries(v)\n        .map(([policyId, tokens]) => {\n            const tokenString = Object.entries(tokens as any)\n                .map(\n                    ([name, count]) => `${count}×💴 ${hexToPrintableString(name)}`\n                )\n                .join(\" + \");\n            return `⦑🏦 ${policyId.substring(0, 12)}… ${tokenString}⦒`;\n        })\n        .join(\"\\n  \");\n}\nexport function lovelaceToAda(l: bigint | number) {\n    const asNum = parseInt(l.toString());\n    const ada = (asNum && `${(Math.round(asNum / 1000) / 1000).toFixed(3)} ADA`) || \"\";\n    return ada;\n}\n\nexport function valueAsString(v: Value) {\n    const ada = lovelaceToAda(v.lovelace);\n    const assets = assetsAsString(v.assets.dump?.() || v.assets);\n    return [ada, assets].filter((x) => !!x).join(\" + \");\n}\n\nexport function txAsString(tx: Tx): string {\n    const bodyAttrs = [\n        \"inputs\",\n        \"minted\",\n        \"collateral\",\n        \"refInputs\",\n        \"outputs\",\n        \"fee\",\n        \"lastValidSlot\",\n        \"firstValidSlot\",\n        \"metadataHash\",\n        \"scriptDataHash\",\n        \"signers\",\n        \"collateralReturn\",\n    ];\n    const witnessAttrs = [\n        \"signatures\",\n        \"datums\",\n        \"refScripts\",\n        \"scripts\",\n        \"redeemers\",\n        \"nativeScripts\",\n    ];\n\n    let details = \"\";\n\n    const d = tx.dump();\n    //!!! todo: improve interface of tx so useful things have a non-private api\n    //!!! todo: get rid of dump()\n    //!!! todo: get back to type-safety in this diagnostic suite\n    for (const x of bodyAttrs) {\n        let item = tx.body[x] || (d.body[x] as any);\n        let skipLabel = false;\n        // console.log(`attr '${x}'`)\n        if (Array.isArray(item) && !item.length) continue;\n\n        if (!item) continue;\n        if (\"inputs\" == x) {\n            item = `\\n  ${item.map((x) => txInputAsString(x)).join(\"\\n  \")}`;\n        }\n        if (\"refInputs\" == x) {\n            item = `\\n  ${item.map((x) => txInputAsString(x, \"ℹ️  \")).join(\"\\n  \")}`;\n        }\n        if (\"collateral\" == x) {\n            //!!! todo: group collateral with inputs and reflect it being spent either way,\n            //     IFF it is also a tx `input`\n            //!!! todo: move collateral to bottom with collateralReturn,\n            //     IFF it is not part of the tx `inputs`\n            item = item.map((x) => txInputAsString(x, \"🔪\")).join(\"\\n    \");\n        }\n        if (\"minted\" == x) {\n            const assets = item?.dump();\n            if (!Object.entries(assets || {}).length) continue;\n\n            item = ` ❇️  ${assetsAsString(assets)}`;\n        }\n        if (\"outputs\" == x) {\n            item = `\\n  ${item\n                .map((x, i) => txOutputAsString(x, `${i}  <-`))\n                .join(\"\\n  \")}`;\n        }\n        if (\"signers\" == x) {\n            item = item.map((x) => {\n                if (!x.hex) debugger;\n                return `🔑#${x.hex.substring(0, 8)}…`;\n            });\n        }\n\n        if (\"fee\" == x) {\n            item = parseInt(item);\n            item = `${(Math.round(item / 1000) / 1000).toFixed(3)} ADA ` +\n                    tx.profileReport.split(\"\\n\")[0]\n\n            // console.log(\"fee\", item)\n        }\n\n        if (\"collateralReturn\" == x) {\n            skipLabel = true;\n            item = `  ${txOutputAsString(\n                item,\n                `0  <- ❓`\n            )} conditional: collateral change (returned in case of txn failure)`;\n        }\n\n        details += `${skipLabel ? \"\" : \"  \" + x + \": \"}${item}\\n`;\n    }\n    let hasWinfo = false;\n    const winfo = {};\n    for (const x of witnessAttrs) {\n        let item = tx.witnesses[x] || (d.witnesses[x] as any);\n        if (Array.isArray(item) && !item.length) continue;\n        if (\"datums\" == x && !Object.entries(item || {}).length) continue;\n        if (\"signatures\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                return `🖊️ ${Address.fromHash(s.pubKeyHash)\n                    .toBech32()\n                    .substring(0, 24)}…`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"redeemers\" == x) {\n            if (!item) continue;\n            //!!! todo: augment with mph when that's available from the Redeemer.\n            item = item.map(                \n                (x) => {\n                    // console.log(\"redeemer keys\", ...[ ...Object.keys(x2) ], x2.dump());\n                    const indexInfo = (x.inputIndex == -1) ? `spend txin #‹tbd›` : \n                        'inputIndex' in x ? `spend txin #${1+x.inputIndex}` : `mint policy#${1+x.mphIndex}`;\n        \n                    return `🏧  ${indexInfo} ${x.data.toString()}`\n                }\n            );\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"scripts\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                try {\n                    return `🏦 ${s.mintingPolicyHash.hex.substring(\n                        0,\n                        12\n                    )}… (minting)`;\n                } catch (e) {\n                    return `📜 ${s.validatorHash.hex.substring(\n                        0,\n                        12\n                    )}… (validator)`;\n                }\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n\n        if (!item) continue;\n        hasWinfo = true;\n        winfo[x] = item;\n    }\n    if (hasWinfo) {\n        details += Object.entries(winfo)\n            .map(([k, v]) => `  ${k}: ${v}\\n`)\n            .join(\"\");\n    }\n    try {\n        details = details + `  txId: ${tx.id().hex}`;\n    } catch (e) {\n        details = details + `  (Tx not yet finalized!)`;\n    }\n    return details;\n}\n\nexport function txInputAsString(x: TxInput, prefix = \"-> \"): string {\n    return `${prefix}${x.address.toBech32().substring(0, 18)}… ${valueAsString(\n        x.value\n    )} = 📖 ${x.txId.hex.substring(0, 12)}…@${x.utxoIdx}`;\n}\n\nexport function utxosAsString(utxos: TxInput[], joiner = \"\\n\"): string {\n    return utxos.map((u) => utxoAsString(u, \" 💵\")).join(joiner);\n}\n\nexport function utxoAsString(u: TxInput, prefix = \"💵\"): string {\n    return ` 📖 ${u.txId.hex.substring(0, 12)}…@${u.utxoIdx}: ${txOutputAsString(u.origOutput, prefix)}`; // or 🪙\n}\n\nexport function datumAsString(d: Datum | null | undefined): string {\n    if (!d) return \"\"; //\"‹no datum›\";\n\n    // debugger\n    const dhss = d.hash.hex.substring(0, 12);\n    if (d.isInline()) return `d‹inline:${dhss}…›`;\n    return `d‹hash:${dhss}…›`;\n}\n\nexport function txOutputAsString(x: TxOutput, prefix = \"<-\"): string {\n    const bech32 = (x.address as any).bech32 || x.address.toBech32();\n\n    return `${prefix} ${bech32.substring(0, 18)}… ${datumAsString(\n        x.datum\n    )} ${valueAsString(x.value)}`;\n}\n\nexport function errorMapAsString(em: ErrorMap, prefix = \"  \") {\n    return Object.keys(em).map( k => \n        `${prefix }${k}: ${JSON.stringify(em[k])}`\n    ).join(\"\\n\")\n}\n","import {\n    HeliosData, Signature, Tx,\n    TxOutput,\n    TxWitnesses,\n    TxInput,\n    UplcData,\n    UplcDataValue,\n    Wallet,\n    bytesToHex,\n    hexToBytes\n} from \"@hyperionbt/helios\";\nimport { txAsString } from \"./diagnostics.js\";\nimport { configBase, stellarSubclass } from \"./StellarContract.js\";\nimport { SelectedDelegates } from \"./delegation/RolesAndDelegates.js\";\n\n//!!! if we could access the inputs and outputs in a building Tx,\n//  this might  not be necessary (unless it becomes a\n//   bigger-picture contextual container that serves various Stellar\n//   contract scripts with non-txn context for building a Tx)\n\ntype noState = {}\n\nexport class StellarTxnContext<S=noState> {\n    tx: Tx;\n    inputs: TxInput[];\n    collateral?: TxInput;\n    outputs: TxOutput[];\n    feeLimit?: bigint;\n    state : S;\n    constructor(state: Partial<S>={}) {\n        this.tx = new Tx();\n        this.inputs = [];\n        //@ts-expect-error\n        this.state = state;\n        this.collateral = undefined;\n        this.outputs = [];\n    }\n    dump() {\n        const { tx } = this;\n        return txAsString(tx);\n    }\n\n    mintTokens(...args: Parameters<Tx[\"mintTokens\"]>) : StellarTxnContext<S> {\n        this.tx.mintTokens(...args);\n\n        return this;\n    }\n    \n    reservedUtxos() : TxInput[] {\n        return [\n            ... this.inputs, \n            this.collateral \n        ].filter((x) => !!x) as TxInput[]\n    }\n\n    utxoNotReserved(u: TxInput) : TxInput | undefined {\n        if (this.collateral?.eq(u)) return undefined;\n        if (this.inputs.find(i => i.eq(u)) ) return undefined;\n        return u;\n    }\n\n    addCollateral(collateral: TxInput) {\n        if (!collateral.value.assets.isZero()) {\n            throw new Error(`invalid attempt to add non-pure-ADA utxo as collateral`)\n        }\n        this.collateral = collateral;\n\n        this.tx.addCollateral(collateral)\n        return this;\n    }\n\n    addInput(...args: Parameters<Tx[\"addInput\"]>) : StellarTxnContext<S> {\n        const [input, ..._otherArgs] = args;\n        this.inputs.push(input);\n        this.tx.addInput(...args);\n        return this;\n    }\n\n    addInputs(...args: Parameters<Tx[\"addInputs\"]>) : StellarTxnContext<S> {\n        const [inputs, ..._otherArgs] = args;\n        this.inputs.push(...inputs);\n        this.tx.addInputs(...args);\n        return this;\n    }\n\n    addOutput(...args: Parameters<Tx[\"addOutput\"]>) : StellarTxnContext<S> {\n        const [output, ..._otherArgs] = args;\n        this.outputs.push(output);\n        this.tx.addOutput(...args);\n        return this;\n    }\n\n    addOutputs(...args: Parameters<Tx[\"addOutputs\"]>) : StellarTxnContext<S> {\n        const [outputs, ..._otherArgs] = args;\n        this.outputs.push(...outputs);\n        this.tx.addOutputs(...args);\n\n        return this;\n    }\n\n    attachScript(...args: Parameters<Tx[\"attachScript\"]>) {\n        this.tx.attachScript(...args)\n\n        return this;\n    }\n\n    async addSignature(wallet: Wallet) {\n        const [sig] = await wallet.signTx(this.tx);\n        \n        this.tx.addSignature(sig)\n\n    }\n\n    /**\n     * To add a script to the transaction context, use `attachScript`\n     *\n     * @deprecated - invalid method name; use attachScript\n     **/\n    addScript() {\n    }\n}\n\n","import {\n    Address,\n    Assets,\n    DatumHash,\n    HInt,\n    HeliosData,\n    MintingPolicyHash,\n    Network,\n    NetworkParams,\n    Program,\n    TxOutput,\n    TxInput,\n    UplcData,\n    UplcDataValue,\n    UplcProgram,\n    Value,\n    Wallet,\n    extractScriptPurposeAndName,\n    Datum,\n    AssetClass,\n    //@ts-expect-error\n    DataDefinition,\n    ListData,\n} from \"@hyperionbt/helios\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport { utxosAsString, valueAsString } from \"./diagnostics.js\";\nimport { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\ntype tokenPredicate<tokenBearer extends canHaveToken> = ((\n    something: tokenBearer\n) => tokenBearer | undefined) & { value: Value };\n\n/**\n * a type for redeemer/activity-factory functions declared with @Activity.redeemer\n *\n * @public\n */\nexport type isActivity = {\n    redeemer: UplcDataValue | UplcData;\n    // | HeliosData\n};\n\ntype WalletsAndAddresses = {\n    wallets: Wallet[];\n    addresses?: Address[];\n};\nexport type utxoInfo = {\n    u: TxInput;\n    sufficient: boolean;\n    free: bigint;\n    minAdaAmount: bigint;\n};\n\nexport type stellarSubclass<\n    S extends StellarContract<CT>,\n    CT extends configBase = S extends StellarContract<infer iCT>\n        ? iCT\n        : configBase\n> = (new (args: StellarConstructorArgs<CT>) => S & StellarContract<CT>) & {\n    defaultParams: Partial<CT>;\n};\n\nexport type anyDatumProps = Record<string, any>;\nexport type configBase = Record<string, any>;\n\nexport const Activity = {\n    partialTxn(proto, thingName, descriptor) {\n        needsActiveVerb(thingName);\n        return partialTxn(proto, thingName, descriptor);\n    },\n    redeemer(proto, thingName, descriptor) {\n        needsActiveVerb(thingName, !!\"okwhatever\");\n        return Activity.redeemerData(proto, thingName, descriptor);\n    },\n    redeemerData(proto, thingName, descriptor) {\n        //!!! todo: registry and cross-checking for missing redeeming methods\n\n        //!!! todo: develop more patterns of \"redeemer uses an input of a certain mph/value\"\n        return descriptor;\n    },\n};\n\nfunction needsActiveVerb(thingName: string, okWorkaround?: boolean) {\n    if (!thingName.match(/ing/)) {\n        const orWorkaround =\n            okWorkaround &&\n            \"(or work around with @Activity.redeemerData instead)\";\n        throw new Error(\n            `Activity: ${thingName}: name should have 'ing' in it ${orWorkaround}`\n        );\n    }\n    if (thingName.match(/^ing/)) {\n        throw new Error(\n            `Activity: ${thingName}: name shouldn't start with 'ing'`\n        );\n    }\n}\n\nexport function datum(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkDatum/)) {\n        throw new Error(\n            `@datum factory: ${thingName}: name should start with 'mkDatum...'`\n        );\n    }\n    return descriptor;\n}\n\nexport function txn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkTxn/)) {\n        throw new Error(\n            `@txn factory: ${thingName}: name should start with 'mkTxn...'`\n        );\n    }\n    return descriptor;\n}\n\nexport function partialTxn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^txn[A-Z]/)) {\n        throw new Error(\n            `@partialTxn factory: ${thingName}: should start with 'txn[A-Z]...'`\n        );\n    }\n    return descriptor;\n}\n\nexport async function findInputsInWallets(\n    v: Value,\n    searchIn: WalletsAndAddresses,\n    network: Network\n) {\n    const { wallets, addresses } = searchIn;\n\n    const lovelaceOnly = v.assets.isZero();\n    console.warn(\"finding inputs\", {\n        lovelaceOnly,\n    });\n\n    for (const w of wallets) {\n        const [a] = await w.usedAddresses;\n        console.log(\"finding funds in wallet\", a.toBech32().substring(0, 18));\n        const utxos = await w.utxos;\n        for (const u of utxos) {\n            if (lovelaceOnly) {\n                if (u.value.assets.isZero() && u.value.lovelace >= v.lovelace) {\n                    return u;\n                }\n                console.log(\"  - too small; skipping \", u.value.dump());\n            } else {\n                if (u.value.ge(v)) {\n                    return u;\n                }\n            }\n        }\n    }\n    if (lovelaceOnly) {\n        throw new Error(\n            `no ADA is present except those on token bundles.  TODO: findFreeLovelaceWithTokens`\n        );\n        // const spareChange = this.findFreeLovelaceWithTokens(v, w)\n    }\n    //!!! todo: allow getting free ada from a contract address?\n\n    if (addresses) {\n        for (const a of addresses) {\n            const utxos = await network.getUtxos(a);\n            for (const u of utxos) {\n                if (u.value.ge(v)) {\n                    return u;\n                }\n            }\n        }\n    }\n\n    throw new Error(\n        `None of these wallets${\n            (addresses && \" or addresses\") || \"\"\n        } have the needed tokens`\n    );\n}\n\n/**\n * indirection details pointing to the information needed for reconsistituting an instance\n * @remarks\n *\n * a record of metadata that indirectly identifies where the Capo configuration\n * for a specific instance has been recorded, so that the instance can be reconstituted.\n * @public\n **/\nexport type instanceCaptureRecord = {\n    id: string;\n    scope: string;\n    evidence: string;\n};\n\nexport type needsConfigCapture<\n    C extends configBase\n> = {\n    partialConfig: Partial<C>,\n    onInstanceCreated(config: C): instanceCaptureRecord;\n};\n\nexport type SetupDetails = {\n    network: Network;\n    networkParams: NetworkParams;\n    isTest: boolean;\n    myActor?: Wallet;\n};\nexport type ConfigFor<\n    SC extends StellarContract<C>,\n    C extends configBase = SC extends StellarContract<infer inferredConfig>\n        ? inferredConfig\n        : never\n> = C;\ntype hasSetup = {\n    setup: SetupDetails\n}\nexport type StellarConstructorArgs<CT extends configBase> = \n( hasSetup & Partial<needsConfigCapture<CT>> & { \n    config: CT \n    partialConfig?: Partial<CT>\n} ) & (\n    ( hasSetup & { config: CT }  ) |\n    ( hasSetup & needsConfigCapture<CT>)\n)\n\n\nexport type utxoPredicate =\n    | ((u: TxInput) => TxInput | undefined)\n    | ((u: TxInput) => boolean)\n    | ((u: TxInput) => boolean | undefined);\n\ntype scriptPurpose =\n    | \"testing\"\n    | \"minting\"\n    | \"spending\"\n    | \"staking\"\n    | \"module\"\n    | \"endpoint\";\n\nexport type canHaveToken = TxInput | TxOutput | Assets;\n//!!! todo: type configuredStellarClass = class -> networkStuff -> withParams = stellar instance.\n\n/*\n * Basic wrapper and off-chain facade for interacting with a single Plutus contract script\n * @remarks\n *\n * This class is normally used only for individual components of a higher-level {@link Capo | Capo or Leader contract},\n * which act as delegates within its application context.  Nonetheless, it is the base class for every Capo as well as\n * simpler contract scripts.\n *\n * The StellarContract class serves as an off-chain facade for transaction-building and interfacing to any on-chain\n * contract script.  Each StellarContract subclass must define a `contractSource()`, which is currently a Helios-language\n * script, compiled in any Javascript environment to an on-chain executable UPLC or \"plutus core\" form.  This enables\n * a static dApp to be self-sovereign, without need for any server (\"application back-end\") environment.\n *\n * @typeParam ConfigType - schema for the configuration needed for creating or reproducing a\n * specific instance of the contract script on-chain.\n *\n * @public\n **/\nexport class StellarContract<\n    // SUB extends StellarContract<any, ParamsType>,\n    ConfigType extends configBase\n> {\n    //! it has scriptProgram: a parameterized instance of the contract\n    //  ... with specific `parameters` assigned.\n    scriptProgram?: Program;\n    configIn: ConfigType;\n    contractParams: configBase;\n    setup: SetupDetails;\n    network: Network;\n    networkParams: NetworkParams;\n    myActor?: Wallet;\n    // isTest?: boolean\n    static get defaultParams() {\n        return {};\n    }\n\n    //! can transform input configuration to contract script params\n    //! by default, all the config keys are used as script params\n    getContractScriptParams(config: ConfigType): configBase {\n        return config;\n    }\n\n    constructor(args: StellarConstructorArgs<ConfigType>) {\n        const {setup, config, partialConfig, onInstanceCreated } = args;\n        this.setup = setup;\n        const { network, networkParams, isTest, myActor } = setup;\n\n        if (config) {\n            this.configIn = config;\n        } else if (!args.onInstanceCreated) {\n            throw new Error(`first time setup for ${this.constructor.name} missing config.onInstanceCreated() callback`)\n        }\n            \n        this.network = network;\n        this.networkParams = networkParams;\n        // this.isTest = isTest\n        if (myActor) this.myActor = myActor;\n\n        const fullScriptParams = (this.contractParams =\n            this.getContractScriptParams(config));\n\n        //@ts-expect-error - until a better signature can be found for gCSP()\n        this.scriptProgram = this.loadProgramScript(fullScriptParams);\n    }\n    compiledScript!: UplcProgram; // initialized in loadProgramScript\n\n    get datumType() {\n        return this.scriptProgram?.types.Datum;\n    }\n    /**\n     * @internal\n     **/\n    _purpose?: scriptPurpose;\n    get purpose() {\n        if (this._purpose) return this._purpose;\n\n        const purpose = this.scriptProgram?.purpose as scriptPurpose;\n        if (!purpose) return \"non-script\";\n        return (this._purpose = purpose as scriptPurpose);\n    }\n\n    get address(): Address {\n        return Address.fromHashes(this.compiledScript.validatorHash);\n    }\n\n    get mintingPolicyHash() {\n        if (\"minting\" != this.purpose) return undefined;\n\n        return this.compiledScript.mintingPolicyHash;\n    }\n\n    get identity() {\n        if (\"minting\" == this.purpose) {\n            const b32 = this.compiledScript.mintingPolicyHash.toBech32();\n            //!!! todo: verify bech32 checksum isn't messed up by this:\n            return b32.replace(/^asset/, \"mph\");\n        }\n\n        return this.address.toBech32();\n    }\n\n    stringToNumberArray(str: string): number[] {\n        let encoder = new TextEncoder();\n        let byteArray = encoder.encode(str);\n        return [...byteArray].map((x) => parseInt(x.toString()));\n    }\n\n    mkValuesEntry(tokenName: string, count: bigint): valuesEntry {\n        return [this.stringToNumberArray(tokenName), count];\n    }\n\n    //! searches the network for utxos stored in the contract,\n    //  returning those whose datum hash is the same as the input datum\n    async outputsSentToDatum(datum: InlineDatum) {\n        const myUtxos = await this.network.getUtxos(this.address);\n\n        // const dump = utxosAsString(myUtxos)\n        // console.log({dump})\n        return myUtxos.filter((u) => {\n            return u.origOutput.datum?.hash.hex == datum.hash.hex;\n        });\n    }\n\n    //! adds the values of the given TxInputs\n    totalValue(utxos: TxInput[]): Value {\n        return utxos.reduce((v: Value, u: TxInput) => {\n            return v.add(u.value);\n        }, new Value(0n));\n    }\n\n    //! adds the indicated Value to the transaction;\n    //  ... EXPECTS  the value to already have minUtxo calculated on it.\n    @partialTxn // non-activity partial\n    txnKeepValue(tcx: StellarTxnContext, value: Value, datum: InlineDatum) {\n        tcx.addOutput(new TxOutput(this.address, value, datum));\n\n        return tcx;\n    }\n\n    addScriptWithParams<\n        SC extends StellarContract<any>\n        // P = SC extends StellarContract<infer P> ? P : never\n    >(\n        TargetClass: new (\n            a: SC extends StellarContract<any>\n                ? StellarConstructorArgs<ConfigFor<SC>>\n                : never\n        ) => SC,\n        params: SC extends StellarContract<infer P> ? P : never\n    ) {\n        const args: StellarConstructorArgs<ConfigFor<SC>> = {\n            config: params,\n            setup: this.setup,\n        };\n        //@ts-expect-error todo: why is the conditional type not matching enough?\n        const strella = new TargetClass(args);\n        return strella;\n    }\n\n    // async findDatum(d: Datum | DatumHash): Promise<TxInput[]>;\n    // async findDatum(predicate: utxoPredicate): Promise<TxInput[]>;\n    // async findDatum(d: Datum | DatumHash | utxoPredicate): Promise<TxInput[]> {\n    //     let targetHash: DatumHash | undefined =\n    //         d instanceof Datum\n    //             ? d.hash\n    //             : d instanceof DatumHash\n    //             ? d\n    //             : undefined;\n    //     let predicate =\n    //         \"function\" === typeof d\n    //             ? d\n    //             : (u: TxInput) => {\n    //                   const match =\n    //                       u.origOutput?.datum?.hash.hex == targetHash?.hex;\n    //                   console.log(\n    //                       txOutputAsString(\n    //                           u.origOutput,\n    //                           `    ${match ? \"✅ matched \" : \"❌ no match\"}`\n    //                       )\n    //                   );\n    //                   return !!match;\n    //               };\n\n    //     //prettier-ignore\n    //     console.log(\n    //         `finding utxo with datum ${\n    //             targetHash?.hex.substring(0,12)\n    //         }... in wallet`,\n    //         this.address.toBech32().substring(0,18)\n    //     );\n\n    //     const heldUtxos = await this.network.getUtxos(this.address);\n    //     console.log(`    - found ${heldUtxos.length} utxo:`);\n    //     return heldUtxos.filter(predicate);\n    // }\n\n    async readDatum<DPROPS extends anyDatumProps>(\n        datumName: string,\n        datum: Datum | InlineDatum\n    ): Promise<DPROPS> {\n        //@ts-expect-error until mainArgTypes is made public again\n        const thisDatumType = this.scriptProgram.mainArgTypes.find(\n            (x) => \"Datum\" == x.name\n        )!.typeMembers[datumName];\n\n        // console.log(` ----- read datum ${datumName}`)\n\n        if (!thisDatumType) throw new Error(`invalid datumName ${datumName}`);\n        if (!datum.isInline())\n            throw new Error(\n                `datum must be an InlineDatum to be readable using readDatum()`\n            );\n\n        return this.readUplcDatum(\n            thisDatumType,\n            datum.data!\n        ) as Promise<DPROPS>;\n    }\n\n    private async readUplcStructList(uplcType: any, uplcData: ListData) {\n        const { fieldNames, instanceMembers } = uplcType as any;\n\n        if (uplcType.fieldNames?.length == 1) {\n            throw new Error(`todo: support for single-field nested structs?`);\n        }\n\n        //@ts-expect-error until Helios exposes right type info for the list element\n        const nestedFieldList = uplcData.list;\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn: string, i: number) => {\n                    const fieldData = nestedFieldList[i];\n                    const fieldType = instanceMembers[fn];\n                    // console.log(` ----- read struct field ${fn}`)\n                    const value = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        fieldData\n                    );\n                    // console.log(` <----- struct field ${fn}`, value);\n\n                    return [fn, value];\n                })\n            )\n        );\n    }\n\n    private async readUplcDatum(uplcType: any, uplcData: UplcData) {\n        const { fieldNames, instanceMembers } = uplcType as any;\n\n        // const heliosTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         return [fn, instanceMembers[fn].name];\n        //     })\n        // );\n        // const inputTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         return [fn, instanceMembers[fn].typeDetails.inputType];\n        //     })\n        // );\n        // const outputTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         debugger\n        //         return [fn, instanceMembers[fn].typeDetails.outputType];\n        //     })\n        // );\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn, i) => {\n                    let current;\n\n                    //@ts-expect-error\n                    const uplcDataField = uplcData.fields[i];\n                    const fieldType = instanceMembers[fn];\n                    // console.log(` ----- read field ${fn}`)\n\n                    current = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        uplcDataField\n                    );\n\n                    return [fn, current];\n                })\n            )\n        );\n    }\n\n    private async readUplcField(\n        fn: string,\n        fieldType: any,\n        uplcDataField: any\n    ) {\n        let value;\n        const { offChainType } = fieldType;\n        const internalType = fieldType.typeDetails.internalType.type;\n        if (\"Struct\" == internalType) {\n            value = await this.readUplcStructList(fieldType, uplcDataField);\n            // console.log(`  <-- field value`, value)\n            return value;\n        }\n        try {\n            value = fieldType.uplcToJs(uplcDataField);\n            if (value.then) value = await value;\n\n            if (\"Enum\" === internalType && 0 === uplcDataField.fields.length) {\n                value = Object.keys(value)[0];\n            }\n        } catch (e: any) {\n            if (e.message?.match(/doesn't support converting from Uplc/)) {\n                try {\n                    value = await offChainType.fromUplcData(uplcDataField);\n                    if (\"some\" in value) value = value.some;\n                } catch (e: any) {\n                    console.error(`datum: field ${fn}: ${e.message}`);\n                    // console.log({outputTypes, fieldNames, offChainTypes, inputTypes, heliosTypes, thisDatumType});\n                    debugger;\n                    throw e;\n                }\n            } else {\n                throw e;\n            }\n        }\n        // console.log(`  <-- field value`, value)\n        return value;\n    }\n\n    findSmallestUnusedUtxo(\n        lovelace: bigint,\n        utxos: TxInput[],\n        tcx?: StellarTxnContext\n    ): TxInput | undefined {\n        const value = new Value({ lovelace });\n        const toSortInfo = this._mkUtxoSortInfo(value.lovelace);\n\n        const found = utxos\n            .map(toSortInfo)\n            .filter(this._utxoIsPureADA)\n            .filter(this._utxoIsSufficient)\n            .filter((uInfo: utxoInfo) => {\n                if (!tcx) return true;\n                return !!tcx?.utxoNotReserved(uInfo.u);\n            })\n            .sort(this._utxoSortSmallerAndPureADA)\n            .map(this._infoBackToUtxo);\n        console.log(\"smallest utxos: \", utxosAsString(found));\n        const chosen = found.at(0);\n\n        return chosen;\n    }\n\n    //! creates a filtering function, currently for TxInput-filtering only.\n    //! with the optional tcx argument, utxo's already reserved\n    //  ... in that transaction context will be skipped.\n    mkValuePredicate(\n        lovelace: bigint,\n        tcx?: StellarTxnContext\n    ): tokenPredicate<TxInput> {\n        const value = new Value({ lovelace });\n        const predicate = _adaPredicate.bind(this, tcx) as tokenPredicate<any>;\n        predicate.value = value;\n        return predicate;\n\n        function _adaPredicate(\n            this: StellarContract<ConfigType>,\n            tcx: StellarTxnContext | undefined,\n            utxo: TxInput\n        ): TxInput | undefined {\n            return this.hasOnlyAda(value, tcx, utxo);\n        }\n    }\n\n    mkAssetValue(tokenId: AssetClass, count: number = 1) {\n        const assets = [[tokenId, count] as [AssetClass, number]];\n        const v = new Value(undefined, assets);\n        return v;\n    }\n\n    mkTokenPredicate(val: Value): tokenPredicate<any>;\n    mkTokenPredicate(\n        mph: MintingPolicyHash,\n        tokenName: string,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        vOrMph: AssetClass,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        specifier: Value | MintingPolicyHash | AssetClass,\n        quantOrTokenName?: string | bigint,\n        quantity?: bigint\n    ): tokenPredicate<any> {\n        let v: Value;\n        let mph: MintingPolicyHash;\n        let tokenName: string;\n        //!!! todo: support (AssetClass, quantity) input form\n        if (!specifier)\n            throw new Error(\n                `missing required Value or MintingPolicyHash in arg1`\n            );\n        const predicate = _tokenPredicate.bind(this) as tokenPredicate<any>;\n\n        const isValue = specifier instanceof Value;\n        if (isValue) {\n            v = predicate.value = specifier;\n            return predicate;\n        } else if (specifier instanceof MintingPolicyHash) {\n            mph = specifier;\n            if (\"string\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with minting policy hash, token-name must be a string (or ByteArray support is TODO)`\n                );\n            tokenName = quantOrTokenName;\n            quantity = quantity || 1n;\n\n            v = predicate.value = this.tokenAsValue(tokenName, quantity, mph);\n            return predicate;\n        } else if (specifier instanceof AssetClass) {\n            mph = specifier.mintingPolicyHash;\n            if (!quantOrTokenName) quantOrTokenName = 1n;\n            if (\"bigint\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with AssetClass, the second arg must be a bigint like 3n, or omitted`\n                );\n            quantity = quantOrTokenName;\n\n            v = predicate.value = new Value(0n, [[specifier, quantity]]);\n            return predicate;\n        } else {\n            throw new Error(\n                `wrong token specifier (need Value, MPH+tokenName, or AssetClass`\n            );\n        }\n\n        function _tokenPredicate<tokenBearer extends canHaveToken>(\n            this: StellarContract<ConfigType>,\n            something: tokenBearer\n        ): tokenBearer | undefined {\n            return this.hasToken(something, v);\n        }\n    }\n\n    private hasToken<tokenBearer extends canHaveToken>(\n        something: tokenBearer,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ): tokenBearer | undefined {\n        if (something instanceof TxInput)\n            return (\n                (this.utxoHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n        if (something instanceof TxOutput)\n            return (\n                (this.outputHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n        if (something instanceof Assets)\n            return (\n                (this.assetsHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n\n        //!!! todo: more explicit match for TxInput, which seems to be a type but not an 'instanceof'-testable thing.\n        return (\n            (this.inputHasToken(something, value, tokenName, quantity) &&\n                something) ||\n            undefined\n        );\n    }\n\n    private utxoHasToken(\n        u: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return (\n            this.outputHasToken(u.origOutput, value, tokenName, quantity) && u\n        );\n    }\n    private inputHasToken(\n        i: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return (\n            this.outputHasToken(i.origOutput, value, tokenName, quantity) && i\n        );\n    }\n\n    private assetsHasToken(\n        a: Assets,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        const v =\n            vOrMph instanceof MintingPolicyHash\n                ? this.tokenAsValue(tokenName!, quantity!, vOrMph)\n                : vOrMph;\n\n        return a.ge(v.assets);\n    }\n\n    private outputHasToken(\n        o: TxOutput,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        if (vOrMph instanceof MintingPolicyHash && !tokenName)\n            throw new Error(\n                `missing required tokenName (or use a Value in arg2`\n            );\n        if (vOrMph instanceof MintingPolicyHash && !quantity)\n            throw new Error(\n                `missing required quantity (or use a Value in arg2`\n            );\n\n        const v =\n            vOrMph instanceof MintingPolicyHash\n                ? this.tokenAsValue(tokenName!, quantity!, vOrMph)\n                : vOrMph;\n\n        return o.value.ge(v);\n    }\n\n    //! deprecated tokenAsValue - use Capo\n    tokenAsValue(\n        tokenName: string,\n        quantity: bigint,\n        mph?: MintingPolicyHash\n    ): Value {\n        throw new Error(\n            `deprecated tokenAsValue on StellarContract base class (Capo has mph, not so much any StellarContract`\n        );\n        // if (!mph) {\n        //     mph = (this as any).mph;\n        //     if (!mph)\n        //         throw new Error(\n        //             `tokenAsValue: mph in arg3 required unless the stellar contract (${this.constructor.name}) has an 'mph' getter.`\n        //         );\n        // }\n\n        // const v = new Value(\n        //     this.ADA(0),\n        //     new Assets([[mph, [this.mkValuesEntry(tokenName, quantity)]]])\n        // );\n        // const o = new TxOutput(this.address, v);\n        // v.setLovelace(o.calcMinLovelace(this.networkParams));\n\n        // return v;\n    }\n\n    hasOnlyAda(value: Value, tcx: StellarTxnContext | undefined, u: TxInput) {\n        const toSortInfo = this._mkUtxoSortInfo(value.lovelace);\n\n        const found = [u]\n            .map(toSortInfo)\n            .filter(this._utxoIsSufficient)\n            .filter(this._utxoIsPureADA)\n            .map(this._infoBackToUtxo)\n            .at(0);\n\n        return found;\n    }\n\n    /**\n     * @internal\n     **/\n    protected _utxoSortSmallerAndPureADA(\n        { free: free1, minAdaAmount: r1 }: utxoInfo,\n        { free: free2, minAdaAmount: r2 }: utxoInfo\n    ) {\n        {\n            //! primary: treats pure-ada utxos as always better\n            if (!r1 && r2) {\n                return -1;\n            }\n            if (r1 && !r2) {\n                return 1; //\n            }\n        }\n        //! secondary: smaller utxos are more preferred than larger ones\n        if (free2 > free1) return -1;\n        if (free2 < free1) return 1;\n        return 0;\n    }\n\n    /**\n     * @internal\n     **/\n    protected _utxoIsSufficient({ sufficient }: utxoInfo) {\n        return !!sufficient;\n    }\n    /**\n     * @internal\n     **/\n    protected _utxoIsPureADA({ u }: utxoInfo) {\n        return u.value.assets.isZero() ? u : undefined;\n    }\n    /*\n     * @internal\n     **/\n    protected _infoBackToUtxo({ u }: utxoInfo) {\n        return u;\n    }\n    /**\n     * @internal\n     **/\n    protected _mkUtxoSortInfo(min: bigint, max?: bigint) {\n        return (u: TxInput): utxoInfo => {\n            const minAdaAmount = u.value.assets.isZero()\n                ? BigInt(0)\n                : u.origOutput.calcMinLovelace(this.networkParams);\n            const free = u.value.lovelace - minAdaAmount;\n            const sufficient = free > min && (max ? free < max : true);\n            const t = { u, sufficient, free, minAdaAmount };\n            // console.log(t, utxoAsString(u))\n            return t;\n        };\n    }\n    /**\n     * @internal\n     **/\n    protected _utxoCountAdaOnly(c: number, { minAdaAmount }: utxoInfo): number {\n        return c + (minAdaAmount ? 0 : 1);\n    }\n\n    async findAnySpareUtxos(\n        tcx: StellarTxnContext\n    ): Promise<TxInput[] | never> {\n        if (!this.myActor) throw this.missingActorError;\n\n        const mightNeedFees = this.ADA(3.5);\n\n        const toSortInfo = this._mkUtxoSortInfo(mightNeedFees);\n        const notReserved = tcx\n            ? tcx.utxoNotReserved.bind(tcx)\n            : (u: TxInput) => u;\n\n        return this.myActor.utxos.then((utxos) => {\n            const allSpares = utxos\n                .filter(notReserved)\n                .map(toSortInfo)\n                .filter(this._utxoIsSufficient)\n                .sort(this._utxoSortSmallerAndPureADA);\n\n            if (allSpares.reduce(this._utxoCountAdaOnly, 0) > 0) {\n                return allSpares\n                    .filter(this._utxoIsPureADA)\n                    .map(this._infoBackToUtxo);\n            }\n            return allSpares.map(this._infoBackToUtxo);\n        });\n    }\n\n    async submit(\n        tcx: StellarTxnContext,\n        {\n            sign = true,\n            signers = [],\n        }: {\n            sign?: boolean;\n            signers?: Wallet[];\n        } = {}\n    ) {\n        let { tx, feeLimit = 2_000_000n } = tcx;\n        if (this.myActor || signers.length) {\n            const [changeAddress] = (await this.myActor?.usedAddresses) || [];\n            const spares = await this.findAnySpareUtxos(tcx);\n            const willSign = [...signers];\n            if (sign && this.myActor) {\n                willSign.push(this.myActor);\n            }\n            for (const s of willSign) {\n                const [a] = await s.usedAddresses;\n                if (tx.body.signers.find((s) => a.pubKeyHash!.hex === s.hex))\n                    continue;\n                tx.addSigner(a.pubKeyHash!);\n            }\n            // const feeEstimated = tx.estimateFee(this.networkParams);\n            // if (feeEstimated > feeLimit) {\n            //     console.log(\"outrageous fee - adjust tcx.feeLimit to get a different threshold\")\n            //     throw new Error(`outrageous fee-computation found - check txn setup for correctness`)\n            // }\n            try {\n                // const t1 = new Date().getTime();\n                await tx.finalize(this.networkParams, changeAddress, spares);\n                // const t2 = new Date().getTime();\n                // const elapsed = t2 - t1;\n                // console.log(`::::::::::::::::::::::::::::::::: tx validation time: ${elapsed}ms`);\n                // result: validations for non-trivial txns can take ~800+ ms\n                //  - validations with simplify:true, ~250ms - but ...\n                //    ... with elided error messages that don't support negative-testing very well\n            } catch (e) {\n                console.log(\"FAILED submitting:\", tcx.dump());\n                throw e;\n            }\n            for (const s of willSign) {\n                const sig = await s.signTx(tx);\n                tx.addSignatures(sig, true);\n            }\n        } else {\n            console.warn(\"no 'myActor'; not finalizing\");\n        }\n        console.log(\"Submitting tx: \", tcx.dump());\n\n        return this.network.submitTx(tx);\n    }\n\n    ADA(n: bigint | number): bigint {\n        const bn =\n            \"number\" == typeof n\n                ? BigInt(Math.round(1_000_000 * n))\n                : ((BigInt(1_000_000) * n) as bigint);\n        return bn;\n    }\n\n    //! it requires an subclass to define a contractSource\n    contractSource(): string | never {\n        throw new Error(`missing contractSource impl`);\n    }\n\n    //!!! todo: implement more and/or test me:\n    // async findFreeLovelaceWithTokens(v: Value, w: Wallet) {\n    // it.todo(\"helps find spare lovelace in tokens\");\n    // it.todo(\"will help harvest spare lovelace in the future if minUtxo is changed\");\n    //     const utxos = await w.utxos;\n    //     const lovelaceOnly = v.assets.isZero();\n    //     //! it finds free lovelace in token bundles, if it can't find free lovelace otherwise\n    //     if (lovelaceOnly) {\n    //         let maxFree: TxInput, minToken: TxInput;\n    //         let minPolicyCount = Infinity;\n\n    //         for (const u of utxos) {\n    //             const policies = u.value.assets.mintingPolicies.length;\n    //             if (policies < minPolicyCount) {\n    //                 minPolicyCount = policies;\n    //                 minToken = u;\n    //             }\n\n    //             const free =\n    //                 u.value.lovelace -\n    //                 u.origOutput.calcMinLovelace(this.networkParams);\n    //             //@ts-ignore\n    //             if (!maxFree) {\n    //                 maxFree = u;\n    //             } else if (free > maxFree!.value.lovelace) {\n    //                 maxFree = u;\n    //             }\n    //         }\n    //     }\n    // }\n\n    importModules(): HeliosModuleSrc[] {\n        return [];\n    }\n\n    loadProgramScript(params: ConfigType): Program | null {\n        const src = this.contractSource();\n        const modules = this.importModules();\n\n        // console.log({src, Program)\n\n        try {\n            const script = Program.new(src, modules);\n            script.parameters = params;\n\n            const simplify = !this.setup.isTest;\n            // const t = new Date().getTime();\n            if (simplify) {\n                console.warn(\n                    `Loading optimized contract code for ` + script.name\n                );\n            }\n\n            //!!! todo: consider pushing this to JIT or async\n            this.compiledScript = script.compile(simplify);\n            // const t2 = new Date().getTime();\n\n            // Result: ~80ms cold-start or (much) faster on additional compiles\n            // console.log(\"::::::::::::::::::::::::compile time \"+ (t2 - t) + \"ms\")\n            // -> caching would not improve\n\n            // const configured = Program.new(source)\n            // configured.parameters = params;\n            // const compiledScript = configured.compile(simplify)\n            // const addr = Address.fromHashes(compiledScript.validatorHash)\n\n            return script;\n        } catch (e: any) {\n            if (e.message.match(/invalid parameter name/)) {\n                throw new Error(\n                    e.message +\n                        `\\n   ... this typically occurs when your StellarContract class (${this.constructor.name})` +\n                        \"\\n   ... can be missing a getContractScriptParams() method \" +\n                        \"\\n   ... to map from the configured settings to contract parameters\"\n                );\n            }\n            if (!e.src) {\n                console.error(\n                    `unexpected error while compiling helios program (or its imported module) \\n` +\n                        `> ${e.message}\\n` +\n                        `Suggested: connect with debugger (we provided a debugging point already)\\n` +\n                        `  ... and use 'break on caught exceptions' to analyze the error \\n` +\n                        `This likely indicates a problem in Helios' error reporting - \\n` +\n                        `   ... please provide a minimal reproducer as an issue report for repair!\\n\\n` +\n                        e.stack.split(\"\\n\").slice(1).join(\"\\n\")\n                );\n                try {\n                    debugger;\n                    // debugger'ing?  YOU ARE AWESOME!\n                    //  reminder: ensure \"pause on caught exceptions\" is enabled\n                    //  before playing this next line to dig deeper into the error.\n                    Program.new(src, modules);\n                } catch (sameError) {\n                    throw sameError;\n                }\n            }\n            const moduleName = e.src.name;\n            const errorModule = [src, ...modules].find(\n                (m) => (m as any).moduleName == moduleName\n            );\n            const { srcFile = \"‹unknown path to module›\" } =\n                (errorModule as any) || {};\n            const [sl, sc, el, ec] = e.getFilePos();\n            const t = new Error(\"\");\n            const modifiedStack = t.stack!.split(\"\\n\").slice(1).join(\"\\n\");\n            const additionalErrors = e.src.errors\n                .slice(1)\n                .map((x) => `       |         ⚠️  also: ${x}`);\n            const addlErrorText = additionalErrors.length\n                ? [\"\", ...additionalErrors, \"       v\"].join(\"\\n\")\n                : \"\";\n            t.message = e.message + addlErrorText;\n\n            t.stack =\n                `${e.message}\\n    at ${moduleName} (${srcFile}:${1 + sl}:${\n                    1 + sc\n                })\\n` + modifiedStack;\n\n            throw t;\n        }\n    }\n\n    async getMyActorAddress() {\n        if (!this.myActor) throw this.missingActorError;\n\n        const [addr] = await this.myActor.usedAddresses;\n\n        return addr;\n    }\n\n    private get missingActorError(): string | undefined {\n        return `missing required 'myActor' property on ${this.constructor.name} instance`;\n    }\n\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        exceptInTcx: StellarTxnContext<any>,\n        extraErrorHint?: string\n    ): Promise<TxInput | never>;\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        extraErrorHint?: string\n    ): Promise<TxInput | never>;\n\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        hintOrExcept?: string | StellarTxnContext<any>,\n        hint?: string\n    ): Promise<TxInput | never> {\n        const address = await this.getMyActorAddress();\n\n        const isTcx = hintOrExcept instanceof StellarTxnContext;\n        const exceptInTcx = isTcx ? hintOrExcept : undefined;\n        const extraErrorHint = isTcx\n            ? hint\n            : \"string\" == typeof hintOrExcept\n            ? hintOrExcept\n            : undefined;\n\n        return this.mustFindUtxo(\n            name,\n            predicate,\n            { address, exceptInTcx },\n            extraErrorHint\n        );\n    }\n\n    //! finds a utxo (\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        exceptInTcx: StellarTxnContext<any>,\n        extraErrorHint?: string\n    ): Promise<TxInput | never>;\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        extraErrorHint?: string\n    ): Promise<TxInput | never>;\n\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        hintOrExcept?: string | StellarTxnContext<any>,\n        hint?: string\n    ): Promise<TxInput | never> {\n        const { address } = this;\n        const isTcx = hintOrExcept instanceof StellarTxnContext;\n        const exceptInTcx = isTcx ? hintOrExcept : undefined;\n        const extraErrorHint = isTcx\n            ? hint\n            : \"string\" == typeof hintOrExcept\n            ? hintOrExcept\n            : undefined;\n\n        return this.mustFindUtxo(\n            semanticName,\n            predicate,\n            { address, exceptInTcx },\n            extraErrorHint\n        );\n    }\n\n    async mustFindUtxo(\n        semanticName: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        {\n            address,\n            exceptInTcx,\n        }: { address: Address; exceptInTcx?: StellarTxnContext<any> },\n        extraErrorHint: string = \"\"\n    ): Promise<TxInput | never> {\n        const found = await this.hasUtxo(semanticName, predicate, {\n            address,\n            exceptInTcx,\n        });\n        if (!found) {\n            throw new Error(\n                `${this.constructor.name}: '${semanticName}' utxo not found (${extraErrorHint}) in address`\n            );\n        }\n\n        return found;\n    }\n    toUtxoId(u: TxInput) {\n        return `${u.outputId.txId.hex}@${u.outputId.utxoIdx}`;\n    }\n\n    async txnFindUtxo(\n        tcx: StellarTxnContext<any>,\n        name: string,\n        predicate: utxoPredicate,\n        address = this.address\n    ): Promise<TxInput | undefined> {\n        return this.hasUtxo(name, predicate, {\n            address,\n            exceptInTcx: tcx,\n        });\n    }\n\n    async hasUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        {\n            address,\n            exceptInTcx,\n        }: { address: Address; exceptInTcx?: StellarTxnContext<any> }\n    ): Promise<TxInput | undefined> {\n        const utxos = await this.network.getUtxos(address);\n        const filterUtxos = exceptInTcx?.reservedUtxos();\n\n        const filtered = exceptInTcx\n            ? utxos.filter(exceptInTcx.utxoNotReserved.bind(exceptInTcx))\n            : utxos;\n\n        console.log(\n            `finding '${semanticName}' utxo${\n                exceptInTcx ? \" (not already being spent in txn)\" : \"\"\n            } from set:\\n  ${utxosAsString(filtered, \"\\n  \")}`,\n            ...(exceptInTcx && filterUtxos?.length\n                ? [\n                      \"\\n  ... after filtering out:\\n  \",\n                      utxosAsString(exceptInTcx.reservedUtxos(), \"\\n  \"),\n                  ]\n                : [])\n        );\n\n        const found = filtered.find(predicate);\n        if (found) {\n            console.log({\n                found: utxosAsString([found]),\n            });\n        } else {\n            console.log(\"  (not found)\");\n        }\n        return found;\n    }\n\n    async hasMyUtxo(\n        semanticName: string,\n        predicate: utxoPredicate\n    ): Promise<TxInput | undefined> {\n        return this.hasUtxo(semanticName, predicate, { address: this.address });\n    }\n}\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem \n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport cmh from \"./CapoMintHelpers.hl\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\nexport const CapoMintHelpers : HeliosModuleSrc = cmh;\n\n\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem \n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport shh from \"./StellarHeliosHelpers.hl\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\nexport const StellarHeliosHelpers : HeliosModuleSrc = shh;\n\n\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem \n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport { HeliosModuleSrc } from \"lib/HeliosModuleSrc.js\";\nimport cdh from \"./CapoDelegateHelpers.hl\";\n\nexport const CapoDelegateHelpers : HeliosModuleSrc= cdh;\n\n\n","import { Address } from \"@hyperionbt/helios\";\nimport { ConfigFor, StellarContract, configBase, stellarSubclass } from \"../StellarContract.js\";\nimport { DefaultMinter } from \"../DefaultMinter.js\";\n\nconst _uutName = Symbol(\"uutName\");\nconst maxUutName = 32\nexport class UutName {\n    private [_uutName]: string\n    private purpose : string\n    constructor(purpose: string, un: string) {\n        this.purpose = purpose;\n        if (un.length > maxUutName ) {\n            throw new Error(`uut name '${un}' exceeds max length of ${maxUutName}`)\n        }\n        this[_uutName] = un\n    }\n    get name() { return this[_uutName] }\n    toString() { return this[_uutName] }\n}\nexport const PARAM_REQUIRED = Symbol(\"paramReqd\");\nexport const PARAM_IMPLIED = Symbol(\"paramImplied\");\n\nexport class DelegateConfigNeeded extends Error {\n    errors?: ErrorMap\n    availableStrategies?: string[]\n    constructor(message: string, options: {\n        errors?: ErrorMap,\n        availableStrategies?: string[]\n    }) {\n        super(message)\n        const {errors, availableStrategies} = options;\n        if (errors) this.errors = errors;\n        if (availableStrategies) this.availableStrategies = availableStrategies;\n    }\n}\n\nexport type ErrorMap = Record<string, string[]>\n// return type for strategy's validateScriptParams()\nexport type strategyValidation = ErrorMap | undefined\n\nexport function variantMap<\n    T extends StellarContract<any>\n>(vm: VariantMap<T>) { return vm }\n\nexport type VariantMap<\n    T extends StellarContract<any>\n> = Record<string, VariantStrategy<T>>\n\nexport type RoleMap = Record<string, VariantMap<any>>\n\nexport type strategyParams = configBase;\nexport type delegateScriptParams = configBase;\n\nexport type PartialParamConfig<CT extends configBase> = Partial<{\n    [key in keyof CT]: typeof PARAM_REQUIRED | typeof PARAM_IMPLIED | CT[key]\n}>\n\n//! declaration for a variant of a Role:\n//  ... indicates the details needed to construct a delegate script\n//  ... (and it's addr) that may not have existed before.\nexport type VariantStrategy<\n    T extends StellarContract<any>\n> = {\n    delegateClass: stellarSubclass<T>,\n    //! it MAY provide a partial configuration to be used for parameterizing \n    //  the underlying contract script, to be further customized by a delegate-selection\n    partialConfig? : PartialParamConfig<ConfigFor<T>>,\n    //! it has a function used for validating parameter details\n    validateConfig(p: ConfigFor<T>) : strategyValidation\n}\n\n//! a map of delegate selections needed for a transaction \n//  ... to construct a concrete delegate that hasn't yet been manifested.  \n//  ... This commonly is needed during initial setup of a contract, \n//  ... but may happen also at later moments in the contract's lifecycle.\nexport type SelectedDelegates = {\n    [roleName: string]: SelectedDelegate<StellarContract<any>>\n}\n\n//! a single delegate selection, where a person chooses \n//  ... one of the strategy variants \n//  ... and the settings (script parameters) needed to create the on-chain contract\nexport type SelectedDelegate<\n    T extends StellarContract<any>\n> = {\n    strategyName: string\n    config: Partial<ConfigFor<T>>,\n} \n\nexport function selectDelegate<\n    T extends StellarContract<any>\n>(sd: SelectedDelegate<T>) {\n    return sd\n} \n\n\n//! a complete, validated configuration for a specific delegate.  \n//  ... Combined with a specific UUT, a delegate linkage can be created from this\nexport type DelegateSettings<\n    T extends StellarContract<any>\n> = {\n    delegateClass: stellarSubclass<T>,\n\n    roleName: string,\n    strategyName: string,\n    config: ConfigFor<T>, \n    reqdAddress?: Address,\n    addressesHint?: Address[],\n}\n\nexport type RelativeDelegateLink<\n    CT extends configBase\n> = {\n    uutName: string,    \n    strategyName: string;\n    config: Partial<CT>;\n    reqdAddress?: Address;\n    addressesHint?: Address[];\n}\n\nexport type xDelegateLink = {\n    strategyName: string,\n    uutFingerprint: string,\n    reqdAddress?: Address,\n    addressesHint?: Address[],\n}\n\nexport type DelegateDetailSnapshot<\n    T extends StellarContract<any>,\n> = {\n    isDelegateSnapshot: true,\n    uut: string,\n    settings: DelegateSettings<T>\n}\n\n","import {\n    Address,\n    Value,\n    MintingPolicyHash,\n    Assets,\n    Crypto,\n    TxInput,\n    bytesToHex,\n} from \"@hyperionbt/helios\";\nimport {\n    Activity,\n    StellarContract,\n    isActivity,\n    partialTxn,\n} from \"./StellarContract.js\";\n\n//@ts-expect-error\nimport contract from \"./DefaultMinter.hl\";\nimport { CapoMintHelpers } from \"./CapoMintHelpers.js\";\n\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport {\n    MintUutRedeemerArgs,\n    MinterBaseMethods,\n    hasUutContext,\n    uutPurposeMap,\n} from \"./Capo.js\";\nimport { SeedTxnParams } from \"./SeedTxn.js\";\nimport { valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { StellarHeliosHelpers } from \"./StellarHeliosHelpers.js\";\nimport { CapoDelegateHelpers } from \"./delegation/CapoDelegateHelpers.js\";\nimport { RelativeDelegateLink, UutName } from \"./delegation/RolesAndDelegates.js\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\ntype MintCharterRedeemerArgs<T = {}> = T & {\n    owner: Address;\n};\n\nexport class DefaultMinter\n    extends StellarContract<SeedTxnParams>\n    implements MinterBaseMethods\n{\n    contractSource() {\n        return contract;\n    }\n    \n    importModules(): HeliosModuleSrc[] {\n        return [ \n            StellarHeliosHelpers, \n            CapoDelegateHelpers,\n            CapoMintHelpers \n        ]\n    }\n\n    @partialTxn\n    async txnWithUuts<\n        const purposes extends string, \n        existingTcx extends StellarTxnContext<any>,\n        const R extends string\n    >(\n        tcx: existingTcx,\n        uutPurposes: purposes [],\n        seedUtxo: TxInput,\n        role: R,\n    ): Promise<existingTcx & hasUutContext<purposes | ( R extends \"\" ? never : R )>> {\n        const { txId, utxoIdx } = seedUtxo.outputId;\n\n            const { blake2b } = Crypto;\n            if (role && uutPurposes.length !== 1) throw new Error(`role uut must have exactly one purpose`)\n            const uutMap: uutPurposeMap<purposes | R> = Object.fromEntries(\n                uutPurposes.map((uutPurpose) => {\n                    const txoId = txId.bytes.concat([\n                        \"@\".charCodeAt(0),\n                        utxoIdx,\n                    ]);\n                    // console.warn(\"&&&&&&&& txoId\", bytesToHex(txoId));\n                    const uutName = new UutName(uutPurpose, `${uutPurpose}-${bytesToHex(\n                        blake2b(txoId).slice(0, 6)\n                    )}`)\n                    return [\n                        uutPurpose,\n                        uutName,\n                    ];\n                })\n            ) as uutPurposeMap<purposes | R>\n            if (role) uutMap[role] = uutMap[uutPurposes[0]]\n\n            if (tcx.state.uuts) throw new Error(`uuts are already there`);\n            tcx.state.uuts = uutMap;\n\n            return tcx\n    }\n\n    @Activity.partialTxn\n    async txnCreatingUuts<\n        const purposes extends string,\n        TCX extends StellarTxnContext<any>,\n    >(\n        initialTcx: TCX,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput\n    ): Promise<TCX & hasUutContext<purposes>> {\n        const gettingSeed = seedUtxo ? Promise.resolve<TxInput>(seedUtxo) :\n        new Promise<TxInput>(res => {\n            //!!! make it big enough to serve minUtxo for the new UUT(s)\n            const uutSeed = this.mkValuePredicate(BigInt(42_000), initialTcx);\n            this.mustFindActorUtxo(\n                `for-uut-${uutPurposes.join(\"+\")}`,\n                uutSeed,\n                initialTcx\n            ).then(res)\n        });\n\n        return gettingSeed.then(async (seedUtxo) => {\n            const tcx = await this.txnWithUuts(initialTcx, uutPurposes, seedUtxo, \"\");\n            const vEntries = this.mkUutValuesEntries(tcx.state.uuts);\n\n            tcx.addInput(seedUtxo);\n            const { txId: seedTxn, utxoIdx: seedIndex } = seedUtxo.outputId;\n\n            tcx.attachScript(this.compiledScript).mintTokens(\n                this.mintingPolicyHash!,\n                vEntries,\n                this.mintingUuts({\n                    seedTxn,\n                    seedIndex,\n                    purposes: uutPurposes,\n                }).redeemer\n            );\n\n            return tcx;\n        });\n    }\n\n    mkUutValuesEntries<UM extends uutPurposeMap<any>>(uutMap: UM): valuesEntry[] {\n        return Object.entries(uutMap).map(([_purpose, uut]) => {\n            return this.mkValuesEntry(uut.name, BigInt(1));\n        });\n    }\n\n    //! overrides base getter type with undefined not being allowed\n    get mintingPolicyHash(): MintingPolicyHash {\n        return super.mintingPolicyHash!;\n    }\n\n    @Activity.redeemer\n    protected mintingCharter({\n        owner,\n    }: MintCharterRedeemerArgs): isActivity {\n        const { DelegateDetails: hlDelegateDetails, Redeemer } = this.scriptProgram!.types;\n        const t =\n            new Redeemer.mintingCharter(\n                owner,\n            );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    @Activity.redeemer\n    protected mintingUuts({\n        seedTxn,\n        seedIndex: sIdx,\n        purposes,\n    }: MintUutRedeemerArgs): isActivity {\n        // debugger\n        const seedIndex = BigInt(sIdx);\n        console.log(\"UUT redeemer seedTxn\", seedTxn.hex);\n        const t = new this.scriptProgram!.types.Redeemer.mintingUuts(\n            seedTxn,\n            seedIndex,\n            purposes\n        );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    get charterTokenAsValuesEntry(): valuesEntry {\n        return this.mkValuesEntry(\"charter\", BigInt(1));\n    }\n\n    tvCharter() {\n        const { mintingPolicyHash } = this;\n\n        const v = new Value(\n            undefined,\n            new Assets([[mintingPolicyHash, [this.charterTokenAsValuesEntry]]])\n        );\n        return v;\n    }\n\n    get charterTokenAsValue() {\n        console.warn(\n            \"deprecated use of `get minter.charterTokenAsValue`; use tvCharter() instead\"\n        );\n        return this.tvCharter();\n    }\n\n    @Activity.partialTxn\n    async txnMintingCharter(\n        tcx: StellarTxnContext,\n        { owner, authZor } : {\n            authZor:  UutName,\n            owner: Address, \n        }\n    ): Promise<StellarTxnContext> {\n        const charterVE = this.charterTokenAsValuesEntry;\n        const authzVE = this.mkValuesEntry(authZor.name, BigInt(1));\n\n        return tcx\n            .mintTokens(\n                this.mintingPolicyHash!,\n                [charterVE, authzVE],\n                this.mintingCharter({ \n                    owner\n                 }).redeemer\n            )\n            .attachScript(this.compiledScript);\n    }\n}\n","/**\n * Documents one specific requirement\n * @remarks\n *\n * Describes the purpose, details, and implementation mechanism for a single requirement for a unit of software.\n *\n * Also references any other requirements in the host ReqtsMap structure, whose behavior this requirement\n * depends on.  The details of those other dependencies, are delegated entirely to the other requirement, facilitating\n * narrowly-focused capture of for key expectations within each individual semantic expectation of a software unit's\n * behavior.\n *\n * @typeParam reqts - constrains `requires` entries to the list of requirements in the host ReqtsMap structure\n * @public\n **/\nexport type RequirementEntry<reqts extends string> = {\n    purpose: string;\n    details: string[];\n    mech: string[];\n    impl?: string; // todo: constrained to method names of the object meeting the requirements\n    requires?: reqts[];\n};\n\nconst TODO = Symbol(\"needs to be implemented\");\nexport type TODO_TYPE = typeof TODO;\n\n/**\n * Describes the requirements for a unit of software\n * @remarks\n *\n * A requirements map is a list of described requirements, in which each requirement\n * has a synopsis, a description of its purpose, descriptive detail, and technical requirements\n * for the mechanism used for implementation.  The mech strings should be usable as unit-test titles.\n *\n * use the hasReqts() helper method to declare a type-safe set of requirements following this data structure.\n *\n * Each requirement also has space for nested 'requires', without the need for deeply nested data structures;\n * these reference other requirements in the same hasReqts() data structure. As a result, high-level and detail-\n * level requirements and 'impl' details can have progressive levels of detail.\n *\n * @typeParam reqts - the list of known requirement names.  Implicitly detected by the hasReqts() helper.\n * @public\n **/\nexport type ReqtsMap<reqts extends string> = {\n    [reqtDescription in reqts]: TODO_TYPE | RequirementEntry<reqts>;\n};\n\n/**\n * Factory for type-safe requirements details for a unit of software\n * @public\n * @remarks\n * return `hasReqts({... requirements})` from a requirements() or other method in a class, to express\n * requirements using a standardized form that supports arbitrary amounts of detailed requirements\n * with references to unit-test labels that can verify the impl details.\n *\n * You don't need to provide the type params or TS type annotations.  `requirements() { return hasReqts({...yourReqts}) }` will work fine.\n *\n * See the {@link ReqtsMap} and {@link RequirementEntry} types for more details about expressing requirements.\n *\n * @param reqtsMap - the ReqtsMap structure for the software unit\n * @typeParam R - implicitly matches the provided `reqtsMap`\n * @typeParam reqts - implicitly matches the requirements strings from the provided `reqtsMap`\n */\nexport function hasReqts<\n    R extends ReqtsMap<reqts>,\n    const reqts extends string = string & keyof R\n>(reqtsMap: R): ReqtsMap<reqts> {\n    return reqtsMap;\n}\n\nhasReqts.TODO = TODO;\n","import {\n    Address,\n    Assets,\n    Datum,\n    MintingPolicyHash,\n    TxId,\n    TxOutput,\n    TxInput,\n    Value,\n    AssetClass,\n} from \"@hyperionbt/helios\";\nimport { DefaultMinter } from \"./DefaultMinter.js\";\nimport {\n    Activity,\n    StellarConstructorArgs,\n    StellarContract,\n    isActivity,\n    configBase,\n    partialTxn,\n    stellarSubclass,\n    ConfigFor,\n} from \"./StellarContract.js\";\nimport { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport {\n    DelegateSettings,\n    SelectedDelegates,\n    DelegateConfigNeeded,\n    ErrorMap,\n    RoleMap,\n    SelectedDelegate,\n    VariantStrategy,\n    PartialParamConfig,\n    UutName,\n    RelativeDelegateLink,\n} from \"./delegation/RolesAndDelegates.js\";\nimport { CapoDelegateHelpers } from \"./delegation/CapoDelegateHelpers.js\";\nimport { SeedTxnParams } from \"./SeedTxn.js\";\nimport { CapoMintHelpers } from \"./CapoMintHelpers.js\";\nimport { StellarHeliosHelpers } from \"./StellarHeliosHelpers.js\";\nimport { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { errorMapAsString } from \"./diagnostics.js\";\nimport { hasReqts } from \"./Requirements.js\";\n\nexport { variantMap } from \"./delegation/RolesAndDelegates.js\";\nexport type {\n    RoleMap,\n    strategyValidation,\n} from \"./delegation/RolesAndDelegates.js\";\n\n/**\n * strongly-typed map of purpose-names to Uut objects\n *\n * @public\n */\nexport type uutPurposeMap<unionPurpose extends string> = {\n    [purpose in unionPurpose]: UutName;\n};\n\n// export type hasSomeUuts<uutEntries extends string> = {\n//     uuts: Partial<uutPurposeMap<uutEntries>>;\n// };\n\n/**\n * used for transaction-context state having specific uut-purposes\n * \n * @public\n */\nexport type hasAllUuts<uutEntries extends string> = {\n    uuts: uutPurposeMap<uutEntries>;\n};\n\n/**\n * the uut-factory interface\n * \n * @public\n */\ninterface hasUutCreator {\n    txnCreatingUuts<\n        const purposes extends string,\n        TCX extends StellarTxnContext<any>\n    >(\n        tcx: TCX,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput\n    ): Promise<TCX & hasUutContext<purposes>>;\n}\n\n/**\n * UUT minting should always use these settings to guard for uniqueness\n * \n * @public\n */\nexport type MintUutRedeemerArgs = {\n    seedTxn: TxId;\n    seedIndex: bigint | number;\n    purposes: string[];\n};\n/**\n * A txn context having specifically-purposed UUTs in its state\n * \n * @public\n */\nexport type hasUutContext<uutEntries extends string> = StellarTxnContext<\n    hasAllUuts<uutEntries>\n>;\n\n/**\n * charter-minting interface\n * \n * @public\n */\nexport interface MinterBaseMethods extends hasUutCreator {\n    get mintingPolicyHash(): MintingPolicyHash;\n    txnMintingCharter(\n        tcx: StellarTxnContext<any>,\n        charterMintArgs: {\n            owner: Address;\n            authZor: UutName;\n        },\n        tVal: valuesEntry\n    ): Promise<StellarTxnContext<any>>;\n}\n\nexport type anyDatumArgs = Record<string, any>;\n\n//!!! todo: let this be parameterized for more specificity\nexport type CapoBaseConfig = SeedTxnParams & {\n    mph: MintingPolicyHash;\n};\n\n//!!! todo: let this be parameterized for more specificity\nexport type CapoImpliedSettings = {\n    uut: AssetClass;\n};\n\nexport type hasSelectedDelegates = StellarTxnContext<hasDelegateProp>;\ntype hasDelegateProp = {\n    delegates: SelectedDelegates;\n};\n\n/**\n * Base class for the leader of a set of contracts\n * @remarks\n * \n * A Capo contract provides a central contract address that can act as a treasury or data registry;\n * it can mint tokens using its connected minting-policy, and it can delegate policies to other contract \n * scripts.  Subclasses of Capo can use these capabilities in custom ways for strong flexibility.\n * \n * Any Capo contract can (and must) define roles() to establish collaborating scripts; these are used for \n * separating granular responsbilities for different functional purposes within your (on-chain and off-chain) \n * application; this approach enables delegates to use any one of multiple strategies with different\n * functional logic to serve in any given role, thus providing flexibility and extensibility.\n * \n * The delegation pattern uses UUTs, which are non-fungible / unique utility tokens.  See DefaultCapo for more about them.\n * \n * **Capo is a foundational class**; you should consider using DefaultCapo as a starting point, unless its govAuthority \n * role conflicts with your goals.\n *\n * Inherits from: {@link StellarContract}\\<`configType`\\> (is this a redundant doc entry?) .\n * \n * @typeParam minterType - allows setting a different contract (script & off-chain class) for the minting policy\n * @typeParam charterDatumType - specifies schema for datum information held in the Capo's primary or \"charter\" UTXO\n * @typeParam configType - specifies schema for details required to pre-configure the contract suite, or to reproduce it in a specific application instance.\n * @public\n */\nexport abstract class Capo<\n        minterType extends MinterBaseMethods & DefaultMinter = DefaultMinter,\n        charterDatumType extends anyDatumArgs = anyDatumArgs,\n        configType extends CapoBaseConfig  = CapoBaseConfig\n    >\n    extends StellarContract<configType>\n    implements hasUutCreator\n{\n    abstract get roles(): RoleMap;\n\n    constructor(args: StellarConstructorArgs<CapoBaseConfig>) {\n        //@ts-expect-error spurious \"could be instantiated with a different subtype\" \n        super(args);\n\n        const { Datum, Redeemer } = this.scriptProgram!.types;\n\n        const { CharterToken } = Datum;\n        const { updatingCharter, usingAuthority } = Redeemer;\n\n        if (!CharterToken)\n            throw new Error(\"Datum must have a 'CharterToken' variant\");\n        if (!updatingCharter)\n            throw new Error(\"Redeemer must have a 'updatingCharter' variant\");\n        if (!usingAuthority)\n            throw new Error(\"Redeemer must have a 'usingAuthority' variant\");\n    }\n    abstract contractSource(): string;\n    abstract mkDatumCharterToken(args: charterDatumType): InlineDatum;\n    // abstract txnMustUseCharterUtxo(\n    //     tcx: StellarTxnContext,\n    //     newDatum?: InlineDatum\n    // ): Promise<TxInput | never>;\n\n    get minterClass(): stellarSubclass<DefaultMinter, SeedTxnParams> {\n        return DefaultMinter;\n    }\n\n    minter?: minterType;\n\n    @Activity.partialTxn\n    txnCreatingUuts<\n        const purposes extends string,\n        TCX extends StellarTxnContext<any>\n    >(\n        tcx: TCX,\n        uutPurposes: purposes[],\n        seedUtxo?: TxInput\n    ): Promise<TCX & hasUutContext<purposes>> {\n        return this.minter!.txnCreatingUuts(tcx, uutPurposes, seedUtxo);\n    }\n    // P extends paramsBase = SC extends StellarContract<infer P> ? P : never\n\n    uutsValue(uutMap: uutPurposeMap<any>): Value;\n    uutsValue(tcx: hasUutContext<any>): Value;\n    uutsValue(x: uutPurposeMap<any> | hasUutContext<any>): Value {\n        const uutMap = x instanceof StellarTxnContext ? x.state.uuts! : x;\n        const vEntries = this.minter!.mkUutValuesEntries(uutMap);\n\n        return new Value(\n            undefined,\n            new Assets([[this.mintingPolicyHash!, vEntries]])\n        );\n    }\n\n    @Activity.redeemer\n    protected usingAuthority(): isActivity {\n        const r = this.scriptProgram!.types.Redeemer;\n        const { usingAuthority } = r;\n        if (!usingAuthority) {\n            throw new Error(\n                `invalid contract without a usingAuthority redeemer`\n            );\n        }\n        const t = new usingAuthority();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    protected abstract updatingCharter(args: charterDatumType): isActivity;\n\n    tvCharter() {\n        return this.minter!.tvCharter();\n    }\n\n    get charterTokenAsValue() {\n        console.warn(\n            \"deprecated get charterTokenAsValue; use tvCharter() instead\"\n        );\n        return this.tvCharter();\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        return [StellarHeliosHelpers, CapoDelegateHelpers, CapoMintHelpers];\n    }\n\n    abstract mkTxnMintCharterToken(\n        charterDatumArgs: Partial<charterDatumType>,\n        tcx?: StellarTxnContext\n    ): Promise<StellarTxnContext | never>;\n    // @txn\n    // async mkTxnMintCharterToken(\n    //     datumArgs: charterDatumType,\n    //     tcx: StellarTxnContext = new StellarTxnContext()\n    // ): Promise<StellarTxnContext | never> {\n    //     console.log(\n    //         `minting charter from seed ${this.paramsIn.seedTxn.hex.substring(\n    //             0,\n    //             12\n    //         )}…@${this.paramsIn.seedIndex}`\n    //     );\n\n    //     return this.mustGetContractSeedUtxo().then((seedUtxo) => {\n    //         const v = this.tvCharter();\n\n    //         const datum = this.mkDatumCharterToken(datumArgs);\n    //         const output = new TxOutput(this.address, v, datum);\n    //         output.correctLovelace(this.networkParams);\n\n    //         tcx.addInput(seedUtxo).addOutputs([output]);\n\n    //         return this.minter!.txnMintingCharter(tcx, {\n    //             owner: this.address,\n    //             delegate\n    //         })\n    //     });\n    // }\n\n    get charterTokenPredicate() {\n        const predicate = this.mkTokenPredicate(this.tvCharter());\n\n        return predicate;\n    }\n\n    //! forms a Value with minUtxo included\n    tokenAsValue(tokenName: string, quantity: bigint = 1n) {\n        const { mintingPolicyHash } = this;\n\n        const e = this.mkValuesEntry(tokenName, quantity);\n\n        const v = new Value(\n            this.ADA(0),\n            new Assets([[mintingPolicyHash, [e]]])\n        );\n        const t = new TxOutput(this.address, v);\n        const minLovelace = t.calcMinLovelace(this.networkParams);\n\n        v.setLovelace(minLovelace);\n        return v;\n    }\n\n    async mustFindCharterUtxo() {\n        const predicate = this.mkTokenPredicate(this.tvCharter());\n\n        return this.mustFindMyUtxo(\"charter\", predicate, \"has it been minted?\");\n    }\n\n    abstract txnAddCharterAuthz(\n        tcx: StellarTxnContext,\n        datum: InlineDatum\n    ): Promise<StellarTxnContext<any> | never>;\n\n    async txnMustUseCharterUtxo(\n        tcx: StellarTxnContext<any>,\n        redeemer: isActivity,\n        newDatum?: InlineDatum\n    ): Promise<StellarTxnContext<any> | never>;\n    async txnMustUseCharterUtxo(\n        tcx: StellarTxnContext<any>,\n        useReferenceInput: true,\n        forceAddRefScript?: true\n    ): Promise<StellarTxnContext<any> | never>;\n    @partialTxn // non-activity partial\n    async txnMustUseCharterUtxo(\n        tcx: StellarTxnContext<any>,\n        redeemerOrRefInput: isActivity | true,\n        newDatumOrForceRefScript?: InlineDatum | true\n    ): Promise<StellarTxnContext<any> | never> {\n        return this.mustFindCharterUtxo().then(async (ctUtxo: TxInput) => {\n            await this.txnAddCharterAuthz(\n                tcx,\n                ctUtxo.origOutput.datum as InlineDatum\n            );\n\n            if (true === redeemerOrRefInput) {\n                if (\n                    newDatumOrForceRefScript &&\n                    true !== newDatumOrForceRefScript\n                )\n                    throw new Error(\n                        `when using reference input for charter, arg3 can only be true (or may be omitted)`\n                    );\n                tcx.tx.addRefInput(\n                    ctUtxo,\n                    newDatumOrForceRefScript ? this.compiledScript : undefined\n                );\n            } else {\n                const redeemer = redeemerOrRefInput;\n                const newDatum = newDatumOrForceRefScript;\n                if (true === newDatum)\n                    throw new Error(\n                        `wrong type for newDatum when not using reference input for charter`\n                    );\n                tcx.addInput(ctUtxo, redeemer.redeemer).attachScript(\n                    this.compiledScript\n                );\n                const datum =\n                    newDatum || (ctUtxo.origOutput.datum as InlineDatum);\n\n                this.txnKeepCharterToken(tcx, datum);\n            }\n            return tcx;\n        });\n    }\n\n    @partialTxn // non-activity partial\n    async txnUpdateCharterUtxo(\n        tcx: StellarTxnContext,\n        redeemer: isActivity,\n        newDatum: InlineDatum\n    ): Promise<StellarTxnContext | never> {\n        // this helper function is very simple.  Why have it?\n        //   -> its 3rd arg is required,\n        //   -> and its name gives a more specific meaning.\n        return this.txnMustUseCharterUtxo(tcx, redeemer, newDatum);\n    }\n\n    @partialTxn // non-activity partial\n    txnKeepCharterToken(tcx: StellarTxnContext<any>, datum: InlineDatum) {\n        const txo = new TxOutput(this.address, this.tvCharter(), datum);\n        txo.correctLovelace(this.networkParams);\n        tcx.addOutput(txo);\n\n        return tcx;\n    }\n\n    @partialTxn\n    async txnAddAuthority(tcx: StellarTxnContext<any>) {\n        return this.txnMustUseCharterUtxo(tcx, this.usingAuthority());\n    }\n\n    //! it can provide minter-targeted params through getMinterParams()\n    getMinterParams() {\n        const { seedTxn, seedIndex } = this.configIn\n        return { seedTxn, seedIndex }\n    }\n    getCapoRev() {\n        return 1n;\n    }\n\n    getContractScriptParams(config: configType) {\n        const { mph } = this;\n        const rev = this.getCapoRev();\n        // console.log(\"this treasury uses mph\", mph?.hex);\n\n        return {\n            mph,\n            rev,\n        };\n    }\n\n    get mph() {\n        const minter = this.connectMintingScript(this.getMinterParams());\n        return minter.mintingPolicyHash!;\n    }\n\n    get mintingPolicyHash() {\n        return this.mph;\n    }\n\n    connectMintingScript(params: SeedTxnParams): minterType {\n        if (this.minter) return this.minter;\n        const { minterClass } = this;\n        const { seedTxn, seedIndex  } = this.configIn;\n\n        const minter = this.addScriptWithParams(minterClass, { seedTxn, seedIndex});\n        const { mintingCharter, mintingUuts } =\n            minter.scriptProgram!.types.Redeemer;\n        if (!mintingCharter)\n            throw new Error(\n                `minting script doesn't offer required 'mintingCharter' activity-redeemer`\n            );\n        if (!mintingUuts)\n            throw new Error(\n                `minting script doesn't offer required 'mintingUuts' activity-redeemer`\n            );\n\n        //@ts-ignore-error - can't seem to indicate to typescript that minter's type can be relied on to be enough\n        return (this.minter = minter);\n    }\n\n    async mustGetContractSeedUtxo(): Promise<TxInput | never> {\n        //! given a Capo-based contract instance having a free TxInput to seed its validator address,\n        //! prior to initial on-chain creation of contract,\n        //! it finds that specific TxInput in the current user's wallet.\n        const { seedTxn, seedIndex } = this.configIn;\n        console.log(\n            `seeking seed txn ${seedTxn.hex.substring(0, 12)}…@${seedIndex}`\n        );\n\n        return this.mustFindActorUtxo(\n            \"seed\",\n            (u) => {\n                const { txId, utxoIdx } = u.outputId;\n\n                if (txId.eq(seedTxn) && BigInt(utxoIdx) == seedIndex) {\n                    return u;\n                }\n            },\n            \"already spent?\"\n        );\n    }\n\n    withDelegates(delegates: SelectedDelegates): hasSelectedDelegates {\n        const tcx = new StellarTxnContext<hasDelegateProp>();\n        tcx.state.delegates = delegates;\n\n        return tcx;\n    }\n\n    txnGetSelectedDelegateConfig<\n        T extends StellarContract<any>,\n        const RN extends string\n    >(\n        tcx: hasSelectedDelegates,\n        roleName: RN\n    ): PartialParamConfig<ConfigFor<T>> {\n        const selected = this.txnMustSelectDelegate(tcx, roleName);\n        const { strategyName, config: selectedConfig } = selected;\n\n        const { roles } = this;\n\n        const foundStrategies = roles[roleName];\n        const selectedStrategy = foundStrategies[\n            strategyName\n        ] as VariantStrategy<T>;\n\n        const stratConfig = selectedStrategy.partialConfig || {};\n        return {\n            ...stratConfig,\n            ...selectedConfig,\n        };\n    }\n\n    txnMustSelectDelegate<\n        T extends StellarContract<any>,\n        const RN extends string,\n        TCX extends hasSelectedDelegates\n    >(tcx: TCX, roleName: RN): SelectedDelegate<T> {\n        const { delegates: selectedDelegates } = tcx.state;\n        let selected = selectedDelegates[roleName];\n        const role = this.roles[roleName];\n        if (!selected) {\n            if (role.default) {\n                selected = {\n                    strategyName: \"default\",\n                    config: {},\n                };\n            }\n        }\n        if (!selected) {\n            const foundDelegateSelections = Object.keys(selectedDelegates);\n            if (!foundDelegateSelections.length)\n                foundDelegateSelections.push(\"‹none›\");\n            throw new DelegateConfigNeeded(\n                `no selected or default delegate for role '${roleName}' found in transaction-context.  \\n` +\n                    ` Hint:   use ‹capo instance›.withDelegates(delegates) to select delegates by role name\\n` +\n                    `    (found selections: ${foundDelegateSelections.join(\n                        \", \"\n                    )})`,\n                { availableStrategies: Object.keys(role) }\n            );\n        }\n\n        return selected;\n    }\n\n    //! stacks partial and implied configuration settings, validates and returns a good configuration\n    //  ... or throws errors\n    protected txnMustConfigureSelectedDelegate<\n        T extends StellarContract<any>,\n        const RN extends string\n    >(\n        tcx: hasSelectedDelegates & hasUutContext<RN>,\n        roleName: RN\n    ): DelegateSettings<T> {\n        let selected = this.txnMustSelectDelegate(tcx, roleName);\n        const { strategyName, config: selectedConfig } = selected;\n\n        const { roles } = this;\n        const uut = tcx.state.uuts[roleName];\n        const impliedSettings = this.mkImpliedSettings(uut);\n\n        const foundStrategies = roles[roleName];\n        const selectedStrategy = foundStrategies[\n            strategyName\n        ] as VariantStrategy<T>;\n        if (!selectedStrategy) {\n            const e = new DelegateConfigNeeded(\n                `invalid strategy name '${strategyName}' for role '${roleName}'`,\n                {\n                    availableStrategies: Object.keys(foundStrategies),\n                }\n            );\n            throw e;\n        }\n        const { delegateClass, validateConfig } = selectedStrategy;\n        const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;\n        const scriptParamsFromStrategyVariant = selected.config;\n        const mergedParams: ConfigFor<T> = {\n            ...defaultParamsFromDelegateClass,\n            ...(scriptParamsFromStrategyVariant || {}),\n            ...impliedSettings,\n            ...selectedConfig,\n        } as unknown as ConfigFor<T>;\n\n        //! it validates the net configuration so it can return a working config.\n        const errors: ErrorMap | undefined = validateConfig(mergedParams);\n        if (errors) {\n            throw new DelegateConfigNeeded(\n                \"validation errors in contract params:\\n\" +\n                    errorMapAsString(errors),\n                { errors }\n            );\n        }\n\n        return {\n            roleName,\n            strategyName,\n            config: mergedParams,\n            delegateClass,\n        };\n    }\n\n    mkImpliedSettings(uut: UutName): CapoImpliedSettings {\n        return {\n            uut: new AssetClass({\n                mph: this.mph,\n                tokenName: this.stringToNumberArray(uut.name),\n            }),\n        };\n    }\n\n    txnMustGetDelegate<T extends StellarContract<any>, const RN extends string>(\n        tcx: hasSelectedDelegates & hasUutContext<RN>,\n        roleName: RN,\n        configuredDelegate?: DelegateSettings<T>\n    ): T {\n        const sdd =\n            configuredDelegate ||\n            this.txnMustConfigureSelectedDelegate<T, RN>(tcx, roleName);\n        const { delegateClass, config: scriptParams } = sdd;\n        try {\n            // delegate\n            const configured = this.addScriptWithParams(\n                delegateClass,\n                scriptParams\n            );\n            return configured as T;\n        } catch (e: any) {\n            const t = e.message.match(/invalid parameter name '([^']+)'$/);\n\n            const [_, badParamName] = t || [];\n            if (badParamName) {\n                throw new DelegateConfigNeeded(\n                    \"configuration error while parameterizing contract script\",\n                    { errors: { [badParamName]: e.message } }\n                );\n            }\n            throw e;\n        }\n    }\n\n    async connectDelegateWith<DelegateType extends StellarContract<any>>(\n        roleName: string,\n        delegateLink: RelativeDelegateLink<ConfigFor<DelegateType>>\n    ): Promise<DelegateType> {\n        const role = this.roles[roleName];\n        //!!! work on type-safety with roleName + available roles\n        const {\n            strategyName,\n            uutName,\n            reqdAddress,\n            addressesHint,\n            config: linkedConfig,\n        } = delegateLink;\n        const selectedStrat = role[\n            strategyName\n        ] as unknown as DelegateSettings<DelegateType>;\n        if (!selectedStrat) {\n            throw new Error(\n                `mismatched strategyName '${strategyName}' in delegate link for role '${roleName}'`\n            );\n        }\n        const { delegateClass, config: stratSettings } = selectedStrat;\n        const config = {\n            ...stratSettings,\n            ...this.mkImpliedSettings(new UutName(\"some-delegate\", uutName)),\n            ...linkedConfig,\n        };\n\n        const { setup } = this;\n        return new delegateClass({ setup, config });\n    }\n\n    capoRequirements() {\n        return hasReqts({\n            \"is a base class for leader/Capo pattern\": {\n                purpose:\n                    \"so that smart contract developers can easily start multi-script development\",\n                details: [\n                    \"Instantiating a Capo contract always uses the seed-utxo pattern for uniqueness.\",\n                    \"Subclassing Capo with no type-params gives the default minter,\",\n                    \"  ... which only allows UUTs to be created\",\n                    \"Subclassing Capo<CustomMinter> gives an overloaded minter,\",\n                    \"  ... which must allow UUT minting and may allow more Activities too.\",\n                ],\n                mech: [\n                    \"provides a default minter\",\n                    \"allows the minter class to be overridden\",\n                ],\n            },\n            \"can create unique utility tokens\": {\n                purpose:\n                    \"so the contract can use UUTs for scoped-authority semantics\",\n                details: [\n                    \"That UUT (a Value) is returned, and then should be added to a TxOutput.\",\n                    \"The partial-helper doesn't constrain the semantics of the UUT.\",\n                    \"The uniqueness level can be iterated in future as needed.\",\n                    \"The UUT's token-name combines its textual purpose with a short hash \",\n                    \"   ... of the seed UTxO, formatted with bech32\",\n                ],\n                mech: [\n                    \"Building a txn with a UUT involves using the txnCreatingUuts partial-helper on the Capo.\",\n                    \"Fills tcx.state.uuts with purpose-keyed unique token-names\",\n                    \"The UUT uses the seed-utxo pattern to form 64 bits of uniqueness, so that token-names stay short-ish.\",\n                ],\n            },\n            \"supports the Delegation pattern using roles and strategy-variants\":\n                {\n                    purpose: \"enables structured modularity and extensibility\",\n                    details: [\n                        \"A Capo constellation can declare a set of roles to be filled in the contract logic.\",\n                        \"The roles are typed, so that implementers of extensibility can know \",\n                        \"  ... which capabilities their plugins need to provide\",\n                        \"Each role should be filled by a StellarContract class, \",\n                        \"  ... which is required at the time it is needed during creation of a transaction.\",\n                        \"Each role should normally provide a base implementation \",\n                        \"  ... of a delegate that can serve the role.\",\n                        \"Strategies, strategy-variants, or simple 'variants' are all similar ways \",\n                        \"  ... of indicating different named plugins that can serve a particular role.\",\n                        \"Variant-names are human-readable, while the actual code\",\n                        \"  ... behind each variant name are the strategies\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"supports well-typed role declarations and strategy-adding\",\n                        \"supports just-in-time strategy-selection using withDelegates() and txnMustGetDelegate()\",\n                        \"supports concrete resolution of existing role delegates\",\n                    ],\n                },\n            \"supports well-typed role declarations and strategy-adding\": {\n                purpose:\n                    \"for plugin implementers to have a clear picture of what to implement\",\n                details: [\n                    \"Each Capo class may declare a roles data structure.\",\n                    \"GOAL: The required type for each role must be matched when adding a plugin class serving a role\",\n                    \"A dApp using a Capo class can add strategy variants by subclassing\",\n                ],\n                mech: [\n                    \"Capo EXPECTS a synchronous getter for 'roles' to be defined\",\n                    \"Capo provides a default 'roles' having no specific roles (or maybe just minter - TBD)\",\n                    \"Subclasses can define their own get roles(), return a role-map-to-variant-map structure\",\n                ],\n                requires: [\n                    \"Each role uses a RoleVariants structure which can accept new variants\",\n                ],\n            },\n            \"supports just-in-time strategy-selection using withDelegates() and txnMustGetDelegate()\":\n                {\n                    purpose:\n                        \"enabling each transaction to select appropriate plugins for its contextual needs\",\n                    details: [\n                        \"When a transaction having an extensibility-point is being created,\",\n                        \"  ... it SHOULD require an explicit choice of the delegate to use in that role.\",\n                        \"When a mkTxnDoesThings method creates a new role-delegated UTxO, \",\n                        \"  ... it sets essential configuration details for the delegation \",\n                        \"  ... and it requires the transaction-context to have delegation details.\",\n                        \"The delegate contract, including its address and/or reference-script UTxO \",\n                        \"  ... and/or its parameters and its StellarContract class, MUST be captured \",\n                        \"  ... so that it can be easily resolved and used/referenced\",\n                        \"  .... during a later transaction whose UTxO-spending is governed by the delegate contract.\",\n                        \"When the delegate serving the role is selected, \",\n                        \"  ... that delegate will be manifested as a concrete pair of StellarContract subclass \",\n                        \"  ... and contract address.  The contract address MAY be pre-existing \",\n                        \"  ... or be instantiated as a result of the delegation details.\",\n                    ],\n                    mech: [\n                        \"withDelegates method starts a transaction with prepared delegate settings\",\n                        \"txnMustGetDelegate(tcx, role) method retrieves a configured delegate\",\n                        \"txnMustGetDelegate() will use a 'default' delegate\",\n                        \"If there is no delegate configured (or defaulted) for the needed role, txnMustGetDelegate throws a DelegateConfigNeeded error.\",\n                        \"If the strategy-configuration has any configuration problems, the DelegateConfigNeeded error contains an 'errors' object\",\n                    ],\n                },\n            \"Each role uses a RoleVariants structure which can accept new variants\":\n                {\n                    purpose:\n                        \"provides a type-safe container for adding strategy-variants to a role\",\n                    details: [\n                        \"Adding a strategy variant requires a human-readable name for the variant\",\n                        \"  ... and a reference to the StellarContract class implementing that variant.\",\n                        \"Each variant may indicate a type for its configuration data-structure\",\n                        \"  ... and may include a factory function accepting a data-structure of that type.\",\n                        \"TBD: base configuration type?  Capo txn-builders supporting utxo-creation can provide baseline details of the base type, \",\n                        \"  ... with additional strategy-specific details provided in the transaction-context.\",\n                        \"When adding strategies, existing variants cannot be removed or replaced.\",\n                    ],\n                    mech: [\n                        \"RoleVariants has type-parameters indicating the baseline types & interfaces for delegates in that role\",\n                        \"TODO: variants can augment the definedRoles object without removing or replacing any existing variant\",\n                    ],\n                    requires: [\n                        \"provides a Strategy type for binding a contract to a strategy-variant name\",\n                    ],\n                },\n            \"provides a Strategy type for binding a contract to a strategy-variant name\":\n                {\n                    purpose:\n                        \"has all the strategy-specific bindings between a variant and the contract delegate\",\n                    details: [\n                        \"When adding a contract as a delegate serving in a role, its name\",\n                        \"  ... and its Strategy binding creates the connection between the host contract (suite) \",\n                        \"  ... and the StellarContract subclass implementing the details of the strategy.\",\n                        \"The Strategy and its underlying contract are type-matched\",\n                        \"  ... with the interface needed by the Role.\",\n                        \"The Strategy is a well-typed structure supporting \",\n                        \"  ... any strategy-specific configuration details (script parameters)\",\n                        \"  ... and validation of script parameters\",\n                    ],\n                    mech: [\n                        \"Each strategy must reference a type-matched implementation class\",\n                        \"Each strategy may define scriptParams always used for that strategy\",\n                        \"Each strategy may defer the definition of other script-params to be defined when a specific delegation relationship is being created\",\n                        \"Each strategy must define a validateScriptParams(allScriptParams) function, returning an errors object if there are problems\",\n                        \"validateScriptParams() should return undefined if there are no problems\",\n                    ],\n                    requires: [\n                        \"supports concrete resolution of existing role delegates\",\n                    ],\n                },\n            \"supports concrete resolution of existing role delegates\": {\n                purpose:\n                    \"so that transactions involving delegated responsibilities can be executed\",\n                details: [\n                    \"When a transaction needs to involve a UTxO governed by a delegate contract\",\n                    \"   ... the need for that delegate contract is signalled through Capo callbacks \",\n                    \"   ... during the transaction-building process.\",\n                    \"Those callbacks contain key information, such as role-name, parameters, and address\",\n                    \"  ... needed in the collaboration to find the correct concrete delegate.\",\n                    \"Once the delegate is resolved to a configured StellarContract class, \",\n                    \"   ... its established transaction-building interface is triggered, \",\n                    \"   ... augmenting the transaction with the correct details, \",\n                    \"   ... and enabling the right on-chain behaviors / verifications\",\n                    \"The Strategy adapter is expected to return the proper delegate with its matching address.\",\n                ],\n                mech: [\n                    \"TODO: with an existing delegate, the selected strategy class MUST exactly match the known delegate-address\",\n                ],\n            },\n        });\n    }\n}\n","import {\n    Address,\n    AssetClass,\n    Value,\n} from \"@hyperionbt/helios\";\n\n\n//@ts-expect-error\nimport contract from \"./BasicMintDelegate.hl\";\nimport { Activity, StellarContract, configBase, isActivity } from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport { MultisigAuthorityPolicy, MultisigAuthorityScript } from \"../authority/MultisigAuthorityPolicy.js\";\n\ntype MintDelegateArgs = {\n    rev: bigint,\n    uut: AssetClass\n}\n\n//!!! TODO: include adapter(s) for Datum, which has the same essential shape\ntype MintDelegateDatumProps = {\n    tokenName: string,\n    maxMintSize: bigint\n}\n\nexport type MintDelegate<T> = StellarContract<any & T> & {\n    txnCreateTokenPolicy\n}\n\nexport class BasicMintDelegate extends StellarContract<MintDelegateArgs> {\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev }\n    }\n\n    contractSource() {\n        return contract;\n    }\n\n    getContractScriptParams(config: MintDelegateArgs): configBase {\n        return {\n            rev: config.rev\n        }\n    }\n    // importModules(): HeliosModuleSrc[] {\n    //     return [\n    //         ... super.importModules(),\n    //         // MultisigAuthorityScript\n    //     ]\n    // }\n\n    // // @Activity.redeemer\n    // protected x(tokenName: string): isActivity {\n    //     const t = new this.scriptProgram!.types.Redeemer.commissioningNewToken(\n    //         tokenName\n    //     );\n\n    //     return { redeemer: t._toUplcData() };\n    // }\n\n    @Activity.partialTxn\n    async txnCreatingTokenPolicy(\n        tcx: StellarTxnContext,\n        tokenName: string\n    ): Promise<StellarTxnContext> {\n\n        return tcx;\n    }\n\n    servesDelegationRole(role: string) {\n        if (\"mintingPolicy\" == role) return true;\n    }\n\n    static mkDelegateWithArgs(a: MintDelegateArgs) {\n\n    }\n}\n    \n","import {\n    NetworkParams,\n    SimpleWallet as WalletEmulator,\n    SimpleWallet\n} from \"@hyperionbt/helios\";\n\nimport { promises as fs } from \"fs\";\nimport { Vitest, vitest } from \"vitest\";\nimport {\n    StellarContract,\n    configBase,\n} from \"../StellarContract.js\";\nimport { StellarTestContext } from \"./StellarTestContext.js\";\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport ppParams from \"../../preprod.json\" assert { type: \"json\" }\n\nexport const preProdParams = ppParams\n\nexport type enhancedNetworkParams = NetworkParams & {\n    slotToTimestamp(n: bigint): Date;\n};\n\nexport type helperSubclass<\n    SC extends StellarContract<any>,\n    P extends configBase = SC extends StellarContract<infer PT> ? PT : never\n> = new (params: P & canHaveRandomSeed) => StellarTestHelper<SC, P>;\n\nexport type canHaveRandomSeed = {\n    randomSeed?: number;\n};\nexport type canSkipSetup = {\n    skipSetup?: true;\n};\n\nexport async function addTestContext<\n    SC extends StellarContract<any>,\n    P extends configBase = SC extends StellarContract<infer PT> ? PT : never\n>(\n    context: StellarTestContext<any, SC, P>,\n    TestHelperClass: helperSubclass<SC>,\n    params?: P\n) {\n    console.log(\" ======== ========= ======== +test context\");\n    Object.defineProperty(context, \"strella\", {\n        get: function () {\n            return this.h.strella;\n        },\n    });\n\n    context.initHelper = async (params) => {\n        //@ts-expect-error\n        const helper = new TestHelperClass(params);\n        if (context.h) {\n            if (!params.skipSetup)\n                throw new Error(\n                    `re-initializing shouldn't be necessary without skipSetup`\n                );\n            console.log(\n                \"   ............. reinitializing test helper without setup\"\n            );\n        }\n        context.h = helper;\n        // console.log(\"context IS \", context)\n        return helper;\n    };\n    try {\n        //@ts-expect-error\n        await context.initHelper(params);\n    } catch (e) {\n        if (!params) {\n            // console.error(e.stack || e.message || JSON.stringify(e));\n            console.error(\n                `${TestHelperClass.name}: error during initialization; does this test helper require initialization with explicit params?`\n            );\n            throw e;\n        } else {\n            console.error(\"urgh\");\n            throw e;\n        }\n    }\n}\n\nexport type actorMap = Record<string, WalletEmulator>;\n\nexport const ADA = 1_000_000n; // lovelace\n","import * as helios from \"@hyperionbt/helios\";\nimport {\n    Address,\n    Crypto,\n    NetworkEmulator,\n    NetworkParams,\n    Tx,\n    TxId,\n    TxOutput,\n    Value,\n    SimpleWallet,\n    SimpleWallet as WalletEmulator\n} from \"@hyperionbt/helios\";\nimport {\n    StellarContract,\n    findInputsInWallets,\n    configBase,\n    stellarSubclass\n} from \"../StellarContract.js\";\nimport {\n    lovelaceToAda, txAsString,\n    utxosAsString\n} from \"../diagnostics.js\";\nimport { actorMap, ADA, canHaveRandomSeed, canSkipSetup, preProdParams, enhancedNetworkParams } from \"./types.js\";\n\n\nexport abstract class StellarTestHelper<\n    SC extends StellarContract<any>,\n    CT extends configBase = SC extends StellarContract<infer iCT> ? iCT : never\n> {\n    state: Record<string, any>;\n    abstract get stellarClass(): stellarSubclass<SC, any>;\n    config?: CT;\n    defaultActor?: string;\n    strella!: SC;\n    actors: actorMap;\n    optimize = false;\n    liveSlotParams: NetworkParams;\n    networkParams: NetworkParams;\n    network: NetworkEmulator;\n    private actorName: string;\n\n    //@ts-ignore type mismatch in getter/setter until ts v5\n    get currentActor(): WalletEmulator {\n        return this.actors[this.actorName];\n    }\n    set currentActor(actorName: string) {\n        const thisActor = this.actors[actorName];\n        if (!thisActor)\n            throw new Error(\n                `setCurrentActor: invalid actor name '${actorName}'`\n            );\n        if (this.strella) this.strella.myActor = thisActor;\n        this.actorName = actorName;\n    }\n\n    address?: Address;\n\n    setupPending?: Promise<any>;\n    setupActors() {\n        console.warn(\n            `using 'hiro' as default actor because ${this.constructor.name} doesn't define setupActors()`\n        );\n        this.addActor(\"hiro\", 1863n * ADA);\n        this.currentActor = \"hiro\";\n    }\n\n    constructor(params?: CT & canHaveRandomSeed & canSkipSetup) {\n        this.state = {};\n        if (params) this.config = params;\n\n        const [theNetwork, emuParams] = this.mkNetwork();\n        this.liveSlotParams = emuParams;\n        this.network = theNetwork;\n        this.networkParams = new NetworkParams(preProdParams);\n\n        this.actors = {};\n        this.actorName = \"\"; //only to make typescript happy\n        this.setupActors();\n        if (!this.actorName)\n            throw new Error(\n                `${this.constructor.name} doesn't set currentActor in setupActors()`\n            );\n        const now = new Date();\n        this.waitUntil(now);\n        if (params?.skipSetup) {\n            console.log(\"test helper skipping setup\");\n            return;\n        }\n\n        //@ts-expect-error - can serve no-params case or params case\n        this.setupPending = this.initialize(params).then((p) => {\n            return p;\n        });\n    }\n\n    async initialize(params: CT & canHaveRandomSeed) {\n        const { randomSeed, ...p } = params;\n        if (this.setupPending) await this.setupPending;\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate setup() in test helper\"\n            );\n            return this.strella;\n        }\n        if (this.strella) {\n            console.warn(\n                \".... warning: new test helper setup with new seed....\"\n            );\n            this.rand = undefined;\n            this.randomSeed = randomSeed;\n        }\n\n        return this.initStellarClass();\n    }\n\n    initStellarClass() {\n        const TargetClass = this.stellarClass;\n\n        const strella = this.initStrella(TargetClass, this.config);\n\n        this.strella = strella;\n        this.address = strella.address;\n        return strella;\n    }\n\n    initStrella(TargetClass: stellarSubclass<SC, any>, config: any) {\n        return new TargetClass({\n            config,\n            setup: {\n                network: this.network,\n                myActor: this.currentActor, \n                networkParams: this.networkParams,\n                isTest: true,\n            }\n        });\n    }\n\n    //! it has a seed for mkRandomBytes, which must be set by caller\n    randomSeed?: number;\n    //! it makes a rand() function based on the randomSeed after first call to mkRandomBytes\n    rand?: () => number;\n\n    delay(ms) {\n        return new Promise((res) => setTimeout(res, ms));\n    }\n\n    async mkSeedUtxo(seedIndex: bigint = 0n) {\n        const { currentActor } = this;\n        const { network } = this;\n\n        const tx = new Tx();\n        const actorMoney = await currentActor.utxos;\n        console.log(\n            `${this.actorName} has money: \\n` + utxosAsString(actorMoney)\n        );\n\n        tx.addInput(\n            await findInputsInWallets(\n                new helios.Value(30n * ADA),\n                { wallets: [currentActor] },\n                network\n            )\n        );\n\n        tx.addOutput(new TxOutput(currentActor.address, new Value(10n * ADA)));\n        tx.addOutput(new TxOutput(currentActor.address, new Value(10n * ADA)));\n        let si = 2;\n        for (; si < seedIndex; si++) {\n            tx.addOutput(\n                new TxOutput(currentActor.address, new Value(10n * ADA))\n            );\n        }\n        const txId = await this.submitTx(tx, \"force\");\n\n        return txId;\n    }\n\n    async submitTx(tx: Tx, force?: \"force\"): Promise<TxId> {\n        const sendChangeToCurrentActor = this.currentActor.address;\n        const isAlreadyInitialized = !!this.strella;\n        try {\n            await tx.finalize(this.networkParams, sendChangeToCurrentActor);\n        } catch (e: any) {\n            throw new Error(e.message + \"\\nin tx: \" + txAsString(tx) + \"\\nprofile: \" + tx.profileReport\n            );\n        }\n        if (isAlreadyInitialized && !force) {\n            throw new Error(\n                `helper is already initialized; use the submitTx from the testing-context's 'strella' object instead`\n            );\n        }\n\n        console.log(\n            `Test helper ${force || \"\"} submitting tx${force && \"\" || \" prior to instantiateWithParams()\"}:\\n` +\n            txAsString(tx)\n            // new Error(`at stack`).stack\n        );\n\n        try {\n            const txId = await this.network.submitTx(tx);\n            console.log(\"test helper submitted direct txn:\" + txAsString(tx));\n            this.network.tick(1n);\n            // await this.delay(1000)\n            // debugger\n            // this.network.dump();\n            return txId;\n        } catch (e: any) {\n            console.error(`submit failed: ${e.message}\\n  ... in tx ${txAsString(tx)}`);\n            throw e;\n        }\n    }\n\n    mkRandomBytes(length: number): number[] {\n        if (!this.randomSeed)\n            throw new Error(\n                `test must set context.randomSeed for deterministic randomness in tests`\n            );\n        if (!this.rand) this.rand = Crypto.rand(this.randomSeed);\n\n        const bytes: number[] = [];\n        for (let i = 0; i < length; i++) {\n            bytes.push(Math.floor(this.rand() * 256));\n        }\n        return bytes;\n    }\n\n    addActor(roleName: string, walletBalance: bigint) {\n        if (this.actors[roleName])\n            throw new Error(`duplicate role name '${roleName}'`);\n        //! it instantiates a wallet with the indicated balance pre-set\n        const a = this.network.createWallet(walletBalance);\n        console.log(\n            `+🎭 Actor: ${roleName}: ${a.address\n                .toBech32()\n                .substring(0, 18)}… ${lovelaceToAda(\n                    walletBalance\n                )} (🔑#${a.address.pubKeyHash?.hex.substring(0, 8)}…)`\n        );\n\n        //! it makes collateral for each actor, above and beyond the initial balance,\n        //  ... so that the full balance is spendable and the actor can immediately\n        //  ... engage in smart-contract interactions.\n        this.network.tick(BigInt(2));\n        this.network.createUtxo(a, 5n * ADA);\n        this.network.tick(BigInt(1));\n\n        this.actors[roleName] = a;\n        return a;\n    }\n\n    mkNetwork(): [NetworkEmulator, enhancedNetworkParams] {\n        const theNetwork = new NetworkEmulator();\n\n        //@ts-expect-error with missing methods\n        const emuParams = theNetwork.initNetworkParams({\n            ...preProdParams,\n            raw: { ...preProdParams },\n        }) as enhancedNetworkParams;\n\n        // debugger\n        //@xxxts-expect-error\n        // emuParams.timeToSlot = function (t) {\n        //     const seconds = BigInt(t / 1000n);\n        //     return seconds;\n        // };\n        // emuParams.slotToTimestamp = this.slotToTimestamp;\n\n        return [theNetwork, emuParams];\n    }\n\n    slotToTimestamp(s: bigint) {\n        return this.networkParams.slotToTime(s);\n\n        const num = parseInt(BigInt.asIntN(52, s * 1000n).toString());\n        return new Date(num);\n    }\n\n    currentSlot() {\n        return this.liveSlotParams.liveSlot;\n    }\n\n    waitUntil(time: Date) {\n        const targetTimeMillis = BigInt(time.getTime());\n        // debugger\n        const targetSlot = this.networkParams.timeToSlot(targetTimeMillis);\n        const c = this.currentSlot();\n\n        const slotsToWait = targetSlot - ( c || 0n );\n        if (slotsToWait < 1) {\n            throw new Error(`the indicated time is not in the future`);\n        }\n        // console.warn(`waiting ${slotsToWait} slots -> ${time}`);\n        this.network.tick(slotsToWait);\n        return slotsToWait;\n    }\n}\n","import { TxId } from \"@hyperionbt/helios\";\nimport { expect } from \"vitest\";\nimport { Capo, CapoBaseConfig, anyDatumArgs } from \"../Capo.js\";\nimport { SeedTxnParams } from \"../SeedTxn.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport { PartialDefaultCharterDatumArgs } from \"../DefaultCapo.js\";\nimport { AuthorityPolicy } from \"../authority/AuthorityPolicy.js\";\nimport { selectDelegate } from \"../delegation/RolesAndDelegates.js\";\n\n\nexport abstract class CapoTestHelper<\n    SC extends Capo<any>,\n    CDT extends anyDatumArgs = \n        SC extends Capo<any, infer iCDT> ? iCDT : \n        anyDatumArgs\n    > extends StellarTestHelper<SC, CapoBaseConfig> {\n    async initialize({\n        randomSeed = 42, seedTxn, seedIndex = 0n,\n    }: { seedTxn?: TxId; seedIndex?: bigint; randomSeed?: number; } = {}): Promise<SC> {\n        if (this.setupPending) await this.setupPending;\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate setup() in test helper\"\n            );\n\n            return this.strella;\n        }\n        if (this.strella)\n            console.warn(\n                \".... warning: new test helper setup with new seed ...\"\n            );\n        this.randomSeed = randomSeed;\n        // console.log(new Error(\"setup from\").stack)\n        if (!seedTxn) {\n            seedTxn = await this.mkSeedUtxo(seedIndex);\n        }\n        const strella = this.initStrella(this.stellarClass, {\n            seedTxn,\n            seedIndex,\n        });\n        this.strella = strella;\n        const { address, mintingPolicyHash: mph } = strella;\n\n        const { name } = strella.scriptProgram!;\n        console.log(\n            name,\n            address.toBech32().substring(0, 18) + \"…\",\n            \"vHash 📜 \" +\n            strella.compiledScript.validatorHash.hex.substring(0, 12) +\n            \"…\",\n            \"mph 🏦 \" + mph?.hex.substring(0, 12) + \"…\"\n        );\n        return strella;\n    }\n\n    abstract mkDefaultCharterArgs() : Partial<CDT>;\n    \n    async mintCharterToken(args?: CDT): Promise<StellarTxnContext> {\n        const { delay } = this;\n        const { tina, tom, tracy } = this.actors;\n        \n        if (this.state.mintedCharterToken) {\n            console.warn(\n                \"reusing minted charter from existing testing-context\"\n            );\n            return this.state.mintedCharterToken;\n        }\n\n        await this.initialize();\n        const script = this.strella!;\n        const goodArgs: Partial<CDT> = args || this.mkDefaultCharterArgs();\n        \n        // debugger\n\n        const tcx = await script.mkTxnMintCharterToken(goodArgs, script.withDelegates({\n            govAuthority: selectDelegate<AuthorityPolicy>({\n                strategyName: \"address\",\n                config: {\n\n                }\n            })\n        }));\n        expect(script.network).toBe(this.network);\n\n        await script.submit(tcx);\n        console.log(\"charter token minted\");\n\n        this.network.tick(1n);\n        return (this.state.mintedCharterToken = tcx);\n    }\n\n}\n","import {\n    Address,\n    AssetClass,\n    MintingPolicyHash,\n    TxInput,\n    Value,\n} from \"@hyperionbt/helios\";\n\nimport { Activity, isActivity, StellarContract } from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { UutName } from \"../delegation/RolesAndDelegates.js\";\nimport { hasReqts } from \"../Requirements.js\";\n\nexport type AuthorityPolicySettings = {\n    rev: bigint;\n    uut: AssetClass;\n    reqdAddress?: Address;\n    addrHint: Address[];\n};\n\n//! an interface & base class to enforce policy for authorizing activities\n//  ... in service to some other contract.  The other contract is EXPECTED\n//  ... to hold a reference to key information for identifying this policy,\n//  ... e.g. through a DelegateDetails structure.\nexport abstract class AuthorityPolicy<\n    T extends AuthorityPolicySettings = AuthorityPolicySettings\n> extends StellarContract<T> {\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev };\n    }\n\n    // // @Activity.redeemer\n    // protected x(tokenName: string): isActivity {\n    //     const t =\n    //         new this.scriptProgram.types.Redeemer.commissioningNewToken(\n    //             tokenName\n    //         );\n\n    //     return { redeemer: t._toUplcData() };\n    // }\n\n    //! it has a lifecycle method coordinating authority-creation in abstract way\n    async txnCreatingAuthority(\n        tcx: StellarTxnContext,\n        tokenId: AssetClass,\n        delegateAddr: Address\n    ): Promise<StellarTxnContext> {\n        const fp = tokenId.toFingerprint();\n        debugger;\n\n        throw new Error(`todo`);\n        return tcx;\n    }\n\n    //! allows different strategies for finding the UTxO having the authority token\n    //! impls MUST consult their configIn to see the 'uut' (an AssetClass) authority token.\n    //! impls MUST a specific UTxO having that token,\n    //  ... or throw an informative error\n    //! impls MAY consult the addrHint or reqdAddr settings in configIn\n    //! impls MAY use details seen in the txn context\n    abstract txnMustFindAuthorityToken(\n        tcx: StellarTxnContext\n    ): Promise<TxInput>;\n\n    //! creates a UTxO depositing the indicated token-name into the delegated destination.\n    //! Each implemented subclass can use it's own style to match its strategy & mechanism.\n    //! This is used both for the original deposit and for returning the token during a grant-of-authority\n    //! impls should normally preserve the datum from an already-present sourceUtxo\n    abstract txnReceiveAuthorityToken(\n        tcx: StellarTxnContext,\n        delegateAddr: Address\n    ): Promise<StellarTxnContext>;\n\n    //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer.\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    //! Other contracts needing the authority within a transaction can rely on the presence of this spent authority.\n    //! impls can EXPECT the token will be returned via txnReceiveAuthorityToken\n    //! a contract-backed impl SHOULD enforce the expected return in its on-chain code\n    abstract txnGrantAuthority(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext>;\n\n    //! Adds the indicated utxo to the transaction with appropriate activity/redeemer\n    //  ... allowing the token to be burned by the minting policy.\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    //! When backed by a contract,\n    //! ... it should ensure any other UTXOs it may also hold\n    //   ... do not become inaccessible as a result.\n    //! When backed by a contract, it should use an activity/redeemer\n    //  ... allowing the token to be spent and not returned.\n    //! It MAY enforce additional requirements and/or block the action.\n    abstract txnRetireCred(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext>;\n\n    // static mkDelegateWithArgs(a: RCPolicyArgs) {\n    //\n    // }\n    authorityPolicyRequirements() {\n        return hasReqts({\n            \"provides an interface for providing arms-length proof of authority to any other contract\":\n                {\n                    purpose:\n                        \"to decouple authority administration from its effects\",\n                    details: [\n                        \"Any contract can create a UUT for use with an authority policy.\",\n                        \"By depositing that UUT to the authority contract, it can delegate completely\",\n                        \"  ... all the implementation details for administration of the authority itself.\",\n                        \"It can then focus on implementing the effects of authority, requiring only \",\n                        \"  ... that the correct UUT has been spent, to indicate that the authority is granted.\",\n                        \"The authority contract can have its own internal details \",\n                        \"A subclass of this authority policy may provide additional administrative dynamics.\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"implementations SHOULD positively govern spend of the UUT\",\n                        \"implementations MUST provide an essential interface for transaction-building\",\n                    ],\n                },\n\n            \"implementations SHOULD positively govern spend of the UUT\": {\n                purpose: \"for sufficient assurance of desirable safeguards\",\n                details: [\n                    \"A subclass of the GenericAuthority should take care of guarding the UUT's spend\",\n                    \"  ... in whatever way is appropriate for its use-case\",\n                ],\n                mech: [],\n                requires: [],\n            },\n\n            \"implementations MUST provide an essential interface for transaction-building\":\n                {\n                    purpose:\n                        \"enabling a strategy-agnostic interface for making transactions using any supported strategy-variant\",\n                    details: [\n                        \"Subclasses MUST implement the interface methods\",\n                        \"  ... in whatever way is considered appropriate for its use-case.\",\n                        \"An interface method whose requirement is marked with 'MAY/SHOULD' behavior, \",\n                        \"  ... MUST still implement the method satisfying the interface, \",\n                        \"  ... but MAY throw an UnsupportedAction error, to indicate that\",\n                        \"  ... the strategy variant has no meaningful action to perform \",\n                        \"  ... that would serve the method's purpose\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"requires a txnReceiveAuthorityToken(tcx, delegateAddr, fromFoundUtxo?)\",\n                        \"requires a mustFindAuthorityToken(tcx)\",\n                        \"requires a txnGrantAuthority(tcx, delegateAddr, fromFoundUtxo)\",\n                        \"requires txnRetireCred(tcx, fromFoundUtxo)\",\n                    ],\n                },\n\n            \"requires a txnReceiveAuthorityToken(tcx, delegateAddr, fromFoundUtxo?)\":\n                {\n                    purpose:\n                        \"to deposit the authority token (back) to the delegated destination\",\n                    details: [\n                        \"impls MUST implement txnReceiveAuthorityToken\",\n                        \"Each implemented subclass can use it's own style to match its strategy & mechanism\",\n                        \"This is used both for the original deposit and for returning the token during a grant-of-authority\",\n                    ],\n                    mech: [\n                        \"impls MUST create a UTxO depositing the indicated token-name into the delegated destination.\",\n                        \"impls should normally preserve the datum from an already-present sourceUtxo\",\n                    ],\n                    requires: [],\n                },\n\n            \"requires a mustFindAuthorityToken(tcx)\": {\n                purpose: \"to locate the given authority token\",\n                details: [\n                    \"allows different strategies for finding the UTxO having the authority token\",\n                    \"impls MAY use details seen in the txn context to find the indicated token\",\n                ],\n                mech: [\n                    \"impls MUST resolve the indicated token to a specific UTxO or throw an informative error\",\n                ],\n            },\n\n            \"requires a txnGrantAuthority(tcx, delegateAddr, fromFoundUtxo)\": {\n                purpose: \"to use the delegated authority\",\n                details: [\n                    \"Adds the indicated utxo to the transaction with appropriate activity/redeemer\",\n                    \"Contracts needing the authority within a transaction can rely on the presence of this spent authority\",\n                    \"Impls can EXPECT the token will be returned via txnReceiveAuthorityToken\",\n                    \"a contract-backed impl SHOULD enforce the expected return in its on-chain code\",\n                ],\n                mech: [\n                    \"the base AuthorityPolicy MUST call txnReceiveAuthorityToken() with the token's sourceUtxo\",\n                ],\n            },\n\n            \"requires txnRetireCred(tcx, fromFoundUtxo)\": {\n                purpose: \"to allow burning the authority token\",\n                details: [\n                    \"Adds the indicated utxo to the transaction with appropriate activity/redeemer\",\n                    \"  ... allowing the token to be burned by the minting policy.\",\n                    \"Impls SHOULD ensure any other UTXOs it may hold do not become inaccessible as a result\",\n                ],\n                mech: [\n                    \"impls MUST add the token to the txn if it can be retired\",\n                    \"if the token cannot be retired, by appropriate policy, it SHOULD throw an informative error\",\n                ],\n            },\n        });\n    }\n}\n","import {\n    Address,\n    AssetClass,\n    Assets,\n    TxInput,\n    TxOutput,\n    Value,\n} from \"@hyperionbt/helios\";\nimport { SeedTxnParams } from \"../SeedTxn.js\";\nimport {\n    Activity,\n    StellarContract,\n    isActivity,\n    partialTxn,\n} from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { AuthorityPolicy } from \"./AuthorityPolicy.js\";\n\nexport class AddressAuthorityPolicy extends AuthorityPolicy {\n    loadProgramScript(params) {\n        return null\n    }\n    @Activity.redeemer\n    protected usingAuthority(): isActivity {\n        const r = this.scriptProgram?.types.Redeemer;\n        const { usingAuthority } = r;\n        if (!usingAuthority) {\n            throw new Error(\n                `invalid contract without a usingAuthority redeemer`\n            );\n        }\n        const t = new usingAuthority();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    //! impls MUST resolve the indicated token to a specific UTxO\n    //  ... or throw an informative error\n    async txnMustFindAuthorityToken(tcx): Promise<TxInput> {\n        const {uut, addrHint} = this.configIn;\n        const v = this.mkAssetValue(uut);\n        debugger\n        return this.mustFindActorUtxo(\n            `authority-token(address strat)`,\n            this.mkTokenPredicate(v),\n            tcx,\n            \"are you connected to the right wallet address? \"+\n                (addrHint?.length ? \n                    \"  maybe at:\\n    \" +addrHint.join(\"\\n or \")\n                    : \"\"\n                )\n        );\n    }\n\n    //! creates a UTxO depositing the indicated token-name into the delegated destination.\n    async txnReceiveAuthorityToken(\n        tcx: StellarTxnContext,\n        delegateAddr: Address,\n    ): Promise<StellarTxnContext> {\n        const {uut} = this.configIn\n        const v = this.mkAssetValue(uut, 1);\n        const output = new TxOutput(delegateAddr, v);\n        output.correctLovelace(this.networkParams);\n        tcx.addOutput(output);\n\n        return tcx;\n    }\n\n    //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    async txnGrantAuthority(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput,\n    ): Promise<StellarTxnContext> {\n        //! no need to specify a redeemer\n        return tcx.addInput(fromFoundUtxo);\n    }\n\n    //! Adds the indicated utxo to the transaction with appropriate activity/redeemer\n    //  ... allowing the token to be burned by the minting policy.\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    async txnRetireCred(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput,\n    ): Promise<StellarTxnContext> {\n        //! no need to specify a redeemer\n        return tcx.addInput(fromFoundUtxo);\n    }\n}\n","import { Address, AssetClass, TxInput, Value } from \"@hyperionbt/helios\"\n\n//@ts-expect-error\nimport contract from \"./MultisigAuthorityPolicy.hl\";\nexport const MultisigAuthorityScript = contract;\n\nimport { Activity, isActivity, StellarContract } from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { AuthorityPolicy } from \"./AuthorityPolicy.js\";\nimport { hasReqts } from \"../Requirements.js\";\n\n//! a contract enforcing policy for a registered credential\nexport class MultisigAuthorityPolicy extends AuthorityPolicy {\n    static currentRev = 1n\n    static get defaultParams() {\n        return { rev: this.currentRev }\n    }\n    contractSource() {\n        return contract\n    }\n\n    // // @Activity.redeemer\n    // protected x(tokenName: string): isActivity {\n    //     const t =\n    //         new this.scriptProgram.types.Redeemer.commissioningNewToken(\n    //             tokenName\n    //         )\n\n    //     return { redeemer: t._toUplcData() }\n    // }\n\n    // @Activity.partialTxn\n    // async txnFresheningCredInfo(\n    //     tcx: StellarTxnContext,\n    //     tokenName: string\n    // ): Promise<StellarTxnContext> {\n    //     return tcx\n    // }\n\n    // ! impls MUST resolve the indicated token to a specific UTxO\n    //  ... or throw an informative error\n    async txnMustFindAuthorityToken(tcx: StellarTxnContext) : Promise<TxInput> {\n        const {\n            addrHint, uut, reqdAddress\n        } = this.configIn\n        return this.mustFindMyUtxo(\"authorityToken\", this.mkTokenPredicate(uut))\n    }\n\n    async txnReceiveAuthorityToken(\n        tcx : StellarTxnContext, \n        delegateAddr: Address,\n    ) : Promise<StellarTxnContext> {\n        throw new Error(`implementation TODO`)\n        return tcx;\n    }\n\n    //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer\n    async txnGrantAuthority(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput,\n    ): Promise<StellarTxnContext> {\n\n        return tcx;\n    }\n\n    //! Adds the indicated utxo to the transaction with appropriate activity/redeemer\n    //  ... allowing the token to be burned by the minting policy.\n    async txnRetireCred(\n        tcx : StellarTxnContext, \n        fromFoundUtxo: TxInput,\n    ): Promise<StellarTxnContext> {\n\n        return tcx;\n    }\n\n    requirements()  {\n        return hasReqts({\n            \"provides arms-length proof of authority to any other contract\": {\n                purpose: \"to decouple authority administration from its effects\",\n                details: [\n                    \"See GenericAuthority for more background on authority delegation.\",\n                    \"This policy uses a trustee list and minSigs threshold to provide multisig-based authority\",\n                ],\n                mech: [],\n                requires: [\n                    \"positively governs spend of the UUT\",\n                    \"the trustee threshold is required to spend its UUT\",\n                    \"the trustee group can be changed\",\n                ],\n            },\n            \"positively governs spend of the UUT\": {\n                purpose: \"to maintain clear control by a trustee group\",\n                details: [\n                    // descriptive details of the requirement (not the tech):\n                    \"a trustee group is defined during contract creation\",\n                    \"the trustee list's signatures provide consent\",\n                    \"the trustee group can evolve by consent of the trustee group\",\n                    \"a threshold set of the trustee group can give consent for the whole group\",\n                ],\n                mech: [\n                    // descriptive details of the chosen mechanisms for implementing the reqts:\n                    \"the UUT has a trustee list in its Datum structure\",\n                    \"the UUT has a threshold setting in its Datum structure\",\n                    \"the Settings datum is updated when needed to reflect new trustees/thresholds\",\n                ],\n                requires: [\n                    \"TODO: has a unique authority UUT\",\n                    \"TODO: the trustee threshold is required to spend its UUT\",\n                    \"TODO: the trustee group can be changed\",\n                ],\n            },\n            \"TODO: has a unique authority UUT\": hasReqts.TODO,\n            \"TODO: the trustee threshold is required to spend its UUT\": hasReqts.TODO,\n            \"TODO: the trustee group can be changed\": hasReqts.TODO,\n\n            \"the trustee threshold is required to spend its UUT\": {\n                purpose:\n                    \"allows progress in case a small fraction of trustees may not be available\",\n                details: [\n                    \"A group can indicate how many of the trustees are required to provide their explicit approval\",\n                    \"If a small number of trustees lose their keys, this allows the remaining trustees to directly regroup\",\n                    \"For example, they can replace the trustee list with a new set of trustees and a new approval threshold\",\n                    \"Normal day-to-day administrative activities can also be conducted while a small number of trustees are on vacation or otherwise temporarily unavailable\",\n                ],\n                mech: [\n                    \"TODO: doesn't allow the UUT to be spent without enough minSigs from the trustee list\",\n                ],\n                requires: [],\n            },\n\n            \"the trustee group can be changed\": {\n                purpose: \"to ensure administrative continuity for the group\",\n                details: [\n                    \"When the needed threshold for administrative modifications is achieved, the Settings datum can be updated\",\n                    \"When changing trustees, it should guard against mistakes in the new trustee list, \",\n                    \"  ... by validating signatures of the new trustees\",\n                    \"  ... and by validating new minSigs\"\n                ],\n                mech: [\n                    \"TODO: trustee list can be changed if the signature threshold is met\",\n                    \"TODO: the new trustees must sign any change of trustees\",\n                    \"TODO: does not allow minSigs to exceed the number of trustees\",\n                ],\n                requires: [],\n            },\n\n        })\n    }\n}\n","import {\n    Address,\n    Program,\n    Tx,\n    UplcProgram,\n    TxOutput,\n    Value,\n    //@ts-expect-error\n    Option,\n    Datum,\n    Wallet,\n    TxInput,\n    DatumHash,\n    ByteArray,\n    Assets,\n    TxId,\n    UplcData,\n    Signature,\n    AssetClass,\n} from \"@hyperionbt/helios\";\n\nimport {\n    Activity,\n    configBase,\n    ConfigFor,\n    datum,\n    isActivity,\n    partialTxn,\n    StellarContract,\n    txn,\n} from \"./StellarContract.js\";\nimport { InlineDatum } from \"./HeliosPromotedTypes.js\";\n\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\n\n//@ts-expect-error\nimport contract from \"./DefaultCapo.hl\";\nimport { Capo, CapoBaseConfig, hasSelectedDelegates } from \"./Capo.js\";\nimport { DefaultMinter } from \"./DefaultMinter.js\";\nimport {\n    ErrorMap,\n    PARAM_IMPLIED,\n    RelativeDelegateLink,\n    RoleMap,\n    strategyValidation,\n    variantMap,\n    VariantMap,\n} from \"./delegation/RolesAndDelegates.js\";\nimport { BasicMintDelegate } from \"./delegation/BasicMintDelegate.js\";\nimport {\n    AuthorityPolicy,\n    AuthorityPolicySettings,\n} from \"./authority/AuthorityPolicy.js\";\nimport { AddressAuthorityPolicy } from \"./authority/AddressAuthorityPolicy.js\";\nimport { DelegateDetailSnapshot } from \"./delegation/RolesAndDelegates.js\";\nimport { txAsString } from \"./diagnostics.js\";\nimport { MultisigAuthorityPolicy } from \"./authority/MultisigAuthorityPolicy.js\";\nimport { hasReqts } from \"./Requirements.js\";\n\n/**\n * Schema for Charter Datum, which allows state to be stored in the Leader contract\n * together with it's primary or \"charter\" utxo.\n *\n * @typeParam CT - allows type-safe partial-`config`uration details for the charter's authority-delegate\n *    to be to be stored within the datum.\n **/\nexport type DefaultCharterDatumArgs<CT extends configBase = CapoBaseConfig> = {\n    govAuthorityLink: RelativeDelegateLink<CT>;\n};\n\nexport type PartialDefaultCharterDatumArgs<\n    T extends DefaultCharterDatumArgs<any> = DefaultCharterDatumArgs,\n    CT extends configBase = T extends DefaultCharterDatumArgs<infer iCT>\n        ? iCT\n        : never\n> = Partial<Omit<T, \"govAuthorityLink\">> & {\n    govAuthorityLink: Required<Pick<RelativeDelegateLink<CT>, \"strategyName\">> &\n        Partial<RelativeDelegateLink<CT>>;\n    // Partial<Omit<T[\"govAuthorityLink\"], \"strategyName\">>\n};\n\nexport type HeldAssetsArgs = {\n    purposeId?: string;\n    purpose?: string;\n};\n\n/**\n * Base class for leader contracts, with predefined roles for delegating governance authority and minting policies\n * @remarks\n * \n *  * A Capo contract provides a central contract address that can act as a treasury or data registry;\n * it can mint tokens using its connected minting-policy, and it can delegate policies to other contract \n * scripts.  Subclasses of Capo can use these capabilities in custom ways for strong flexibility.\n\n * Subclass and customize DefaultCapo's type-parameters if you need to customize further.\n * \n * Any Capo contract can (and must) define roles() to establish collaborating scripts; these are used for \n * separating granular responsbilities for different functional purposes within your (on-chain and off-chain) \n * application; this approach enables delegates to use any one of multiple strategies with different\n * functional logic to serve in any given role, thus providing flexibility and extensibility.\n *\n * DefaultCapo provides roles for govAuthority and mintDelegate, and methods to facilitate \n * the lifecycle of charter creation & update. \n * \n * **Example: Multisig authority delegation** - a Capo contract would get much more complicated if it \n * contained multisig logic.  Instead, the governance authority for the Capo can be delegated to a \n * standalone multi-sig contract, which can contain all (and only) the multi-sig logic.  Separating the \n * responsibilities makes each part simpler, easing the process of ensuring each part is doing its job \n * perfectly :pray:\n * \n * A Capo subclass can decorate an existing entry from `super.roles()` with additional strategy entries, or can add \n * extra roles useful in the operation of its application.\n * \n * The Capo base class provides utilities for creating and using UUT's, or **unique utility tokens**, \n * which are non-fungible assets that can form a positive linkage between the Capo (which should \n * normally retain a reference to that UUT) and any delegate; that delegate is most commonly another \n * contract script also referenced within the roles() definition, with a selected strategy.  \n * \n * Architecturally, UUTs provide a simple and unique handle for the Capo to use as a  **required transaction element** \n * in key operational activities (like updating the charter details); so that the delegate holding the UUT is entrusted to\n * approved the UUT's inclusion in a transaction, with all the policy-enforcement implicated on the other end of the \n * delegation.\n * \n * \n * See the {@link Capo | Capo base class} and {@link StellarContract} for addition context.\n * @public\n */\n\nexport class DefaultCapo<\n    MinterType extends DefaultMinter = DefaultMinter,\n    CDT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs,\n    configType extends CapoBaseConfig = CapoBaseConfig\n> extends Capo<MinterType, CDT, configType> {\n    contractSource() {\n        return contract;\n    }\n\n    // // @Activity.redeemer\n    // updatingCharter() : isActivity {\n    //     return this.updatingDefaultCharter()\n    // }\n    get roles(): RoleMap {\n        return {\n            govAuthority: variantMap<AuthorityPolicy>({\n                address: {\n                    delegateClass: AddressAuthorityPolicy,\n                    partialConfig: {\n                        uut: PARAM_IMPLIED,\n                    },\n                    validateConfig(args): strategyValidation {\n                        const { rev, uut } = args;\n                        const errors: ErrorMap = {};\n                        if (!rev) errors.rev = [\"required\"];\n                        if (!uut) errors.uut = [\"required\"];\n                        if (Object.keys(errors).length > 0) return errors;\n\n                        return undefined;\n                    },\n                },\n                multisig: {\n                    delegateClass: MultisigAuthorityPolicy,\n                    partialConfig: {\n                        uut: PARAM_IMPLIED,\n                    },\n                    validateConfig(args): strategyValidation {\n                        const { rev, uut } = args;\n                        const errors: ErrorMap = {};\n                        if (!rev) errors.rev = [\"required\"];\n                        if (!uut) errors.uut = [\"required\"];\n                        if (Object.keys(errors).length > 0) return errors;\n\n                        return undefined;\n                    },\n                },\n            }),\n            mintDelegate: variantMap<BasicMintDelegate>({\n                default: {\n                    delegateClass: BasicMintDelegate,\n                    partialConfig: {},\n                    validateConfig(args): strategyValidation {\n                        return undefined;\n                    },\n                },\n            }),\n        };\n    }\n\n    @datum\n    mkDatumCharterToken(args: CDT): InlineDatum {\n        //!!! todo: make it possible to type these datum helpers more strongly\n\n        console.log(\"--> mkDatumCharter\", args);\n        const {\n            Datum: { CharterToken: hlCharterToken },\n            RelativeDelegateLink: hlRelativeDelegateLink,\n        } = this.scriptProgram!.types;\n        let {\n            uutName,\n            strategyName,\n            reqdAddress: canRequireAddr,\n            addressesHint = [],\n        } = args.govAuthorityLink;\n\n        const OptAddr = Option(Address);\n        const needsAddr = new OptAddr(canRequireAddr);\n\n        const t = new hlCharterToken(\n            new hlRelativeDelegateLink(\n                uutName,\n                strategyName,\n                needsAddr,\n                addressesHint\n            )\n        );\n        return Datum.inline(t._toUplcData());\n    }\n\n    async txnAddCharterAuthz(tcx: StellarTxnContext, datum: InlineDatum) {\n        const charterDatum = await this.readDatum<\n            DefaultCharterDatumArgs<AuthorityPolicySettings>\n        >(\"CharterToken\", datum);\n\n        console.log(\"add charter authz\", charterDatum);\n        const { strategyName, uutName, addressesHint, reqdAddress } =\n            charterDatum.govAuthorityLink;\n        debugger;\n        const authZor = await this.connectDelegateWith<AuthorityPolicy>(\n            \"govAuthority\",\n            charterDatum.govAuthorityLink\n        );\n        const authZorUtxo = await authZor.txnMustFindAuthorityToken(tcx);\n        authZor.txnGrantAuthority(tcx, authZorUtxo);\n        return tcx;\n    }\n\n    // getMinterParams() {\n    //     const { seedTxn, seedIdx } = this.configIn\n    //     return { seedTxn, seedIdx }\n    // }\n\n    @txn\n    //@ts-expect-error - typescript can't seem to understand that\n    //    <Type> - govAuthorityLink + govAuthorityLink is <Type> again\n    async mkTxnMintCharterToken(\n        charterDatumArgs: PartialDefaultCharterDatumArgs<CDT>,\n        existingTcx?: hasSelectedDelegates\n    ): Promise<StellarTxnContext | never> {\n        console.log(\n            `minting charter from seed ${this.configIn.seedTxn.hex.substring(\n                0,\n                12\n            )}…@${this.configIn.seedIndex}`\n        );\n        const { strategyName } = charterDatumArgs.govAuthorityLink;\n\n        const initialTcx = existingTcx || this.withDelegates({});\n        return this.mustGetContractSeedUtxo().then(async (seedUtxo) => {\n            const tcx = await this.minter!.txnWithUuts(\n                initialTcx,\n                [\"authZor\"],\n                seedUtxo,\n                \"govAuthority\"\n            );\n\n            // console.log(\"-> B\", txAsString(tcx.tx));\n            const { authZor } = tcx.state.uuts;\n            const delegateParams = this.txnGetSelectedDelegateConfig(\n                tcx,\n                \"govAuthority\"\n            );\n\n            // debugger\n            const govAuthorityConfig = this.txnMustConfigureSelectedDelegate<\n                AuthorityPolicy,\n                \"govAuthority\"\n            >(tcx, \"govAuthority\" as const);\n\n            const govAuthorityLink = {\n                strategyName,\n                uutName: authZor.name,\n            };\n            //@ts-expect-error - typescript can't seem to understand that\n            //    <Type> - govAuthorityLink + govAuthorityLink is <Type> again\n            const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n                ...charterDatumArgs,\n                govAuthorityLink,\n            };\n            const datum = this.mkDatumCharterToken(fullCharterArgs);\n\n            const output = new TxOutput(this.address, this.tvCharter(), datum);\n            output.correctLovelace(this.networkParams);\n\n            tcx.addInput(seedUtxo);\n            tcx.addOutputs([output]);\n\n            console.log(\n                \" ---------------- CHARTER MINT ---------------------\\n\",\n                txAsString(tcx.tx)\n            );\n            // debugger\n\n            return this.minter!.txnMintingCharter(tcx, {\n                owner: this.address,\n                authZor,\n            });\n        });\n    }\n\n    @Activity.redeemer\n    updatingCharter(): // args: CDT\n    isActivity {\n        const { RelativeDelegateLink: hlRelativeDelegateLink, Redeemer } =\n            this.scriptProgram!.types;\n        // let {uut, strategyName, reqdAddress: canRequireAddr, addressesHint=[]} = args.govAuthority\n\n        // // const {Option} = this.scriptProgram.types;\n        // debugger\n        // const OptAddr = Option(Address);\n        // const needsAddr = new OptAddr(canRequireAddr);\n\n        const t = new Redeemer.updatingCharter();\n        // args.govDelegate,\n        // new hlRelativeDelegateLink(uut, strategyName, needsAddr, addressesHint)\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    @txn\n    async mkTxnUpdateCharter(\n        args: CDT,\n        tcx: StellarTxnContext = new StellarTxnContext()\n    ): Promise<StellarTxnContext> {\n        return this.txnUpdateCharterUtxo(\n            tcx,\n            this.updatingCharter(),\n            this.mkDatumCharterToken(args)\n        );\n    }\n\n    requirements() {\n        return hasReqts({\n            \"positively governs all administrative actions\": {\n                purpose: \"to maintain clear control by a trustee group\",\n                details: [\n                    // descriptive details of the requirement (not the tech):\n                    \"a trustee group is defined during contract creation\",\n                    \"the trustee list's signatures provide consent\",\n                    \"the trustee group can evolve by consent of the trustee group\",\n                    \"a threshold set of the trustee group can give consent for the whole group\",\n                ],\n                mech: [\n                    // descriptive details of the chosen mechanisms for implementing the reqts:\n                    \"uses a 'charter' token specialized for this contract\",\n                    \"the charter token has a trustee list in its Datum structure\",\n                    \"the charter token has a threshold setting in its Datum structure\",\n                    \"the charter Datum is updated when needed to reflect new trustees/thresholds\",\n                ],\n                requires: [\n                    \"has a unique, permanent charter token\",\n                    \"has a unique, permanent treasury address\",\n                    \"the trustee threshold is enforced on all administrative actions\",\n                    \"the trustee group can be changed\",\n                    \"the charter token is always kept in the contract\",\n                    \"can mint other tokens, on the authority of the Charter token\",\n                ],\n            },\n\n            \"has a singleton minting policy\": {\n                purpose: \"to mint various tokens authorized by the treasury\",\n                details: [\n                    \"A chosen minting script is bound deterministically to the contract constellation\",\n                    \"Its inaugural (aka 'initial Charter' or 'Charter Mint') transaction creates a charter token\",\n                    \"The minting script can issue further tokens approved by Treasury Trustees\",\n                    \"The minting script does not need to concern itself with details of Treasury Trustee approval\",\n                ],\n                mech: [\n                    \"has an initial UTxO chosen arbitrarily, and that UTxO is consumed during initial Charter\",\n                    \"makes a different address depending on (txId, outputIndex) parameters of the Minting script\",\n                ],\n                requires: [],\n            },\n\n            \"has a unique, permanent treasury address\": {\n                purpose: \"to give continuity for its stakeholders\",\n                details: [\n                    \"One-time creation is ensured by UTxO's unique-spendability property\",\n                    \"Determinism is transferred from the charter utxo to the MPH and to the treasury address\",\n                ],\n                mech: [\n                    \"uses the Minting Policy Hash as the sole parameter for the treasury spending script\",\n                ],\n                requires: [\"has a singleton minting policy\"],\n            },\n\n            \"has a unique, permanent charter token\": {\n                purpose:\n                    \"to guarantee permanent identity of a token constraining administrative actions\",\n                details: [\n                    \"a charter token is uniquely created when bootstrapping the constellation contract\",\n                    \"the charter token can't ever be recreated (it's non-fungible and can't be re-minted)\",\n                    \"the treasury address, minting policy hash, and charter token are all deterministic based on input utxo\",\n                ],\n                impl: \"txnMintCharterToken()\",\n                mech: [\n                    \"creates a unique 'charter' token, with assetId determined from minting-policy-hash+'charter'\",\n                    \"TODO: fails if minSigs is longer than trustee list\",\n                    \"doesn't work with a different spent utxo\",\n                ],\n                requires: [\n                    \"has a singleton minting policy\",\n                    \"the charter token is always kept in the contract\",\n                ],\n            },\n\n            \"the charter token is always kept in the contract\": {\n                purpose:\n                    \"so that the treasury contract is always in control of administrative changes\",\n                details: [\n                    \"The charter token's spendability' is used as a signal of administrative authority for transactions wanting proof of authority\",\n                    \"... thus, other scripts don't need to express any of the authority policy, but can simply verify the token's presence in the txn\",\n                    \"It shouldn't ever be possible to interfere with its spendability, e.g. by bundling it in an inconvenient way with other assets\",\n                    \"By enforcing that the charter token is always returned to the contract, \",\n                    \"... it has assurance of continuing ability to govern the next activity using that token\",\n                    \"Note: the charter mint can bind with any contract having suitable assurances, \",\n                    \"... but we only focus on the case of binding to this treasury contract\",\n                ],\n                mech: [\n                    \"builds transactions with the charter token returned to the contract\",\n                    \"fails to spend the charter token if it's not returned to the contract\",\n                    \"TODO: keeps the charter token separate from other assets in the contract\",\n                ],\n                requires: [],\n            },\n\n            \"can mint other tokens, on the authority of the Charter token\": {\n                purpose:\n                    \"to simplify the logic of minting, while being sure of minting authority\",\n                details: [\n                    \"the minting policy doesn't have to directly enforce the trustee-list policy\",\n                    \"instead, it delegates that to the treasury spending script, \",\n                    \"... and simply requires that the charter token is used for minting anything else\",\n                ],\n                mech: [\n                    \"can build transactions that mint non-'charter' tokens\",\n                    \"requires the charter-token to be spent as proof of authority\",\n                    \"fails if the charter-token is not returned to the treasury\",\n                    \"fails if the charter-token parameters are modified\",\n                ],\n            },\n\n            \"the trustee group can be changed\": {\n                purpose: \"to ensure administrative continuity for the group\",\n                details: [\n                    \"When the needed threshold for administrative modifications is achieved, the Charter Datum can be updated\",\n                    \"This type of administrative action should be explicit and separate from any other administrative activity\",\n                    \"If the CharterToken's Datum is being changed, no other redeemer activities are allowed\",\n                ],\n                mech: [\n                    \"requires the existing threshold of existing trustees to be met\",\n                    \"requires all of the new trustees to sign the transaction\",\n                    \"does not allow minSigs to exceed the number of trustees\",\n                ],\n                requires: [\n                    \"the trustee threshold is enforced on all administrative actions\",\n                ],\n            },\n\n            \"the trustee threshold is enforced on all administrative actions\": {\n                purpose:\n                    \"allows progress in case a small fraction of trustees may not be available\",\n                details: [\n                    \"A group can indicate how many of the trustees are required to provide their explicit approval\",\n                    \"If a small number of trustees lose their keys, this allows the remaining trustees to directly regroup\",\n                    \"For example, they can replace the trustee list with a new set of trustees and a new approval threshold\",\n                    \"Normal day-to-day administrative activities can also be conducted while a small number of trustees are on vacation or otherwise temporarily unavailable\",\n                ],\n                mech: [\n                    \"doesn't allow the charterToken to be sent without enough minSigs from the trustee list\",\n                ],\n                requires: [],\n            },\n\n            foo: {\n                purpose: \"\",\n                details: [],\n                mech: [],\n                requires: [],\n            },\n        });\n    }\n}\n","import { DefaultCharterDatumArgs, DefaultCapo, PartialDefaultCharterDatumArgs } from \"../DefaultCapo.js\";\nimport { Address } from \"@hyperionbt/helios\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport {\n    ADA,\n} from \"./types.js\";\nimport { CapoTestHelper } from \"./CapoTestHelper.js\";\nimport { stellarSubclass } from \"../StellarContract.js\";\n\n/**\n * Test helper for classes extending DefaultCapo\n * @remarks\n * \n * Arranges an test environment with predefined actor-names having various amounts of ADA in their (emulated) wallets,\n * and default helpers for setting up test scenarios.  Provides a simplified framework for testing Stellar contracts extending \n * the DefaultCapo class.\n * \n * To use it, you MUST extend DefaultCapoTestHelper<YourStellarCapoClass>.\n * \n * You MUST also implement a getter  for stellarClass, returning the specific class for YourStellarCapoClass\n * \n * You SHOULD also implement a setupActors method to arrange named actors for your test scenarios.\n * It's recommended to identify general roles of different people who will interact with the contract, and create\n * one or more actor names for each role, where the actor names start with the same letter as the role-names.\n * For example, a set of Trustees in a contract might have actor names tina, tracy and tom, while \n * unprivileged Public users might have actor names like pablo and peter.  setupActors() also\n * should pre-assign some ADA funds to each actor: e.g. `this.addActor(‹actorName›, 142n * ADA)`\n * \n * @typeParam DC - the specific DefaultCapo subclass under test\n * @public\n **/\nexport class DefaultCapoTestHelper<DC extends DefaultCapo<any>=DefaultCapo> extends CapoTestHelper<DC> {\n    //@ts-expect-error\n    get stellarClass() : stellarSubclass<DC>{\n        //@ts-expect-error\n        return DefaultCapo;\n    }\n\n    //!!! todo: create type-safe ActorMap helper hasActors(), on same pattern as hasRequirements\n    setupActors() {\n        this.addActor(\"tina\", 1100n * ADA);\n        this.addActor(\"tracy\", 13n * ADA);\n        this.addActor(\"tom\", 120n * ADA);\n        this.currentActor = \"tina\";\n    }\n\n    async mkCharterSpendTx(): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n\n        const treasury = this.strella!;\n        const tcx: StellarTxnContext = new StellarTxnContext();\n\n        return treasury.txnAddAuthority(tcx);\n    }\n\n    mkDefaultCharterArgs(): PartialDefaultCharterDatumArgs {\n        return {\n            govAuthorityLink: {\n                addressesHint: [ this.currentActor.address ],\n                strategyName: \"address\",\n            }\n        };\n    }\n\n    async updateCharter(\n        args: DefaultCharterDatumArgs\n    ): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n        const treasury = this.strella!;\n\n        const { signers } = this.state;\n\n        const tcx = await treasury.mkTxnUpdateCharter(args);\n        return treasury.submit(tcx, { signers }).then(() => {\n            this.network.tick(1n);\n            return tcx;\n        });\n    }\n}\n"],"names":["x","datum","e","tcx","s","__decorateClass","cmh","shh","cdh","contract","seedUtxo","Datum","params"],"mappings":"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"}