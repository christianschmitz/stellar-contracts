{"version":3,"file":"stellar-contracts.mjs","sources":["../src/delegation/UutName.ts","../src/utils.ts","../src/StellarTxnContext.ts","../src/diagnostics.ts","../src/DatumAdapter.ts","../src/StellarContract.ts","../src/CapoMintHelpers.ts","../src/delegation/CapoDelegateHelpers.ts","../src/minting/CapoMinter.ts","../src/Requirements.ts","../src/delegation/StellarDelegate.ts","../src/delegation/RolesAndDelegates.ts","../src/Capo.ts","../src/minting/UnspecializedMintDelegate.ts","../src/UnspecializedCapo.ts","../src/CapoHelpers.ts","../src/minting/BasicMintDelegate.ts","../src/authority/AuthorityPolicy.ts","../src/authority/AnyAddressAuthorityPolicy.ts","../src/DefaultSettingsAdapter.ts","../src/minting/NoMintDelegation.ts","../src/UncustomCapoSettings.ts","../src/DefaultCapo.ts","../src/HeliosModuleSrc.ts","../src/heliosRollupLoader.ts","../src/testing/types.ts","../src/testing/StellarTestHelper.ts","../src/testing/CapoTestHelper.ts","../src/testing/DefaultCapoTestHelper.ts","../src/testing/index.ts"],"sourcesContent":["import { bytesToText } from \"@hyperionbt/helios\";\n\nexport const _uutName = Symbol(\"uutName\");\nexport const maxUutName = 32;\n\n/**\n * a unique utility token having a unique name\n * @remarks\n *\n * This class contains a general 'purpose' name, mapped to a unique\n * `name`, which is generated using a seed-utxo pattern.\n *\n * @public\n **/\nexport class UutName {\n    private [_uutName]: string;\n    purpose: string;\n    constructor(purpose: string, fullUutName: string | number[]) {\n        this.purpose = purpose;\n        if (Array.isArray(fullUutName)) {\n            fullUutName = bytesToText(fullUutName);\n        }\n        if (fullUutName.length > maxUutName) {\n            throw new Error(\n                `uut name '${fullUutName}' exceeds max length of ${maxUutName}`\n            );\n        }\n        this[_uutName] = fullUutName;\n    }\n    /**\n     * the full uniquified name of this UUT\n     * @remarks\n     *\n     * format: `purpose-‹...uniqifier...›`\n     * @public\n     **/\n    get name() {\n        return this[_uutName];\n    }\n    toString() {\n        return this[_uutName];\n    }\n}\n","import {\n    Address,\n    Assets,\n    MintingPolicyHash,\n    TxOutput,\n    Value,\n    textToBytes,\n    \n} from \"@hyperionbt/helios\";\nimport type { uutPurposeMap } from \"./Capo.js\";\nimport type { valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { UutName } from \"./delegation/UutName.js\";\n\n\n/**\n * Creates Value-creation entires for a list of uuts\n * @remarks\n * \n * returns a list of `entries` usable in Value's `[mph, entries[]]` tuple.\n * @param uuts - a list of {@link UutName}s or a {@link uutPurposeMap}\n * @public\n **/\nexport function mkUutValuesEntries(uuts: UutName[]): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(uuts: uutPurposeMap<any>): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(\n    uuts: UutName[] | uutPurposeMap<any>\n): valuesEntry[] {\n    const uutNs = Array.isArray(uuts) ? uuts : Object.values(uuts);\n    const uniqs : UutName[] = [];\n    for (const un of uutNs) {\n        if (!uniqs.includes(un)) uniqs.push(un)\n    }\n    return uniqs.map((uut) => mkValuesEntry(uut.name, BigInt(1)));\n}\n\n/**\n * Converts string to array of UTF-8 byte-values \n* @public\n **/\nexport const stringToNumberArray = textToBytes\n// func stringToNumberArray (str: string): number[] {\n//     let encoder = new TextEncoder();\n//     let byteArray = encoder.encode(str);\n//     return [...byteArray].map((x) => parseInt(x.toString()));\n// }\n\n/**\n * Creates a tuple usable in a Value, converting token-name to byte-array if needed\n * @public\n **/\nexport function mkValuesEntry(\n    tokenName: string | number[],\n    count: bigint\n): valuesEntry {\n    const tnBytes = Array.isArray(tokenName)\n        ? tokenName\n        : stringToNumberArray(tokenName);\n\n    // addrHint,  //moved to config\n    // reqdAddress,  // removed\n\n    return [tnBytes, count];\n}\n\n/**\n * construct a Value based on a token-name\n * @remarks\n *\n * A simpler version of the Value constructor to serve the\n * common case of a single, string-based token name.\n *\n * If you need the Value to contain its minUtx computed based\n * on network parameters, use the StellarContract's mkMinTv()\n * method instead.\n *\n * @param mph - policy-hash of the token\n * @param tokenName - string name of the token\n * @param count: number of the tokens to include in the value\n * @public\n **/\nexport function mkTv(\n    mph: MintingPolicyHash,\n    tokenName: string | number[],\n    count: bigint = 1n\n): Value {\n    const v = new Value(\n        undefined,\n        new Assets([[mph, [mkValuesEntry(tokenName, count)]]])\n    );\n    return v;\n}\n","import {\n    HeliosData,\n    Tx,\n    TxOutput,\n    TxInput,\n    UplcProgram,\n} from \"@hyperionbt/helios\";\nimport type {\n    Address,\n    Hash,\n    NetworkParams,\n    TxId,\n    Wallet,\n} from \"@hyperionbt/helios\";\n\nimport { txAsString } from \"./diagnostics.js\";\nimport type { hasUutContext } from \"./Capo.js\";\nimport { UutName } from \"./delegation/UutName.js\";\n\n/**\n * A txn context having a seedUtxo in its state\n * @public\n **/\nexport type hasSeedUtxo = StellarTxnContext<\n    anyState & {\n        seedUtxo: TxInput;\n    }\n>;\n\nexport type AddlTxInfo<T extends StellarTxnContext> = {\n    tcx: T;\n    description: string;\n    moreInfo: string;\n    optional: boolean;\n    txName?: string;\n};\n\nexport type AddlTxnCallback =\n    | ((futTx: AddlTxInfo<any>) => void)\n    | ((futTx: AddlTxInfo<any>) => Promise<void>)\n    | ((futTx: AddlTxInfo<any>) => StellarTxnContext<any>)\n    | ((futTx: AddlTxInfo<any>) => Promise<StellarTxnContext<any>>);\n\n/**\n * A transaction context that includes additional transactions in its state for later execution\n * @remarks\n *\n * During the course of creating a transaction, the transaction-building functions for a contract\n * suite may suggest or require further transactions, which may not be executable until after the\n * current transaction is executed.  This type allows the transaction context to include such\n * future transactions in its state, so that they can be executed later.\n *\n * The future transactions can be executed using the {@link StellarContract.submitAddlTxns}\n * helper method.\n * @public\n **/\nexport type hasAddlTxns<\n    txnName extends string,\n    TCX extends StellarTxnContext<any>,\n    existingStateType extends anyState = TCX[\"state\"],\n    unwrapped = TCX extends hasAddlTxns<any, infer uw, any, any> ? uw : TCX,\n> = StellarTxnContext<\n    existingStateType & { \n        addlTxns: Record<txnName, AddlTxInfo<any>>\n    }\n> & unwrapped\n\nexport type otherAddlTxnNames<TCX extends StellarTxnContext<any>> = string & \n    TCX extends {state:{addlTxns: infer aTNs}} ? \n        keyof aTNs : never;\n\n// type combinedAddlTxns<\n//     extraTxnName extends string,\n//     stateType extends anyState,\n//     existingTxns = stateType extends {addlTxns: any} ? stateType[\"addlTxns\"] : never,\n//     existingTxnNames extends string = string & keyof existingTxns\n// > = {\n//     addlTxns: {\n//         //prettier-ignore\n//         [txnName in ( \n//             | extraTxnName\n//             | existingTxnNames\n//         )]: AddlTxInfo<any>\n//     } \n// } & stateType;\n\n/**\n * unique seed for creating UUTs and other uniqueness\n * @remarks\n *\n * The attributes of a seed utxo.  When the Utxo is used in a transaction,\n * the seedTxn and seedIndex constitute a unique identifier that won't be\n * repeated in the future, and that uniqueness can be used as a seed for\n * a minting policy, a UUT, or for other uniqueness purposes.\n * @public\n **/\nexport type SeedAttrs = {\n    seedTxn: TxId;\n    seedIndex: bigint;\n};\n\n//!!! if we could access the inputs and outputs in a building Tx,\n//  this might  not be necessary (unless it becomes a\n//   bigger-picture contextual container that serves various Stellar\n//   contract scripts with non-txn context for building a Tx)\n\n/**\n * A base state for a transaction context\n * @public\n **/\nexport interface anyState {\n    uuts: Record<string, UutName>;\n};\n\n/**\n * A base state for a transaction context\n * @public\n **/\n// export type anyState = emptyState;\nexport type uutMap = Record<string, UutName>;\nexport const emptyUuts: uutMap = Object.freeze({});\n\ntype addInputArgs = Parameters<Tx[\"addInput\"]>;\ntype addRefInputArgs = Parameters<Tx[\"addRefInput\"]>;\ntype addRefInputsArgs = Parameters<Tx[\"addRefInputs\"]>;\ntype _redeemerArg = addInputArgs[1];\n\ntype RedeemerArg = {\n    redeemer: _redeemerArg;\n};\n\n/**\n * Transaction-building context for Stellar Contract transactions\n * @remarks\n *\n * Uses same essential facade as Helios Tx.\n *\n * Adds a transaction-state container with strong typing of its contents,\n * enabling transaction-building code to use type-sensitive auto-complete\n * and allowing Stellar Contracts library code to require transaction contexts\n * having known states.\n *\n * Retains reflection capabilities to allow utxo-finding utilities to exclude\n * utxo's already included in the contract.\n *\n * @typeParam S - type of the context's `state` prop\n * @public\n **/\nexport class StellarTxnContext<S extends anyState = anyState> {\n    tx = Tx.new();\n    inputs: TxInput[] = [];\n    collateral?: TxInput;\n    outputs: TxOutput[] = [];\n    feeLimit?: bigint;\n    state: S;\n    actor?: Wallet;\n    neededSigners: Address[] = [];\n    constructor(actor?: Wallet, state: Partial<S> = {}) {\n        this.actor = actor;\n        const { uuts = { ...emptyUuts }, ...moreState } = state;\n        //@ts-expect-error\n        this.state = {\n            uuts,\n            ...moreState,\n        };\n    }\n\n    dump(networkParams?: NetworkParams) {\n        const { tx } = this;\n        return txAsString(tx, networkParams);\n    }\n\n    includeAddlTxn<\n        TCX extends StellarTxnContext<anyState>,\n        txnName extends string\n    >(\n        this: TCX,\n        txnName: txnName,\n        txInfo: AddlTxInfo<any>\n    ): hasAddlTxns<txnName, TCX> {\n        const thisWithMoreType: hasAddlTxns<txnName, TCX> =\n            this as any;\n        thisWithMoreType.state.addlTxns = {\n            ...(thisWithMoreType.state.addlTxns || {}),\n            [txnName]: txInfo,\n        };\n        return thisWithMoreType;\n    }\n\n    mintTokens(...args: Parameters<Tx[\"mintTokens\"]>): StellarTxnContext<S> {\n        this.tx.mintTokens(...args);\n\n        return this;\n    }\n\n    getSeedAttrs<TCX extends hasSeedUtxo>(this: TCX): SeedAttrs {\n        const { seedUtxo } = this.state;\n        const { txId: seedTxn, utxoIdx: seedIndex } = seedUtxo.outputId;\n        return { seedTxn, seedIndex: BigInt(seedIndex) };\n    }\n\n    reservedUtxos(): TxInput[] {\n        return [...this.inputs, this.collateral].filter(\n            (x) => !!x\n        ) as TxInput[];\n    }\n\n    utxoNotReserved(u: TxInput): TxInput | undefined {\n        if (this.collateral?.eq(u)) return undefined;\n        if (this.inputs.find((i) => i.eq(u))) return undefined;\n        return u;\n    }\n\n    addUut<T extends string, TCX extends StellarTxnContext>(\n        this: TCX,\n        //!!! todo: type this more strongly by adding strong typing to the UutName itself?\n        uutName: UutName,\n        ...names: T[]\n    ): hasUutContext<T> & TCX {\n        this.state.uuts = this.state.uuts || {};\n\n        for (const name of names) {\n            this.state.uuts[name] = uutName;\n        }\n\n        return this as hasUutContext<T> & TCX;\n    }\n\n    addState<TCX extends StellarTxnContext, K extends string, V>(\n        this: TCX,\n        key: K,\n        value: V\n    ): StellarTxnContext<{ [keyName in K]: V } & anyState> & TCX {\n        //@ts-expect-error\n        this.state[key] = value;\n        return this as StellarTxnContext<{ [keyName in K]: V } & anyState> &\n            TCX;\n    }\n\n    addCollateral(collateral: TxInput) {\n        if (!collateral.value.assets.isZero()) {\n            throw new Error(\n                `invalid attempt to add non-pure-ADA utxo as collateral`\n            );\n        }\n        this.collateral = collateral;\n\n        this.tx.addCollateral(collateral);\n        return this;\n    }\n\n    validFor<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        durationMs: number,\n        backwardMs = 3 * 60 * 1000 // allow it to be up to ~12 slots / 3 minutes old by default\n    ): TCX {\n        this.tx\n            .validFrom(new Date(Date.now() - backwardMs))\n            .validTo(new Date(Date.now() + durationMs));\n\n        return this;\n    }\n\n    txRefInputs: TxInput[] = [];\n    /**\n     * adds a reference input to the transaction context\n     * @remarks\n     *\n     * idempotent version of helios addRefInput()\n     *\n     * @public\n     **/\n    addRefInput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        ...inputArgs: addRefInputArgs\n    ) {\n        const [input, ...moreArgs] = inputArgs;\n        if (this.txRefInputs.find((v) => v.outputId.eq(input.outputId))) {\n            console.warn(\"suppressing second add of refInput\");\n            return this;\n        }\n        this.txRefInputs.push(input);\n\n        // if (moreArgs.length) {\n        //     //@ts-expect-error\n        //     this.tx.attachScript(...moreArgs);\n        //     return this\n        // }\n\n        const t = this.tx.witnesses.scripts.length;\n        this.tx.addRefInput(input, ...moreArgs);\n        const t2 = this.tx.witnesses.scripts.length;\n        if (t2 > t) {\n            console.log(\n                \"      --- addRefInput added \",\n                this.tx.witnesses.scripts.length - t,\n                \" to tx.scripts\"\n            );\n        }\n\n        return this;\n    }\n\n    addRefInputs<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        ...args: addRefInputsArgs\n    ) {\n        const [inputs] = args;\n\n        for (const input of inputs) {\n            this.addRefInput(input);\n        }\n        return this;\n    }\n\n    addInput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        input: addInputArgs[0],\n        r?: RedeemerArg\n    ): TCX {\n        if (input.address.pubKeyHash) this.neededSigners.push(input.address);\n        this.inputs.push(input);\n        this.tx.addInput(input, r?.redeemer);\n\n        return this;\n    }\n\n    addInputs<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        inputs: Parameters<Tx[\"addInputs\"]>[0],\n        r: RedeemerArg\n    ): TCX {\n        for (const input of inputs) {\n            if (input.address.pubKeyHash)\n                this.neededSigners.push(input.address);\n        }\n        this.inputs.push(...inputs);\n        this.tx.addInputs(inputs, r.redeemer);\n\n        return this;\n    }\n\n    addOutput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        ...args: Parameters<Tx[\"addOutput\"]>\n    ): TCX {\n        const [output, ..._otherArgs] = args;\n        this.outputs.push(output);\n        this.tx.addOutput(...args);\n        return this;\n    }\n\n    addOutputs<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        ...args: Parameters<Tx[\"addOutputs\"]>\n    ): TCX {\n        const [outputs, ..._otherArgs] = args;\n        this.outputs.push(...outputs);\n        this.tx.addOutputs(...args);\n\n        return this;\n    }\n\n    attachScript(...args: Parameters<Tx[\"attachScript\"]>) {\n        throw new Error(\n            `use addScriptProgram(), increasing the txn size, if you don't have a referenceScript.\\n` +\n                `Use <capo>.txnAttachScriptOrRefScript() to use a referenceScript when available.`\n        );\n    }\n\n    addScriptProgram(...args: Parameters<Tx[\"attachScript\"]>) {\n        const script = args[0];\n        // console.log(\"in attachScript, scripts is \", this.tx.witnesses.scripts.map(x => x.hash().slice(0,8)))\n        if (script instanceof UplcProgram) {\n            const thisPurpose = script.properties.purpose;\n            const whichHash =\n                thisPurpose == \"minting\"\n                    ? \"mintingPolicyHash\"\n                    : thisPurpose == \"staking\"\n                    ? \"stakingValidatorHash\"\n                    : thisPurpose == \"spending\"\n                    ? \"validatorHash\"\n                    : \"\";\n            const expected: Hash = script[whichHash];\n            if (!whichHash || !expected)\n                throw new Error(\n                    `unexpected script purpose ${script.properties.purpose} in attachScript()`\n                );\n\n            if (\n                this.txRefInputs?.find((ri) => {\n                    const rs = ri.origOutput.refScript;\n                    if (!rs) return false;\n                    const { purpose } = rs.properties;\n                    if (purpose && purpose != thisPurpose) return false;\n\n                    const foundHash: Hash =\n                        ri.origOutput.refScript?.[whichHash];\n                    return foundHash.eq(expected);\n                })\n            ) {\n                console.log(\n                    \"     --- txn already has this script as a refScript; not re-adding\"\n                );\n                return this;\n            }\n        }\n        this.tx.attachScript(...args);\n\n        return this;\n    }\n\n    async addSignature(wallet: Wallet) {\n        const [sig] = await wallet.signTx(this.tx);\n\n        this.tx.addSignature(sig);\n    }\n\n    /**\n     * To add a script to the transaction context, use `attachScript`\n     *\n     * @deprecated - invalid method name; use attachScript\n     **/\n    addScript() {}\n}\n","import {\n    Address,\n    Datum,\n    Tx,\n    TxOutput,\n    TxInput,\n    Value,\n    bytesToText,\n    Assets,\n    MintingPolicyHash,\n    ByteArray,\n    ByteArrayData,\n    TxId,\n    TxOutputId,\n    NetworkParams,\n    UplcProgram,\n    Hash,\n} from \"@hyperionbt/helios\";\nimport type { ErrorMap } from \"./delegation/RolesAndDelegates.js\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\n\n/**\n * converts a hex string to a printable alternative, with no assumptions about the underlying data\n * @remarks\n *\n * Unlike Helios' bytesToText, hexToPrintable() simply changes printable characters to characters,\n * and represents non-printable characters in '‹XX›' format.\n * @param ‹pName› - descr\n * @typeParam ‹pName› - descr (for generic types)\n * @public\n **/\nexport function hexToPrintableString(hexStr) {\n    let result = \"\";\n    for (let i = 0; i < hexStr.length; i += 2) {\n        let hexChar = hexStr.substring(i, i + 2);\n        let charCode = parseInt(hexChar, 16);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += String.fromCharCode(charCode);\n        } else {\n            result += `‹${hexChar}›`;\n        }\n\n        // todo decode utf8 parts using bytesToText(...substring...)\n        // int         required_len;\n        // if (key[0] >> 7 == 0)\n        //     required_len = 1;\n        // else if (key[0] >> 5 == 0x6)\n        //     required_len = 2;\n        // else if (key[0] >> 4 == 0xE)\n        //     required_len = 3;\n        // else if (key[0] >> 5 == 0x1E)\n        //     required_len = 4;\n        // else\n        //     return (0);\n        // return (strlen(key) == required_len && chars_are_folow_uni(key + 1));\n    }\n    return result;\n}\n/**\n * Converts an array of [ policyId, ‹tokens› ] tuples for on-screen presentation\n * @remarks\n *\n * Presents policy-ids with shortened identifiers, and shows a readable & printable\n * representation of token names even if they're not UTF-8 encoded.\n * @public\n **/\nexport function assetsAsString(a: Assets) {\n    //@ts-expect-error it's marked as private, but thankfully it's still accessible\n    const assets = a.assets;\n    return (assets?.map(([policyId, tokenEntries]) => {\n            const tokenString = tokenEntries\n                .map(([nameBytes, count]) => {\n                    const nameString = hexToPrintableString(nameBytes.hex);\n                    const burn = count < 1 ? \"🔥\" : \"\";\n                    const burned = count < 1 ? \"- BURN 🔥 \" : \"\";\n                    return `${burn} ${count}×💴 ${nameString} ${burned}`;\n                })\n                .join(\" + \");\n            return `⦑${policyIdAsString(policyId)} ${tokenString}⦒`;\n        }) || [])\n        .join(\"\\n  \");\n}\n\nexport function policyIdAsString(p: MintingPolicyHash) {\n    const pIdHex = p.hex;\n    return `🏦 ${pIdHex.slice(0, 8)}…${pIdHex.slice(-4)}`;\n}\n\n/**\n * Converts lovelace to approximate ADA, in consumable 3-decimal form\n * @public\n **/\nexport function lovelaceToAda(l: bigint | number) {\n    const asNum = parseInt(l.toString());\n    const ada =\n        (asNum && `${(Math.round(asNum / 1000) / 1000).toFixed(3)} ADA`) || \"\";\n    return ada;\n}\n\n/**\n * Converts a Value to printable form\n * @public\n **/\nexport function valueAsString(v: Value) {\n    const ada = lovelaceToAda(v.lovelace);\n    const assets = assetsAsString(v.assets);\n    return [ada, assets].filter((x) => !!x).join(\" + \");\n}\n\n/**\n * Converts a Tx to printable form\n * @public\n **/\nexport function txAsString(tx: Tx, networkParams?: NetworkParams): string {\n    const bodyAttrs = [\n        \"inputs\",\n        \"minted\",\n        \"collateral\",\n        \"refInputs\",\n        \"outputs\",\n        \"fee\",\n        \"lastValidSlot\",\n        \"firstValidSlot\",\n        \"metadataHash\",\n        \"scriptDataHash\",\n        \"signers\",\n        \"collateralReturn\",\n    ];\n    const witnessAttrs = [\n        \"signatures\",\n        \"datums\",\n        \"refScripts\",\n        \"scripts\",\n        \"redeemers\",\n        \"nativeScripts\",\n    ];\n\n    let details = \"\";\n    if (!networkParams) {\n        console.warn(\n            new Error(`dumpAny: no networkParams; can't show txn size info!?!`)\n        );\n    }\n\n    const d = tx.dump();\n    //!!! todo: improve interface of tx so useful things have a non-private api\n    //!!! todo: get rid of dump()\n    //!!! todo: get back to type-safety in this diagnostic suite\n    for (const x of bodyAttrs) {\n        let item = tx.body[x] || (d.body[x] as any);\n        let skipLabel = false;\n        // console.log(`attr '${x}'`)\n        if (Array.isArray(item) && !item.length) continue;\n\n        if (!item) continue;\n        if (\"inputs\" == x) {\n            item = `\\n  ${item.map((x, i) => txInputAsString(x, \n                \"➡️  \" /* <- unicode blue arrow right */ + `@${1+i} `\n            )).join(\"\\n  \")}`;\n        }\n        if (\"refInputs\" == x) {\n            item = `\\n  ${item\n                .map((x) => txInputAsString(x, \"ℹ️  \"))\n                .join(\"\\n  \")}`;\n        }\n        if (\"collateral\" == x) {\n            //!!! todo: group collateral with inputs and reflect it being spent either way,\n            //     IFF it is also a tx `input`\n            //!!! todo: move collateral to bottom with collateralReturn,\n            //     IFF it is not part of the tx `inputs`\n            item = item.map((x) => txInputAsString(x, \"🔪\")).join(\"\\n    \");\n        }\n        if (\"minted\" == x) {\n            if (!item.assets.length) {\n                continue;\n            }\n            item = ` ❇️  ${assetsAsString(item)}`;\n        }\n        if (\"outputs\" == x) {\n            item = `\\n  ${item\n                .map((x, i) =>\n                    txOutputAsString(\n                        x,\n                        \"🔹\" /* <-- unicode blue bullet */ + `${i} <-`\n                    )\n                )\n                .join(\"\\n  \")}`;\n        }\n        if (\"signers\" == x) {\n            item = item.map((x) => {\n                if (!x.hex) debugger;\n                return `🔑#${x.hex.slice(0, 6)}…${x.hex.slice(-4)}`;\n            });\n        }\n\n        if (\"fee\" == x) {\n            item = parseInt(item);\n            item =\n                `${(Math.round(item / 1000) / 1000).toFixed(3)} ADA ` +\n                tx.profileReport.split(\"\\n\")[0];\n\n            // console.log(\"fee\", item)\n        }\n\n        if (\"collateralReturn\" == x) {\n            skipLabel = true;\n            item = `  ${txOutputAsString(\n                item,\n                `0  <- ❓`\n            )} conditional: collateral change (returned in case of txn failure)`;\n        }\n\n        details += `${skipLabel ? \"\" : \"  \" + x + \": \"}${item}\\n`;\n    }\n    let indeterminateRedeemerDetails = false;\n\n    let hasWinfo = false;\n    const winfo = {};\n    for (const x of witnessAttrs) {\n        // if (\"scripts\" == x) debugger;\n        let item = tx.witnesses[x] || (d.witnesses[x] as any);\n        if (Array.isArray(item) && !item.length) continue;\n        if (\"datums\" == x && !Object.entries(item || {}).length) continue;\n        if (\"signatures\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                const addr = Address.fromHash(s.pubKeyHash);\n                return `🖊️ ${addrAsString(addr)} = 🔑…${s.pubKeyHash.hex.slice(\n                    -4\n                )}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"redeemers\" == x) {\n            if (!item) continue;\n            //!!! todo: augment with mph when that's available from the Activity.\n            item = item.map((x) => {\n                // console.log(\"redeemer keys\", ...[ ...Object.keys(x2) ], x2.dump());\n                const isIndeterminate = x.inputIndex == -1;\n                if (isIndeterminate) indeterminateRedeemerDetails = true;\n                const indexInfo = isIndeterminate\n                    ? `spend txin #‹tbd›`\n                    : \"inputIndex\" in x\n                    ? `spend txin ➡️  @${1 + x.inputIndex}`\n                    : `mint policy#${1 + x.mphIndex}`;\n\n                return `🏧  ${indexInfo} ${x.data.toString()}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"scripts\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                try {\n                    const mph = s.mintingPolicyHash.hex;\n                    // debugger\n                    return `🏦 ${mph.slice(0, 8)}…${mph.slice(-4)} (minting): ${\n                        s.serializeBytes().length\n                    } bytes`;\n                } catch (e) {\n                    const vh = s.validatorHash;\n                    const vhh = vh.hex;\n                    const addr = Address.fromHash(vh);\n                    // debugger\n                    return `📜 ${vhh.slice(0, 8)}…${vhh.slice(\n                        -4\n                    )} (validator at ${addrAsString(addr)}): ${\n                        s.serializeBytes().length\n                    } bytes`;\n                }\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"refScripts\" == x) {\n            item = `${item.length} - see refInputs`;\n            // todo: @helios give us refScripts outside of dump(), which only shows us hex.\n        }\n\n        if (!item) continue;\n        hasWinfo = true;\n        winfo[x] = item;\n    }\n    if (hasWinfo) {\n        details += Object.entries(winfo)\n            .map(([k, v]) => `  ${k}: ${v}\\n`)\n            .join(\"\");\n    }\n    try {\n        details += `  txId: ${tx.id().hex}`;\n        if (networkParams)\n            details += `  size: ${\n                tx.toTxData(networkParams).toCbor().length\n            } bytes`;\n    } catch (e) {\n        details = details + `(Tx not yet finalized!)`;\n        if (networkParams) details += `\\n  - NOTE: can't determine txn size\\n`;\n    }\n    return details;\n}\n\n/**\n * Converts a TxInput to printable form\n * @remarks\n *\n * Shortens address and output-id for visual simplicity; doesn't include datum info\n * @public\n **/\nexport function txInputAsString(x: TxInput, prefix = \"-> \"): string {\n    return `${prefix}${addrAsString(x.address)}${showRefScript(x.origOutput.refScript)} ${valueAsString(\n        x.value\n    )} = 📖 ${txOutputIdAsString(x.outputId)}`;\n}\n\n/**\n * Converts a list of UTxOs to printable form\n * @remarks\n *\n * ... using {@link txInputAsString}\n * @public\n **/\nexport function utxosAsString(utxos: TxInput[], joiner = \"\\n\"): string {\n    return utxos.map((u) => utxoAsString(u, \" 💵\")).join(joiner);\n}\n\nexport function txOutputIdAsString(x: TxOutputId): string {\n    return (\n        txidAsString(x.txId) +\n        \"🔹\" /* <-- unicode blue bullet */ +\n        `#${x.utxoIdx}`\n    );\n}\n\nexport function txidAsString(x: TxId): string {\n    const tid = x.hex;\n    return `${tid.slice(0, 6)}…${tid.slice(-4)}`;\n}\n\n/**\n * converts a utxo to printable form\n * @remarks\n *\n * shows shortened output-id and the value being output, plus its datum\n * @internal\n **/\nexport function utxoAsString(x: TxInput, prefix = \"💵\"): string {\n    return ` 📖 ${txOutputIdAsString(x.outputId)}: ${txOutputAsString(\n        x.origOutput,\n        prefix\n    )}`; // or 🪙\n}\n\n/**\n * converts a Datum to a printable summary\n * @remarks\n *\n * using shortening techniques for the datumHash\n * @public\n **/\nexport function datumAsString(d: Datum | null | undefined): string {\n    if (!d) return \"\"; //\"‹no datum›\";\n\n    // debugger\n    const dh = d.hash.hex;\n    const dhss = `${dh.slice(0, 8)}…${dh.slice(-4)}`;\n    if (d.isInline()) return `d‹inline:${dhss} - ${d.toCbor().length} bytes›`;\n    return `d‹hash:${dhss}…›`;\n}\n\n/**\n * Displays a short summary of any provided reference script\n * @remarks\n * \n * detailed remarks\n * @param ‹pName› - descr\n * @typeParam ‹pName› - descr (for generic types)\n * @public\n **/\nexport function showRefScript(rs?: UplcProgram | null) {\n    if (!rs) return \"\";\n    const thisPurpose = rs.properties?.purpose;\n    const whichHash = \n        thisPurpose == \"minting\" ? \"mintingPolicyHash\" \n        : thisPurpose == \"staking\" ? \"stakingValidatorHash\" \n        : \"validatorHash\" // : thisPurpose == \"spending\" ?  \"validatorHash\" : \"\"\n        // when thisPurpose is empty, it's a refScript from on-chain, and it doesn't have a purpose\n        // ... but all its hash properties are the same, so it doesn't matter which one we use.\n    const expected : Hash = rs[whichHash];\n\n    const rsh = expected.hex;\n    const rshInfo = `${rsh.slice(0, 8)}…${rsh.slice(-4)}`\n    return ` ‹📀 refScript📜 ${rshInfo}: ${rs.calcSize()} bytes› +`\n}\n\n/**\n * Converts a txOutput to printable form\n * @remarks\n *\n * including all its values, and shortened Address.\n * @public\n **/\nexport function txOutputAsString(x: TxOutput, prefix = \"<-\"): string {\n    return `${prefix} ${addrAsString(x.address)}${showRefScript(x.refScript)} ${valueAsString(\n        x.value\n    )} ${datumAsString(x.datum)}`;\n}\n\n/**\n * Renders an address in shortened bech32 form, with prefix and part of the bech32 suffix\n * @remarks\n * @param address - address\n * @public\n **/\nexport function addrAsString(address: Address): string {\n    const bech32 = (address as any).bech32 || address.toBech32();\n\n    return `${bech32.slice(0, 14)}…${bech32.slice(-4)}`;\n}\n\n/**\n * Converts an Errors object to a string for onscreen presentation\n * @public\n **/\nexport function errorMapAsString(em: ErrorMap, prefix = \"  \") {\n    return Object.keys(em)\n        .map((k) => `in field ${prefix}${k}: ${JSON.stringify(em[k])}`)\n        .join(\"\\n\");\n}\n\n/**\n * Converts a list of ByteArrays to printable form\n * @remarks\n *\n * ... using {@link hexToPrintableString}\n * @public\n **/\nexport function byteArrayListAsString(\n    items: ByteArray[] | ByteArrayData[],\n    joiner = \"\\n  \"\n): string {\n    return (\n        \"[\\n  \" +\n        items.map((ba) => byteArrayAsString(ba)).join(joiner) +\n        \"\\n]\\n\"\n    );\n}\n\n/**\n * Renders a byteArray in printable form, assuming it contains (mostly) text\n * @remarks\n *\n * Because it uses {@link hexToPrintableString()}, it will render any non-printable\n * characters using ‹hex› notation.\n * @param ba - the byte array\n * @public\n **/\nexport function byteArrayAsString(ba: ByteArray | ByteArrayData): string {\n    return hexToPrintableString(ba.hex);\n}\n\n/**\n * Converts any (supported) input arg to string\n * @remarks\n *\n * more types to be supported TODO\n * @public\n **/\nexport function dumpAny(\n    x:\n        | Tx\n        | StellarTxnContext\n        | Address\n        | Value\n        | TxOutput\n        | TxInput\n        | TxInput[]\n        | TxId\n        | ByteArray\n        | ByteArray[]\n        | ByteArrayData\n        | ByteArrayData[],\n    networkParams?: NetworkParams\n) {\n    if (Array.isArray(x)) {\n        if (x[0] instanceof TxInput) {\n            //@ts-expect-error sorry, typescript : /\n            return \"utxos: \\n\" + utxosAsString(x);\n        }\n        if (x[0] instanceof ByteArray || x[0] instanceof ByteArrayData) {\n            //@ts-expect-error sorry, typescript : /\n            return \"byte array:\\n\" + byteArrayListAsString(x);\n        }\n    }\n\n    if (x instanceof Tx) {\n        return txAsString(x, networkParams);\n    }\n\n    if (x instanceof TxOutput) {\n        return txOutputAsString(x);\n    }\n\n    if (x instanceof TxOutputId) {\n        return txOutputIdAsString(x);\n    }\n\n    if (x instanceof TxId) {\n        return txidAsString(x);\n    }\n\n    if (x instanceof TxInput) {\n        return utxoAsString(x);\n    }\n    if (x instanceof Value) {\n        return valueAsString(x);\n    }\n    if (x instanceof Address) {\n        return addrAsString(x);\n    }\n    if (x instanceof MintingPolicyHash) {\n        return policyIdAsString(x);\n    }\n    if (x instanceof StellarTxnContext) {\n        return txAsString(x.tx, networkParams);\n    }\n    if (x instanceof ByteArray || x[0] instanceof ByteArrayData) {\n        //@ts-expect-error sorry, typescript : /\n        return byteArrayAsString(x);\n    }\n\n    debugger;\n    return \"dumpAny(): unsupported type or library mismatch\";\n}\n\nif (\"undefined\" == typeof window) {\n    globalThis.peek = dumpAny;\n} else {\n    //@ts-expect-error\n    window.peek = dumpAny;\n}\n","import { ByteArrayData, IntData, MapData, textToBytes, type Datum } from \"@hyperionbt/helios\";\nimport type { StellarContract } from \"./StellarContract.js\";\nimport type { helios } from \"../index.js\";\n\n    /**\n     * Provides transformations of data between preferred application types and on-chain data types\n     * @remarks\n     * \n     * This class is intended to be subclassed for each specific data type used StellarContracts class\n     * \n     * The fromOnchainDatum method should be implemented to convert deserialized on-chain data to the application type,\n     * \n     * @typeParam appType - high-level preferred application type for the data; may be a class having various methods\n     * @typeParam OnchainBridgeType - the on-chain data type, as deserialized from the contract\n     * @typeParam contractType - the specific contract class that uses this data type\n     * @public\n     **/\nexport abstract class DatumAdapter<\n    appType,\n    OnchainBridgeType,\n    contractType extends StellarContract<any>\n> {\n    strella: contractType;\n    constructor(strella: contractType) {\n        this.strella = strella;\n    }\n    get onChainDatumType() {\n        return this.strella.onChainDatumType;\n    }\n    get onChainTypes() {\n        return this.strella.onChainTypes;\n    }\n    get capo() {\n        if (\"initSettingsAdapter\" in this.strella) return this.strella;\n\n        throw new Error(`not a capo instance: ${this.strella.constructor.name}`);\n    }\n\n    abstract datumName: string;\n    /**\n     * Transforms deserialized on-chain data into the preferred application type\n     * @remarks\n     * \n     * The type of data received from the on-chain datum parser is specific to the contract\n     * and on-chain datum type.  This method should convert that data into the preferred form.\n     * @public\n     **/    \n    abstract fromOnchainDatum(\n        raw: OnchainBridgeType\n    ): appType | Promise<appType>;\n        /**\n         * Should construct the right form of on-chain data, using classes provided by the Helios contract\n         * @remarks\n         * \n         * The type constructed by this method will (short-term) be on-chain types.\n         * Soon, this can simply be an adapted form of JSON suitable for Helios' JSON-structured data bridge.\n         * @public\n         **/\n    abstract toOnchainDatum(d: appType): Datum;\n\n    toRealNum(n: number): helios.IntData {\n        // supports fractional inputs (they can always be represented as a BigInt, with sufficient precision)\n        // note: don't expect very very small numbers to be accurately represented\n        const microInt1 = Number(n) * 1_000_000;\n        // supports larger integer inputs\n        BigInt((42.008).toFixed(0));\n\n        let microInt2;\n        try {\n            microInt2 = BigInt(n.toFixed(0)) * 1_000_000n;\n        } catch(e) {}\n            if (microInt2 && microInt2 > Number.MAX_SAFE_INTEGER) {\n                throw new Error(\n                    `microInt value too large for Number: ${microInt2}`\n                );\n            }\n\n        return new IntData(BigInt(microInt1));\n    }\n\n    toMapData<T = any>(\n        k: Record<string, T>,\n        transformer?: (n: T) => helios.UplcData\n    ): helios.MapData {\n        const t = new MapData(\n            Object.entries(k).map(([key, value]) => {\n                const keyBytes = new ByteArrayData(textToBytes(key));\n                const uplcValue = transformer ? transformer(value) : value;\n                return [keyBytes, uplcValue] as [helios.UplcData, helios.UplcData];\n            })\n        );\n        return t;\n    }\n\n}\n\n","import {\n    Address,\n    Assets,\n    DatumHash,\n    HInt,\n    HeliosData,\n    MintingPolicyHash,\n    NetworkParams,\n    Program,\n    TxOutput,\n    TxInput,\n    UplcData,\n    UplcDataValue,\n    UplcProgram,\n    Value,\n    extractScriptPurposeAndName,\n    Datum,\n    AssetClass,\n    //@ts-expect-error\n    DataDefinition,\n    ListData,\n    ConstrData,\n    WalletHelper,\n} from \"@hyperionbt/helios\";\nimport * as helios from \"@hyperionbt/helios\";\nimport type { Network, Wallet } from \"@hyperionbt/helios\";\n\nimport {\n    StellarTxnContext,\n    type AddlTxInfo,\n    type AddlTxnCallback,\n    type hasAddlTxns,\n} from \"./StellarTxnContext.js\";\nimport { utxosAsString, valueAsString } from \"./diagnostics.js\";\nimport type { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { mkTv, stringToNumberArray } from \"./utils.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport type { Capo } from \"./Capo.js\";\nimport { DatumAdapter } from \"./DatumAdapter.js\";\n\ntype tokenPredicate<tokenBearer extends canHaveToken> = ((\n    something: tokenBearer\n) => tokenBearer | undefined) & { value: Value };\n\ntype NetworkName = \"testnet\" | \"mainnet\";\nlet configuredNetwork: NetworkName | undefined = undefined;\n\n/**\n * a type for redeemer/activity-factory functions declared with \\@Activity.redeemer\n *\n * @public\n */\nexport type isActivity<T = never> = {\n    redeemer: UplcDataValue | UplcData | T;\n    // | HeliosData\n};\n\ntype WalletsAndAddresses = {\n    wallets: Wallet[];\n    addresses?: Address[];\n};\nexport type utxoInfo = {\n    u: TxInput;\n    sufficient: boolean;\n    free: bigint;\n    minAdaAmount: bigint;\n};\n\n/**\n * Type for the Class that constructs to a given type\n * @remarks\n *\n * Type of the matching literal class\n *\n * note: Typescript should make this pattern easier\n *\n * @typeParam S - the type of objects of this class\n * @typeParam CT - inferred type of the constructor args for the class\n * @public\n **/\nexport type stellarSubclass<\n    S extends StellarContract<CT>,\n    CT extends configBase = S extends StellarContract<infer iCT>\n        ? iCT\n        : configBase\n> = (new (setup: SetupDetails, internal: typeof isInternalConstructor) => S) & {\n    // & StellarContract<CT>\n    defaultParams: Partial<CT>;\n    createWith(args: StellarFactoryArgs<CT>): Promise<S>;\n    parseConfig(rawJsonConfig: any): any;\n};\n\n/**\n * Properties for Datum structures for on-chain scripts\n * @public\n **/\nexport type anyDatumProps = Record<string, any>;\n/**\n * Configuration details for StellarContract classes\n * @public\n **/\nexport type configBase = { rev: bigint } & Record<string, any>;\n\nexport type devConfigProps = {\n    isDev: boolean;\n    devGen: bigint;\n};\n\n/**\n * Decorators for on-chain activity (redeemer) factory functions\n * @public\n **/\nexport const Activity = {\n    /**\n     * Decorates a partial-transaction function that spends a contract-locked UTxO using a specific activity (\"redeemer\")\n     * @remarks\n     *\n     * activity-linked transaction-partial functions must follow the txn\\{...\\}\n     * and active-verb (\"ing\") naming conventions.  `txnRetiringDelegation`,\n     * `txnModifyingVote` and `txnWithdrawingStake` would be examples\n     * of function names following this guidance.\n     *\n     * @public\n     **/\n    partialTxn(proto, thingName, descriptor) {\n        needsActiveVerb(thingName);\n        return partialTxn(proto, thingName, descriptor);\n    },\n\n    /**\n     * Decorates a factory-function for creating tagged redeemer data for a specific on-chain activity\n     * @remarks\n     *\n     * The factory function should follow an active-verb convention by including \"ing\" in\n     * the name of the factory function\n     *\n     * Its leading prefix should also match one of 'activity', 'burn', or 'mint'.  These\n     * conventions don't affect the way the activity is verified on-chain, but they\n     * provide guard-rails for naming consistency.\n     * @public\n     **/\n    redeemer(proto, thingName, descriptor) {\n        const isActivity = thingName.match(/^activity[A-Z]/);\n        const isBurn = thingName.match(/^burn[A-Z]/);\n        const isMint = thingName.match(/^mint[A-Z]/);\n\n        if (!isActivity && !isBurn) {\n            throw new Error(\n                `@Activity.redeemer: ${thingName}: name should start with '(activity|burn|mint)[A-Z]...'`\n            );\n        }\n        needsActiveVerb(thingName, !!\"okwhatever\");\n        return Activity.redeemerData(proto, thingName, descriptor);\n    },\n    redeemerData(proto, thingName, descriptor) {\n        //!!! todo: registry and cross-checking for missing redeeming methods\n\n        //!!! todo: develop more patterns of \"redeemer uses an input of a certain mph/value\"\n        return descriptor;\n    },\n};\n\nfunction needsActiveVerb(thingName: string, okWorkaround?: boolean) {\n    if (!thingName.match(/ing/)) {\n        const orWorkaround =\n            okWorkaround &&\n            \"(or work around with @Activity.redeemerData instead)\";\n        throw new Error(\n            `Activity: ${thingName}: name should have 'ing' in it ${orWorkaround}`\n        );\n    }\n    if (thingName.match(/^ing/)) {\n        throw new Error(\n            `Activity: ${thingName}: name shouldn't start with 'ing'`\n        );\n    }\n}\n\n/**\n * Decorates datum-building functions\n * @remarks\n *\n * function names must follow the mkDatum... convention.\n *\n * The function should accept a single argument with input type\n * that feels Typescripty, and that can be fit to the on-chain type of\n * the underlying Datum variant of the given name.\n *\n * @public\n **/\nexport function datum(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkDatum/)) {\n        throw new Error(\n            `@datum factory: ${thingName}: name should start with 'mkDatum...'`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * Decorates functions that can construct a new transaction context for a specific use-case\n * @remarks\n *\n * function names must follow the mkTxn... convention.\n * @public\n **/\nexport function txn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkTxn/)) {\n        throw new Error(\n            `@txn factory: ${thingName}: name should start with 'mkTxn...'`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * decorates functions that increment a transaction by adding needed details for a use-case\n * @remarks\n *\n * Function names must follow the txn\\{...\\} naming convention. Typical partial-transaction names\n * may describe the semantics of how the function augments the transaction.\n * `txnAddSignatures` or `txnReceivePayment` could be example names following\n * this guidance\n *\n * Partial transactions should have a \\<TCX extends StellarTxnContext\\<...\\>\\> type parameter,\n * matched to its first function argument, and should return a type extending that same TCX,\n * possibly with additional StellarTxnContext\\<...\\> type info.\n *\n * The TCX constraint can specify key requirements for an existing transaction context when\n * that's relevant.\n *\n * @public\n **/\nexport function partialTxn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^txn[A-Z]/)) {\n        let help = \"\";\n        if (thingName.match(/^mkTxn/)) {\n            help = `\\n  ... or, for transaction initiation with mkTxn, you might try @txn instead. `;\n        }\n        throw new Error(\n            `@partialTxn factory: ${thingName}: should start with 'txn[A-Z]...'${help}`\n        );\n    }\n    return descriptor;\n}\n\nexport async function findInputsInWallets(\n    v: Value,\n    searchIn: WalletsAndAddresses,\n    network: Network\n) {\n    const { wallets, addresses } = searchIn;\n\n    const lovelaceOnly = v.assets.isZero();\n    console.warn(\"finding inputs\", {\n        lovelaceOnly,\n    });\n\n    for (const w of wallets) {\n        const [a] = await w.usedAddresses;\n        console.log(\"finding funds in wallet\", a.toBech32().substring(0, 18));\n        const utxos = await w.utxos;\n        for (const u of utxos) {\n            if (lovelaceOnly) {\n                if (u.value.assets.isZero() && u.value.lovelace >= v.lovelace) {\n                    return u;\n                }\n                console.log(\"  - too small; skipping \", u.value.dump());\n            } else {\n                if (u.value.ge(v)) {\n                    return u;\n                }\n            }\n        }\n    }\n    if (lovelaceOnly) {\n        throw new Error(\n            `no ADA is present except those on token bundles.  TODO: findFreeLovelaceWithTokens`\n        );\n        // const spareChange = this.findFreeLovelaceWithTokens(v, w)\n    }\n    //!!! todo: allow getting free ada from a contract address?\n\n    if (addresses) {\n        for (const a of addresses) {\n            const utxos = await network.getUtxos(a);\n            for (const u of utxos) {\n                if (u.value.ge(v)) {\n                    return u;\n                }\n            }\n        }\n    }\n\n    throw new Error(\n        `None of these wallets${\n            (addresses && \" or addresses\") || \"\"\n        } have the needed tokens`\n    );\n}\n\n/**\n * standard setup for any Stellar Contract class\n * @public\n **/\nexport type SetupDetails = {\n    network: Network;\n    networkParams: NetworkParams;\n    isMainnet?: boolean;\n    myActor?: Wallet;\n    isTest?: boolean;\n    isDev?: boolean;\n    optimize?: boolean;\n};\n\n/**\n * @public\n * Extracts the config type for a Stellar Contract class\n **/\nexport type ConfigFor<\n    SC extends StellarContract<C>,\n    C extends configBase = SC extends StellarContract<infer inferredConfig>\n        ? inferredConfig\n        : never\n> = C;\n\n/**\n * Initializes a stellar contract class\n * @remarks\n *\n * Includes network and other standard setup details, and any configuration needed\n * for the specific class.\n * @public\n **/\nexport type StellarFactoryArgs<CT extends configBase> = {\n    setup: SetupDetails;\n    config?: CT;\n    partialConfig?: Partial<CT>;\n};\n\n/**\n * a function that can filter txInputs for coin-selection\n * @remarks\n *\n * short form: \"returns truthy\" if the input is matchy for the context\n * @public\n **/\nexport type utxoPredicate =\n    | ((u: TxInput) => TxInput | undefined)\n    | ((u: TxInput) => boolean)\n    | ((u: TxInput) => boolean | undefined);\n\ntype scriptPurpose =\n    | \"testing\"\n    | \"minting\"\n    | \"spending\"\n    | \"staking\"\n    | \"module\"\n    | \"endpoint\";\n\nexport type canHaveToken = TxInput | TxOutput | Assets;\ntype UtxoSearchScope = {\n    address?: Address;\n    wallet?: Wallet;\n    exceptInTcx?: StellarTxnContext;\n};\n\ntype ComputedScriptProperties = Partial<{\n    vh: helios.ValidatorHash;\n    addr: Address;\n    mph: MintingPolicyHash;\n    identity: string;\n}>;\n\nconst isInternalConstructor = Symbol(\"internalConstructor\");\n\n//!!! todo: type configuredStellarClass = class -> networkStuff -> withParams = stellar instance.\n\n/** \n * Basic wrapper and off-chain facade for interacting with a single Plutus contract script\n * @remarks\n *\n * This class is normally used only for individual components of a higher-level {@link Capo | Capo or Leader contract},\n * which act as delegates within its application context.  Nonetheless, it is the base class for every Capo as well as\n * simpler contract scripts.\n *\n * The StellarContract class serves as an off-chain facade for transaction-building and interfacing to any on-chain\n * contract script.  Each StellarContract subclass must define a `contractSource()`, which is currently a Helios-language\n * script, compiled in any Javascript environment to an on-chain executable UPLC or \"plutus core\" form.  This enables\n * a static dApp to be self-sovereign, without need for any server (\"application back-end\") environment.\n *\n * @typeParam ConfigType - schema for the configuration needed for creating or reproducing a\n * specific instance of the contract script on-chain.\n *\n * @public\n **/\nexport class StellarContract<\n    // SUB extends StellarContract<any, ParamsType>,\n    ConfigType extends configBase\n> {\n    //! it has scriptProgram: a parameterized instance of the contract\n    //  ... with specific `parameters` assigned.\n    scriptProgram?: Program;\n    configIn?: ConfigType;\n    partialConfig?: Partial<ConfigType>;\n    contractParams?: configBase;\n    setup: SetupDetails;\n    network: Network;\n    networkParams: NetworkParams;\n    myActor?: Wallet;\n    // isTest?: boolean\n    static get defaultParams() {\n        return {};\n    }\n    static parseConfig(rawJsonConfig: any) {\n        throw new Error(\n            `Stellar contract subclasses should define their own static parseConfig where needed to enable connection from a specific dApp to a specific Stellar Contract.`\n        );\n    }\n\n    get isConnected() {\n        return !!this.myActor;\n    }\n    /**\n     * returns the wallet connection used by the current actor\n     * @remarks\n     *\n     * Throws an error if the strella contract facade has not been initialized with a wallet in settings.myActor\n     * @public\n     **/\n    get wallet() {\n        if (!this.myActor)\n            throw new Error(\n                `wallet is not connected to strella '${this.constructor.name}'`\n            );\n        return this.myActor;\n    }\n\n    //! can transform input configuration to contract script params\n    //! by default, all the config keys are used as script params\n    getContractScriptParams(\n        config: ConfigType\n    ): configBase & Partial<ConfigType> {\n        return config;\n    }\n\n    delegateReqdAddress(): false | Address {\n        return this.address;\n    }\n    delegateAddrHint(): Address[] | undefined {\n        return undefined;\n    }\n\n    walletNetworkCheck?: Promise<NetworkName> | NetworkName;\n    /**\n     * Factory function for a configured instance of the contract\n     * @remarks\n     *\n     * Due to boring details of initialization order, this factory function is needed\n     * for creating a new instance of the contract.\n     * @param args - setup and configuration details\n     * @public\n     **/\n    static async createWith<\n        thisType extends StellarContract<configType>,\n        configType extends configBase = thisType extends StellarContract<\n            infer iCT\n        >\n            ? iCT\n            : never\n    >(\n        this: stellarSubclass<any>,\n        args: StellarFactoryArgs<configType>\n    ): Promise<StellarContract<configType> & InstanceType<typeof this>> {\n        const Class = this;\n        const { setup, config, partialConfig } = args;\n        const c = new Class(setup, isInternalConstructor);\n\n        // now all internal property assignments have been triggered,\n        //  (e.g. class-level currentRev = .... declarations)\n        // so we can do initialization activities post-construction\n        return c.init(args);\n    }\n    /**\n     * obsolete public constructor.  Use the createWith() factory function instead.\n     *\n     * @public\n     **/\n    constructor(setup: SetupDetails, internal: typeof isInternalConstructor) {\n        this.setup = setup;\n        if (internal !== isInternalConstructor) {\n            throw new Error(\n                `StellarContract: use createWith() factory function`\n            );\n        }\n        const { network, networkParams, isTest, myActor, isMainnet } = setup;\n\n        helios.config.set({ IS_TESTNET: !isMainnet });\n        this.network = network;\n        this.networkParams = networkParams;\n        // this.isTest = isTest\n    }\n\n    async init(args: StellarFactoryArgs<ConfigType>) {\n        const { isMainnet, myActor } = this.setup;\n        const chosenNetwork = isMainnet ? \"mainnet\" : \"testnet\";\n        if (\"undefined\" !== typeof configuredNetwork) {\n            if (configuredNetwork != chosenNetwork) {\n                console.warn(\n                    `Possible CONFLICT:  previously configured as ${configuredNetwork}, while this setup indicates ${chosenNetwork}` +\n                        `\\n   ... are you or the user switching between networks?`\n                );\n            }\n        }\n        configuredNetwork = chosenNetwork;\n        if (myActor) {\n            const isMain = await myActor.isMainnet();\n            const foundNetwork = isMain ? \"mainnet\" : \"testnet\";\n            if (foundNetwork !== chosenNetwork) {\n                throw new Error(\n                    `wallet on ${foundNetwork} doesn't match network from setup`\n                );\n            }\n            this.myActor = myActor;\n        }\n\n        const { config, partialConfig } = args;\n        if (config) {\n            this.configIn = config;\n\n            const fullScriptParams = (this.contractParams =\n                this.getContractScriptParams(config));\n\n            this.scriptProgram = this.loadProgramScript(fullScriptParams);\n        } else {\n            this.partialConfig = partialConfig;\n            this.scriptProgram = this.loadProgramScript();\n        }\n        return this;\n    }\n\n    compiledScript!: UplcProgram; // initialized in loadProgramScript\n\n    get datumType() {\n        return this.onChainDatumType;\n    }\n    /**\n     * @internal\n     **/\n    _purpose?: scriptPurpose;\n    get purpose() {\n        if (this._purpose) return this._purpose;\n\n        const purpose = this.scriptProgram?.purpose as scriptPurpose;\n        if (!purpose) return \"non-script\";\n        return (this._purpose = purpose as scriptPurpose);\n    }\n\n    get validatorHash() {\n        const { vh } = this._cache;\n        if (vh) return vh;\n        // console.log(this.constructor.name, \"cached vh\", vh?.hex || \"none\");\n        const nvh = this.compiledScript.validatorHash;\n        // console.log(\"nvh\", nvh.hex);\n        // if (vh) {\n        //     if (!vh.eq(nvh)) {\n        //         console.warn(`validatorHash mismatch: ${vh.hex} != ${nvh.hex}`);\n        //         debugger\n        //     }\n        // }\n        return (this._cache.vh = nvh);\n    }\n\n    //  todo: stakingAddress?: Address or credential or whatever;\n\n    get address(): Address {\n        const { addr } = this._cache;\n        console.log(\n            this.constructor.name,\n            \"cached addr\",\n            addr?.toBech32() || \"none\"\n        );\n        if (addr) return addr;\n        console.log(\"TODO TODO TODO TODO TODO - ensure each contract can indicate the right stake part of its address\");\n        console.log(\"and that the onchain part also supports it\")\n        \n        const nAddr = Address.fromHashes(this.validatorHash);\n        // console.log(\"nAddr\", nAddr.toBech32());\n        // if (this._address) {\n        //     if (!this._address.eq(nAddr)) {\n        //         console.warn(`address mismatch: ${this._address.toBech32()} != ${nAddr.toBech32()}`);\n        //         debugger\n        //     }\n        // }\n        return (this._cache.addr = nAddr);\n    }\n\n    get mintingPolicyHash() {\n        if (\"minting\" != this.purpose) return undefined;\n        const { mph } = this._cache;\n        if (mph) return mph;\n        // console.log(this.constructor.name, \"_mph\", this._mph?.hex || \"none\");\n        const nMph = this.compiledScript.mintingPolicyHash;\n        // console.log(\"nMph\", nMph.hex);\n        // if (this._mph) {\n        //     if (!this._mph.eq(nMph)) {\n        //         console.warn(\n        //             `mintingPolicyHash mismatch: ${this._mph.hex} != ${nMph.hex}`\n        //         );\n        //         debugger\n        //     }\n        // }\n        return (this._cache.mph = nMph);\n    }\n\n    get identity() {\n        const { identity } = this._cache;\n        if (identity) return identity;\n        console.log(this.constructor.name, \"identity\", identity || \"none\");\n\n        let result: string;\n        if (\"minting\" == this.purpose) {\n            const b32 = this.mintingPolicyHash!.toBech32();\n            //!!! todo: verify bech32 checksum isn't messed up by this:\n            result = b32.replace(/^asset/, \"mph\");\n        } else {\n            result = this.address.toBech32();\n        }\n        // if (this._identity) {\n        //     if (this._identity != result) {\n        //         console.warn(\n        //             `identity mismatch: ${this._identity} != ${result}`\n        //         );\n        //         debugger\n        //     }\n        // }\n        // console.log(\"nIdentity\", result);\n        return (this._cache.identity = result);\n    }\n\n    //! searches the network for utxos stored in the contract,\n    //  returning those whose datum hash is the same as the input datum\n    async outputsSentToDatum(datum: InlineDatum) {\n        const myUtxos = await this.network.getUtxos(this.address);\n\n        // const dump = utxosAsString(myUtxos)\n        // console.log({dump})\n        return myUtxos.filter((u) => {\n            return u.origOutput.datum?.hash.hex == datum.hash.hex;\n        });\n    }\n\n    //! adds the values of the given TxInputs\n    totalValue(utxos: TxInput[]): Value {\n        return utxos.reduce((v: Value, u: TxInput) => {\n            return v.add(u.value);\n        }, new Value(0n));\n    }\n\n    /**\n     * Returns the indicated Value to the contract script\n     * @public\n     * @param tcx - transaction context\n     * @param value - a value already having minUtxo calculated\n     * @param datum - inline datum\n     **/\n    //! adds the indicated Value to the transaction;\n    //  ... EXPECTS  the value to already have minUtxo calculated on it.\n    @partialTxn // non-activity partial\n    txnKeepValue(tcx: StellarTxnContext, value: Value, datum: InlineDatum) {\n        tcx.addOutput(new TxOutput(this.address, value, datum));\n\n        return tcx;\n    }\n\n    async addStrellaWithConfig<\n        SC extends StellarContract<any>\n        // P = SC extends StellarContract<infer P> ? P : never\n    >(\n        TargetClass: stellarSubclass<SC>,\n        config: SC extends StellarContract<infer iCT> ? iCT : never\n    ) {\n        const args: StellarFactoryArgs<ConfigFor<SC>> = {\n            config,\n            setup: this.setup,\n        };\n\n        const strella = await TargetClass.createWith(args);\n        return strella;\n    }\n\n    // async findDatum(d: Datum | DatumHash): Promise<TxInput[]>;\n    // async findDatum(predicate: utxoPredicate): Promise<TxInput[]>;\n    // async findDatum(d: Datum | DatumHash | utxoPredicate): Promise<TxInput[]> {\n    //     let targetHash: DatumHash | undefined =\n    //         d instanceof Datum\n    //             ? d.hash\n    //             : d instanceof DatumHash\n    //             ? d\n    //             : undefined;\n    //     let predicate =\n    //         \"function\" === typeof d\n    //             ? d\n    //             : (u: TxInput) => {\n    //                   const match =\n    //                       u.origOutput?.datum?.hash.hex == targetHash?.hex;\n    //                   console.log(\n    //                       txOutputAsString(\n    //                           u.origOutput,\n    //                           `    ${match ? \"✅ matched \" : \"❌ no match\"}`\n    //                       )\n    //                   );\n    //                   return !!match;\n    //               };\n\n    //     //prettier-ignore\n    //     console.log(\n    //         `finding utxo with datum ${\n    //             targetHash?.hex.substring(0,12)\n    //         }... in wallet`,\n    //         this.address.toBech32().substring(0,18)\n    //     );\n\n    //     const heldUtxos = await this.network.getUtxos(this.address);\n    //     console.log(`    - found ${heldUtxos.length} utxo:`);\n    //     return heldUtxos.filter(predicate);\n    // }\n\n    /**\n     * Returns all the types exposed by the contract script\n     * @remarks\n     *\n     * Passed directly from Helios; property names match contract's defined type names\n     *\n     * @public\n     **/\n    get onChainTypes() {\n        const types = { ...this.scriptProgram!.types };\n        //@ts-expect-error because allStatements is marked as internal\n        const statements = this.scriptProgram!.allStatements;\n\n        for (const [statement, _someBoolThingy] of statements) {\n            const name = statement.name.value;\n            if (types[name]) continue;\n            const protoName = Object.getPrototypeOf(statement).constructor.name\n            if (\n                \"StructStatement\" == protoName ||\n                \"EnumStatement\" == protoName\n            ) {\n                const type = statement.genOffChainType(); // an off-chain type **representing** an on-chain type\n                const name = type.name.value;\n                if (types[name]) throw new Error(`ruh roh`);\n                types[name] = type;\n            }\n        }\n        return types;\n    }\n\n    /**\n     * identifies the enum used for the script Datum\n     * @remarks\n     *\n     * Override this if your contract script uses a type name other than Datum.\n     * @public\n     **/\n    get scriptDatumName() {\n        return \"Datum\";\n    }\n\n    /**\n     * The on-chain type for datum\n     * @remarks\n     *\n     * This getter provides a class, representing the on-chain enum used for attaching \n     * data (or data hashes) to contract utxos the returned type (and its enum variants) \n     * are suitable for off-chain txn-creation override `get scriptDatumName()` if \n     * needed to match your contract script.\n     * @public\n     **/\n    get onChainDatumType() {\n        const { scriptDatumName: onChainDatumName } = this;\n        const { [onChainDatumName]: DatumType } = this.scriptProgram!.types;\n        return DatumType;\n    }\n\n    /**\n     * identifies the enum used for activities (redeemers) in the Helios script\n     * @remarks\n     *\n     * Override this if your contract script uses a type name other than Activity.\n     * @public\n     **/\n\n    get scriptActivitiesName() {\n        return \"Activity\";\n    }\n\n    /**\n     * returns the on-chain type for activities (\"redeemers\")\n     * @remarks\n     *\n     * Use mustGetActivityName() instead, to get the type for a specific activity.\n     *\n     * returns the on-chain enum used for spending contract utxos or for different use-cases of minting (in a minting script).\n     * the returned type (and its enum variants) are suitable for off-chain txn-creation\n     * override `get onChainActivitiesName()` if needed to match your contract script.\n     * @public\n     **/\n    get onChainActivitiesType() {\n        const { scriptActivitiesName: onChainActivitiesName } = this;\n        if (!this.scriptProgram) throw new Error(`no scriptProgram`);\n\n        const { [onChainActivitiesName]: ActivitiesType } =\n            this.scriptProgram!.types;\n        return ActivitiesType;\n    }\n\n    /**\n     * Retrieves an on-chain type for a specific named activity (\"redeemer\")\n     * @remarks\n     *\n     * Cross-checks the requested name against the available activities in the script.\n     * Throws a helpful error if the requested activity name isn't present.\n     * @param activityName - the name of the requested activity\n     * @public\n     **/\n    mustGetActivity(activityName: string) {\n        const ocat = this.onChainActivitiesType;\n        return this.mustGetEnumVariant(ocat, activityName);\n    }\n    \n    mustGetEnumVariant(enumType: typeof HeliosData, variantName: string) {\n        //@ts-expect-error\n        const { [variantName]: variantType } = enumType;\n\n        if (!variantType) {\n            // const { scriptActivitiesName: onChainActivitiesName } = this;\n            const variantNames: string[] = [];\n            //inspect the properties in `this`, using property descriptors.\n            for (const [name, _] of Object.entries(\n                Object.getOwnPropertyDescriptors(enumType)\n            )) {\n                //Some of them will point to Class definitions.\n                // check if any of those classes inherit from HeliosData.\n                if (enumType[name].prototype instanceof HeliosData) {\n                    // if so, add the name to activityNames.\n                    variantNames.push(name);\n                }\n            }\n            debugger\n            throw new Error(\n                `$${this.constructor.name}: activity/enum-variant name mismatch ${enumType}::${variantName}''\\n` +\n                    `   variants in this enum: ${variantNames.join(\n                        \", \"\n                    )}`\n            );\n        }\n        return variantType;\n    }\n\n    async readDatum<\n        DPROPS extends anyDatumProps,\n        adapterType extends DatumAdapter<any, DPROPS, any> | undefined = undefined\n    >(\n        datumNameOrAdapter: string | adapterType,\n        datum: Datum | InlineDatum,\n    ): Promise<\n        (adapterType extends DatumAdapter<any,any,any> ? adapterType : DPROPS) | undefined> {\n        const hasAdapter = datumNameOrAdapter instanceof DatumAdapter;\n        const datumName = hasAdapter ?\n            datumNameOrAdapter.datumName : datumNameOrAdapter;\n        const thisDatumType = this.onChainDatumType[datumName];\n        // console.log(` ----- read datum ${datumName}`)\n\n        if (!thisDatumType) throw new Error(`invalid datumName ${datumName}`);\n        if (!datum.isInline())\n            throw new Error(\n                `datum must be an InlineDatum to be readable using readDatum()`\n            );\n\n        const rawParsedData = (await this.readUplcDatum(thisDatumType, datum.data!).catch((e) => {\n            if (e.message?.match(/expected constrData/)) return undefined;\n            throw e;\n        }) ) as DPROPS | undefined;\n        if (!rawParsedData) return undefined;\n        if (hasAdapter) {\n            return datumNameOrAdapter.fromOnchainDatum(rawParsedData);\n        }\n        return rawParsedData as any\n    }\n\n    private async readUplcStructList(uplcType: any, uplcData: ListData) {\n        const { fieldNames, instanceMembers } = uplcType as any;\n\n        if (uplcType.fieldNames?.length == 1) {\n            const fn = fieldNames[0];\n            const singleFieldStruct = {\n                [fn]: await this.readUplcField(fn, instanceMembers[fn], uplcData)\n            }\n            return singleFieldStruct\n        }\n\n        //@ts-expect-error until Helios exposes right type info for the list element\n        const nestedFieldList = uplcData.list;\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn: string, i: number) => {\n                    const fieldData = nestedFieldList[i];\n                    const fieldType = instanceMembers[fn];\n                    // console.log(` ----- read struct field ${fn}`)\n                    const value = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        fieldData\n                    );\n                    // console.log(` <----- struct field ${fn}`, value);\n\n                    return [fn, value];\n                })\n            )\n        );\n    }\n\n    private async readUplcEnumVariant(\n        uplcType: any,\n        enumDataDef: any,\n        uplcData: ConstrData & UplcData\n    ) {\n        const fieldNames: string[] = enumDataDef.fieldNames;\n\n        //@ts-expect-error TS doesn't understand this enum variant data\n        const { fields } = uplcData;\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn, i) => {\n                    const fieldData = fields[i];\n                    const fieldType = enumDataDef.fields[i].type;\n                    const value = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        fieldData\n                    ).catch((nestedError) => {\n                        console.warn(\n                            \"error parsing nested data inside enum variant\",\n                            { fn, fieldType, fieldData }\n                        );\n                        debugger;\n                        throw nestedError;\n                    });\n                    return [fn, value];\n                })\n            )\n        );\n    }\n\n    private async readUplcDatum(uplcType: any, uplcData: UplcData) {\n        const { fieldNames, instanceMembers } = uplcType as any;\n        if (!fieldNames) {\n            const enumVariant = uplcType.prototype._enumVariantStatement;\n            if (enumVariant) {\n                //@ts-expect-error because TS doesn't grok ConstrData here\n                const foundIndex = uplcData.index;\n                const { dataDefinition: enumDataDef, constrIndex } =\n                    enumVariant;\n                if (!(uplcData instanceof ConstrData))\n                    throw new Error(\n                        `uplcData mismatch - no constrData, expected constData#${constrIndex}`\n                    );\n                if (!(foundIndex == constrIndex))\n                    throw new Error(\n                        `uplcData expected constrData#${constrIndex}, got #${foundIndex}`\n                    );\n\n                const t = this.readUplcEnumVariant(\n                    uplcType,\n                    enumDataDef,\n                    uplcData\n                );\n                return t; // caller can deal with catching the error\n            }\n            throw new Error(\n                `can't determine how to parse UplcDatum without 'fieldNames'.  Tried enum`\n            );\n        }\n\n        // const heliosTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         return [fn, instanceMembers[fn].name];\n        //     })\n        // );\n        // const inputTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         return [fn, instanceMembers[fn].typeDetails.inputType];\n        //     })\n        // );\n        // const outputTypes = Object.fromEntries(\n        //     fieldNames.map((fn) => {\n        //         debugger\n        //         return [fn, instanceMembers[fn].typeDetails.outputType];\n        //     })\n        // );\n        return Object.fromEntries(\n            await Promise.all(\n                fieldNames.map(async (fn, i) => {\n                    let current;\n\n                    //@ts-expect-error\n                    const uplcDataField = uplcData.fields[i];\n                    const fieldType = instanceMembers[fn];\n                    // console.log(` ----- read field ${fn}`)\n\n                    current = await this.readUplcField(\n                        fn,\n                        fieldType,\n                        uplcDataField\n                    );\n\n                    return [fn, current];\n                })\n            )\n        );\n    }\n\n    private async readUplcField(\n        fn: string,\n        fieldType: any,\n        uplcDataField: any\n    ) {\n        let value;\n        const { offChainType } = fieldType;\n        try {\n            let internalType;\n            try {\n                 internalType = fieldType.typeDetails.internalType.type;\n                if (\"Struct\" == internalType) {\n                    value = await this.readUplcStructList(fieldType, uplcDataField);\n                    // console.log(`  <-- field value`, value) \n                    return value;\n                }\n            } catch(e) {}\n            value = fieldType.uplcToJs(uplcDataField);\n            if (value.then) value = await value;\n\n            if (internalType) {\n                if (\"Enum\" === internalType && 0 === uplcDataField.fields.length) {\n                    return value = Object.keys(value)[0];\n                }\n            } else {\n                return value;\n                // console.log(\"no internal type for special post-uplc-to-JS handling at\", fn);\n                // debugger\n            }\n        } catch (e: any) {\n            if (e.message?.match(/doesn't support converting from Uplc/)) {\n                if (!offChainType) { return this.readOtherUplcType(fn, uplcDataField, fieldType); }\n                try {\n                    value = await offChainType.fromUplcData(uplcDataField);\n                    if (value && \"some\" in value) value = value.some;\n                    if (value && \"string\" in value) value = value.string;\n                } catch (e: any) {\n                    console.error(`datum: field ${fn}: ${e.message}`);\n                    // console.log({outputTypes, fieldNames, offChainTypes, inputTypes, heliosTypes, thisDatumType});\n                    debugger;\n                    throw e;\n                }\n            } else {\n                throw e;\n            }\n        }\n        // console.log(`  <-- field value`, value)\n        return value;\n    }\n    async readOtherUplcType(fn: string, uplcDataField: any, fieldType: any) {\n        if (uplcDataField instanceof helios.IntData) {\n            return uplcDataField.value\n        }\n        if (uplcDataField instanceof helios.MapData) {\n            const entries: Record<string, any> = {};\n            for (const [k, v] of uplcDataField[\"map\"]) {\n                debugger\n                const bytesToString = {\n                    uplcToJs(uplcField) {\n                        return helios.bytesToText(uplcField.bytes)\n                    }\n                };\n                const parsedKey = await this.readUplcField(`${fn}.‹mapKey›`, bytesToString, k)\n                                // check type of parsed key?\n                debugger\n                // type of value??\n                entries[  parsedKey ] = await this.readOtherUplcType(\n                    `${fn}.‹map›@${parsedKey}`, v, undefined\n                )\n            }\n            debugger\n            return entries\n        }\n        console.log(`datum: field ${fn}: no offChainType, no internalType`, {fieldType, uplcDataField});\n        debugger\n        return uplcDataField;\n    }\n\n    findSmallestUnusedUtxo(\n        lovelace: bigint,\n        utxos: TxInput[],\n        tcx?: StellarTxnContext\n    ): TxInput | undefined {\n        const value = new Value({ lovelace });\n        const toSortInfo = this._mkUtxoSortInfo(value.lovelace);\n\n        const found = utxos\n            .map(toSortInfo)\n            .filter(this._utxoIsPureADA)\n            .filter(this._utxoIsSufficient)\n            .filter((uInfo: utxoInfo) => {\n                if (!tcx) return true;\n                return !!tcx?.utxoNotReserved(uInfo.u);\n            })\n            .sort(this._utxoSortSmallerAndPureADA)\n            .map(this._infoBackToUtxo);\n        console.log(\"smallest utxos: \", utxosAsString(found));\n        const chosen = found.at(0);\n\n        return chosen;\n    }\n\n    //! creates a filtering function, currently for TxInput-filtering only.\n    //! with the optional tcx argument, utxo's already reserved\n    //  ... in that transaction context will be skipped.\n    mkValuePredicate(\n        lovelace: bigint,\n        tcx?: StellarTxnContext\n    ): tokenPredicate<TxInput> {\n        const value = new Value({ lovelace });\n        const predicate = _adaPredicate.bind(this, tcx) as tokenPredicate<any>;\n        predicate.value = value;\n        return predicate;\n\n        function _adaPredicate(\n            this: StellarContract<ConfigType>,\n            tcx: StellarTxnContext | undefined,\n            utxo: TxInput\n        ): TxInput | undefined {\n            return this.hasOnlyAda(value, tcx, utxo);\n        }\n    }\n\n    mkMinTv(\n        mph: MintingPolicyHash,\n        tokenName: string | UutName | number[],\n        count: bigint = 1n\n    ) {\n        const tnBytes = Array.isArray(tokenName)\n            ? tokenName\n            : stringToNumberArray(tokenName.toString());\n\n        return this.mkMinAssetValue(new AssetClass([mph, tnBytes]), count);\n    }\n\n    mkAssetValue(tokenId: AssetClass, count: bigint = 1n) {\n        const assets = [[tokenId, count] as [AssetClass, bigint]];\n        const v = new Value(undefined, assets);\n        return v;\n    }\n\n    mkMinAssetValue(tokenId: AssetClass, count: bigint = 1n) {\n        const v = this.mkAssetValue(tokenId, count);\n        // uses a dummy address so it can be used even during bootstrap\n        const txo = new TxOutput(\n            new Address(Array<number>(29).fill(0)),\n            this.mkAssetValue(tokenId, count)\n        );\n        txo.correctLovelace(this.networkParams);\n        return txo.value;\n    }\n\n    mkTokenPredicate(val: Value): tokenPredicate<any>;\n    mkTokenPredicate(\n        mph: MintingPolicyHash,\n        tokenName: string,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        vOrMph: AssetClass,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        specifier: Value | MintingPolicyHash | AssetClass | UutName | number[],\n        quantOrTokenName?: string | bigint,\n        quantity?: bigint\n    ): tokenPredicate<any> {\n        let v: Value;\n        let mph: MintingPolicyHash;\n        let tokenName: string;\n        //!!! todo: support (AssetClass, quantity) input form\n        if (!specifier)\n            throw new Error(\n                `missing required Value or MintingPolicyHash or UutName (or uut-name as byte-array) in arg1`\n            );\n        const predicate = _tokenPredicate.bind(this) as tokenPredicate<any>;\n\n        const isValue = specifier instanceof Value;\n        const isUut = specifier instanceof Array || specifier instanceof UutName;\n        if (isValue) {\n            v = predicate.value = specifier;\n            return predicate;\n        } else if (isUut) {\n            const uutNameOrBytes = specifier instanceof Array ? specifier : specifier.name;\n            const quant = quantOrTokenName ? BigInt(quantOrTokenName) : 1n;\n            v = predicate.value = this.tokenAsValue(\n                uutNameOrBytes, \n                quant // quantity if any\n            );\n            return predicate;\n        } else if (specifier instanceof MintingPolicyHash) {\n            mph = specifier;\n            if (\"string\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with minting policy hash, token-name must be a string (or ByteArray support is TODO)`\n                );\n            tokenName = quantOrTokenName;\n            quantity = quantity || 1n;\n\n            v = predicate.value = this.tokenAsValue(tokenName, quantity, mph);\n            return predicate;\n        } else if (specifier instanceof AssetClass) {\n            mph = specifier.mintingPolicyHash;\n            if (!quantOrTokenName) quantOrTokenName = 1n;\n            if (\"bigint\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with AssetClass, the second arg must be a bigint like 3n, or omitted`\n                );\n            quantity = quantOrTokenName;\n\n            v = predicate.value = new Value(0n, [[specifier, quantity]]);\n            return predicate;\n        } else {\n            throw new Error(\n                `wrong token specifier (need Value, MPH+tokenName, or AssetClass`\n            );\n        }\n\n        function _tokenPredicate<tokenBearer extends canHaveToken>(\n            this: StellarContract<ConfigType>,\n            something: tokenBearer\n        ): tokenBearer | undefined {\n            return this.hasToken(something, v);\n        }\n    }\n\n    private hasToken<tokenBearer extends canHaveToken>(\n        something: tokenBearer,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ): tokenBearer | undefined {\n        if (something instanceof TxInput)\n            return (\n                (this.utxoHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n        if (something instanceof TxOutput)\n            return (\n                (this.outputHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n        if (something instanceof Assets)\n            return (\n                (this.assetsHasToken(something, value, tokenName, quantity) &&\n                    something) ||\n                undefined\n            );\n\n        //!!! todo: more explicit match for TxInput, which seems to be a type but not an 'instanceof'-testable thing.\n        return (\n            (this.inputHasToken(something, value, tokenName, quantity) &&\n                something) ||\n            undefined\n        );\n    }\n\n    private utxoHasToken(\n        u: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return (\n            this.outputHasToken(u.origOutput, value, tokenName, quantity) && u\n        );\n    }\n    private inputHasToken(\n        i: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return (\n            this.outputHasToken(i.origOutput, value, tokenName, quantity) && i\n        );\n    }\n\n    private assetsHasToken(\n        a: Assets,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        const v =\n            vOrMph instanceof MintingPolicyHash\n                ? this.tokenAsValue(tokenName!, quantity!, vOrMph)\n                : vOrMph;\n\n        return a.ge(v.assets);\n    }\n\n    private outputHasToken(\n        o: TxOutput,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        if (vOrMph instanceof MintingPolicyHash && !tokenName)\n            throw new Error(\n                `missing required tokenName (or use a Value in arg2`\n            );\n        if (vOrMph instanceof MintingPolicyHash && !quantity)\n            throw new Error(\n                `missing required quantity (or use a Value in arg2`\n            );\n\n        const v =\n            vOrMph instanceof MintingPolicyHash\n                ? this.tokenAsValue(tokenName!, quantity!, vOrMph)\n                : vOrMph;\n\n        return o.value.ge(v);\n    }\n\n    //! deprecated tokenAsValue - use Capo\n    tokenAsValue(\n        tokenName: string | number[],\n        quantity: bigint,\n        mph?: MintingPolicyHash\n    ): Value {\n        throw new Error(\n            `deprecated tokenAsValue on StellarContract base class (Capo has mph, not so much any StellarContract`\n        );\n        // if (!mph) {\n        //     mph = (this as any).mph;\n        //     if (!mph)\n        //         throw new Error(\n        //             `tokenAsValue: mph in arg3 required unless the stellar contract (${this.constructor.name}) has an 'mph' getter.`\n        //         );\n        // }\n\n        // const v = new Value(\n        //     this.ADA(0),\n        //     new Assets([[mph, [this.mkValuesEntry(tokenName, quantity)]]])\n        // );\n        // const o = new TxOutput(this.address, v);\n        // v.setLovelace(o.calcMinLovelace(this.networkParams));\n\n        // return v;\n    }\n\n    hasOnlyAda(value: Value, tcx: StellarTxnContext | undefined, u: TxInput) {\n        const toSortInfo = this._mkUtxoSortInfo(value.lovelace);\n\n        const found = [u]\n            .map(toSortInfo)\n            .filter(this._utxoIsSufficient)\n            .filter(this._utxoIsPureADA)\n            .map(this._infoBackToUtxo)\n            .at(0);\n\n        return found;\n    }\n\n    /**\n     * @internal\n     **/\n    protected _utxoSortSmallerAndPureADA(\n        { free: free1, minAdaAmount: r1 }: utxoInfo,\n        { free: free2, minAdaAmount: r2 }: utxoInfo\n    ) {\n        {\n            //! primary: treats pure-ada utxos as always better\n            if (!r1 && r2) {\n                return -1;\n            }\n            if (r1 && !r2) {\n                return 1; //\n            }\n        }\n        //! secondary: smaller utxos are more preferred than larger ones\n        if (free2 > free1) return -1;\n        if (free2 < free1) return 1;\n        return 0;\n    }\n\n    /**\n     * @internal\n     **/\n    protected _utxoIsSufficient({ sufficient }: utxoInfo) {\n        return !!sufficient;\n    }\n    /**\n     * @internal\n     **/\n    protected _utxoIsPureADA({ u }: utxoInfo) {\n        return u.value.assets.isZero() ? u : undefined;\n    }\n    /*\n     * @internal\n     **/\n    protected _infoBackToUtxo({ u }: utxoInfo) {\n        return u;\n    }\n    /**\n     * @internal\n     **/\n    protected _mkUtxoSortInfo(min: bigint, max?: bigint) {\n        return (u: TxInput): utxoInfo => {\n            const minAdaAmount = u.value.assets.isZero()\n                ? BigInt(0)\n                : u.origOutput.calcMinLovelace(this.networkParams);\n            const free = u.value.lovelace - minAdaAmount;\n            const sufficient = free > min && (max ? free < max : true);\n            const t = { u, sufficient, free, minAdaAmount };\n            // console.log(t, utxoAsString(u))\n            return t;\n        };\n    }\n    /**\n     * @internal\n     **/\n    protected _utxoCountAdaOnly(c: number, { minAdaAmount }: utxoInfo): number {\n        return c + (minAdaAmount ? 0 : 1);\n    }\n\n    async findAnySpareUtxos(\n        tcx: StellarTxnContext\n    ): Promise<TxInput[] | never> {\n        if (!this.myActor) throw this.missingActorError;\n\n        const mightNeedFees = this.ADA(3.5);\n\n        const toSortInfo = this._mkUtxoSortInfo(mightNeedFees);\n        const notReserved = tcx\n            ? tcx.utxoNotReserved.bind(tcx)\n            : (u: TxInput) => u;\n\n        return this.myActor.utxos.then((utxos) => {\n            const allSpares = utxos\n                .filter(notReserved)\n                .map(toSortInfo)\n                .filter(this._utxoIsSufficient)\n                .sort(this._utxoSortSmallerAndPureADA);\n\n            if (allSpares.reduce(this._utxoCountAdaOnly, 0) > 0) {\n                return allSpares\n                    .filter(this._utxoIsPureADA)\n                    .map(this._infoBackToUtxo);\n            }\n            return allSpares.map(this._infoBackToUtxo);\n        });\n    }\n\n    async findChangeAddr(): Promise<Address> {\n        const { myActor } = this;\n        if (!myActor) {\n            throw new Error(\n                `⚠️ ${this.constructor.name}: no this.myActor; can't get required change address!`\n            );\n        }\n        let unused = (await myActor.unusedAddresses).at(0);\n        if (!unused) unused = (await myActor.usedAddresses).at(-1);\n        if (!unused)\n            throw new Error(\n                `⚠️ ${this.constructor.name}: can't find a good change address!`\n            );\n        return unused;\n    }\n\n    async submit(\n        tcx: StellarTxnContext,\n        {\n            signers = [],\n        }: {\n            signers?: Address[];\n        } = {}\n    ) {\n        let { tx, feeLimit = 2_000_000n } = tcx;\n        const { myActor: wallet } = this;\n\n        let walletMustSign = false;\n        let sigs: helios.Signature[] | null = [];\n\n        if (wallet || signers.length) {\n            const changeAddress = await this.findChangeAddr();\n\n            const spares = await this.findAnySpareUtxos(tcx);\n            const willSign = [...signers, ...tcx.neededSigners];\n\n            const wHelper = wallet && new WalletHelper(wallet);\n            // if (false)  { if (wallet && wHelper) {\n            //     //@ts-expect-error on internal isSmart()\n            //     if (tx.isSmart() && !tcx.collateral) {\n            //         let [c] = await wallet.collateral;\n            //         if (!c) {\n            //             c = await wHelper.pickCollateral(this.ADA(5n));\n            //             if (c.value.lovelace > this.ADA(20n))\n            //                 throw new Error(\n            //                     `The only collateral-eligible utxos in this wallet have more than 20 ADA.  It's recommended to create and maintain collateral values between 2 and 20 ADA (or 5 and 20, for more complex txns)`\n            //                 );\n            //         }\n            //         tcx.addCollateral(c); // adds it also to the tx.\n            //     }\n            // } }\n            // if (sign && this.myActor) {\n            //     willSign.push(this.myActor);\n            // }\n            for (const { pubKeyHash: pkh } of willSign) {\n                if (!pkh) continue;\n                if (tx.body.signers.find((s) => pkh.eq(s))) continue;\n\n                tx.addSigner(pkh);\n            }\n            // const feeEstimated = tx.estimateFee(this.networkParams);\n            // if (feeEstimated > feeLimit) {\n            //     console.log(\"outrageous fee - adjust tcx.feeLimit to get a different threshold\")\n            //     throw new Error(`outrageous fee-computation found - check txn setup for correctness`)\n            // }\n            try {\n                // const t1 = new Date().getTime();\n                await tx.finalize(this.networkParams, changeAddress, spares);\n                // const t2 = new Date().getTime();\n                // const elapsed = t2 - t1;\n                // console.log(`::::::::::::::::::::::::::::::::: tx validation time: ${elapsed}ms`);\n                // result: validations for non-trivial txns can take ~800+ ms\n                //  - validations with simplify:true, ~250ms - but ...\n                //    ... with elided error messages that don't support negative-testing very well\n            } catch (e) {\n                // todo: find a way to run the same scripts again, with tracing retained\n                // for client-facing transparency of failures that can be escalated in a meaningful\n                // way to users.\n                console.log(\"FAILED submitting:\", tcx.dump(this.networkParams));\n                debugger;\n                throw e;\n            }\n            if (wallet && wHelper) {\n                for (const a of willSign) {\n                    if (!(await wHelper.isOwnAddress(a))) continue;\n                    walletMustSign = true;\n                    break;\n                }\n                // if any inputs from the wallet were added as part of finalizing,\n                // add the wallet's signature to the txn\n                if (!walletMustSign)\n                    for (const input of tx.body.inputs) {\n                        if (!(await wHelper.isOwnAddress(input.address)))\n                            continue;\n                        walletMustSign = true;\n                        tcx.neededSigners.push(input.address);\n                        break;\n                    }\n                if (walletMustSign) {\n                    const walletSign = wallet.signTx(tx);\n                    sigs = await walletSign.catch((e) => {\n                        console.warn(\n                            \"signing via wallet failed: \" + e.message,\n                            tcx.dump(this.networkParams)\n                        );\n                        return null;\n                    });\n                    //! doesn't need to re-verify a sig it just collected\n                    //   (sig verification is ~2x the cost of signing)\n                    if (sigs) tx.addSignatures(sigs, false);\n                }\n            }\n        } else {\n            console.warn(\"no 'myActor'; not finalizing\");\n        }\n        if (walletMustSign && !sigs) {\n            throw new Error(`wallet signing failed`);\n        }\n        console.log(\"Submitting tx: \", tcx.dump(this.networkParams));\n        const promises = [\n            this.network.submitTx(tx).catch((e) => {\n                console.warn(\n                    \"submitting via helios Network failed: \",\n                    e.message\n                );\n                debugger;\n                throw e;\n            }),\n        ];\n        if (wallet) {\n            if (!this.setup.isTest)\n                promises.push(\n                    wallet.submitTx(tx).catch((e) => {\n                        console.warn(\n                            \"submitting via wallet failed: \",\n                            e.message\n                        );\n                        debugger;\n                        throw e;\n                    })\n                );\n        }\n        return Promise.any(promises);\n    }\n\n    /**\n     * Executes additional transactions indicated by an existing transaction\n     * @remarks\n     *\n     * During the off-chain txn-creation process, additional transactions may be\n     * queued for execution.  This method is used to execute those transactions.\n     * @param tcx - the prior txn context having the additional txns to execute\n     * @param callback - an optional async callback that you can use to notify a user, or to log the results of the additional txns\n     * @public\n     **/\n    async submitAddlTxns(\n        tcx:  hasAddlTxns<any, any>,\n        callback?: AddlTxnCallback\n    ) {\n        const { addlTxns } = tcx.state;\n        for (const [txName, addlTxInfo] of \n            Object.entries(addlTxns) as [ string, AddlTxInfo<any> ][]\n        ) {\n            const { description, moreInfo, optional, tcx } = addlTxInfo;\n            // todo: allow the txn to be skipped, perhaps by letting\n            // the callback throw a new SkipAddlTxn error.\n            const replacementTcx = callback && ( \n                await callback({txName, ...addlTxInfo})\n            );\n            await this.submit(replacementTcx || tcx);\n        }\n    }\n\n    ADA(n: bigint | number): bigint {\n        const bn =\n            \"number\" == typeof n\n                ? BigInt(Math.round(1_000_000 * n))\n                : ((BigInt(1_000_000) * n) as bigint);\n        return bn;\n    }\n\n    //! it requires each subclass to define a contractSource\n    contractSource(): string | never {\n        throw new Error(`${this.constructor.name}: missing required implementation of contractSource()`);\n    }\n\n    //!!! todo: implement more and/or test me:\n    // async findFreeLovelaceWithTokens(v: Value, w: Wallet) {\n    // it.todo(\"helps find spare lovelace in tokens\");\n    // it.todo(\"will help harvest spare lovelace in the future if minUtxo is changed\");\n    //     const utxos = await w.utxos;\n    //     const lovelaceOnly = v.assets.isZero();\n    //     //! it finds free lovelace in token bundles, if it can't find free lovelace otherwise\n    //     if (lovelaceOnly) {\n    //         let maxFree: TxInput, minToken: TxInput;\n    //         let minPolicyCount = Infinity;\n\n    //         for (const u of utxos) {\n    //             const policies = u.value.assets.mintingPolicies.length;\n    //             if (policies < minPolicyCount) {\n    //                 minPolicyCount = policies;\n    //                 minToken = u;\n    //             }\n\n    //             const free =\n    //                 u.value.lovelace -\n    //                 u.origOutput.calcMinLovelace(this.networkParams);\n    //             //@ts-ignore\n    //             if (!maxFree) {\n    //                 maxFree = u;\n    //             } else if (free > maxFree!.value.lovelace) {\n    //                 maxFree = u;\n    //             }\n    //         }\n    //     }\n    // }\n\n    importModules(): HeliosModuleSrc[] {\n        return [];\n    }\n    _cache: ComputedScriptProperties = {};\n\n    loadProgramScript(params?: Partial<ConfigType>): Program | undefined {\n        const src = this.contractSource();\n        const modules = this.importModules();\n        console.log(`${this.constructor.name}: loading program script from`, \n            //@ts-expect-error\n            src.srcFile || \"‹unknown path›\"\n        );\n        for (const module of modules) {\n            const { srcFile, purpose, moduleName } = module;\n            console.log(  `  -- ${purpose}: ${moduleName} from ${srcFile}`);\n            if (!(srcFile && purpose && moduleName)) {\n                throw new Error(\n                    `${\n                        this.constructor.name\n                    }: invalid module returned from importModules():\\n${\n                        module.split(\"\\n\").slice(0, 3).join(\"\\n\") // prettier-ignore\n                    }\\n... you may need to create it with mkHeliosModule() if heliosRollupLoader() isn't suitable for your project`\n                );\n            }\n        }\n        // console.log({src, Program, modules})\n\n        try {\n            const script = Program.new(src, modules);\n            if (params) script.parameters = params;\n\n            const simplify =\n                \"optimize\" in this.setup\n                    ? this.setup.optimize\n                    : !this.setup.isTest && !this.setup.isDev;\n            // const t = new Date().getTime();\n            if (simplify) {\n                console.warn(\n                    `Loading optimized contract code for ` + script.name\n                );\n            }\n\n            console.log(\n                `${this.constructor.name}: setting compiledScript with simplify=${simplify} + params:`,\n                params\n            );\n            //!!! todo: consider pushing this to JIT or async\n            this.compiledScript = script.compile(simplify);\n            this._cache = {};\n            // const t2 = new Date().getTime();\n\n            // Result: ~80ms cold-start or (much) faster on additional compiles\n            // console.log(\"::::::::::::::::::::::::compile time \"+ (t2 - t) + \"ms\")\n            // -> caching would not improve\n\n            // const configured = Program.new(source)\n            // configured.parameters = params;\n            // const compiledScript = configured.compile(simplify)\n            // const addr = Address.fromHashes(compiledScript.validatorHash)\n\n            return script;\n        } catch (e: any) {\n            if (e.message.match(/invalid parameter name/)) {\n                throw new Error(\n                    e.message +\n                        `\\n   ... this typically occurs when your StellarContract class (${this.constructor.name})` +\n                        \"\\n   ... can be missing a getContractScriptParams() method \" +\n                        \"\\n   ... to map from the configured settings to contract parameters\"\n                );\n            }\n            if (!e.src) {\n                console.error(\n                    `unexpected error while compiling helios program (or its imported module) \\n` +\n                        `> ${e.message}\\n` +\n                        `Suggested: connect with debugger (we provided a debugging point already)\\n` +\n                        `  ... and use 'break on caught exceptions' to analyze the error \\n` +\n                        `This likely indicates a problem in Helios' error reporting - \\n` +\n                        `   ... please provide a minimal reproducer as an issue report for repair!\\n\\n` +\n                        e.stack.split(\"\\n\").slice(1).join(\"\\n\")\n                );\n                try {\n                    debugger;\n                    // debugger'ing?  YOU ARE AWESOME!\n                    //  reminder: ensure \"pause on caught exceptions\" is enabled\n                    //  before playing this next line to dig deeper into the error.\n                    const script2 = Program.new(src, modules);\n                    console.log({ params });\n                    if (params) script2.parameters = params;\n                } catch (sameError) {\n                    throw sameError;\n                }\n                throw e;\n            }\n            const moduleName = e.src.name;\n            const errorModule = [src, ...modules].find(\n                (m) => (m as any).moduleName == moduleName\n            );\n            const { srcFile = \"‹unknown path to module›\" } =\n                (errorModule as any) || {};\n            const [sl, sc, el, ec] = e.getFilePos();\n            const t = new Error(\"\");\n            const modifiedStack = t.stack!.split(\"\\n\").slice(1).join(\"\\n\");\n            const additionalErrors = e.src.errors\n                .slice(1)\n                .map((x) => `       |         ⚠️  also: ${x}`);\n            const addlErrorText = additionalErrors.length\n                ? [\"\", ...additionalErrors, \"       v\"].join(\"\\n\")\n                : \"\";\n            t.message = this.constructor.name + \":\" + e.message + addlErrorText;\n\n            t.stack =\n                `${this.constructor.name}: ${\n                    e.message\n                }\\n    at ${moduleName} (${srcFile}:${1 + sl}:${1 + sc})\\n` +\n                modifiedStack;\n\n            throw t;\n        }\n    }\n\n    private get missingActorError(): string | undefined {\n        return `Wallet not connected to Stellar Contract '${this.constructor.name}'`;\n    }\n\n    async findActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined\n    ) {\n        const wallet = this.myActor;\n\n        if (!wallet) throw new Error(this.missingActorError);\n\n        return this.hasUtxo(name, predicate, { wallet });\n    }\n\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        exceptInTcx: StellarTxnContext<any>,\n        extraErrorHint?: string\n    ): Promise<TxInput>;\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        extraErrorHint?: string\n    ): Promise<TxInput>;\n\n    async mustFindActorUtxo(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        hintOrExcept?: string | StellarTxnContext,\n        hint?: string\n    ): Promise<TxInput> {\n        const wallet = this.myActor;\n\n        if (!wallet) throw new Error(this.missingActorError);\n        const isTcx = hintOrExcept instanceof StellarTxnContext;\n        const exceptInTcx = isTcx ? hintOrExcept : undefined;\n        const extraErrorHint = isTcx\n            ? hint\n            : \"string\" == typeof hintOrExcept\n            ? hintOrExcept\n            : undefined;\n\n        return this.mustFindUtxo(\n            name,\n            predicate,\n            { wallet, exceptInTcx },\n            extraErrorHint\n        );\n    }\n\n    /**\n     * Locates a UTxO locked in a validator contract address\n     * @remarks\n     *\n     * Throws an error if no matching UTxO can be found\n     * @param semanticName - descriptive name; used in diagnostic messages and any errors thrown\n     * @param predicate - filter function; returns its utxo if it matches expectations\n     * @param exceptInTcx - any utxos already in the transaction context are disregarded and not passed to the predicate function\n     * @param extraErrorHint - user- or developer-facing guidance for guiding them to deal with the miss\n     * @public\n     **/\n    //! finds a utxo (\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        exceptInTcx: StellarTxnContext,\n        extraErrorHint?: string\n    ): Promise<TxInput>;\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        extraErrorHint?: string\n    ): Promise<TxInput>;\n\n    async mustFindMyUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        hintOrExcept?: string | StellarTxnContext,\n        hint?: string\n    ): Promise<TxInput> {\n        const { address } = this;\n        const isTcx = hintOrExcept instanceof StellarTxnContext;\n        const exceptInTcx = isTcx ? hintOrExcept : undefined;\n        const extraErrorHint = isTcx\n            ? hint\n            : \"string\" == typeof hintOrExcept\n            ? hintOrExcept\n            : undefined;\n\n        return this.mustFindUtxo(\n            semanticName,\n            predicate,\n            { address, exceptInTcx },\n            extraErrorHint\n        );\n    }\n\n    async mustFindUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        searchScope: UtxoSearchScope,\n        extraErrorHint: string = \"\"\n    ): Promise<TxInput> {\n        const { address, wallet, exceptInTcx } = searchScope;\n\n        const found = await this.hasUtxo(semanticName, predicate, {\n            address,\n            wallet,\n            exceptInTcx,\n        });\n        if (!found) {\n            throw new Error(this.utxoSearchError(semanticName, searchScope));\n        }\n\n        return found;\n    }\n\n    utxoSearchError(\n        semanticName: string,\n        searchScope: UtxoSearchScope,\n        extraErrorHint?: string\n    ): string {\n        const where = searchScope.address\n            ? `address ${searchScope.address.toBech32()}`\n            : `connected wallet`;\n        return `${this.constructor.name}: '${semanticName}' utxo not found (${\n            extraErrorHint || \"sorry, no extra clues available\"\n        }) in ${where}`;\n    }\n    toUtxoId(u: TxInput) {\n        return `${u.outputId.txId.hex}@${u.outputId.utxoIdx}`;\n    }\n\n    /**\n     * Try finding a utxo matching a predicate\n     * @remarks\n     *\n     * Finds the first matching utxo, if any, either in the indicated search-scope's `wallet` or `address`.\n     *\n     * @public\n     **/\n    async hasUtxo(\n        semanticName: string,\n        predicate: utxoPredicate,\n        { address, wallet, exceptInTcx }: UtxoSearchScope\n    ): Promise<TxInput | undefined> {\n        const utxos = address\n            ? await this.network.getUtxos(address)\n            : await wallet!.utxos;\n\n        const collateral = (wallet ? await wallet.collateral : [])[0];\n        // const filterUtxos = [\n        //     ...collateral,\n        //     ...(exceptInTcx?.reservedUtxos() || []),\n        // ];\n        const notCollateral = utxos.filter((u) => !collateral?.eq(u));\n        const filtered = exceptInTcx\n            ? notCollateral.filter(\n                  exceptInTcx.utxoNotReserved.bind(exceptInTcx)\n              )\n            : notCollateral;\n\n        console.log(\n            `finding '${semanticName}' utxo${\n                exceptInTcx ? \" (not already being spent in txn)\" : \"\"\n            } from set:\\n  ${utxosAsString(filtered, \"\\n  \")}`\n            // ...(exceptInTcx && filterUtxos?.length\n            //     ? [\n            //           \"\\n  ... after filtering out:\\n \",\n            //           utxosAsString(exceptInTcx.reservedUtxos(), \"\\n  \"),\n            //       ]\n            //     : [])\n        );\n\n        const found = filtered.find(predicate);\n        if (found) {\n            console.log(\"  <- found:\" + utxosAsString([found]));\n        } else {\n            console.log(\"  (not found)\");\n        }\n        return found;\n    }\n\n    async hasMyUtxo(\n        semanticName: string,\n        predicate: utxoPredicate\n    ): Promise<TxInput | undefined> {\n        return this.hasUtxo(semanticName, predicate, { address: this.address });\n    }\n}\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport cmh from \"./CapoMintHelpers.hl\";\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\nexport const CapoMintHelpers: HeliosModuleSrc = cmh;\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport type { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport cdh from \"./CapoDelegateHelpers.hl\";\n\nexport const CapoDelegateHelpers: HeliosModuleSrc = cdh;\n","import {\n    Address,\n    Value,\n    MintingPolicyHash,\n    Assets,\n    Crypto,\n    TxInput,\n    bytesToHex,\n    HInt,\n    ByteArray,\n    //@ts-expect-error\n    Option,\n} from \"@hyperionbt/helios\";\nimport {\n    Activity,\n    StellarContract,\n    partialTxn,\n    txn,\n} from \"../StellarContract.js\";\nimport type {\n    configBase,\n    isActivity,\n} from \"../StellarContract.js\";\n\n//@ts-expect-error - typescript doesn't grok Helios\nimport contract from \"./CapoMinter.hl\";\nexport const MinterContract = contract;\n//@ts-expect-error\nimport StellarHeliosHelpers from \"../StellarHeliosHelpers.hl\";\n\nimport { CapoMintHelpers } from \"../CapoMintHelpers.js\";\n\nimport {\n    StellarTxnContext,\n    emptyUuts,\n    type anyState,\n} from \"../StellarTxnContext.js\";\nimport type {\n    MintUutActivityArgs,\n    MinterBaseMethods,\n    hasUutContext,\n    uutPurposeMap,\n} from \"../Capo.js\";\nimport type { SeedTxnParams } from \"../SeedTxn.js\";\nimport type { valuesEntry } from \"../HeliosPromotedTypes.js\";\nimport { CapoDelegateHelpers } from \"../delegation/CapoDelegateHelpers.js\";\nimport { UutName } from \"../delegation/UutName.js\";\n\nimport type { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport { mkUutValuesEntries, mkValuesEntry, stringToNumberArray } from \"../utils.js\";\nimport { dumpAny } from \"../diagnostics.js\";\n\nimport type { DefaultCapo } from \"../DefaultCapo.js\";\nimport type { BasicMintDelegate } from \"./BasicMintDelegate.js\";\n\ntype MintCharterActivityArgs<T = {}> = T & {\n    owner: Address;\n};\n\nexport type BasicMinterParams = configBase & SeedTxnParams & {\n    capo: DefaultCapo<any, any,any>\n}\n\n/**\n * A basic minting validator serving a Capo's family of contract scripts\n * @remarks\n *\n * Mints charter tokens based on seed UTxOs.  Can also mint UUTs and\n * other tokens as approved by the Capo's minting delegate.\n * @public\n **/\nexport class CapoMinter\nextends StellarContract<BasicMinterParams>\nimplements MinterBaseMethods\n{\n    currentRev: bigint = 1n;\n    contractSource() {\n        return contract;\n    }\n    getContractScriptParams(\n        config: BasicMinterParams\n    ): configBase & SeedTxnParams {\n        const {\n            seedIndex,\n            seedTxn,\n            rev = this.currentRev,\n            isDev,\n            devGen,\n        } = config;\n\n        return {\n            rev,\n            seedIndex,\n            seedTxn,\n        };\n    }\n\n    get scriptActivitiesName() {\n        return \"MinterActivity\";\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        //@ts-expect-error\n        const { capo } = this.configIn || this.partialConfig;\n\n        if (!capo)\n            throw new Error(\n                `missing capo in config or partial-config for ${this.constructor.name}`\n            );\n\n        return capo.importModules();\n    }\n\n    /**\n     * Mints initial charter token for a Capo contract\n     * @remarks\n     *\n     * This is the fundamental bootstrapping event for a Capo.\n     * @param ownerInfo - contains the {owner} address of the Capo contract\n     * @public\n     **/\n    @Activity.redeemer\n    activityMintingCharter(ownerInfo: MintCharterActivityArgs): isActivity {\n        const { owner } = ownerInfo;\n        const mintingCharter = this.mustGetActivity(\"mintingCharter\");\n        const { DelegateDetails: hlDelegateDetails } = this.onChainTypes;\n        const t = new mintingCharter(owner);\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * Mints any tokens on sole authority of the Capo contract's minting delegage\n     * @remarks\n     *\n     * The Capo's minting delegate takes on the responsibility of validating a mint.\n     * It can validate mintingUuts, burningUuts and any application-specific use-cases\n     * for minting and/or burning tokens from the policy.\n     * @public\n     **/\n    @Activity.redeemer\n    activityMintWithDelegateAuthorizing(): isActivity {\n        const mintWithDelegateAuthorizing = this.mustGetActivity(\n            \"mintWithDelegateAuthorizing\"\n        );\n        const t = new mintWithDelegateAuthorizing();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * Mints a new UUT specifically for a minting invariant\n     * @remarks\n     *\n     * When adding a minting invariant, the Capo's existing mint delegate\n     * doesn't get to be involved, as it could otherwise block a critical administrative\n     * change needed.  The Capo's authority token is all the minter requires\n     * to create the needed UUT.\n     *\n     * @public\n     **/\n    @Activity.redeemer\n    activityAddingMintInvariant({\n        seedTxn,\n        seedIndex: sIdx,\n    }: Omit<MintUutActivityArgs, \"purposes\">): isActivity {\n        const addingMintInvariant = this.mustGetActivity(\"addingMintInvariant\");\n        const t = new addingMintInvariant(seedTxn, BigInt(sIdx));\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /** Mints a new UUT specifically for a spending invariant\n     * @remarks\n     *\n     * When adding a spending invariant, the Capo's existing mint delegate\n     * is not consulted, as this administrative function works on a higher\n     * level than the usual minting delegate's authority.\n     *\n     * @public\n     * **/\n    @Activity.redeemer\n    activityAddingSpendInvariant({\n        seedTxn,\n        seedIndex: sIdx,\n    }: Omit<MintUutActivityArgs, \"purposes\">): isActivity {\n        const addingSpendInvariant = this.mustGetActivity(\n            \"addingSpendInvariant\"\n        );\n        const t = new addingSpendInvariant(seedTxn, BigInt(sIdx));\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * Forces replacement of the Capo's mint delegate\n     * @remarks\n     *\n     * Forces the minting of a new UUT to replace the Capo's mint delegate.\n     *\n     * @param ‹pName› - descr\n     * @typeParam ‹pName› - descr (for generic types)\n     * @public\n     **/\n    @Activity.redeemer\n    activityForcingNewMintDelegate({\n        seedTxn,\n        seedIndex,\n    }: Omit<MintUutActivityArgs, \"purposes\">) {\n        console.warn(\n            \"NOTE: REPLACING THE MINT DELEGATE USING A DIRECT MINTER ACTIVITY\\n\" +\n                \"THIS IS NOT THE RECOMMENDED PATH - prefer using the existing mint delegate's ReplacingMe activity'\"\n        );\n        const ReplacingMintDelegate = this.mustGetActivity(\n            \"ForcingNewMintDelegate\"\n        );\n        const t = new ReplacingMintDelegate(seedTxn, BigInt(seedIndex));\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * Forces replacement of the Capo's spend delegate\n     * @remarks\n     *\n     * Forces the minting of a new UUT to replace the Capo's spend delegate.\n     *\n     * @param ‹pName› - descr\n     * @typeParam ‹pName› - descr (for generic types)\n     * @public\n     **/\n    @Activity.redeemer\n    activityCreatingNewSpendDelegate({\n        seedTxn,\n        seedIndex: seedIndex,\n        replacingUut,\n    }: Omit<MintUutActivityArgs, \"purposes\"> & { replacingUut?: number[] }) {\n        const ReplacingSpendDelegate = this.mustGetActivity(\n            \"CreatingNewSpendDelegate\"\n        );\n        const OptByteArray = Option(ByteArray);\n        const uutName = new OptByteArray(replacingUut);\n        const t = new ReplacingSpendDelegate(\n            seedTxn,\n            BigInt(seedIndex),\n            uutName\n        );\n        return { redeemer: t._toUplcData() };\n    }\n    /**\n     * @deprecated\n     **/\n    @Activity.redeemer\n    activityMintingUuts({\n        seedTxn,\n        seedIndex: sIdx,\n        purposes,\n    }: MintUutActivityArgs): isActivity {\n        throw new Error(\n            `minter:mintingUuts obsolete; use minter:MintWithDelegateAuthorizing with delegate:mintingUuts or another application-specific activity`\n        );\n        // const seedIndex = BigInt(sIdx);\n        // console.log(\"UUT redeemer seedTxn\", seedTxn.hex);\n        // const {mintingUuts} = this.onChainActivitiesType;\n        // const t = new mintingUuts(\n        //     seedTxn,\n        //     seedIndex,\n        //     purposes\n        // );\n\n        // return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * @deprecated - use minter:MintWithDelegateAuthorizing with delegate:burningUuts\n     * or another application-specific activity\n     **/\n    @Activity.redeemer\n    activityBurningUuts(...uutNames: string[]): isActivity {\n        throw new Error(\n            `minter:burningUuts obsolete; use minter:MintWithDelegateAuthorizing with delegate:burningUuts or another application-specific activity`\n        );\n        // const {burningUuts} =this.onChainActivitiesType;\n        // const { DelegateDetails: hlDelegateDetails } = this.onChainTypes;\n        // const t = new burningUuts(uutNames);\n\n        // return { redeemer: t._toUplcData() };\n    }\n\n    @partialTxn\n    async txnBurnUuts<existingTcx extends StellarTxnContext<any>>(\n        initialTcx: existingTcx,\n        uutNames: UutName[]\n    ) {\n        const tokenNames = uutNames.map((un) => un.name);\n        const tcx2 = this.attachRefScript(\n            initialTcx.mintTokens(\n                this.mintingPolicyHash!,\n                tokenNames.map((tokenName) =>\n                    mkValuesEntry(tokenName, BigInt(-1))\n                ),\n                this.activityBurningUuts(...tokenNames).redeemer\n            )\n        );\n\n        return tcx2 as existingTcx & typeof tcx2;\n    }\n\n    //! overrides base getter type with undefined not being allowed\n    get mintingPolicyHash(): MintingPolicyHash {\n        return super.mintingPolicyHash!;\n    }\n\n    get charterTokenAsValuesEntry(): valuesEntry {\n        return mkValuesEntry(\"charter\", BigInt(1));\n    }\n\n    tvCharter() {\n        const { mintingPolicyHash } = this;\n\n        const v = new Value(\n            undefined,\n            new Assets([[mintingPolicyHash, [this.charterTokenAsValuesEntry]]])\n        );\n        return v;\n    }\n\n    get charterTokenAsValue() {\n        console.warn(\n            \"deprecated use of `get minter.charterTokenAsValue`; use tvCharter() instead\"\n        );\n        return this.tvCharter();\n    }\n\n    @Activity.partialTxn\n    async txnMintingCharter<TCX extends StellarTxnContext<anyState>>(\n        tcx: TCX,\n        {\n            owner,\n            capoGov,\n            mintDelegate,\n            spendDelegate,\n            settingsUut,\n        }: {\n            owner: Address;\n            capoGov: UutName;\n            mintDelegate: UutName;\n            spendDelegate: UutName;\n            settingsUut: UutName;\n        }\n    ): Promise<TCX> {\n        //!!! todo: can we expect capoGov & mintDgt in tcx.state.uuts? and update the type constraint here?\n        //   ^^^ possibly based on role names instead of UUT names.\n        const charterVE = this.charterTokenAsValuesEntry;\n        const capoGovVE = mkValuesEntry(capoGov.name, BigInt(1));\n        const mintDgtVE = mkValuesEntry(mintDelegate.name, BigInt(1));\n        const spendDgtVE = mkValuesEntry(spendDelegate.name, BigInt(1));\n        const settingsUutVE = mkValuesEntry(settingsUut.name, BigInt(1));\n\n        // these are listed in the order they're expected to be found in the txn\n        // even though the txn builder would take care of reordering them.\n        //  a) shortest-first,\n        //  b) then same-length items are sorted according to byte values.\n        const values = [\n            charterVE,\n            settingsUutVE,\n            capoGovVE,\n            mintDgtVE,\n            spendDgtVE,\n        ];\n\n        return this.attachRefScript(\n            tcx.mintTokens(\n                this.mintingPolicyHash!,\n                values,\n                this.activityMintingCharter({\n                    owner,\n                }).redeemer\n            )\n        );\n        // as TCX;\n    }\n    attachRefScript(tcx) {\n        return this.configIn!.capo.txnAttachScriptOrRefScript(\n            tcx,\n            this.compiledScript\n        );\n    }\n\n    @Activity.partialTxn\n    async txnMIntingWithoutDelegate<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        vEntries: valuesEntry[],\n        minterActivity: isActivity\n    ): Promise<TCX> {\n        return this.attachRefScript(\n            tcx.mintTokens(\n                this.mintingPolicyHash!,\n                vEntries,\n                minterActivity.redeemer\n            )\n        );\n    }\n\n    @Activity.partialTxn\n    async txnMintWithDelegateAuthorizing<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        vEntries: valuesEntry[],\n        mintDelegate: BasicMintDelegate,\n        mintDgtRedeemer: isActivity,\n        returnExistingDelegate: boolean = true\n    ): Promise<TCX> {\n        const { capo } = this.configIn!;\n        const md = mintDelegate || (await capo.getMintDelegate());\n        const tcx1 = await capo.txnMustUseCharterUtxo(tcx, \"refInput\");\n        const tcx2 = await md.txnGrantAuthority(\n            tcx1,\n            mintDgtRedeemer,\n            returnExistingDelegate\n        );\n\n        return this.attachRefScript(\n            tcx2.mintTokens(\n                this.mintingPolicyHash!,\n                vEntries,\n                this.activityMintWithDelegateAuthorizing().redeemer\n            )\n        );\n        //  as TCX;\n    }\n}\n","/**\n * Documents one specific requirement\n * @remarks\n *\n * Describes the purpose, details, and implementation mechanism for a single requirement for a unit of software.\n *\n * Also references any other requirements in the host ReqtsMap structure, whose behavior this requirement\n * depends on.  The details of those other dependencies, are delegated entirely to the other requirement, facilitating\n * narrowly-focused capture of for key expectations within each individual semantic expectation of a software unit's\n * behavior.\n * \n * if there are inherited requirements, dependencies on them can be expressed in the `requiresInherited` field.\n *\n * @typeParam reqts - constrains `requires` entries to the list of requirements in the host ReqtsMap structure\n * @public\n **/\nexport type RequirementEntry<reqtName extends string, reqts extends string, inheritedNames extends string | never> = {\n    purpose: string;\n    details: string[];\n    mech: string[];\n    impl?: string; // todo: constrained to method names of the object meeting the requirements\n\n    // excludes the requirement from being referenced as its own dependendcy\n    // excludes inherited reqt names from being referenced as dependencies (use requiresInherited instead)\n    // allows inherited names to reference other inherited names\n    requires?: reqtName extends inheritedNames ? inheritedNames[] : Exclude<reqts, reqtName | inheritedNames>[];\n\n    requiresInherited? : inheritedNames[];\n};\n\nconst TODO = Symbol(\"needs to be implemented\");\n/**\n * tags requirement that aren't yet implemented\n * @public\n **/\nexport type TODO_TYPE = typeof TODO;\n\n/**\n * Describes the requirements for a unit of software\n * @remarks\n *\n * A requirements map is a list of described requirements, in which each requirement\n * has a synopsis, a description of its purpose, descriptive detail, and technical requirements\n * for the mechanism used for implementation.  The mech strings should be usable as unit-test titles.\n *\n * use the hasReqts() helper method to declare a type-safe set of requirements following this data structure.\n *\n * Each requirement also has space for nested 'requires', without the need for deeply nested data structures;\n * these reference other requirements in the same hasReqts() data structure. As a result, high-level and detail-\n * level requirements and 'impl' details can have progressive levels of detail.\n *\n * @typeParam reqts - the list of known requirement names.  Implicitly detected by the hasReqts() helper.\n * @public\n **/\nexport type ReqtsMap<validReqts extends string, inheritedNames extends string | never = never> = {\n    [reqtDescription in validReqts]: TODO_TYPE | RequirementEntry<reqtDescription, validReqts, inheritedNames>;\n};\n\n/**\n * Factory for type-safe requirements details for a unit of software\n * @public\n * @remarks\n *\n * return `hasReqts({... requirements})` from a requirements() or other method in a class, to express\n * requirements using a standardized form that supports arbitrary amounts of detailed requirements\n * with references to unit-test labels that can verify the impl details.\n *\n * You don't need to provide the type params or TS type annotations.  `requirements() { return hasReqts({...yourReqts}) }` will work fine.\n *\n * See the {@link ReqtsMap} and {@link RequirementEntry} types for more details about expressing requirements.\n *\n * NOTE: Type parameters are inferred from the provided data structure\n * @param reqtsMap - the ReqtsMap structure for the software unit\n *\n **/\nexport function hasReqts<\n    R extends ReqtsMap<validReqts, inheritedNames>,\n    const validReqts extends string = string & keyof R,\n    const inheritedNames extends string | never = never\n>(reqtsMap: R): ReqtsMap<validReqts, inheritedNames> {\n    return reqtsMap;\n}\n/** @public */\nhasReqts.TODO = TODO;\n\n/**\n * Factory for type-safe requirements combining inherited requirements with subclass-specific requirements\n * @remarks\n *\n * Use this method to combine the requirements of a subclass with the requirements of its superclass.  This\n * allows the subclass, in its requires: [ ... ] section, to reference capabilities of the base class that the subclass depends on.\n *\n * See the {@link ReqtsMap} and {@link RequirementEntry} types for more details about expressing requirements.\n *\n * @param inherits - the requirements of the base class\n * @param reqtsMap - the requirements of the subclass\n * @public\n **/\nexport function mergesInheritedReqts<\n    IR extends ReqtsMap<inheritedReqts>,\n    R extends ReqtsMap<myReqts, inheritedReqts>,\n    const inheritedReqts extends string = string & keyof IR,\n    const myReqts extends string = keyof R extends keyof IR ? never : string & keyof R,\n    // const parentReqts extends string = keyof { [parentReqt in inheritedReqts as `Parent: ${parentReqt}`] : any}\n>(inherits: IR, reqtsMap: R): ReqtsMap<myReqts | inheritedReqts , inheritedReqts \n        // never /*parentReqts */\n    > & IR {\n\n        //@ts-expect-error - uff, sorry folks.\n    return { ...inherits, ...reqtsMap } \n}\n","import {\n    Datum,\n    TxInput,\n    ValidatorHash,\n    Value,\n    bytesToText,\n} from \"@hyperionbt/helios\";\nimport { Activity, StellarContract, datum } from \"../StellarContract.js\";\nimport type { configBase, isActivity } from \"../StellarContract.js\";\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { mkTv } from \"../utils.js\";\nimport type { InlineDatum } from \"../HeliosPromotedTypes.js\";\nimport type {\n    DelegationDetail,\n    capoDelegateConfig,\n} from \"./RolesAndDelegates.js\";\nimport { hasReqts } from \"../Requirements.js\";\nimport { dumpAny } from \"../diagnostics.js\";\nimport type { MintUutActivityArgs } from \"../Capo.js\";\n\n/**\n * Base class for modules that can serve as Capo delegates\n * @public\n * @remarks\n *\n * establishes a base protocol for delegates.\n * @typeParam CT - type of any specialized configuration; use capoDelegateConfig by default.\n **/\n\nexport abstract class StellarDelegate<\n    CT extends configBase & capoDelegateConfig = capoDelegateConfig,\n    DCCT extends Record<string, any> | string = string\n> extends StellarContract<CT> {\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev };\n    }\n\n    /**\n     * Finds and adds the delegate's authority token to the transaction\n     * @remarks\n     *\n     * calls the delegate-specific DelegateAddsAuthorityToken() method,\n     * with the uut found by DelegateMustFindAuthorityToken().\n     *\n     * returns the token back to the contract using {@link StellarDelegate.txnReceiveAuthorityToken | txnReceiveAuthorityToken() }\n     * @param tcx - transaction context\n     * @public\n     **/\n    async txnGrantAuthority<\n        TCX extends StellarTxnContext\n    >(\n        tcx: TCX, \n        redeemer? : isActivity, \n        returnExistingDelegate : boolean = true\n    ) {\n        const label = `${this.constructor.name} authority`;\n        const uutxo = await this.DelegateMustFindAuthorityToken(tcx, label);\n        const useMinTv = true;\n        const authorityVal = this.tvAuthorityToken(useMinTv);\n        console.log(\n            `   ------- delegate '${label}' grants authority with ${dumpAny(\n                authorityVal,\n                this.networkParams\n            )}`\n        );\n\n        try {\n            const tcx2 = await this.DelegateAddsAuthorityToken(tcx, uutxo, redeemer || this.activityAuthorizing());\n            if (!returnExistingDelegate) return tcx2;\n            return this.txnReceiveAuthorityToken(tcx2, authorityVal, uutxo);\n        } catch (error: any) {\n            if (error.message.match(/input already added/)) {\n                throw new Error(\n                    `Delegate ${label}: already added: ${dumpAny(\n                        authorityVal,\n                        this.networkParams\n                    )}`\n                );\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * Finds the authority token and adds it to the transaction, tagged for retirement\n     * @public\n     * @remarks\n     * Doesn't return the token back to the contract.\n     **/\n    async txnRetireAuthorityToken<TCX extends StellarTxnContext>(tcx: TCX) {\n        const uutxo = await this.DelegateMustFindAuthorityToken(\n            tcx,\n            `${this.constructor.name} authority`\n        );\n        return this.DelegateRetiresAuthorityToken(tcx, uutxo);\n    }\n\n    /**\n     * Standard delegate method for receiving the authority token as a txn output\n     * @remarks\n     *\n     * creates a UTxO / TxOutput, depositing the indicated token-name into the delegated destination.\n     *\n     * Each implemented subclass can use it's own style to match its strategy & mechanism,\n     * and is EXPECTED to use tcx.addOutput() to receive the indicated `tokenValue` into the\n     * contract or other destination address.\n     *\n     * This method is used both for the original deposit and for returning the token during a grant-of-authority.\n     *\n     * Impls should normally preserve the datum from an already-present sourceUtxo, possibly with evolved details.\n     *\n     * @param tcx - transaction-context\n     * @param tokenValue - the Value of the token that needs to be received.  Always includes\n     *   the minUtxo needed for this authority token\n     * @param fromFoundUtxo - always present when the authority token already existed; can be\n     *   used to duplicate or iterate on an existing datum, or to include any additional Value in the new\n     *   UTxO, to match the previous UTxO with minimal extra heuristics\n     * @public\n     **/\n\n    abstract txnReceiveAuthorityToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        tokenValue: Value,\n        // delegateAddr: Address,\n        fromFoundUtxo?: TxInput\n    ): Promise<TCX>;\n\n    /**\n     * redeemer for exercising the authority of this delegate via its authority UUT\n     * @public\n     * @remarks\n     *\n     * The Authorizing redeemer indicates that the delegate is authorizing (certain parts of)\n     * a transaction.\n     *\n     **/\n    @Activity.redeemer\n    activityAuthorizing() {\n        throw new Error(\"unused\");\n        const thisActivity = this.mustGetActivity(\"Authorizing\");\n        const t = new thisActivity();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * redeemer for replacing the authority UUT with a new one\n     * @remarks\n     * \n     * When replacing the delegate, the current UUT will be burned,\n     * and a new one will be minted.  It can be deposited to any next delegate address.\n     * \n     * @param seedTxnDetails - seed details for the new UUT\n     * @public\n     **/\n    @Activity.redeemer\n    activityReplacingMe({ // todo: add type for seedTxnDetails\n        seedTxn,\n        seedIndex,\n        purpose        \n    } :  Omit<MintUutActivityArgs, \"purposes\"> & {purpose?: string}) {\n        debugger\n        const { \n            DelegateActivity: thisActivity, \n            activity: ReplacingMe \n        } = this.mustGetDelegateActivity(\"ReplacingMe\");\n\n        const t = new thisActivity(\n            new ReplacingMe(\n                seedTxn, \n                seedIndex, \n                purpose\n            )\n        );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    mustGetDelegateActivity(delegateActivityName: string) {\n        const DAType = this.mustGetActivity(\"DelegateActivity\");\n        const { DelegateActivity } = this.onChainTypes;\n        const activity = this.mustGetEnumVariant(\n            DelegateActivity, delegateActivityName\n        );\n\n        return { DelegateActivity : DAType,  activity };\n    }\n\n    /**\n     * redeemer for spending the authority UUT for burning it.\n     * @public\n     * @remarks\n     *\n     * The Retiring redeemer indicates that the delegate is being\n     * removed.\n     *\n     **/\n    @Activity.redeemer\n    activityRetiring() {\n        const { DelegateActivity, activity: Retiring } = this.mustGetDelegateActivity(\"Retiring\");\n\n        const t = new DelegateActivity(\n            new Retiring()\n        );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    @Activity.redeemer\n    activityModifying() {\n        const { DelegateActivity, activity: Modifying } = this.mustGetDelegateActivity(\"Modifying\");\n\n        const t = new DelegateActivity(\n            new Modifying()\n        );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    @Activity.redeemer\n    activityValidatingSettings() {\n        const { DelegateActivity, activity: ValidatingSettings } = this.mustGetDelegateActivity(\"ValidatingSettings\");\n\n        const t = new DelegateActivity(\n            new ValidatingSettings()\n        );\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * creates the essential datum for a delegate UTxO\n     * @remarks\n     *\n     * Every delegate is expected to have a two-field 'IsDelegation' variant\n     * in the first position of its on-chain Datum type.  This helper method\n     * constructs a suitable UplcData structure, given appropriate inputs.\n     * @param dd - Delegation details\n     * @public\n     **/\n    @datum\n    mkDatumIsDelegation(\n        dd: DelegationDetail,\n        ...args: DCCT extends string ? [string] | [] : [DCCT]\n    ): InlineDatum {\n        const [customConfig = \"\"] = args;\n        const { IsDelegation } = this.onChainDatumType;\n        const { DelegationDetail } = this.onChainTypes;\n        const t = new IsDelegation(new DelegationDetail(dd), customConfig);\n        return Datum.inline(t._toUplcData());\n    }\n    /**\n     * returns the ValidatorHash of the delegate script, if relevant\n     * @public\n     * @remarks\n     *\n     * A delegate that doesn't use an on-chain validator should override this method and return undefined.\n     **/\n    get delegateValidatorHash(): ValidatorHash | undefined {\n        if (!this.validatorHash) {\n            throw new Error(\n                `${this.constructor.name}: address doesn't use a validator hash!\\n` +\n                    `  ... if that's by design, you may wish to override 'get delegateValidatorHash()'`\n            );\n        }\n        return this.validatorHash;\n    }\n\n    mkAuthorityTokenPredicate() {\n        return this.mkTokenPredicate(this.tvAuthorityToken());\n    }\n    get authorityTokenName() {\n        return this.configIn!.tn\n    }\n\n    tvAuthorityToken(useMinTv: boolean = false) {\n        if (!this.configIn)\n            throw new Error(`must be instantiated with a configIn`);\n\n        const {\n            mph,\n            tn,\n            // reqdAddress,  // removed\n        } = this.configIn;\n        if (useMinTv) return this.mkMinTv(mph, tn);\n        return mkTv(mph, tn);\n    }\n\n    /**\n     * Finds the delegate authority token, normally in the delegate's contract address\n     * @public\n     * @remarks\n     *\n     * The default implementation finds the UTxO having the authority token\n     * in the delegate's contract address.\n     *\n     * It's possible to have a delegate that doesn't have an on-chain contract script.\n     * ... in this case, the delegate should use this.{@link StellarDelegate.tvAuthorityToken | tvAuthorityToken()} and a\n     * delegate-specific heuristic to locate the needed token.  It might consult the\n     * addrHint in its `configIn` or another technique for resolution.\n     *\n     * @param tcx - the transaction context\n     * @reqt It MUST resolve and return the UTxO (a TxInput type ready for spending)\n     *  ... or throw an informative error\n     **/\n    async findAuthorityToken(): Promise<TxInput | undefined> {\n        const { address } = this;\n        return this.hasUtxo(\n            `authority token: ${bytesToText(this.configIn!.tn)}`,\n            this.mkTokenPredicate(this.tvAuthorityToken()),\n            { address }\n        );\n    }\n\n    /**\n     * Tries to locate the Delegates authority token in the user's wallet (ONLY for non-smart-contract delegates)\n     * @remarks\n     *\n     * Locates the authority token,if available the current user's wallet.\n     *\n     * If the token is located in a smart contract, this method will always return `undefined`.  \n     * Use {@link StellarDelegate.findAuthorityToken | findAuthorityToken()} in that case.\n     *\n     * If the authority token is in a user wallet (not the same wallet as currently connected to the Capo contract class),\n     * it will return `undefined`.\n     *\n     * @public\n     **/\n    async findActorAuthorityToken(): Promise<TxInput | undefined> {\n        return undefined;\n    }\n\n    /**\n     * Finds the delegate authority token, normally in the delegate's contract address\n     * @public\n     * @remarks\n     *\n     * The default implementation finds the UTxO having the authority token\n     * in the delegate's contract address.\n     *\n     * It's possible to have a delegate that doesn't have an on-chain contract script.\n     * ... in this case, the delegate should use this.{@link StellarDelegate.tvAuthorityToken | tvAuthorityToken()} and a\n     * delegate-specific heuristic to locate the needed token.  It might consult the\n     * addrHint in its `configIn` or another technique for resolution.\n     *\n     * @param tcx - the transaction context\n     * @reqt It MUST resolve and return the UTxO (a TxInput type ready for spending)\n     *  ... or throw an informative error\n     **/\n    async DelegateMustFindAuthorityToken(\n        tcx: StellarTxnContext,\n        label: string\n    ): Promise<TxInput> {\n        return this.mustFindMyUtxo(\n            `${label}: ${bytesToText(this.configIn!.tn)}`,\n            this.mkTokenPredicate(this.tvAuthorityToken()),\n            \"this delegate strategy might need to override txnMustFindAuthorityToken()\"\n        );\n    }\n\n    /**\n     * Adds the delegate's authority token to a transaction\n     * @public\n     * @remarks\n     * Given a delegate already configured by a Capo, this method implements\n     * transaction-building logic needed to include the UUT into the `tcx`.\n     * the `utxo` is discovered by {@link StellarDelegate.DelegateMustFindAuthorityToken | DelegateMustFindAuthorityToken() }\n     * \n     * The default implementation adds the `uutxo` to the transaction \n     * using {@link StellarDelegate.activityAuthorizing | activityAuthorizing() }.\n     * \n     * The off-chain code shouldn't need to check the details; it can simply\n     * arrange the details properly and spend the delegate's authority token, \n     * using this method.\n     * \n     * ### Reliance on this delegate\n     * \n    * Other contract scripts can rely on the delegate script to have validated its \n     * on-chain policy and enforced its own \"return to the delegate script\" logic.\n     * \n     * ### Enforcing on-chain policy\n     * \n     * When spending the authority token in this way, the delegate's authority is typically \n     * narrowly scoped, and it's expected that the delegate's on-chain script validates that \n     * those parts of the transaction detail should be authorized, in accordance with the \n     * delegate's core purpose/responsbility - i.e. that the txn does all of what the delegate \n     * expects, and none of what it shouldn't do in that department.\n     * \n     * The on-chain code SHOULD typically enforce:\n     *  * that the token is spent with Authorizing activity (redeemer).  NOTE:\n     *     the **CapoDelegateHelpers** helios module provides the `requiresDelegateAuthorizing()` \n     *     function for just this purpose\n    \n     *  * that the authority token is returned to the contract with its datum unchanged \n     *  * that any other tokens it may also hold in the same UTxO do not become \n     *     inaccessible as a result of the transactions - perhaps by requiring them to be \n     *     returned together with the authority token.\n     * \n     * It MAY enforce additional requirements as well.\n     *\n     * @example\n     * A minting delegate should check that all the expected tokens are \n     * minted, AND that no other tokens are minted.  \n     * \n     * @example\n     * A role-based authentication/signature-checking delegate can \n     * require an appropriate signature on the txn.\n     * \n    * @param tcx - the transaction context\n    * @param utxo - the utxo having the authority UUT for this delegate\n    * @reqt Adds the uutxo to the transaction inputs with appropriate redeemer.\n    * @reqt Does not output the value; can EXPECT txnReceiveAuthorityToken to be called for that purpose.\n     **/\n    protected async DelegateAddsAuthorityToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        uutxo: TxInput,\n        redeemer: isActivity\n    ): Promise<TCX> {\n        const {capo} = this.configIn!;\n        return capo.txnAttachScriptOrRefScript(\n            tcx.addInput(uutxo, redeemer),\n            this.compiledScript\n        )\n\n        // return this.txnKeepValue(\n        //     tcx,\n        //     uutxo.value,\n        //     uutxo.origOutput.datum as InlineDatum\n        // );\n    }\n\n    /**\n     * Adds any important transaction elemements supporting the authority token being retired, closing the delegate contracts' utxo.\n     * @remarks\n     *\n     * EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n     *\n     * EXPECTS the `burn` instruction to be separately added to the transaction.\n     *\n     * The default implementation uses the conventional `Retiring` activity\n     * to spend the token.\n     *\n     * @reqt\n     * It MUST add the indicated utxo to the transaction as an input\n     *\n     * @reqt\n     * When backed by a contract:\n     *   * it should use an activity/redeemer allowing the token to be spent\n     *      **and NOT returned**.\n     *   * the contract script SHOULD ensure any other UTXOs it may also hold, related to this delegation,\n     *      do not become inaccessible as a result.\n     *\n     * It MAY enforce additional requirements and/or block the action.\n     *\n     *\n     * @param tcx - transaction context\n     * @param fromFoundUtxo - the utxo having the authority otken\n     * @public\n     **/\n    protected async DelegateRetiresAuthorityToken(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext> {\n        const utxo = fromFoundUtxo;\n        return tcx.addInput(\n            new TxInput(utxo.outputId, utxo.origOutput),\n            this.activityRetiring()\n        );\n    }\n\n    /**\n     * Captures requirements as data\n     * @remarks\n     *\n     * see reqts structure\n     * @public\n     **/\n    delegateRequirements() {\n        return hasReqts({\n            \"provides an interface for providing arms-length proof of authority to any other contract\":\n                {\n                    purpose:\n                        \"to decouple authority administration from its effects\",\n                    details: [\n                        \"Any contract can create a UUT for use with an authority policy.\",\n                        \"By depositing that UUT to the authority contract, it can delegate completely\",\n                        \"  ... all the implementation details for administration of the authority itself.\",\n                        \"It can then focus on implementing the effects of authority, requiring only \",\n                        \"  ... that the correct UUT has been spent, to indicate that the authority is granted.\",\n                        \"The authority contract can have its own internal details \",\n                        \"A subclass of this authority policy may provide additional administrative dynamics.\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"implementations SHOULD positively govern spend of the UUT\",\n                        \"implementations MUST provide an essential interface for transaction-building\",\n                    ],\n                },\n\n            \"implementations SHOULD positively govern spend of the UUT\": {\n                purpose: \"for sufficient assurance of desirable safeguards\",\n                details: [\n                    \"A subclass of the GenericAuthority should take care of guarding the UUT's spend\",\n                    \"  ... in whatever way is appropriate for its use-case\",\n                ],\n                mech: [],\n                requires: [],\n            },\n\n            \"implementations MUST provide an essential interface for transaction-building\":\n                {\n                    purpose:\n                        \"enabling a strategy-agnostic interface for making transactions using any supported strategy-variant\",\n                    details: [\n                        \"Subclasses MUST implement the interface methods\",\n                        \"  ... in whatever way is considered appropriate for its use-case.\",\n                        \"An interface method whose requirement is marked with 'MAY/SHOULD' behavior, \",\n                        \"  ... MUST still implement the method satisfying the interface, \",\n                        \"  ... but MAY throw an UnsupportedAction error, to indicate that\",\n                        \"  ... the strategy variant has no meaningful action to perform \",\n                        \"  ... that would serve the method's purpose\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"requires a txnReceiveAuthorityToken(tcx, delegateAddr, fromFoundUtxo?)\",\n                        \"requires a mustFindAuthorityToken(tcx)\",\n                        \"requires a txnGrantAuthority(tcx, delegateAddr, fromFoundUtxo)\",\n                        \"requires txnRetireCred(tcx, fromFoundUtxo)\",\n                    ],\n                },\n\n            \"requires a txnReceiveAuthorityToken(tcx, delegateAddr, fromFoundUtxo?)\":\n                {\n                    purpose:\n                        \"to deposit the authority token (back) to the delegated destination\",\n                    details: [\n                        \"impls MUST implement txnReceiveAuthorityToken\",\n                        \"Each implemented subclass can use it's own style to match its strategy & mechanism\",\n                        \"This is used both for the original deposit and for returning the token during a grant-of-authority\",\n                    ],\n                    mech: [\n                        \"impls MUST create a UTxO depositing the indicated token-name into the delegated destination.\",\n                        \"impls should normally preserve the datum from an already-present sourceUtxo\",\n                    ],\n                    requires: [],\n                },\n\n            \"requires a mustFindAuthorityToken(tcx)\": {\n                purpose: \"to locate the given authority token\",\n                details: [\n                    \"allows different strategies for finding the UTxO having the authority token\",\n                    \"impls MAY use details seen in the txn context to find the indicated token\",\n                ],\n                mech: [\n                    \"impls MUST resolve the indicated token to a specific UTxO or throw an informative error\",\n                ],\n            },\n\n            \"requires a txnGrantAuthority(tcx, delegateAddr, fromFoundUtxo)\": {\n                purpose: \"to use the delegated authority\",\n                details: [\n                    \"Adds the indicated utxo to the transaction with appropriate activity/redeemer\",\n                    \"Contracts needing the authority within a transaction can rely on the presence of this spent authority\",\n                    \"Impls can EXPECT the token will be returned via txnReceiveAuthorityToken\",\n                    \"a contract-backed impl SHOULD enforce the expected return in its on-chain code\",\n                ],\n                mech: [\n                    \"the base AuthorityPolicy MUST call txnReceiveAuthorityToken() with the token's sourceUtxo\",\n                ],\n            },\n\n            \"requires txnRetireCred(tcx, fromFoundUtxo)\": {\n                purpose: \"to allow burning the authority token\",\n                details: [\n                    \"Adds the indicated utxo to the transaction with appropriate activity/redeemer\",\n                    \"  ... allowing the token to be burned by the minting policy.\",\n                    \"Impls SHOULD ensure any other UTXOs it may hold do not become inaccessible as a result\",\n                ],\n                mech: [\n                    \"impls MUST add the token to the txn if it can be retired\",\n                    \"if the token cannot be retired, by appropriate policy, it SHOULD throw an informative error\",\n                ],\n            },\n        });\n    }\n}\n","import { Address, MintingPolicyHash, ValidatorHash, bytesToHex, bytesToText } from \"@hyperionbt/helios\";\nimport type {\n    ConfigFor,\n    configBase,\n    devConfigProps,\n    stellarSubclass,\n} from \"../StellarContract.js\";\nimport {\n    StellarContract,\n} from \"../StellarContract.js\";\n\nimport { StellarDelegate } from \"./StellarDelegate.js\";\nimport type { Capo } from \"../Capo.js\";\n\n/**\n * An error type for reflecting configuration problems at time of delegate setup\n * @remarks\n * \n * acts like a regular error, plus has an `errors` object mapping field names\n * to problems found in those fields.   \n *\n * When a strategy-selection failure happens, the `availableStrategies` property \n * also has a list of known strategies for a selected delegation role.\n *  \n * @param ‹pName› - descr\n * @public\n **/\nexport class DelegateConfigNeeded extends Error {\n    errors?: ErrorMap;\n    availableStrategies?: string[];\n    constructor(\n        message: string,\n        options: {\n            errors?: ErrorMap;\n            availableStrategies?: string[];\n            errorRole? : string;\n        }\n    ) {\n        super(message);\n        const { errors, availableStrategies } = options;\n        if (errors) this.errors = errors;\n        if (availableStrategies) this.availableStrategies = availableStrategies;\n    }\n}\n\n/**\n * Reveals errors found during delegate selection\n * @remarks\n * \n * Each field name is mapped to an array of string error messages found on that field.\n * @public\n **/\nexport type ErrorMap = Record<string, string[]>;\n\n/**\n * return type for strategy's validateScriptParams()\n * @internal\n **/\nexport type strategyValidation = ErrorMap | undefined;\n\n/**\n * Captures normal details of every delegate relationship\n * @remarks\n * \n * Includes the address of the leader contract, its minting policy, and the token-name\n * used for the delegate\n * @public\n **/\nexport type DelegationDetail = {\n    capoAddr: Address;\n    mph: MintingPolicyHash;\n    tn: number[];\n};\n\n/**\n * Allows any targeted delegate class to access & use certain details originating in the leader contract\n * @remarks\n *\n * This setting is implicitly defined on all Delegate configurations.\n *\n * These allow any Capo delegate class to reference details from its essential\n * delegation context\n *\n * @public\n **/\nexport type capoDelegateConfig = configBase & devConfigProps & {\n    capoAddr: Address;\n    capo: Capo<any, any, any>;\n    mph: MintingPolicyHash;\n    tn: number[];\n    rev: bigint;\n    addrHint: Address[];\n};\n\n/**\n * Richly-typed structure that can capture the various delegation roles available\n * in a Capo contract\n * @remarks\n * \n * Defined in a delegateRoles() method using the standalone delegateRoles() \n * and defineRole() helper functions.\n * @typeParam KR - deep, strong type of the role map - always inferred by \n * delegateRoles() helper.\n * @public\n **/\nexport type RoleMap<KR extends Record<string, RoleInfo<any, any, any, any>>> = {\n    [roleName in keyof KR]: KR[roleName];\n};\n\n/**\n * Standalone helper method defining a specific RoleMap; used in a Capo's delegateRoles() instance method\n * @remarks\n * \n * Called with a set of literal role defintitions, the full type  of the RoleMap is inferred.\n * \n * Use {@link defineRole}() to create each role entry\n * \n * @param roleMap - maps role-names to role-definitions\n * @typeParam RM - inferred type of the `roleMap` param\n * @public\n **/\nexport function delegateRoles<const RM extends RoleMap<any>>(\n    roleMap: RM\n): RoleMap<RM> {\n    return roleMap;\n}\n\n/**\n * toJSON adapter for delegate links\n * @internal\n **/\nexport function delegateLinkSerializer(key: string, value: any) {\n    if (typeof value === \"bigint\") {\n        return value.toString();\n    } else if (\"bytes\" == key && Array.isArray(value)) {\n        return bytesToHex(value)\n    } else if (value instanceof Address) {\n        return value.toBech32()\n    } else if (\"tn\" == key && Array.isArray(value)) {\n        return bytesToText(value)\n    }\n    if (key === \"capo\") return undefined;\n    return value; // return everything else unchanged\n}\n\n/**\n * Describes one delegation role used in a Capo contract\n * @remarks\n * \n * Includes the base class for all the variants of the role, a \n * uutPurpose (base name for their authority tokens), and\n * named variants for that role\n * \n * All type-parameters are normally inferred from {@link defineRole}()\n * \n * @public\n **/\nexport type RoleInfo<\n    SC extends StellarContract<any>,\n    VM extends Record<variants, VariantStrategy<SC>>,\n    UUTP extends string,\n    variants extends string = string & keyof VM\n> = {\n    uutPurpose: UUTP;\n    baseClass: stellarSubclass<SC>;\n    variants: { [variant in variants]: VM[variant] };\n};\n\n/**\n * Creates a strongly-typed definition of a delegation role used in a Capo contract\n * \n * @remarks\n * The definition ncludes the different strategy variants that can serve in that role.\n * \n * NOTE: all type parameters are inferred from the function params.\n * \n* @param uutBaseName - token-name prefix for the tokens connecting delegates for the role\n * @param baseClass - each variant is expected to inherit from this base class\n * @param variants - maps each strategy-variant name to a detailed {@link VariantStrategy}  definition\n * @public\n **/\nexport function defineRole<\n    const UUTP extends string,\n    SC extends StellarContract<any>,\n    const VMv extends RoleInfo<SC, any, UUTP>[\"variants\"]\n>(\n    uutBaseName: UUTP,\n    baseClass: stellarSubclass<SC> & any,\n    variants: VMv\n): RoleInfo<SC, VMv, UUTP> {\n    return {\n        uutPurpose: uutBaseName,\n        baseClass,\n        variants,\n    };\n}\n\n//!!! todo: develop this further to allow easily enhancing a parent role-definition\n// ... with an additional strategy variant\n\n// type vmapBuilder<\n//     SC extends StellarContract<any>,\n//     UUTP extends string,\n//     VMv extends RoleInfo<SC, any, UUTP>[\"variants\"]\n// > = (variants: VMv) => RoleInfo<SC, VMv, UUTP>;\n// export function defineRole<\n//     SC extends StellarContract<any>,\n//     const PUUTP extends string,\n// >(\n//     inheritedRoleDefinition: RoleInfo<SC, any, PUUTP>\n// ) : vmapBuilder<SC, PUUTP, RoleInfo<SC, any, PUUTP>[\"variants\"]>\n// export function defineRole<\n//     const UUTP extends string,\n//     SC extends StellarContract<any>,\n// >(\n//     uutBaseName: UUTP,\n//     subclass: stellarSubclass<SC> & any,\n// ) : vmapBuilder<SC, UUTP, RoleInfo<SC, any, UUTP>[\"variants\"]>\n// export function defineRole<\n//     const UUTP extends string,\n//     SC extends StellarContract<any>,\n//     const Puutp extends string,\n// >(\n//     uBNorParentDef: Puutp | RoleInfo<SC, any, UUTP>,\n//     subclass?: stellarSubclass<SC> & any,\n// ) : vmapBuilder<SC, Puutp | UUTP, RoleInfo<SC, any, Puutp | UUTP>[\"variants\"]> {\n//     const uutBaseName = (\n//         \"string\" == typeof uBNorParentDef\n//      ) ? uBNorParentDef\n//         : uBNorParentDef.uutPurpose;\n\n//     return function vmapBuilder<\n//         const VMv extends RoleInfo<SC, any, UUTP>[\"variants\"]\n//     >(\n//         variants: VMv\n//     ): RoleInfo<SC, VMv, UUTP> {\n//         return {\n//             uutPurpose: uutBaseName,\n//             variants,\n//         };\n//     }\n\nexport type strategyParams = configBase;\nexport type delegateScriptParams = configBase;\n\nexport type PartialParamConfig<CT extends configBase> = Partial<CT>;\n\n/**\n * declaration for one strategy-variant of a delegate role\n * @remarks\n * \n * Indicates the details needed to construct a delegate script\n * \n * NOTE: the Type param is always inferred by defineRole()\n * @public\n **/\nexport type VariantStrategy<\n    DT extends StellarContract<capoDelegateConfig & any>\n> = {\n    delegateClass: stellarSubclass<DT>;\n    //! it MAY provide a partial configuration to be used for parameterizing\n    //  the underlying contract script, to be further customized by a delegate-selection\n    partialConfig?: PartialParamConfig<ConfigFor<DT>>;\n    //! it has a function used for validating parameter details\n    validateConfig?: (p: ConfigFor<DT>) => strategyValidation;\n};\n\n//! a map of delegate selections needed for a transaction\n//  ... to construct a concrete delegate that hasn't yet been manifested.\n//  ... This commonly is needed during initial setup of a contract,\n//  ... but may happen also at later moments in the contract's lifecycle.\nexport type SelectedDelegates = {\n    [roleName: string]: SelectedDelegate<StellarContract<any>>;\n};\n\n//! a single delegate selection, where a person chooses\n//  ... one of the strategy variants\n//  ... and the settings (script parameters) needed to create the on-chain contract\nexport type SelectedDelegate<SC extends StellarContract<any>> = {\n    strategyName: string;\n    config?: Partial<ConfigFor<SC>>;\n};\n\n// export type StellarDelegate =\n//     StellarDelegateClass<any & configBase & capoDelegateConfig> &\n//     StellarContract<any & configBase & capoDelegateConfig>;\n\n// export function selectDelegate<T extends StellarContract<any>>(\n//     sd: SelectedDelegate<T>\n// ) {\n//     return sd;\n// }\n\n/**\n * A complete, validated and resolved configuration for a specific delegate\n * @public\n * @remarks\n *\n * Use StellarContract's `txnCreateDelegateSettings()` method to resolve\n * from any (minimal or better) delegate details to a ResolvedDelegate object.\n * @typeParam DT - a StellarContract class conforming to the `roleName`,\n *     within the scope of a Capo class's `roles()`.\n **/\nexport type ConfiguredDelegate<DT extends StellarDelegate<any>> = {\n    delegateClass: stellarSubclass<DT>;\n    delegate: DT;\n    roleName: string;\n    config: ConfigFor<DT>;\n} & RelativeDelegateLink<DT>;\n\n/**\n * Minimal structure for connecting a specific Capo contract to a configured StellarDelegate\n * @remarks\n * \n * This structure can always resolve to a reproducible delegate class (a {@link StellarDelegate}),\n * given a specific Capo and roleName.  \n * \n * When the delegate isn't backed by a specific on-chain contract script, the delegateValidatorHash \n * is optional.\n * \n * @typeParam DT - the base class, to which all role-strategy variants conform\n * @public\n **/\nexport type RelativeDelegateLink<DT extends StellarDelegate<any>> = {\n    uutName: string;\n    strategyName: string;\n    config: Partial<ConfigFor<DT>>;\n    delegateValidatorHash?: ValidatorHash;\n    // reqdAddress?: Address; removed\n    // addrHint?: Address[]; moved to config\n};\n","import {\n    Address,\n    Assets,\n    Datum,\n    MintingPolicyHash,\n    TxId,\n    TxOutput,\n    TxInput,\n    Value,\n    AssetClass,\n    ValidatorHash,\n    UplcProgram,\n    bytesToText,\n} from \"@hyperionbt/helios\";\nimport { CapoMinter } from \"./minting/CapoMinter.js\";\nimport type { BasicMinterParams } from \"./minting/CapoMinter.js\";\nimport {\n    Activity,\n    StellarContract,\n    partialTxn,\n    txn,\n} from \"./StellarContract.js\";\nimport type {\n    StellarFactoryArgs,\n    isActivity,\n    configBase,\n    stellarSubclass,\n    ConfigFor,\n    devConfigProps,\n    SetupDetails,\n} from \"./StellarContract.js\";\nimport type { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport {\n    StellarTxnContext,\n    type hasSeedUtxo,\n    type uutMap,\n} from \"./StellarTxnContext.js\";\nimport {\n    DelegateConfigNeeded,\n    delegateLinkSerializer,\n} from \"./delegation/RolesAndDelegates.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport type {\n    ConfiguredDelegate,\n    ErrorMap,\n    RoleMap,\n    VariantStrategy,\n    RelativeDelegateLink,\n    RoleInfo,\n} from \"./delegation/RolesAndDelegates.js\";\n\nimport { CapoDelegateHelpers } from \"./delegation/CapoDelegateHelpers.js\";\nimport type { SeedTxnParams } from \"./SeedTxn.js\";\nimport { CapoMintHelpers } from \"./CapoMintHelpers.js\";\n//@ts-expect-error\nimport StellarHeliosHelpers from \"./StellarHeliosHelpers.hl\";\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { errorMapAsString } from \"./diagnostics.js\";\nimport { hasReqts } from \"./Requirements.js\";\nimport {\n    mkUutValuesEntries,\n    mkValuesEntry,\n    stringToNumberArray,\n} from \"./utils.js\";\n\nimport type { DelegationDetail } from \"./delegation/RolesAndDelegates.js\";\nimport { StellarDelegate } from \"./delegation/StellarDelegate.js\";\nimport type { AuthorityPolicy, anyState } from \"../index.js\";\nimport type { DatumAdapter } from \"./DatumAdapter.js\";\nimport { type OffchainSettingsType, type OnchainSettingsType, type SettingsAdapterFor } from \"./CapoSettingsTypes.js\";\n\n/**\n * Includes key details needed to create a delegate link\n * @remarks\n *\n * Requires a `strategyName` and may include a partial `config` for the targeted SC contract type\n *\n * Because delegates can be of different subtypes, the SC and `config` are typically\n * generic at the type level.  When using the `config` entry for a specific delegate subtype,\n * additional details might be needed (not expected to be the norm).\n *\n * uutName can't be specified in this structure because creating a delegate link\n * should use txnMustGetSeedUtxo() instead, minting a new UUT for the purpose.\n * If you seek to reuse an existing uutName, probably you're modifying an existing\n * full RelativeDelegateLink structure instead - e.g. with a different `strategy` and\n * `config`; this type wouldn't be involved in that case.\n *\n * @typeParam SC - the type of StellarContract targeted for delegation\n * @public\n **/\n\nexport type MinimalDelegateLink<SC extends StellarDelegate<any>> = Required<\n    Pick<RelativeDelegateLink<SC>, \"strategyName\">\n> &\n    Partial<Omit<RelativeDelegateLink<SC>, \"uutName\">>;\n\nexport type {\n    RoleMap,\n    strategyValidation,\n} from \"./delegation/RolesAndDelegates.js\";\n\nexport type FoundUut = { utxo: TxInput; uut: UutName };\n\n\n/**\n * strongly-typed map of purpose-names to Uut objects\n *\n * @public\n */\nexport type uutPurposeMap<unionPurpose extends string> = {\n    [purpose in unionPurpose]: UutName;\n};\n\n// export type hasSomeUuts<uutEntries extends string> = {\n//     uuts: Partial<uutPurposeMap<uutEntries>>;\n// };\n\n/**\n * used for transaction-context state having specific uut-purposes\n *\n * @public\n */\nexport type hasAllUuts<uutEntries extends string> = {\n    uuts: uutPurposeMap<uutEntries>;\n};\n\nexport type UutCreationAttrs = {\n    usingSeedUtxo?: TxInput | undefined;\n    additionalMintValues?: valuesEntry[];\n    omitMintDelegate?: true;\n    usingMintDelegateActivity?: isActivity;\n    minterActivity?: isActivity;\n    returnExistingDelegateToScript? : false\n};\nexport type UutCreationAttrsWithSeed = UutCreationAttrs &\n    Required<Pick<UutCreationAttrs, \"usingSeedUtxo\">>;\n\n/**\n * the uut-factory interface\n *\n * @public\n */\nexport interface hasUutCreator {\n    txnWillMintUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        uutArgs: UutCreationAttrsWithSeed,\n        roles?: RM\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx>;\n\n    txnMintingUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext & hasSeedUtxo,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        uutArgs?: UutCreationAttrs,\n        roles?: RM\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx>;\n\n    // txnBurnUuts<\n    //     existingTcx extends StellarTxnContext<any>,\n    // >(\n    //     initialTcx: existingTcx,\n    //     uutNames: UutName[],\n    // ): Promise<existingTcx>;\n}\n\n/**\n * UUT minting should always use these settings to guard for uniqueness\n *\n * @public\n */\nexport type MintUutActivityArgs = {\n    seedTxn: TxId;\n    seedIndex: bigint | number;\n    purposes: string[];\n};\n/**\n * A txn context having specifically-purposed UUTs in its state\n * @public\n */\nexport type hasUutContext<uutEntries extends string> = StellarTxnContext<\n    hasAllUuts<uutEntries>\n>;\n\n/**\n * charter-minting interface\n *\n * @public\n */\nexport interface MinterBaseMethods {\n    get mintingPolicyHash(): MintingPolicyHash;\n    txnMintingCharter<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        charterMintArgs: {\n            owner: Address;\n            capoGov: UutName;\n        },\n        tVal: valuesEntry\n    ): Promise<TCX>;\n    txnMintWithDelegateAuthorizing<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        vEntries: valuesEntry[],\n        delegate: StellarDelegate<any>,\n        redeemer: isActivity\n    ): Promise<TCX>;\n}\n\nexport type anyDatumArgs = Record<string, any>;\n\nexport type rootCapoConfig = devConfigProps & {\n    rootCapoScriptHash?: ValidatorHash;\n};\n\n//!!! todo: let this be parameterized for more specificity\nexport type CapoBaseConfig = configBase &\n    rootCapoConfig &\n    SeedTxnParams & {\n        mph: MintingPolicyHash;\n        rev: bigint;\n        bootstrapping?: true;\n    };\n\n/**\n * StellarTransactionContext exposing a bootstrapped Capo configuration\n * @remarks\n *\n * During first-time setup of a Capo contract, its manifest configuration details\n * should be captured for reproducibility, and this type allows the bootstrap\n * transaction to expose that configuration.\n *\n * DefaultCapo's {@link DefaultCapo.mkTxnMintCharterToken | mkTxnMintCharterToken()} returns a transaction context\n * of this type, with `state.bootstrappedConfig`;\n * @public\n **/\nexport type hasBootstrappedConfig<CT extends CapoBaseConfig> =\n    StellarTxnContext<{\n        bsc: CT;\n        uuts: uutMap;\n        bootstrappedConfig: any;\n    }>;\n\ntype PreconfiguredDelegate<T extends StellarDelegate<any>> = Omit<\n    ConfiguredDelegate<T>,\n    \"delegate\" | \"delegateValidatorHash\"\n>;\n\n/**\n * Base class for the leader of a set of contracts\n * @remarks\n *\n * A Capo contract provides a central contract address that can act as a treasury or data registry;\n * it can mint tokens using its connected minting-policy, and it can delegate policies to other contract\n * scripts.  Subclasses of Capo can use these capabilities in custom ways for strong flexibility.\n *\n * Any Capo contract can (and must) define delegateRoles() to establish collaborating scripts; these are used for\n * separating granular responsbilities for different functional purposes within your (on-chain and off-chain)\n * application; this approach enables delegates to use any one of multiple strategies with different\n * functional logic to serve in any given role, thus providing flexibility and extensibility.\n *\n * The delegation pattern uses UUTs, which are non-fungible / unique utility tokens.  See DefaultCapo for more about them.\n *\n * **Capo is a foundational class**; you should consider using DefaultCapo as a starting point,\n * unless its govAuthority role conflicts with your goals.\n *\n * Inherits from: {@link StellarContract}\\<`configType`\\> (is this a redundant doc entry?) .\n *\n * @typeParam minterType - allows setting a different contract (script & off-chain class) for the minting policy\n * @typeParam charterDatumType - specifies schema for datum information held in the Capo's primary or \"charter\" UTXO\n * @typeParam configType - specifies schema for details required to pre-configure the contract suite, or to reproduce it in a specific application instance.\n * @public\n */\nexport abstract class Capo<\n    settingsType,\n    minterType extends MinterBaseMethods & CapoMinter = CapoMinter,\n    charterDatumType extends anyDatumArgs = anyDatumArgs,\n    configType extends CapoBaseConfig = CapoBaseConfig\n> extends StellarContract<configType> {\n    static currentRev: bigint = 1n;\n    devGen: bigint = 0n;\n    abstract get delegateRoles(): RoleMap<any>;\n    abstract verifyCoreDelegates(): Promise<any>;\n    verifyConfigs(): Promise<any> {\n        return this.verifyCoreDelegates();\n    }\n    get isConfigured(): Promise<boolean> {\n        if (!this.configIn) return Promise.resolve(false);\n        // if (this._verifyingConfigs) return this._verifyingConfigs;\n        return Promise.resolve(true);\n    }\n    static parseConfig(rawJsonConfig: any) {\n        throw new Error(\n            `Stellar contract subclasses should define their own static parseConfig where needed to enable connection from a specific dApp to a specific Stellar Contract.`\n        );\n    }\n\n    static get defaultParams() {\n        const params = {\n            rev: this.currentRev,\n            devGen: 0n,\n        };\n        return params;\n    }\n\n    /**\n     * extracts from the input configuration the key details needed to construct/reconstruct the on-chain contract address\n     * @remarks\n     *\n     * extracts the details that are key to parameterizing the Capo / leader's on-chain contract script\n     * @public\n     **/\n    getContractScriptParams(\n        config: configType\n    ): configBase & devConfigProps & Partial<configType> {\n        if (\n            this.configIn &&\n            config.mph &&\n            this.minter &&\n            !config.mph.eq(this.mph)\n        )\n            throw new Error(`mph mismatch`);\n        const { mph } = config;\n        const rev = (this.constructor as typeof Capo).currentRev;\n        // console.log(\"this treasury uses mph\", mph?.hex);\n\n        const params = {\n            mph,\n            rev,\n            isDev: false,\n            devGen: 0n,\n        } as configType;\n\n        if (\"production\" !== process.env.NODE_ENV) {\n            if (0n === this.devGen && \"test\" !== process.env.NODE_ENV) {\n                throw new Error(\n                    `${this.constructor.name}: missing required instance property devGen : bigint > 0n`\n                );\n            }\n            params.isDev = true;\n            params.devGen = this.devGen;\n        }\n\n        return params;\n    }\n\n    async init(args: StellarFactoryArgs<configType>) {\n        await super.init(args);\n\n        const {\n            scriptDatumName: onChainDatumName,\n            scriptActivitiesName: onChainActivitiesName,\n        } = this;\n\n        const { CharterToken } = this.onChainDatumType;\n        const updatingCharter = this.mustGetActivity(\"updatingCharter\");\n        const usingAuthority = this.mustGetActivity(\"usingAuthority\");\n\n        if (!CharterToken)\n            throw new Error(\n                `datum type ${onChainDatumName} must have a 'CharterToken' variant`\n            );\n        if (!updatingCharter)\n            throw new Error(\n                `activities type ${onChainActivitiesName} must have a 'updatingCharter' variant`\n            );\n        if (!usingAuthority)\n            throw new Error(\n                `activities type${onChainActivitiesName} must have a 'usingAuthority' variant`\n            );\n\n        if (this.configIn && !this.configIn.bootstrapping) {\n            const { seedIndex, seedTxn } = this.configIn;\n            await this.connectMintingScript({ seedIndex, seedTxn });\n\n            await this.verifyConfigs();\n            // this._verifyingConfigs = this.verifyConfigs().then((r) => {\n            //     this._verifyingConfigs = undefined;\n            //     return r;\n            // });\n        } else {\n            // this.connectMintingScript(this.getMinterParams());\n        }\n\n        //@ts-expect-error - trust the subclass's initSettingsAdapter() to be type-matchy\n        //   ... based on other abstract methods defined below\n        this.settingsAdapter = this.initSettingsAdapter()\n\n        return this;\n    }\n\n    static bootstrapWith(args: StellarFactoryArgs<CapoBaseConfig>) {\n        const { setup, config } = args;\n        const Class = this;\n        //@ts-expect-error this is just Javascript.  Sorry, typescript!\n        return new Class({ setup, config: { ...config, bootstrapping: true } });\n    }\n    abstract contractSource(): HeliosModuleSrc;\n    abstract mkDatumCharterToken(args: charterDatumType): InlineDatum | Promise<InlineDatum>;\n    // abstract txnMustUseCharterUtxo(\n    //     tcx: StellarTxnContext,\n    //     newDatum?: InlineDatum\n    // ): Promise<TxInput | never>;\n\n    \n    abstract initSettingsAdapter(): DatumAdapter<any, settingsType, this>;\n    settingsAdapter! : DatumAdapter<any, settingsType, this> & SettingsAdapterFor<this>\n    abstract mkInitialSettings() : settingsType\n    abstract mkDatumSettingsData(settings: settingsType): Datum;\n    // abstract readSettingsDatum(settings: \n    //     ReturnType<this[\"initSettingsAdapter\"]> extends DatumAdapter<any, infer Onchain, any> ? \n    //     Onchain : never\n    // );\n    async readSettingsDatum(\n        parsedDatum: OnchainSettingsType<this>\n    ) : Promise<settingsType> {\n        return this.settingsAdapter.fromOnchainDatum(parsedDatum)\n    }\n\n    get minterClass(): stellarSubclass<CapoMinter, BasicMinterParams> {\n        return CapoMinter;\n    }\n\n    minter!: minterType;\n    // @partialTxn\n    // txnWillMintUuts<\n    //     const purposes extends string,\n    //     existingTcx extends StellarTxnContext,\n    //     const RM extends Record<ROLES, purposes>,\n    //     const ROLES extends keyof RM & string = string & keyof RM\n    // >(\n    //     initialTcx: existingTcx,\n    //     uutPurposes: purposes[],\n    //     seedUtxo: TxInput,\n    //     //@ts-expect-error\n    //     roles: RM = {} as Record<string, purposes>\n    // ): Promise<hasUutContext<ROLES | purposes> & existingTcx> {\n    //     const minter = this.connectMinter()\n    //     return this.txnWillMintUuts(\n    //         initialTcx,\n    //         uutPurposes,\n    //         seedUtxo,\n    //         roles\n    //     );\n    // }\n\n    // P extends paramsBase = SC extends StellarContract<infer P> ? P : never\n\n    /**\n     * returns a value representing the provided UUT(s)\n     * @remarks\n     *\n     * The inputs can be of a few forms - see the overload variants\n     * @param uutMap - a set of UUTs, all of which will be represented in the returned value\n     * @param tcx - a transaction context, whose `state.uuts` will be processed as in the `uutMap` variant\n     * @param uutName - a UutName object representinga single UUT\n     * @public\n     **/\n    uutsValue(uutMap: uutPurposeMap<any>): Value;\n    /**\n     * from all the uuts in the transaction context\n     **/\n    uutsValue(tcx: hasUutContext<any>): Value;\n    /**\n     * from a single uut name or byte array\n     */\n    uutsValue(uutName: UutName | number[]): Value;\n    uutsValue(x: UutName | number[] | uutPurposeMap<any> | hasUutContext<any>): Value {\n        let uutMap =\n            x instanceof StellarTxnContext\n                ? x.state.uuts!\n                : x instanceof UutName \n                ? { single: x }\n                : Array.isArray(x) ? { single: new UutName(\"some-uut\", x) }\n                : x;\n        const vEntries = mkUutValuesEntries(uutMap);\n\n        return new Value(\n            undefined,\n            new Assets([[this.mintingPolicyHash!, vEntries]])\n        );\n    }\n\n    @Activity.redeemer\n    activityUsingAuthority(): isActivity {\n        const usingAuthority = this.mustGetActivity(\"usingAuthority\");\n        if (!usingAuthority) {\n            throw new Error(\n                `invalid contract without a usingAuthority redeemer`\n            );\n        }\n        const t = new usingAuthority();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    protected abstract activityUpdatingCharter(\n        args: charterDatumType\n    ): isActivity;\n\n    tvCharter() {\n        return this.minter.tvCharter();\n    }\n\n    get charterTokenAsValue() {\n        console.warn(\n            \"deprecated get charterTokenAsValue; use tvCharter() instead\"\n        );\n        return this.tvCharter();\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        return [StellarHeliosHelpers, CapoDelegateHelpers, CapoMintHelpers];\n    }\n\n\n    get charterTokenPredicate() {\n        const predicate = this.mkTokenPredicate(this.tvCharter());\n\n        return predicate;\n    }\n\n    //! forms a Value with minUtxo included\n    tokenAsValue(tokenName: string | number[] | UutName, count: bigint = 1n) {\n        const { mph } = this;\n\n        const tn = tokenName.toString();\n        return this.mkMinTv(mph, tn, count);\n    }\n\n    async mustFindCharterUtxo() {\n        const predicate = this.mkTokenPredicate(this.tvCharter());\n\n        return this.mustFindMyUtxo(\"charter\", predicate, \"has it been minted?\");\n    }\n\n    abstract findGovDelegate(): Promise<AuthorityPolicy>;\n    abstract txnAddGovAuthority<TCX extends StellarTxnContext>(\n        tcx: TCX\n    ): Promise<TCX>;\n\n    async txnMustUseCharterUtxo<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        redeemer: isActivity,\n        newDatum?: InlineDatum\n    ): Promise<TCX>;\n\n    async txnMustUseCharterUtxo<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        useReferenceInput: \"refInput\" | true\n    ): Promise<TCX>;\n\n    @partialTxn // non-activity partial\n    async txnMustUseCharterUtxo<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        redeemerOrRefInput: isActivity | \"refInput\" | true,\n        newDatum?: InlineDatum\n    ): Promise<TCX> {\n        return this.mustFindCharterUtxo().then(async (ctUtxo: TxInput) => {\n            // await this.txnAddCharterAuthz(\n            //     tcx,\n            //     ctUtxo.origOutput.datum as InlineDatum\n            // );\n\n            if (\n                true === redeemerOrRefInput ||\n                \"refInput\" === redeemerOrRefInput\n            ) {\n                // using reference-input has been requested\n                if (newDatum)\n                    throw new Error(\n                        `when using reference input for charter, arg3 must be omitted`\n                    );\n                tcx.addRefInput(ctUtxo);\n            } else {\n                // caller requested to **spend** the charter token with a speciic activity / redeemer\n                const redeemer = redeemerOrRefInput;\n                this.txnAttachScriptOrRefScript(\n                    tcx.addInput(ctUtxo, redeemer), \n                    this.compiledScript,\n                )\n                const datum =\n                    newDatum || (ctUtxo.origOutput.datum as InlineDatum);\n\n                this.txnKeepCharterToken(tcx, datum);\n            }\n            return tcx;\n        });\n    }\n\n    @partialTxn // non-activity partial\n    async txnUpdateCharterUtxo(\n        tcx: StellarTxnContext,\n        redeemer: isActivity,\n        newDatum: InlineDatum\n    ): Promise<StellarTxnContext | never> {\n        // this helper function is very simple.  Why have it?\n        //   -> its 3rd arg is required,\n        //   -> and its name gives a more specific meaning.\n        return this.txnMustUseCharterUtxo(tcx, redeemer, newDatum);\n    }\n\n    @partialTxn // non-activity partial\n    txnKeepCharterToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        datum: InlineDatum\n    ): TCX {\n        const txo = new TxOutput(this.address, this.tvCharter(), datum);\n        txo.correctLovelace(this.networkParams);\n        tcx.addOutput(txo);\n\n        return tcx;\n    }\n\n    /**\n     * Tries to locate the Capo charter's gov-authority token through its configured delegate\n     * @remarks\n     *\n     * Uses the Capo's govAuthority delegate to locate the gov-authority token,\n     * if available.  If that token is located in a smart contract, it should always be\n     * found (note, however, that the current user may not have the direct permission\n     * to spend the token in a transaction).\n     *\n     * If the token is located in a user wallet, and that user is not the contract's current\n     * actor, then the token utxo will not be returned from this method.\n     *\n     * @public\n     **/\n    async findGovAuthority(): Promise<TxInput | undefined> {\n        const delegate = await this.findGovDelegate();\n        return delegate.findAuthorityToken();\n    }\n\n    /**\n     * Tries to locate the Capo charter's gov-authority token in the user's wallet, using its configured delegate\n     * @remarks\n     *\n     * Uses the Capo's govAuthority delegate to locate the gov-authority token,\n     * if available the current user's wallet.\n     *\n     * A delegate whose authority token is located in a smart contract will always return `undefined`.\n     *\n     * If the authority token is in a user wallet (not the same wallet as currently connected to the Capo contract class),\n     * it will return `undefined`.\n     *\n     * @public\n     **/\n    async findActorGovAuthority() {\n        const delegate = await this.findGovDelegate();\n        return delegate.findActorAuthorityToken();\n    }\n\n    /**\n     * REDIRECT: Use txnAddGovAuthorityTokenRef to add the charter-governance authority token to a transaction,\n     * or findGovAuthority() or findActorGovAuthority() for locating that txo.\n     * @remarks\n     *\n     * this is a convenience method for redirecting developers to\n     * find the right method name for finding or including a gov-authority token\n     * in a transaction\n     * @deprecated - see other method names, depending on what result you want\n     * @public\n     **/\n    findCharterAuthority() {\n        throw new Error(\n            `use findGovAuthority() to locate charter's gov-authority token`\n        );\n    }\n\n    /**\n     * REDIRECT: use txnAddGovAuthorityTokenRef() instead\n     * @remarks\n     *\n     * this method was renamed.\n     * @deprecated - look for txnAddGovAuthorityTokenRef() instead\n     * @public\n     **/\n    async txnAddCharterAuthorityTokenRef<TCX extends StellarTxnContext>() {\n        throw new Error(`use txnAddGovAuthorityTokenRef() instead`);\n    }\n\n    /**\n     * adds the charter-token, along with its gov-authority UUT, to a transaction context\n     * @remarks\n     *\n     * Uses txnAddGovAuthority() to locate the govAuthority delegate and txnGrantAuthority() to\n     * add its authority token to a transaction.\n     *\n     * The charter-token is included as a reference input.\n     *\n     * @param tcx - the transaction context\n     * @public\n     **/\n    //!!! todo: If the Capo's mintDelegate is using the (TODO) \"undelegated\" strategy, this method can be used (?)\n    // ... to approve token-minting by the authority of the gov authZor\n    @partialTxn\n    async txnAddGovAuthorityTokenRef<TCX extends StellarTxnContext>(\n        tcx: TCX\n    ): Promise<TCX> {\n        const tcx2 = await this.txnMustUseCharterUtxo(tcx, \"refInput\");\n\n        const tcx3 = await this.txnAddGovAuthority(tcx2);\n        return tcx3;\n    }\n\n    /**\n     * provides minter-targeted params extracted from the input configuration\n     * @remarks\n     *\n     * extracts the seed-txn details that are key to parameterizing the minter contract\n     * @public\n     **/\n    getMinterParams() {\n        const { seedTxn, seedIndex } = this.configIn!;\n        return { seedTxn, seedIndex };\n    }\n    // getCapoRev() {\n    //     return 1n;\n    // }\n\n    get mph() {\n        return this.minter.mintingPolicyHash!;\n    }\n\n    get mintingPolicyHash() {\n        return this.mph;\n    }\n\n    async findActorUut(\n        uutPrefix: string,\n        mph: MintingPolicyHash = this.mph\n    ): Promise<FoundUut | undefined> {\n        const foundUtxo = await this.findActorUtxo(`uut ${uutPrefix}-`, (utxo) => {\n            if (getMatchingTokenName(utxo, mph)) {\n                return utxo\n            }\n        });\n        if (!foundUtxo) return undefined;\n        \n        return {\n            utxo: foundUtxo,\n            uut: new UutName(uutPrefix, getMatchingTokenName(foundUtxo, mph))\n        };\n\n        function getMatchingTokenName(utxo: TxInput, mph: MintingPolicyHash) {\n            const tokenNamesExisting = utxo.value.assets\n                .getTokenNames(mph)\n                .map((x) => bytesToText(x.bytes));\n\n            const tokenNames = tokenNamesExisting.filter((x) => {\n                // console.info(\"   - found token name: \"+x);\n                return !!x.startsWith(`${uutPrefix}-`);\n            });\n\n            return tokenNames[0];\n        }\n    }\n\n    async connectMintingScript(params: SeedTxnParams): Promise<minterType> {\n        if (this.minter)\n            throw new Error(`just use this.minter when it's already present`);\n        const { minterClass } = this;\n        const { seedTxn, seedIndex } = params;\n        const {\n            mph: expectedMph,\n            devGen,\n            isDev,\n        } = this.configIn || {\n            isDev: false,\n            devGen: 0n,\n        };\n\n        const minter = await this.addStrellaWithConfig(minterClass, {\n            isDev,\n            devGen,\n            seedTxn,\n            seedIndex,\n            //@ts-expect-error - subclassing Capo in a different way than DefaultCapo\n            //   isn't actively supported yet\n            capo: this,\n        });\n\n        if (expectedMph && !minter.mintingPolicyHash.eq(expectedMph)) {\n            throw new Error(\n                `This minter script with this seed-utxo doesn't produce the required  minting policy hash\\n` +\n                    \"expected: \" +\n                    expectedMph.hex +\n                    \"\\nactual: \" +\n                    minter.mintingPolicyHash.hex\n            );\n        } else if (!expectedMph) {\n            console.log(`${this.constructor.name}: seeding new minting policy`);\n        }\n        const mintingCharter = minter.mustGetActivity(\"mintingCharter\");\n        if (!mintingCharter)\n            throw new Error(\n                `minting script doesn't offer required 'mintingCharter' activity-redeemer`\n            );\n        // if (!mintingUuts)\n        //     throw new Error(\n        //         `minting script doesn't offer required 'mintingUuts' activity-redeemer`\n        //     );\n\n        //@ts-ignore-error - can't seem to indicate to typescript that minter's type can be relied on to be enough\n        return (this.minter = minter);\n    }\n\n    /**\n     * Finds a sufficient-sized utxo for seeding one or more named tokens\n     * @remarks\n     *\n     * For allocating a charter token (/its minter), one or more UUTs, or other token name(s)\n     * to be minted, this function calculates the size of minUtxo needed for all the needed tokens,\n     * assuming they'll each be stored in separate utxos.  It then finds and returns a UTxO from the\n     * current actor's wallet.  The utxo is NOT implicitly added to the transaction (use tcx.addInput() to add it).\n     *\n     * When the transaction context already has some utxo's being consumed, they're not\n     * eligible for selection.\n     *\n     * If the transaction doesn't store the new tokens in separate utxos, any spare lovelace\n     * are returned as change in the transaction.\n     *\n     * @param tcx - transaction context\n     * @param purpose - a descriptive purpose used during utxo-finding in case of problems\n     * @param tokenNames - the token names to be seeded.\n     * @public\n     **/\n    async txnMustGetSeedUtxo(\n        tcx: StellarTxnContext,\n        purpose: string,\n        tokenNames: string[]\n    ): Promise<TxInput | never> {\n        //! given a Capo-based contract instance having a free TxInput to seed its validator address,\n        //! prior to initial on-chain creation of contract,\n        //! it finds that specific TxInput in the current user's wallet.\n\n        const fakeMph = new MintingPolicyHash([]);\n\n        const totalMinUtxoValue = tokenNames.reduce(\n            addTokenValue.bind(this),\n            new Value(0n)\n        );\n        //! accumulates min-utxos for each stringy token-name in a reduce()\n        function addTokenValue(\n            this: Capo<any>,\n            accumulator: Value,\n            tn: string\n        ): Value {\n            const vMin = this.mkMinTv(fakeMph, tn);\n            return accumulator.add(vMin);\n        }\n\n        const uutSeed = this.mkValuePredicate(totalMinUtxoValue.lovelace, tcx);\n        const seedUtxo = await this.mustFindActorUtxo(\n            purpose,\n            uutSeed,\n            tcx\n        ).catch((x) => {\n            throw x;\n        });\n\n        const { txId: seedTxn, utxoIdx } = seedUtxo.outputId;\n        const seedIndex = BigInt(utxoIdx);\n        const count =\n            tokenNames.length > 1 ? `${tokenNames.length} uuts for ` : \"\";\n        console.log(\n            `Seed tx for ${count}${purpose}: ${seedTxn.hex.slice(\n                0,\n                8\n            )}…${seedTxn.hex.slice(-4)}#${seedIndex}`\n        );\n        return seedUtxo;\n    }\n\n    /**\n     * Creates a new delegate link, given a delegation role and and strategy-selection details\n     * @remarks\n     *\n     * Combines partal and implied configuration settings, validating the resulting configuration.\n     * \n     * It expects the transaction-context to have a UUT whose name (or a UUT roleName) matching \n     * the indicated `roleName`.  Use {@link txnWillMintUuts`} or {@link txnMintingUuts} to construct\n     * a transaction having that and a compliant txn-type.\n     *\n     * The resulting \"relative\" delegate link can be used directly in a Datum field of type RelativeDelegateLink\n     * or can be stored off-chain in any way suitable for your dApp.\n     *\n     * To get a full DelegateSettings object, use txnCreateDelegateSettings() instead.\n     *\n     * @reqt throws DelegateConfigNeeded with an `errors` entry\n     *   ... if there are any problems in validating the net configuration settings.\n     * @reqt EXPECTS the `tcx` to be minting a UUT for the delegation,\n     *   ... whose UutName can be found in `tcx.state.uuts[roleName]`\n     * @reqt combines base settings from the selected delegate class's `defaultParams`\n     *   ... adding the delegateRoles()[roleName] configuration for the selected roleName,\n     *   ... along with any explicit `config` from the provided `delegateInfo`\n     *   ... and automatically applies a `uut` setting.\n     *   ... The later properties in this sequence take precedence.\n     *\n     * @param tcx - A transaction-context\n     * @param roleName - the role of the delegate, matched with the `delegateRoles()` of `this`\n     * @param delegateInfo - partial detail of the delegation, with `strategyName` and any other\n     *     details required by the particular role.  Its delegate type must be matchy with the type indicated by the `roleName`.\n     * @public\n     **/\n    async txnCreateDelegateLink<\n        DT extends StellarDelegate,\n        const RN extends string\n    >(\n        tcx: hasUutContext<RN>,\n        roleName: RN,\n        delegateInfo: MinimalDelegateLink<DT> = { strategyName: \"default\" }\n    ): Promise<ConfiguredDelegate<DT> & RelativeDelegateLink<DT>> {\n        const configured = await this.txnCreateConfiguredDelegate(\n            tcx,\n            roleName,\n            delegateInfo\n        );\n        await configured.delegate.txnReceiveAuthorityToken(\n            tcx,\n            this.mkMinTv(this.mph, tcx.state.uuts[roleName])\n        );\n\n        return configured;\n    }\n    abstract txnAttachScriptOrRefScript<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        program?: UplcProgram,\n    ): Promise<TCX>;\n\n    // this is just type sugar - a configured delegate already has all the relative-delegate link properties.\n    relativeLink<DT extends StellarDelegate<any>>(\n        configured: ConfiguredDelegate<DT>\n    ): RelativeDelegateLink<DT> {\n        const {\n            strategyName,\n            delegateValidatorHash,\n            uutName,\n            config,\n        }: // addrHint,  //moved to config\n        // reqdAddress,  // removed\n        RelativeDelegateLink<DT> = configured;\n\n        return {\n            strategyName,\n            uutName,\n            delegateValidatorHash,\n            config,\n            // addrHint,  //moved to config\n            // reqdAddress,  // removed\n        };\n    }\n\n    /**\n     * Generates and returns a complete set of delegate settings, given a delegation role and strategy-selection details.\n     * @remarks\n     *\n     * Maps the indicated delegation role to specific UUT details from the provided transaction-context\n     * to provide the resulting settings.  The transaction context isn't modified.\n     *\n     * Behaves exactly like (and provides the core implementation of) {@link Capo.txnCreateDelegateLink | txnCreateDelegateLink()},\n     * returning additional `roleName` and `delegateClass`, to conform with the DelegateSettings type.\n     *\n     * See txnCreateDelegateLink for further details.\n     * @public\n     **/\n    async txnCreateConfiguredDelegate<\n        DT extends StellarDelegate<any>,\n        const RN extends string\n    >(\n        tcx: hasUutContext<RN>,\n        roleName: RN & keyof this[\"delegateRoles\"],\n        delegateInfo: MinimalDelegateLink<DT> = { strategyName: \"default\" }\n    ): Promise<ConfiguredDelegate<DT>> {\n        const { strategyName, config: selectedConfig = {} } = delegateInfo;\n\n        const { delegateRoles } = this;\n        const uut = tcx.state.uuts[roleName];\n        const impliedDelegationDetails = this.mkImpliedDelegationDetails(uut);\n\n        const foundStrategies = \n            delegateRoles[roleName] as RoleInfo<DT, any, any, RN>; //prettier-ignore\n        if (!foundStrategies) {\n            throw new Error(`no delegateRoles entry for role '${roleName}'`);\n        }\n        const selectedStrategy = foundStrategies.variants[\n            strategyName\n        ] as VariantStrategy<DT>;\n        if (!selectedStrategy) {\n            let msg = `invalid strategyName '${strategyName}' for role '${roleName}'`;\n            if (strategyName == \"default\") {\n                msg = `no selected or default delegate for role '${roleName}'.  Specify strategyName`;\n            }\n            const e = new DelegateConfigNeeded(msg, {\n                errorRole: roleName,\n                availableStrategies: Object.keys(foundStrategies.variants),\n            });\n            throw e;\n        }\n        const { delegateClass, validateConfig } = selectedStrategy;\n        const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;\n\n        const scriptParamsFromStrategyVariant =\n            selectedStrategy.partialConfig || {};\n        const mergedConfig: ConfigFor<DT> = {\n            ...defaultParamsFromDelegateClass,\n            ...(scriptParamsFromStrategyVariant || {}),\n            ...selectedConfig,\n            ...impliedDelegationDetails,\n            devGen: this.devGen,\n            capo: this,\n        } as unknown as ConfigFor<DT>;\n\n        //! it validates the net configuration so it can return a working config.\n        const errors: ErrorMap | undefined =\n            validateConfig && validateConfig(mergedConfig);\n        if (errors) {\n            throw new DelegateConfigNeeded(\n                `validation errors in delegateInfo.config for ${roleName} '${strategyName}':\\n` +\n                    errorMapAsString(errors),\n                { errors }\n            );\n        }\n\n        const delegateSettings: PreconfiguredDelegate<DT> = {\n            ...delegateInfo,\n            roleName,\n            delegateClass,\n            uutName: uut.name,\n            config: mergedConfig,\n        };\n        let delegate: DT = await this.mustGetDelegate(delegateSettings);\n\n        // const reqdAddress = delegate.delegateReqdAddress();\n        // if (reqdAddress) {\n        //     delegateSettings.reqdAddress = reqdAddress;\n        // } else {\n        //     const addrHint = delegate.delegateAddrHint();\n        //     if (addrHint) {\n        //         delegateSettings.addrHint = addrHint;\n        //     }\n        // }\n        const { delegateValidatorHash } = delegate;\n        const pcd: ConfiguredDelegate<DT> = {\n            ...delegateSettings,\n            delegateValidatorHash,\n            delegate,\n        };\n        return pcd;\n    }\n\n    mkImpliedDelegationDetails(uut: UutName): DelegationDetail {\n        return {\n            capoAddr: this.address,\n            mph: this.mph,\n            tn: stringToNumberArray(uut.name),\n        };\n    }\n\n    #_delegateCache: {\n        [roleName: string]: {\n            [delegateLink: string]: StellarDelegate<any>;\n        };\n    } = {};\n\n    // get connectDelegate()\n    async connectDelegateWithLink<\n        DelegateType extends StellarDelegate<any>,\n        configType extends (\n            DelegateType extends StellarContract<infer c> ? c : configBase //prettier-ignore\n         ) = DelegateType extends StellarContract<infer c> ? c : configBase //prettier-ignore\n    >(\n        roleName: string,\n        delegateLink: RelativeDelegateLink<DelegateType>\n    ): Promise<DelegateType> {\n        const cache = this.#_delegateCache;\n\n        const cacheKey = JSON.stringify(\n            delegateLink,\n            delegateLinkSerializer,\n            4 // indent 4 spaces \n        );\n        console.log(`   ----- delegate '${roleName}' cache key `, cacheKey);\n        if (!cache[roleName]) cache[roleName] = {};\n        const roleCache = cache[roleName];\n        const cachedRole = roleCache[cacheKey];\n        if (cachedRole) {\n            console.log(  \"   <---- cached delegate\");\n            return cachedRole as DelegateType;\n        }\n        const role = this.delegateRoles[roleName];\n        //!!! work on type-safety with roleName + available roles\n        const {\n            strategyName,\n            uutName,\n            delegateValidatorHash: expectedDvh,\n            // addrHint,  //moved to config\n            // reqdAddress,  // removed\n            config: linkedConfig,\n        } = delegateLink;\n        const selectedStrat = role.variants[\n            strategyName\n        ] as unknown as ConfiguredDelegate<DelegateType>;\n        if (!selectedStrat) {\n            throw new Error(\n                `mismatched strategyName '${strategyName}' in delegate link for role '${roleName}'\\n` +\n                    `  ...available strategies: ${Object.keys(\n                        role.variants\n                    ).join(\", \")}.\\n\\n link details: ${this.showDelegateLink(\n                        delegateLink\n                    )}`\n            );\n        }\n        const { delegateClass, config: stratSettings } = selectedStrat;\n        const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;\n        const impliedDelegationDetails = this.mkImpliedDelegationDetails(\n            new UutName(roleName, uutName)\n        );\n\n        //@xxxts-expect-error because this stack of generically partial\n        //  ... config elements isn't recognized as adding up to a full config type.\n        // NOTE: THIS GETS AN EXISTING DELEGATE, and includes baseline config details.\n        // See also the create-delegate code path in txnCreateConfiguredDelegate(), which\n        // ... which also includes baseline config details.  IF YOU'RE ADDING STUFF HERE,\n        // ... consider that it might also be needed there.\n        const config: configType = {\n            ...defaultParamsFromDelegateClass,\n            ...stratSettings,\n            // addrHint,  //moved to config\n            // reqdAddress,  // removed\n            ...linkedConfig,\n            ...impliedDelegationDetails,\n            devGen: this.devGen,\n            capo: this,\n        };\n        //configured delegate:\n        // delegateClass: stellarSubclass<DT>;\n        //!  //  delegate: DT // omitted in \"pre-configured\";\n        // roleName: string;\n        // config: ConfigFor<DT>;\n        //... from relativeDelegateLink:\n        //      uutName: string;\n        //      strategyName: string;\n        //      config: Partial<ConfigFor<T>>;\n        //      reqdAddress?: Address;\n        //      addrHint?: Address[];\n\n        const delegate = await this.mustGetDelegate({\n            delegateClass,\n            config,\n            roleName,\n            uutName,\n            strategyName,\n            // reqdAddress,\n            // addrHint,\n        });\n\n        \n        const dvh = delegate.delegateValidatorHash;\n\n        if (expectedDvh && dvh && !expectedDvh.eq(dvh)) {\n            throw new Error(\n                `${this.constructor.name}: ${roleName}: mismatched or modified delegate: expected validator ${expectedDvh?.hex}, got ${dvh.hex}`\n            );\n        }\n        console.log(\n            `    <--- caching first instance of delegate ${roleName} @ key = ${cacheKey}`\n        );\n        roleCache[cacheKey] = delegate;\n        return delegate;\n    }\n\n    private showDelegateLink(delegateLink: RelativeDelegateLink<any>) {\n        return JSON.stringify(delegateLink, null, 2);\n    }\n\n    async mustGetDelegate<T extends StellarDelegate<any>>(\n        configuredDelegate: PreconfiguredDelegate<T>\n    ): Promise<T> {\n        const { delegateClass, config } = configuredDelegate;\n        try {\n            // delegate\n            const configured = await this.addStrellaWithConfig(\n                delegateClass,\n                config\n            );\n            return configured as T;\n        } catch (e: any) {\n            const t = e.message.match(/invalid parameter name '([^']+)'$/);\n\n            const [_, badParamName] = t || [];\n            if (badParamName) {\n                throw new DelegateConfigNeeded(\n                    \"configuration error while parameterizing contract script\",\n                    { errors: { [badParamName]: e.message } }\n                );\n            }\n            throw e;\n        }\n    }\n\n    tvForDelegate(dgtLink: RelativeDelegateLink<any>) {\n        return this.tokenAsValue(dgtLink.uutName);\n    }\n    mkDelegatePredicate(dgtLink: RelativeDelegateLink<any>) {\n        return this.mkTokenPredicate(this.tvForDelegate(dgtLink));\n    }\n\n    capoRequirements() {\n        return hasReqts({\n            \"is a base class for leader/Capo pattern\": {\n                purpose:\n                    \"so that smart contract developers can easily start multi-script development\",\n                details: [\n                    \"Instantiating a Capo contract always uses the seed-utxo pattern for uniqueness.\",\n                    \"Subclassing Capo with no type-params gives the default minter,\",\n                    \"  ... which only allows UUTs to be created\",\n                    \"Subclassing Capo<CustomMinter> gives an overloaded minter,\",\n                    \"  ... which must allow UUT minting and may allow more Activities too.\",\n                ],\n                mech: [\n                    \"provides a default minter\",\n                    \"allows the minter class to be overridden\",\n                ],\n            },\n            \"can create unique utility tokens\": {\n                purpose:\n                    \"so the contract can use UUTs for scoped-authority semantics\",\n                details: [\n                    \"That UUT (a Value) is returned, and then should be added to a TxOutput.\",\n                    \"The partial-helper doesn't constrain the semantics of the UUT.\",\n                    \"The uniqueness level can be iterated in future as needed.\",\n                    \"The UUT's token-name combines its textual purpose with a short hash \",\n                    \"   ... of the seed UTxO, formatted with bech32\",\n                ],\n                mech: [\n                    \"Building a txn with a UUT involves using the txnMintingUuts partial-helper on the Capo.\",\n                    \"Fills tcx.state.uuts with purpose-keyed unique token-names\",\n                    \"The UUT uses the seed-utxo pattern to form 64 bits of uniqueness, so that token-names stay short-ish.\",\n                ],\n            },\n            \"supports the Delegation pattern using roles and strategy-variants\":\n                {\n                    purpose: \"enables structured modularity and extensibility\",\n                    details: [\n                        \"A Capo constellation can declare a set of roles to be filled in the contract logic.\",\n                        \"The roles are typed, so that implementers of extensibility can know \",\n                        \"  ... which capabilities their plugins need to provide\",\n                        \"Each role should be filled by a StellarContract class, \",\n                        \"  ... which is required at the time it is needed during creation of a transaction.\",\n                        \"Each role should normally provide a base implementation \",\n                        \"  ... of a delegate that can serve the role.\",\n                        \"Strategies, strategy-variants, or simple 'variants' are all similar ways \",\n                        \"  ... of indicating different named plugins that can serve a particular role.\",\n                        \"Variant-names are human-readable, while the actual code\",\n                        \"  ... behind each variant name are the strategies\",\n                    ],\n                    mech: [],\n                    requires: [\n                        \"supports well-typed role declarations and strategy-adding\",\n                        \"supports just-in-time strategy-selection using txnCreateDelegateLink()\",\n                        \"given a configured delegate-link, it can create a ready-to-use Stellar subclass with all the right settings\",\n                        \"supports concrete resolution of existing role delegates\",\n                    ],\n                },\n            \"supports well-typed role declarations and strategy-adding\": {\n                purpose:\n                    \"for plugin implementers to have a clear picture of what to implement\",\n                details: [\n                    \"Each Capo class may declare a roles data structure.\",\n                    \"GOAL: The required type for each role must be matched when adding a plugin class serving a role\",\n                    \"A dApp using a Capo class can add strategy variants by subclassing\",\n                ],\n                mech: [\n                    \"Capo EXPECTS a synchronous getter for 'delegateRoles' to be defined\",\n                    \"Capo provides a default 'delegateRoles' having no specific roles (or maybe just minter - TBD)\",\n                    \"Subclasses can define their own get delegateRoles(), return a role-map-to-variant-map structure\",\n                ],\n                requires: [\n                    \"Each role uses a RoleVariants structure which can accept new variants\",\n                ],\n            },\n            \"supports just-in-time strategy-selection using txnCreateDelegateLink()\":\n                {\n                    purpose:\n                        \"enabling each transaction to select appropriate plugins for its contextual needs\",\n                    details: [\n                        \"When a transaction having an extensibility-point is being created,\",\n                        \"  ... it SHOULD require an explicit choice of the delegate to use in that role.\",\n                        \"When a 'mkTxn‹DoesThings›' method creates a new role-delegated UTxO, \",\n                        \"  ... it sets essential configuration details for the delegation \",\n                        \"  ... including a specific UUT that provides a linking mechanism for the delegate\",\n                        \"The delegate contract, including its address and/or reference-script UTxO \",\n                        \"  ... and/or its parameters and its StellarContract class, MUST be captured \",\n                        \"  ... so that it can be easily resolved and used/referenced\",\n                        \"  .... during a later transaction whose UTxO-spending is governed by the delegate contract.\",\n                        \"When the delegate serving the role is selected, \",\n                        \"  ... that delegate will be manifested as a concrete pair of StellarContract subclass \",\n                        \"  ... and contract address.  The contract address MAY be pre-existing \",\n                        \"  ... or be instantiated as a result of the delegation details.\",\n                    ],\n                    mech: [\n                        \"txnCreateDelegateLink(tcx, role, delegationSettings) method configures a new delegate\",\n                        \"txnCreateDelegateLink() will use a 'default' delegate strategy\",\n                        \"If there is no delegate configured (or defaulted) for the needed role, txnCreateDelegateLink throws a DelegateConfigNeeded error.\",\n                        \"If the strategy-configuration doesn't match available variants, the DelegateConfigNeeded error offers suggested strategy-names\",\n                        \"If the strategy-configuration has any configuration problems, the DelegateConfigNeeded error contains an 'errors' object\",\n                        \"txnCreateDelegateSettings(tcx, role, delegationSettings) returns the delegate link plus a concreted delegate instance\",\n                    ],\n                },\n            \"given a configured delegate-link, it can create a ready-to-use Stellar subclass with all the right settings\":\n                {\n                    purpose:\n                        \"allows the known facts about a delegate to be resolved to working SC class\",\n                    details: [\n                        \"A delegate link created by txnCreateDelegateLink(), can be captured in different ways\",\n                        \"  ... e.g. as a Datum property in a contract, \",\n                        \"  ... or in any off-chain way.\",\n                        \"A dApp then reconstitutes this key information to a StellarContract, \",\n                        \"  ... enabling simple multi-contract collaboration\",\n                    ],\n                    mech: [\n                        \"mustGetDelegate(configuredDelegate) method retrieves a configured delegate\",\n                    ],\n                },\n\n            \"Each role uses a RoleVariants structure which can accept new variants\":\n                {\n                    purpose:\n                        \"provides a type-safe container for adding strategy-variants to a role\",\n                    details: [\n                        \"Adding a strategy variant requires a human-readable name for the variant\",\n                        \"  ... and a reference to the StellarContract class implementing that variant.\",\n                        \"Each variant may indicate a type for its configuration data-structure\",\n                        \"  ... and may include a factory function accepting a data-structure of that type.\",\n                        \"TBD: base configuration type?  Capo txn-builders supporting utxo-creation can provide baseline details of the base type, \",\n                        \"  ... with additional strategy-specific details provided in the transaction-context.\",\n                        \"When adding strategies, existing variants cannot be removed or replaced.\",\n                    ],\n                    mech: [\n                        \"RoleVariants has type-parameters indicating the baseline types & interfaces for delegates in that role\",\n                        \"TODO: variants can augment the delegateRoles object without removing or replacing any existing variant\",\n                    ],\n                    requires: [\n                        \"provides a Strategy type for binding a contract to a strategy-variant name\",\n                    ],\n                },\n            \"provides a Strategy type for binding a contract to a strategy-variant name\":\n                {\n                    purpose:\n                        \"has all the strategy-specific bindings between a variant and the contract delegate\",\n                    details: [\n                        \"When adding a contract as a delegate serving in a role, its name\",\n                        \"  ... and its Strategy binding creates the connection between the host contract (suite) \",\n                        \"  ... and the StellarContract subclass implementing the details of the strategy.\",\n                        \"The Strategy and its underlying contract are type-matched\",\n                        \"  ... with the interface needed by the Role.\",\n                        \"The Strategy is a well-typed structure supporting \",\n                        \"  ... any strategy-specific configuration details (script parameters)\",\n                        \"  ... and validation of script parameters\",\n                    ],\n                    mech: [\n                        \"Each strategy must reference a type-matched implementation class\",\n                        \"Each strategy may define scriptParams always used for that strategy\",\n                        \"Each strategy may defer the definition of other script-params to be defined when a specific delegation relationship is being created\",\n                        \"Each strategy must define a validateScriptParams(allScriptParams) function, returning an errors object if there are problems\",\n                        \"validateScriptParams() should return undefined if there are no problems\",\n                    ],\n                    requires: [\n                        \"supports concrete resolution of existing role delegates\",\n                    ],\n                },\n            \"supports concrete resolution of existing role delegates\": {\n                purpose:\n                    \"so that transactions involving delegated responsibilities can be executed\",\n                details: [\n                    \"When a transaction needs to involve a UTxO governed by a delegate contract\",\n                    \"   ... the need for that delegate contract is signalled through Capo callbacks \",\n                    \"   ... during the transaction-building process.\",\n                    \"Those callbacks contain key information, such as role-name, parameters, and address\",\n                    \"  ... needed in the collaboration to find the correct concrete delegate.\",\n                    \"Once the delegate is resolved to a configured StellarContract class, \",\n                    \"   ... its established transaction-building interface is triggered, \",\n                    \"   ... augmenting the transaction with the correct details, \",\n                    \"   ... and enabling the right on-chain behaviors / verifications\",\n                    \"The Strategy adapter is expected to return the proper delegate with its matching address.\",\n                ],\n                mech: [\n                    \"TODO: with an existing delegate, the selected strategy class MUST exactly match the known delegate-address\",\n                ],\n            },\n            \"can locate UUTs in the user's wallet\": {\n                purpose: \"for finding UUTs representing user's authority\",\n                details: [\n                    \"A Capo contract can locate UUTs in the user's wallet\",\n                    \"  ... using the findActorUut() method\",\n                    \"This is useful for finding authority tokens, \",\n                    \"  ... such as a charter-governance token, \",\n                    \"  ... or a token representing a user's authority in a smart contract\",\n                ],\n                mech: [\n                    \"findActorUut() returns a FoundUut object, \",\n                ]\n            }\n        });\n    }\n}\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport type { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport basics from \"./UnspecializedMintDelegate.hl\";\n\nexport const UnspecializedMintDelegate: HeliosModuleSrc = basics;\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport basics from \"./UnspecializedCapo.hl\";\n\nexport const UnspecializedCapo: HeliosModuleSrc = basics;\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport ch from \"./CapoHelpers.hl\";\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\n\nexport const CapoHelpers: HeliosModuleSrc = ch;\n","import {\n    Address,\n    AssetClass,\n    Datum,\n    TxId,\n    TxInput,\n    TxOutput,\n    Value,\n} from \"@hyperionbt/helios\";\n\n//@ts-expect-error because TS can't import non-ts content : /\nimport contract from \"./BasicMintDelegate.hl\";\n//@ts-expect-error because TS can't import non-ts content : /\nimport StellarHeliosHelpers from \"../StellarHeliosHelpers.hl\";\n\nimport { Activity, datum } from \"../StellarContract.js\";\nimport type { configBase, isActivity } from \"../StellarContract.js\";\nimport {\n    StellarTxnContext,\n    type anyState,\n    type hasAddlTxns,\n    type hasSeedUtxo,\n    type otherAddlTxnNames,\n} from \"../StellarTxnContext.js\";\nimport type { capoDelegateConfig } from \"../delegation/RolesAndDelegates.js\";\n\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\nimport type { InlineDatum } from \"../HeliosPromotedTypes.js\";\nimport { CapoDelegateHelpers } from \"../delegation/CapoDelegateHelpers.js\";\nimport { CapoMintHelpers } from \"../CapoMintHelpers.js\";\nimport type { HeliosModuleSrc } from \"../HeliosModuleSrc.js\";\nimport { UnspecializedMintDelegate } from \"./UnspecializedMintDelegate.js\";\nimport { UnspecializedCapo } from \"../UnspecializedCapo.js\";\nimport { CapoHelpers } from \"../CapoHelpers.js\";\nimport type { MintUutActivityArgs, UutCreationAttrsWithSeed, hasUutContext } from \"../Capo.js\";\n\nexport type MintDelegateArgs = capoDelegateConfig & {\n    rev: bigint;\n};\n\n//!!! TODO: include adapter(s) for Datum, which has the same essential shape\ntype MintDelegateDatumProps = {\n    tokenName: string;\n    maxMintSize: bigint;\n};\n\n/**\n * Serves a delegated minting-policy role for Capo contracts\n * @remarks\n *\n * shifts detailed minting policy out of the minter and into the delegate.\n * @public\n **/\nexport class BasicMintDelegate extends StellarDelegate<MintDelegateArgs> {\n    static currentRev = 1n;\n\n    static get defaultParams() {\n        const params = {\n            rev: this.currentRev,\n            devGen: 0n,\n        };\n        return params;\n    }\n\n    getContractScriptParams(config) {\n        const params = {\n            rev: config.rev,\n            isDev: false,\n            devGen: 0n,\n        };\n\n        if (\"development\" === process.env.NODE_ENV) {\n            params.isDev = true;\n            if (!config.devGen) {\n                throw new Error(\n                    `Missing expected devGen in config for BasicMintDelegate`\n                );\n            }\n            params.devGen = config.devGen;\n        }\n        return params;\n    }\n\n    contractSource() {\n        return contract;\n    }\n\n    @datum\n    mkDatumScriptReference() {\n        const { ScriptReference: hlScriptReference } = this.onChainDatumType;\n\n        // this is a simple enum tag, indicating the role of this utxo: holding the script\n        // on-chain, so it can be used in later transactions without bloating those txns\n        // every time.\n        const t = new hlScriptReference();\n        return Datum.inline(t._toUplcData());\n    }\n\n    /**\n     * specializedMintDelegate module for customizing policies atop the basic mint delegate\n     * @public\n     * @remarks\n     *\n     * The basic mint delegate contains an \"unspecialized\" implementation of this customization,\n     * which doesn't have any special restrictions.  It reserves a CustomConfig field\n     * at position 2 in the IsDelegation datum, allowing customizations to use any\n     * struct in that position to express any custom configurations.\n     **/\n    get specializedMintDelegate(): HeliosModuleSrc {\n        return UnspecializedMintDelegate;\n    }\n\n    get specializedCapo(): HeliosModuleSrc {\n        return UnspecializedCapo;\n    }\n\n    /**\n     * Deprecated\n     * @deprecated  - mint delegate should have specific activities for specific use-cases, starting at redeemer index 10\n     * @internal\n     **/\n    @Activity.redeemer\n    activityAuthorizing(): isActivity {\n        throw new Error(\n            `obsolete generic Authorizing activity invalid for mint delegates`\n        );\n    }\n\n    // inherited from StellarDelegate.\n    // @Activity.redeemer\n    // activityReplacingMe({\n    //     seedTxn,\n    //     seedIndex: sIdx,\n    //     purpose,\n    // } :  Omit<MintUutActivityArgs, \"purposes\"> & {purpose?: string}) {\n    //     const hlReplacingMe = this.mustGetActivity(\"ReplacingMe\");\n    //     const t = new hlReplacingMe(\n    //         seedTxn, sIdx, purpose\n    //     );\n    //     return { redeemer: t._toUplcData() };\n    // }\n\n    @Activity.redeemer\n    activityRetiringDelegate(): isActivity {\n        const Retiring = this.mustGetActivity(\"Retiring\");\n        return { redeemer: new Retiring()._toUplcData() };\n    }\n\n    async txnGrantAuthority<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        redeemer: isActivity,\n        returnExistingDelegate : boolean = true\n    ) {\n        if (!redeemer)\n            throw new Error(\n                `mint delegate requires an explicit redeemer for txnGrantAuthority()`\n            );\n\n        const {capo} = this.configIn!;\n        await capo.txnAttachScriptOrRefScript(tcx, this.compiledScript);\n\n        return super.txnGrantAuthority(tcx, redeemer, returnExistingDelegate);\n    }\n\n    // NOTE: prefer application-specific activities that validate\n    // particular mints, instead of this generic one\n    @Activity.redeemer\n    activityMintingUuts({\n        seedTxn,\n        seedIndex: sIdx,\n        purposes,\n    }: MintUutActivityArgs): isActivity {\n        const seedIndex = BigInt(sIdx);\n        console.log(\"----------- USING DEPRECATED mintingUuts ACTIVITY -----------\"+\n          \"\\n       (prefer application-specific mint-delegate activities instead)\"\n        );\n        console.log(\"UUT redeemer seedTxn\", seedTxn.hex);\n        const mintingUuts = this.mustGetActivity(\"mintingUuts\");\n        const t = new mintingUuts(seedTxn, seedIndex, purposes);\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    // NOTE: prefer application-specific activities\n    // @Activity.redeemer\n    // activityBurningUuts(...uutNames: string[]) : isActivity {\n    //     const {burningUuts} =this.onChainActivitiesType;\n    //     const { DelegateDetails: hlDelegateDetails } = this.onChainTypes;\n    //     const t = new burningUuts(uutNames);\n\n    //     return { redeemer: t._toUplcData() };\n    // }\n\n    importModules(): HeliosModuleSrc[] {\n        const specializedMintDelegate = this.specializedMintDelegate;\n        if (specializedMintDelegate.moduleName !== \"specializedMintDelegate\") {\n            throw new Error(\n                `${this.constructor.name}: specializedMintDelegate() module name must be ` +\n                    `'specializedMintDelegate', not '${specializedMintDelegate.moduleName}'\\n  ... in ${specializedMintDelegate.srcFile}`\n            );\n        }\n\n        //@ts-expect-error\n        const {capo} = this.configIn || this.partialConfig\n\n        if (!capo) throw new Error(`missing capo in config or partial-config for ${this.constructor.name}`)\n        return [\n            // StellarHeliosHelpers,\n            // CapoDelegateHelpers,\n            // CapoHelpers,\n            // CapoMintHelpers,\n            specializedMintDelegate,\n            ...capo.importModules(),\n            // this.specializedCapo,\n        ];\n    }\n\n    get scriptDatumName() {\n        return \"MintDelegateDatum\";\n    }\n    get scriptActivitiesName() {\n        return \"MintDelegateActivity\";\n    }\n\n    /**\n     * Adds a mint-delegate-specific authority token to the txn output\n     * @remarks\n     *\n     * Implements {@link StellarDelegate.txnReceiveAuthorityToken | txnReceiveAuthorityToken() }.\n     *\n     * Uses {@link BasicMintDelegate.mkDelegationDatum | mkDelegationDatum()} to make the inline Datum for the output.\n     * @see {@link StellarDelegate.txnReceiveAuthorityToken | baseline txnReceiveAuthorityToken()'s doc }\n     * @public\n     **/\n    async txnReceiveAuthorityToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        tokenValue: Value,\n        fromFoundUtxo?: TxInput\n    ): Promise<TCX> {\n        console.log(\n            `     ----- minting delegate validator receiving mintDgt token at ` +\n                this.validatorHash!.hex\n        );\n        // const ffu = fromFoundUtxo;\n        // const v : Value = ffu?.value || this.mkMinAssetValue(this.configIn!.uut);\n        const datum = this.mkDelegationDatum(fromFoundUtxo);\n        return tcx.addOutput(new TxOutput(this.address, tokenValue, datum));\n    }\n\n    /**\n     * Depreciated: Add a generic minting-UUTs actvity to the transaction\n     * @remarks\n     *\n     * This is a generic helper function that can be used to mint any UUTs,\n     * but **only if the specialized minting delegate has not disabled generic UUT minting**.\n     *\n     * Generally, it's recommended to use an application-specific activity\n     * that validates a particular minting use-case, instead of this generic one.\n     *\n     * See {@link Capo.txnMintingUuts | Capo.txnMintingUuts() } for further guidance.\n     *\n     * @param tcx - the transaction context\n     * @param uutPurposes - a list of string prefixes for the UUTs\n     * @typeParam TCX - for the `tcx`, which must already include the indicated `uutPurposes`\n     * @public\n     **/\n    txnGenericMintingUuts<\n        TCX extends hasSeedUtxo & hasUutContext<purposes>,\n        purposes extends string\n    >(\n        tcx: TCX,\n        uutPurposes: purposes[],\n        activity?: isActivity\n        // seedUtxo: TxInput,\n    ) {\n        let useActivity =\n            activity ||\n            this.activityMintingUuts({\n                purposes: uutPurposes,\n                ...tcx.getSeedAttrs(),\n            });\n\n        return this.txnGrantAuthority(tcx, useActivity);\n    }\n\n    mkDelegationDatum(txin?: TxInput) {\n        if (txin) return txin.origOutput.datum!;\n        const { capoAddr, mph, tn, ..._otherCfgSettings } = this.configIn!;\n\n        return this.mkDatumIsDelegation({\n            capoAddr,\n            mph,\n            tn,\n        });\n    }\n\n    @Activity.partialTxn\n    async txnCreatingTokenPolicy(tcx: StellarTxnContext, tokenName: string) {\n        return tcx;\n    }\n\n    static mkDelegateWithArgs(a: MintDelegateArgs) {}\n}\n","import type { capoDelegateConfig } from \"../delegation/RolesAndDelegates.js\";\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\n\n/**\n * Generic class as base for pure authorization\n * @remarks\n * \n * This isn't different from StellarDelegate, but\n * using it as a base class more specific than \"any delegate\"\n * gives useful semantics for Capo's govAuthority role\n * @public\n **/\nexport abstract class AuthorityPolicy<\n    T extends capoDelegateConfig = capoDelegateConfig\n> extends StellarDelegate<T> {\n\n}\n","import {\n    Address,\n    AssetClass,\n    Assets,\n    TxInput,\n    TxOutput,\n    Value,\n    bytesToText,\n} from \"@hyperionbt/helios\";\nimport type { SeedTxnParams } from \"../SeedTxn.js\";\nimport { Activity, StellarContract, partialTxn } from \"../StellarContract.js\";\n\nimport type { isActivity } from \"../StellarContract.js\";\n\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\nimport { AuthorityPolicy } from \"./AuthorityPolicy.js\";\nimport { dumpAny } from \"../diagnostics.js\";\n\n/**\n * Token-based authority\n * @remarks\n * \n * Transferrable authority using a unique token and no smart-contract.\n *     Network,\n    Wallet,\n\n * @public\n **/\nexport class AnyAddressAuthorityPolicy extends AuthorityPolicy {\n    loadProgramScript(params) {\n        return undefined;\n    }\n\n    get delegateValidatorHash() {\n        return undefined;\n    }\n\n    @Activity.redeemer\n    activityAuthorizing() : isActivity<undefined> {\n        return { redeemer: undefined};\n    }\n\n    @Activity.redeemer\n    protected activityUsingAuthority(): isActivity {\n        throw new Error(`usingAuthority is only used in capo contracts.  use activityAuthorizing() for delegates`);\n    }\n\n    /**\n     * Finds the delegate authority token, normally in the delegate's contract address\n     * @public\n     * @remarks\n     *\n     * The default implementation finds the UTxO having the authority token\n     * in the delegate's contract address.\n     *\n     * It's possible to have a delegate that doesn't have an on-chain contract script.\n     * ... in this case, the delegate should use this.{@link StellarDelegate.tvAuthorityToken | tvAuthorityToken()} and a\n     * delegate-specific heuristic to locate the needed token.  It might consult the\n     * addrHint in its `configIn` or another technique for resolution.\n     *\n     * @param tcx - the transaction context\n     * @reqt It MUST resolve and return the UTxO (a TxInput type ready for spending)\n     *  ... or throw an informative error\n     **/\n    async findAuthorityToken(): Promise<TxInput | undefined> {\n        const { wallet } = this;\n        return this.hasUtxo(\n            `authority token: ${bytesToText(this.configIn!.tn)}`,\n            this.mkTokenPredicate(this.tvAuthorityToken()),\n            { wallet }\n        );\n    }\n\n    async findActorAuthorityToken(): Promise<TxInput | undefined> {\n        return this.findAuthorityToken();\n    }\n\n    //! impls MUST resolve the indicated token to a specific UTxO\n    //  ... or throw an informative error\n    async DelegateMustFindAuthorityToken(\n        tcx: StellarTxnContext,\n        label: string\n    ): Promise<TxInput> {\n        const v = this.tvAuthorityToken();\n        const { addrHint } = this.configIn!;\n\n        return this.mustFindActorUtxo(\n            `${label}: ${bytesToText(this.configIn!.tn)}`,\n            this.mkTokenPredicate(v),\n            tcx,\n            \"are you connected to the right wallet address? \" +\n                (addrHint?.length\n                    ? \"  maybe at:\\n    \" + addrHint.join(\"\\n or \")\n                    : \"\")\n        );\n    }\n\n    async txnReceiveAuthorityToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        tokenValue: Value,\n        fromFoundUtxo: TxInput\n    ): Promise<TCX> {\n        let dest: Address;\n        console.log(\"🐞🐞  receive authority token\");\n        if (fromFoundUtxo) {\n            dest = fromFoundUtxo.address;\n            console.log(\"    🐞🐞  \" + dumpAny(fromFoundUtxo.address, this.networkParams));\n        } else {\n            if (!this.configIn?.addrHint?.[0])\n                throw new Error(`missing addrHint`);\n            const {\n                addrHint,\n                // reqdAddress,  // removed\n            } = this.configIn;\n            dest = addrHint[0];\n        }\n\n        const output = new TxOutput(dest, tokenValue);\n        output.correctLovelace(this.networkParams);\n        tcx.addOutput(output);\n        console.log(\"    🐞🐞  ...with output\" + dumpAny(output, this.networkParams));\n\n        return tcx;\n    }\n\n    //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    async DelegateAddsAuthorityToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        fromFoundUtxo: TxInput,\n        redeemer?: isActivity\n    ): Promise<TCX> {\n        //! no need to specify a redeemer, but we pass it through \n        //  ... in case the authority token is stored in a contract,\n        //  ... which would need a redeemer to spend it.  In that case,\n        //  ... the caller will need to add the script to the transaction.\n        return tcx.addInput(fromFoundUtxo, redeemer);\n    }\n\n    //! Adds the indicated utxo to the transaction with appropriate activity/redeemer\n    //  ... allowing the token to be burned by the minting policy.\n    //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()\n    async DelegateRetiresAuthorityToken(\n        tcx: StellarTxnContext,\n        fromFoundUtxo: TxInput\n    ): Promise<StellarTxnContext> {\n        //! no need to specify a redeemer\n        return tcx.addInput(fromFoundUtxo);\n    }\n}\n","import { ConstrData, Datum } from \"@hyperionbt/helios\";\nimport { DatumAdapter } from \"./DatumAdapter.js\";\nimport type { Capo } from \"./Capo.js\";\n\nexport type RealNumberSettingsMap = { [key: string]: number };\nexport type onchainRealNumberSettingsMap = {\n    data: Record<string, bigint>\n};\n\nexport class DefaultSettingsAdapter extends DatumAdapter<\n    RealNumberSettingsMap,\n    onchainRealNumberSettingsMap,\n    Capo<any, any, any, any>\n> {\n    datumName: string = \"SettingsData\";\n    fromOnchainDatum(\n        parsedDatum: onchainRealNumberSettingsMap\n    ): RealNumberSettingsMap {\n        console.log(\"-------------------------------------> \", parsedDatum);\n        const settingsMap: Record<string, number> = {};\n        for (const [ name, microInt ] of Object.entries(parsedDatum.data)) {\n            // get the number found in the microInt\n            if (microInt > Number.MAX_SAFE_INTEGER) {\n                throw new Error(\n                    `microInt value too large for Number: ${microInt}`\n                );\n            }\n            settingsMap[name] = (0.0 + Number(microInt)) / 1_000_000;\n        }\n        return settingsMap;\n    }\n    toOnchainDatum(settings: RealNumberSettingsMap) {\n        const { SettingsData: hlSettingsData } = this.onChainDatumType;\n        const { RealnumSettingsValueV1 } = this.onChainTypes;\n\n        // const variant = hlSettingsData.prototype._enumVariantStatement;\n        // const settingsConstrIndex = new hlSettingsData(\n        //     \"placeholder\")._enumVariantStatement.constrIndex;\n        // const def = variant.dataDefinition\n        // const f0 = def.fields[0];\n        // const t = this.configDataToUplc(config);\n\n        // temporarily use the helios on-chain type.  Later this can just return a JSON structure\n        // that Helios will easily convert to its on-chain type.\n        return Datum.inline(\n            new ConstrData(2, [\n                this.toMapData(settings, this.toRealNum)\n            ])\n        );\n        // const t2 = new ConstrData(settingsConstrIndex, [t])\n        // const a = hlSettingsData.fromCbor(\n        //     ConstrData.fromCbor(t.toCbor())\n        // )\n        // const tt = t.toCborHex()\n        // console.log(\"--------\", tt)\n        // throw new Error(\"ffff\");\n    }\n}\n","import { Address, AssetClass, TxInput, Value } from \"@hyperionbt/helios\";\n\n//@ts-expect-error because TS can't import non-ts content : /\nimport contract from \"./BasicMintDelegate.hl\";\nimport { Activity,  } from \"../StellarContract.js\";\nimport type { configBase } from \"../StellarContract.js\";\n\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport type { MintDelegateArgs } from \"./BasicMintDelegate.js\";\nimport { StellarDelegate } from \"../delegation/StellarDelegate.js\";\n\n/**\n * Stores the mintDgt UUT together with the charter, thus requiring that the \n * govAuthority delegate directly approves any mint\n * @remarks\n * \n * @public\n **/\nexport class NoMintDelegation\n    extends StellarDelegate<MintDelegateArgs>\n{\n    static currentRev = 1n;\n    static get defaultParams() {\n        return { rev: this.currentRev };\n    }\n\nde\n    contractSource() {\n        return contract;\n    }\n\n    getContractScriptParams(config: MintDelegateArgs): configBase {\n        return {\n            rev: config.rev,\n        };\n    }\n    txnReceiveAuthorityToken<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        value: Value,\n        fromFoundUtxo?: TxInput | undefined\n    ): Promise<TCX> {\n        throw new Error(`todo`);\n    }\n\n    @Activity.partialTxn\n    async txnCreatingTokenPolicy(\n        tcx: StellarTxnContext,\n        tokenName: string\n    ): Promise<StellarTxnContext> {\n        return tcx;\n    }\n\n    static mkDelegateWithArgs(a: MintDelegateArgs) {}\n}\n","//@ts-nocheck\n\n//! this file implements a workaround for a problem\n//  ... where a second imported .hl file in a single .ts file\n//  ... causes the dts rollup plugin to not find the second .hl file\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport basics from \"./UncustomCapoSettings.hl\";\n\nexport const UncustomCapoSettings: HeliosModuleSrc = basics;\n","import {\n    Address,\n    AssetClass,\n    Assets,\n    ByteArray,\n    Crypto,\n    Datum,\n    DatumHash,\n    MintingPolicyHash,\n    //@ts-expect-error\n    Option,\n    Program,\n    Signature,\n    Tx,\n    TxId,\n    TxInput,\n    TxOutput,\n    UplcProgram,\n    ValidatorHash,\n    Value,\n    UplcData,\n    HInt,\n    bytesToHex,\n    bytesToText,\n    textToBytes,\n} from \"@hyperionbt/helios\";\n\nimport type { ScriptHash, Wallet } from \"@hyperionbt/helios\";\n\nimport type { isActivity } from \"./StellarContract.js\";\nimport { mkUutValuesEntries, mkValuesEntry } from \"./utils.js\";\n\nimport {\n    Activity,\n    datum,\n    partialTxn,\n    StellarContract,\n    txn,\n} from \"./StellarContract.js\";\nimport type { InlineDatum, valuesEntry } from \"./HeliosPromotedTypes.js\";\n\nimport {\n    StellarTxnContext,\n    type anyState,\n    type hasAddlTxns,\n    type hasSeedUtxo,\n    type otherAddlTxnNames,\n} from \"./StellarTxnContext.js\";\n\n//@ts-expect-error\nimport contract from \"./DefaultCapo.hl\";\nexport { contract };\n// import contract from \"./BaselineCapo.hl\";\nimport { Capo } from \"./Capo.js\";\nimport type {\n    CapoBaseConfig,\n    hasBootstrappedConfig,\n    hasUutContext,\n    hasUutCreator,\n    rootCapoConfig,\n    UutCreationAttrs,\n    UutCreationAttrsWithSeed,\n    uutPurposeMap,\n    MinimalDelegateLink,\n} from \"./Capo.js\";\n\nimport type { DatumAdapter } from \"./DatumAdapter.js\";\nimport type {\n    OffchainSettingsType,\n    OnchainSettingsType,\n    SettingsAdapterFor,\n} from \"./CapoSettingsTypes.js\";\nimport {\n    DefaultSettingsAdapter,\n    type RealNumberSettingsMap,\n} from \"./DefaultSettingsAdapter.js\";\n\nimport type { CapoMinter } from \"./minting/CapoMinter.js\";\nimport {\n    delegateRoles,\n    defineRole,\n    delegateLinkSerializer,\n} from \"./delegation/RolesAndDelegates.js\";\nimport type {\n    ErrorMap,\n    RelativeDelegateLink,\n    strategyValidation,\n} from \"./delegation/RolesAndDelegates.js\";\nimport { BasicMintDelegate } from \"./minting/BasicMintDelegate.js\";\nimport { AnyAddressAuthorityPolicy } from \"./authority/AnyAddressAuthorityPolicy.js\";\nimport { dumpAny, txAsString } from \"./diagnostics.js\";\n// import { MultisigAuthorityPolicy } from \"./authority/MultisigAuthorityPolicy.js\";\nimport { hasReqts } from \"./Requirements.js\";\nimport type { HeliosModuleSrc } from \"./HeliosModuleSrc.js\";\nimport { UnspecializedCapo } from \"./UnspecializedCapo.js\";\nimport { NoMintDelegation } from \"./minting/NoMintDelegation.js\";\nimport { CapoHelpers } from \"./CapoHelpers.js\";\nimport { AuthorityPolicy } from \"./authority/AuthorityPolicy.js\";\nimport { StellarDelegate } from \"./delegation/StellarDelegate.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport type { Expand, ExpandRecursively } from \"./testing/types.js\";\nimport { UncustomCapoSettings } from \"./UncustomCapoSettings.js\";\n\n/**\n * Schema for Charter Datum, which allows state to be stored in the Leader contract\n * together with it's primary or \"charter\" utxo.\n * @public\n **/\nexport interface DefaultCharterDatumArgs {\n    spendDelegateLink: RelativeDelegateLink<StellarDelegate<any>>;\n    spendInvariants: RelativeDelegateLink<StellarDelegate<any>>[];\n    namedDelegates: Record<string, RelativeDelegateLink<StellarDelegate<any>>>;\n    settingsUut: UutName | number[];\n    mintDelegateLink: RelativeDelegateLink<BasicMintDelegate>;\n    mintInvariants: RelativeDelegateLink<StellarDelegate<any>>[];\n    govAuthorityLink: RelativeDelegateLink<AuthorityPolicy>;\n}\n\n/**\n * Establishes minimum requirements for creating a charter-datum\n * @remarks\n *\n * requires a baseline configuration for the gov authority and mint delegate.\n *\n * @typeParam DAT - a charter-datum type that may have additional properties in case of advanced extensions to DefaultCapo.\n * @public\n **/\nexport type MinimalDefaultCharterDatumArgs<\n    DAT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs\n> = {\n    // RemainingMinimalCharterDatumArgs<DAT> & {\n    govAuthorityLink: MinimalDelegateLink<AuthorityPolicy>;\n    mintDelegateLink: MinimalDelegateLink<BasicMintDelegate>;\n    spendDelegateLink: MinimalDelegateLink<StellarDelegate<any>>;\n    mintInvariants: MinimalDelegateLink<StellarDelegate<any>>[];\n    spendInvariants: MinimalDelegateLink<StellarDelegate<any>>[];\n};\n//!!! todo enable \"other\" datum args - (ideally, those other than delegate-link types) to be inlcuded in MDCDA above.\nexport type RemainingMinimalCharterDatumArgs<\n    DAT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs\n> = Omit<DAT, \"govAuthorityLink\" | \"mintDelegateLink\" | \"spendDelegateLink\">;\n\nexport type HeldAssetsArgs = {\n    purposeId?: string;\n    purpose?: string;\n};\n\n// class GenericSettingsDetails extends DatumAdapter<RawGenericSettings, GenericSettingsDetails> {\n//     meaning: number;\n//     datumName = \"SettingsData\";\n//     constructor(raw: RawGenericSettings) {\n//         super(raw)\n//         this.meaning = raw.data.meaning;\n//     }\n//     toAppType(raw: RawGenericSettings) {\n//         return new GenericSettingsDetails(raw.data)\n//     }\n//     toOnchainDatum() : Datum {\n\n//     }\n// }\n\n/**\n * Base class for leader contracts, with predefined roles for delegating governance authority and minting policies\n * @remarks\n * \n *  * A Capo contract provides a central contract address that can act as a treasury or data registry;\n * it can mint tokens using its connected minting-policy, and it can delegate policies to other contract \n * scripts.  Subclasses of Capo can use these capabilities in custom ways for strong flexibility.\n\n * Subclass and customize DefaultCapo's type-parameters if you need to customize further.\n * \n * Any Capo contract can (and must) define roles() to establish collaborating scripts; these are used for \n * separating granular responsbilities for different functional purposes within your (on-chain and off-chain) \n * application; this approach enables delegates to use any one of multiple strategies with different\n * functional logic to serve in any given role, thus providing flexibility and extensibility.\n *\n * DefaultCapo provides roles for govAuthority and mintDelegate, and methods to facilitate \n * the lifecycle of charter creation & update. \n * \n * **Example: Multisig authority delegation** - a Capo contract would get much more complicated if it \n * contained multisig logic.  Instead, the governance authority for the Capo can be delegated to a \n * standalone multi-sig contract, which can contain all (and only) the multi-sig logic.  Separating the \n * responsibilities makes each part simpler, easing the process of ensuring each part is doing its job \n * perfectly :pray:\n * \n * A Capo subclass can decorate an existing entry from `super.roles()` with additional strategy entries, or can add \n * extra roles useful in the operation of its application.\n * \n * The Capo base class provides utilities for creating and using UUT's, or **unique utility tokens**, \n * which are non-fungible assets that can form a positive linkage between the Capo (which should \n * normally retain a reference to that UUT) and any delegate; that delegate is most commonly another \n * contract script also referenced within the roles() definition, with a selected strategy.  \n * \n * Architecturally, UUTs provide a simple and unique handle for the Capo to use as a  **required transaction element** \n * in key operational activities (like updating the charter details); so that the delegate holding the UUT is entrusted to\n * approved the UUT's inclusion in a transaction, with all the policy-enforcement implicated on the other end of the \n * delegation.\n * \n * Customizing Datum and Activity\n * \n * The baseline contract script can have specialized Datum and Activity (\"redeemer\")\n * definitions by subclassing DefaultCapo with a `get specializedCapo()`.  This\n * should be an imported helios script having `module specializedCapo` at the top.\n * It MUST export Datum and Activity enums, with variants matching those in the provided \n * baseline/unspecializedCapo module.  \n * \n * A customized Datum::validateSpend(self, ctx) -\\> Bool method\n * should be defined, even if it doesn't put constraints on spending Datum.  \n * If it does choose to add hard constraints, note that this method doesn't\n * have access to the Activity (\"redeemer\") type.  It's a simple place that can\n * only express simple constraints on spending ANY utxo from the contract.  \n * \n * A customized Activity: allowActivity(self, datum, ctx) -\\> Bool method\n * has access to both the redeemer (in self), as well as Datum and the transaction \n * context.  In this method, use self.switch\\{...\\} to implement activity-specific\n * validations.\n* \n * See the {@link Capo | Capo base class} and {@link StellarContract} for addition context.\n * @public\n */\n\nexport class DefaultCapo<\n        settingsType extends OffchainSettingsType<any> = RealNumberSettingsMap,\n        MinterType extends CapoMinter = CapoMinter,\n        CDT extends DefaultCharterDatumArgs = DefaultCharterDatumArgs,\n        configType extends CapoBaseConfig = CapoBaseConfig\n    >\n    extends Capo<settingsType, MinterType, CDT, configType>\n    implements hasUutCreator\n{\n    contractSource() {\n        return contract;\n    }\n    static parseConfig(rawJsonConfig: any) {\n        const { mph, rev, seedTxn, seedIndex, rootCapoScriptHash } =\n            rawJsonConfig;\n\n        const outputConfig: any = {};\n        if (mph) outputConfig.mph = MintingPolicyHash.fromHex(mph.bytes);\n        if (rev) outputConfig.rev = BigInt(rev);\n        if (seedTxn) outputConfig.seedTxn = TxId.fromHex(seedTxn.bytes);\n        if (seedIndex) outputConfig.seedIndex = BigInt(seedIndex);\n        if (rootCapoScriptHash)\n            outputConfig.rootCapoScriptHash = ValidatorHash.fromHex(\n                rootCapoScriptHash.bytes\n            );\n\n        return outputConfig;\n    }\n\n    /**\n     * indicates any specialization of the baseline Capo types\n     * @remarks\n     *\n     * The default implementation is an UnspecialiedCapo, which\n     * you can use as a template for your specialized Capo.\n     *\n     * Every specialization MUST include Datum and Activity (\"redeemer\") enums,\n     * and MAY include additional functions, and methods on Datum / Activity.\n     *\n     * The datum SHOULD have a validateSpend(self, datum, ctx) method.\n     *\n     * The redeemer SHOULD have an allowActivity(self, datum, ctx) method.\n     *\n     * @public\n     **/\n    get specializedCapo(): HeliosModuleSrc {\n        return UnspecializedCapo;\n    }\n\n    get customCapoSettings(): HeliosModuleSrc {\n        return UncustomCapoSettings;\n    }\n\n    /**\n     * indicates any specialization of the baseline Capo types\n     * @remarks\n     *\n     * The default implementation is an UnspecialiedCapo, which\n     * you can use as a template for your specialized Capo.\n     *\n     * Every specialization MUST include Datum and  Activity (\"redeemer\") enums,\n     * and MAY include additional functions, and methods on Datum / Activity.\n     *\n     * The datum enum SHOULD have a validateSpend(self, datum, ctx) method.\n     *\n     * The activity enum SHOULD have an allowActivity(self, datum, ctx) method.\n     *\n     * @public\n     **/\n    get capoHelpers(): HeliosModuleSrc {\n        return CapoHelpers;\n    }\n\n    importModules(): HeliosModuleSrc[] {\n        const parentModules = super.importModules();\n        const { specializedCapo, customCapoSettings } = this;\n        if (specializedCapo.moduleName !== \"specializedCapo\") {\n            throw new Error(\n                `${this.constructor.name}: specializedCapo() module name must be ` +\n                    `'specializedCapo', not '${specializedCapo.moduleName}'\\n  ... in ${specializedCapo.srcFile}`\n            );\n        }\n\n        return [\n            specializedCapo,\n            customCapoSettings,\n            this.capoHelpers,\n            ...parentModules,\n        ];\n    }\n\n    @Activity.redeemer\n    activityUpdatingCharter(): // args: CDT\n    isActivity {\n        const updatingCharter = this.mustGetActivity(\"updatingCharter\");\n        // let {uut, strategyName, reqdAddress: canRequireAddr, addrHint=[]} = args.govAuthority\n\n        // // const {Option} = this.onChainTypes;\n        // debugger\n        // const OptAddr = Option(Address);\n        // const needsAddr = new OptAddr(canRequireAddr);\n        const t = new updatingCharter();\n        // args.govDelegate,\n        // new hlRelativeDelegateLink(uut, strategyName, needsAddr, addrHint)\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    @Activity.redeemer\n    activityUpdatingSettings(): // args: CDT\n    isActivity {\n        const updatingSettings = this.mustGetActivity(\"updatingSettings\");\n        const t = new updatingSettings();\n\n        return { redeemer: t._toUplcData() };\n    }\n\n    /**\n     * USE THE `delegateRoles` GETTER INSTEAD\n     * @remarks\n     *\n     * - this no-op method is a convenience for Stellar Contracts maintainers\n     *   and intuitive developers using autocomplete.\n     * - Including it enables an entry\n     *   in VSCode \"Outline\" view, which doesn't include the delegateRoles getter : /\n     * @deprecated but please keep as a kind of redirect\n     * @public\n     **/\n    getDelegateRoles() {\n        throw new Error(`use the delegateRoles getter instead`); // for javascript devs\n    }\n\n    get delegateRoles() {\n        return delegateRoles({\n            govAuthority: defineRole(\"capoGov\", AuthorityPolicy, {\n                address: {\n                    delegateClass: AnyAddressAuthorityPolicy,\n                    validateConfig(args): strategyValidation {\n                        const { rev, tn, addrHint } = args;\n\n                        const errors: ErrorMap = {};\n                        if (!rev) errors.rev = [\"required\"];\n                        if (!tn?.length) errors.tn = [\"(token-name) required\"];\n\n                        if (!addrHint?.length)\n                            errors.addrHint = [\"destination address required\"];\n                        if (Object.keys(errors).length > 0) return errors;\n\n                        return undefined;\n                    },\n                },\n                // multisig: {\n                //     delegateClass: MultisigAuthorityPolicy,\n                //     validateConfig(args): strategyValidation {\n                //         const { rev, uut } = args;\n                //         const errors: ErrorMap = {};\n                //         if (!rev) errors.rev = [\"required\"];\n                //         if (!uut) errors.uut = [\"required\"];\n                //         if (Object.keys(errors).length > 0) return errors;\n\n                //         return undefined;\n                //     },\n                // },\n            }),\n            mintDelegate: defineRole(\"mintDgt\", BasicMintDelegate, {\n                default: {\n                    delegateClass: BasicMintDelegate,\n                    partialConfig: {},\n                    validateConfig(args): strategyValidation {\n                        return undefined;\n                    },\n                },\n                // undelegated: { ... todo ... }\n            }),\n\n            spendDelegate: defineRole(\"spendDgt\", StellarDelegate<any>, {\n                default: {\n                    delegateClass: BasicMintDelegate,\n                    partialConfig: {},\n                    validateConfig(args): strategyValidation {\n                        return undefined;\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Performs a validation of all critical delegate connections\n     * @remarks\n     *\n     * Checks that each delegate connection is correct and that the underlying\n     * scripts for those delegates have not been modified in unplanned ways.\n     *\n     * Every Capo subclass that adds new delegate types SHOULD implement\n     * this method, performing any checks needed to verify the scripts underlying\n     * those delegate-types.  It should return `Promise.all([ super(), ...myOwnChecks])`.\n     * @public\n     **/\n    async verifyCoreDelegates() {\n        const rcsh = this.configIn?.rootCapoScriptHash;\n        if (rcsh && !rcsh.eq(this.validatorHash!)) {\n            console.error(\n                `expected: ` +\n                    rcsh.hex +\n                    `\\n  actual: ` +\n                    this.validatorHash!.hex\n            );\n\n            throw new Error(\n                `${this.constructor.name}: the leader contract script '${this.scriptProgram?.name}', or one of its dependencies, has been modified`\n            );\n        }\n\n        const charter = await this.findCharterDatum();\n        const { govAuthorityLink, mintDelegateLink, spendDelegateLink } =\n            charter;\n\n        return Promise.all([\n            this.connectDelegateWithLink(\"govAuthority\", govAuthorityLink),\n            this.connectDelegateWithLink(\"mintDelegate\", mintDelegateLink),\n            this.connectDelegateWithLink(\"spendDelegate\", spendDelegateLink),\n        ]);\n    }\n\n    mkOnchainDelegateLink(dl: RelativeDelegateLink<any>) {\n        const { RelativeDelegateLink: hlRelativeDelegateLink } =\n            this.onChainTypes;\n\n        let {\n            uutName,\n            strategyName,\n            delegateValidatorHash,\n            config,\n            // reqdAddress: canRequireAddr,\n            // addrHint = [],\n        } = dl;\n        const OptValidator = Option(ValidatorHash);\n        // const needsAddr = new OptAddr(canRequireAddr);\n\n        return new hlRelativeDelegateLink(\n            uutName,\n            strategyName,\n            new OptValidator(delegateValidatorHash)\n            // config //!!! todo - support inline config if/when needed\n            // needsAddr,\n            // addrHint\n        );\n    }\n\n    @datum\n    async mkDatumCharterToken(args: CDT): Promise<Datum> {\n        //!!! todo: make it possible to type these datum helpers more strongly\n        //  ... at the interface to Helios\n        console.log(\"--> mkDatumCharterToken\", args);\n        const { CharterToken: hlCharterToken } = this.onChainDatumType;\n\n        // ugh, we've been here before - weaving back and forth between\n        // library essentials and application-layer types makes things hard\n        // and complicated.  -> use the spending delegate and separate UTXO\n        // for config data, instead of keeping config data in the charter datum.\n        const govAuthority = this.mkOnchainDelegateLink(args.govAuthorityLink);\n        const mintDelegate = this.mkOnchainDelegateLink(args.mintDelegateLink);\n        const spendDelegate = this.mkOnchainDelegateLink(\n            args.spendDelegateLink\n        );\n        const mintInvariants = args.mintInvariants.map((dl) => {\n            return this.mkOnchainDelegateLink(dl);\n        });\n        const spendInvariants = args.spendInvariants.map((dl) => {\n            return this.mkOnchainDelegateLink(dl);\n        });\n        const namedDelegates = new Map<string, any>(\n            Object.entries(args.namedDelegates).map(([k, v]) => {\n                return [k, this.mkOnchainDelegateLink(v)];\n            })\n        );\n\n        const settingsUutNameBytes = this.mkSettingsUutName(args.settingsUut);\n        const t = new hlCharterToken(\n            spendDelegate,\n            spendInvariants,\n            settingsUutNameBytes,\n            namedDelegates,\n            mintDelegate,\n            mintInvariants,\n            govAuthority\n        );\n        return Datum.inline(t._toUplcData());\n    }\n    mkSettingsUutName(settingsUut: UutName | number[]) {\n        return settingsUut instanceof UutName\n        ? textToBytes(settingsUut.name)\n        : settingsUut;\n    }\n\n    @datum\n    mkDatumScriptReference() {\n        const { ScriptReference: hlScriptReference } = this.onChainDatumType;\n\n        // this is a simple enum tag, indicating the role of this utxo: holding the script\n        // on-chain, so it can be used in later transactions without bloating those txns\n        // every time.\n        const t = new hlScriptReference();\n        return Datum.inline(t._toUplcData());\n    }\n\n    // XX@ts-expect-error on the default return type - override this method with\n    //    more specific adapter\n    initSettingsAdapter() {\n        return new DefaultSettingsAdapter(this);\n    }\n\n    @datum\n    mkDatumSettingsData(settings: settingsType): Datum {\n        const adapter = this.settingsAdapter;\n        return adapter.toOnchainDatum(settings) as Datum;\n    }\n\n    //@Xts-expect-error - method should be overridden\n    mkInitialSettings(): settingsType {\n        //@ts-expect-error - method should be overridden\n        return {\n            meaning: 42,\n            happy: 1,\n        };\n    }\n\n    // settingsDataToUplc(config: ContractSettingsData<this>) {\n    //     const {RealnumSettingsValueV1} = this.onChainTypes;\n    //     return\n    //     //  new ListData([\n    //         //@ts-expect-error\n    //         Object.entries(config).map(([k, v]) => {\n    //             debugger\n    //             return new ConfigValue(k, BigInt(v) * 1_000_000n)._toUplcData();\n    //         })\n    //     // ])\n    //     // return new MapData([\n    //     //     [new ByteArrayData(textToBytes(\"empty\")), new ByteArrayData(\n    //     //         textToBytes(config.empty)\n    //     //     )],\n    //     //     [new ByteArrayData(textToBytes(\"hi\")), new ByteArrayData(\n    //     //         textToBytes(\"there\")\n    //     //     )]\n    //     // ])\n    // }\n\n    async findCharterDatum(currentCharterUtxo?: TxInput) {\n        if (!currentCharterUtxo) {\n            currentCharterUtxo = await this.mustFindCharterUtxo();\n        }\n        const charterDatum = await this.readDatum<DefaultCharterDatumArgs>(\n            \"CharterToken\",\n            currentCharterUtxo.origOutput.datum as InlineDatum\n        );\n        if (!charterDatum) throw Error(`invalid charter UTxO datum`);\n        return charterDatum;\n    }\n\n    async findGovDelegate() {\n        const charterDatum = await this.findCharterDatum();\n        const capoGovDelegate =\n            await this.connectDelegateWithLink<AuthorityPolicy>(\n                \"govAuthority\",\n                charterDatum.govAuthorityLink\n            );\n        console.log(\n            \"finding charter's govDelegate via link\",\n            charterDatum.govAuthorityLink\n        );\n\n        return capoGovDelegate;\n    }\n\n    async txnAddGovAuthority<TCX extends StellarTxnContext>(\n        tcx: TCX\n    ): Promise<TCX> {\n        const capoGovDelegate = await this.findGovDelegate();\n        console.log(\"adding charter's govAuthority\");\n\n        return capoGovDelegate.txnGrantAuthority(tcx);\n    }\n\n    // getMinterParams() {\n    //     const { seedTxn, seedIdx } = this.configIn\n    //     return { seedTxn, seedIdx }\n    // }\n\n    // async txnBurnUuts<\n    //     existingTcx extends StellarTxnContext<any>,\n    // >(\n    //     initialTcx: existingTcx,\n    //     uutNames: UutName[],\n    // ): Promise<existingTcx> {\n    //     const minter = this.connectMinter();\n    //     const tcx = await minter.txnBurnUuts(\n    //         initialTcx,\n    //         uutNames,\n    //     );\n\n    //     const tcx2 = await this.txnMustUseCharterUtxo(tcx, \"refInput\");\n    //     return this.txnAddMintDelegate(tcx2);\n    // }\n\n    async getMintDelegate() {\n        const charterDatum = await this.findCharterDatum();\n\n        return this.connectDelegateWithLink(\n            \"mintDelegate\",\n            charterDatum.mintDelegateLink\n        );\n    }\n\n    async getSpendDelegate() {\n        const charterDatum = await this.findCharterDatum();\n\n        return this.connectDelegateWithLink(\n            \"spendDelegate\",\n            charterDatum.spendDelegateLink\n        );\n    }\n\n    async getGovDelegate() {\n        const charterDatum = await this.findCharterDatum();\n\n        return this.connectDelegateWithLink(\n            \"govDelegate\",\n            charterDatum.govAuthorityLink\n        );\n    }\n\n    /**\n     * Initiates a seeding transaction, creating a new Capo contract of this type\n     * @remarks\n     *\n     * The returned transaction context has `state.bootstrappedConfig` for\n     * capturing the details for reproducing the contract's settings and on-chain\n     * address.\n     *\n     * @param charterDatumArgs - initial details for the charter datum\n     * @param existinTcx - any existing transaction context\n     * @typeParam TCX - inferred type of a provided transaction context\n     * @public\n     **/\n    // @txn\n    async mkTxnMintCharterToken<\n        TCX extends undefined | StellarTxnContext<anyState>,\n        TCX2 = TCX extends StellarTxnContext<infer TCXT>\n            ? StellarTxnContext<TCXT>\n            : {}\n    >(\n        charterDatumArgs: MinimalDefaultCharterDatumArgs<CDT>,\n        existingTcx?: TCX\n    ) {\n        if (this.configIn)\n            throw new Error(\n                `this contract suite is already configured and can't be re-chartered`\n            );\n\n        type hasBsc = hasBootstrappedConfig<CapoBaseConfig & configType>;\n        //@ts-expect-error yet another case of seemingly spurious \"could be instantiated with a different subtype\" (actual fixes welcome :pray:)\n        const initialTcx: TCX2 & hasBsc =\n            existingTcx || (new StellarTxnContext(this.myActor) as hasBsc);\n\n        const promise = this.txnMustGetSeedUtxo(\n            initialTcx,\n            \"charter bootstrapping\",\n            [\"charter\"]\n        ).then(async (seedUtxo) => {\n            const { txId: seedTxn, utxoIdx } = seedUtxo.outputId;\n            const seedIndex = BigInt(utxoIdx);\n\n            const minter = await this.connectMintingScript({\n                seedIndex,\n                seedTxn,\n            });\n            const { mintingPolicyHash: mph } = minter;\n\n            // const rev = this.getCapoRev();\n            const csp = this.getContractScriptParams(\n                (this.configIn || this.partialConfig) as configType\n            );\n\n            const bsc = {\n                ...csp,\n                mph,\n                seedTxn,\n                seedIndex,\n            } as configType;\n            this.loadProgramScript({ ...csp, mph });\n            bsc.rootCapoScriptHash = this.compiledScript.validatorHash;\n\n            initialTcx.state.bsc = bsc;\n            initialTcx.state.bootstrappedConfig = JSON.parse(\n                JSON.stringify(bsc, delegateLinkSerializer)\n            );\n            const fullScriptParams = (this.contractParams =\n                this.getContractScriptParams(bsc));\n            this.configIn = bsc;\n\n            this.scriptProgram = this.loadProgramScript(fullScriptParams);\n\n            const uutPurposes = [\"capoGov\", \"mintDgt\", \"spendDgt\", \"set\"];\n            const tcx = await this.txnWillMintUuts(\n                initialTcx,\n                uutPurposes,\n                { usingSeedUtxo: seedUtxo },\n                {\n                    govAuthority: \"capoGov\",\n                    mintDelegate: \"mintDgt\",\n                    spendDelegate: \"spendDgt\",\n                }\n            );\n            const { uuts } = tcx.state;\n            //     capoGov,\n            //     govAuthority, // same\n            //     mintDgt, // same as mintDelegate\n            //     spendDelegate\n            // } = tcx.state.uuts;\n            if (uuts.govAuthority !== uuts.capoGov) {\n                throw new Error(`assertion can't fail`);\n            }\n\n            const govAuthority = await this.txnCreateDelegateLink<\n                AuthorityPolicy,\n                \"govAuthority\"\n            >(tcx, \"govAuthority\", charterDatumArgs.govAuthorityLink);\n\n            const mintDelegate = await this.txnCreateDelegateLink<\n                BasicMintDelegate,\n                \"mintDelegate\"\n            >(tcx, \"mintDelegate\", charterDatumArgs.mintDelegateLink);\n\n            const spendDelegate = await this.txnCreateDelegateLink<\n                StellarDelegate<any>,\n                \"spendDelegate\"\n            >(tcx, \"spendDelegate\", charterDatumArgs.spendDelegateLink);\n\n            //@ts-expect-error - typescript can't seem to understand that\n            //    <Type> - govAuthorityLink + govAuthorityLink is <Type> again\n            const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n                ...charterDatumArgs,\n                settingsUut: uuts.set,\n                govAuthorityLink: govAuthority,\n                mintDelegateLink: mintDelegate,\n                namedDelegates: {}, // can only be empty at charter, for now.\n                spendDelegateLink: spendDelegate,\n            };\n            const datum = await this.mkDatumCharterToken(fullCharterArgs);\n\n            const charterOut = new TxOutput(\n                this.address,\n                this.tvCharter(),\n                datum\n                // this.compiledScript\n            );\n            charterOut.correctLovelace(this.networkParams);\n\n            tcx.addInput(seedUtxo);\n            tcx.addOutputs([charterOut]);\n\n            // creates an addl txn that stores a refScript in the delegate;\n            //   that refScript could be stored somewhere else instead (e.g. the Capo)\n            //   but for now it's in the delegate addr.\n            const tcx2 = await this.txnMkAddlRefScriptTxn(\n                tcx,\n                \"mintDelegate\",\n                mintDelegate.delegate.compiledScript\n            );\n\n            const tcx3 = await this.txnMkAddlRefScriptTxn(\n                tcx2,\n                \"capo\",\n                this.compiledScript\n            );\n            const tcx4 = await this.txnMkAddlRefScriptTxn(\n                tcx3,\n                \"minter\",\n                minter.compiledScript\n            );\n            console.log(\n                \" ---------------- CHARTER MINT ---------------------\\n\",\n                txAsString(tcx4.tx, this.networkParams)\n            );\n\n            // type Normalize<T> =\n            //     T extends (...args: infer A) => infer R ? (...args: Normalize<A>) => Normalize<R>\n            //     : T extends any ? {[K in keyof T]: Normalize<T[K]>} : never\n\n            const settings = this.mkInitialSettings();\n            const tcx5 = this.txnAddSettingsOutput(tcx4, settings);\n\n            // debugger\n\n            // mints the charter, along with the capoGov and mintDgt UUTs.\n            // TODO: if there are additional UUTs needed for other delegates, include them here.\n            const minting = this.minter.txnMintingCharter(tcx5, {\n                owner: this.address,\n                capoGov: uuts.capoGov, // same as govAuthority,\n                mintDelegate: uuts.mintDelegate,\n                spendDelegate: uuts.spendDelegate,\n                settingsUut: uuts.set,\n            });\n            return minting;\n        });\n        return promise;\n    }\n\n    async findSettingsDatum({\n        settingsUtxo,\n        charterUtxo,\n    }: {\n        settingsUtxo?: TxInput;\n        charterUtxo?: TxInput;\n    } = {}): Promise<settingsType> {\n        const foundSettingsUtxo =\n            settingsUtxo || (await this.findSettingsUtxo(charterUtxo));\n        const data = await this.readDatum(\n            this.settingsAdapter,\n            foundSettingsUtxo.origOutput.datum as InlineDatum\n        );\n        if (!data) throw Error(`missing or invalid settings UTxO datum`);\n        return data;\n    }\n\n    txnAddSettingsOutput<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        settings: settingsType\n    ): TCX {\n        const settingsOut = new TxOutput(\n            this.address,\n            this.uutsValue(tcx.state.uuts.set),\n            this.mkDatumSettingsData(settings)\n        );\n        settingsOut.correctLovelace(this.networkParams);\n        return tcx.addOutput(settingsOut);\n    }\n\n    /**\n     * Creates an additional reference-script-creation txn\n     * @remarks\n     *\n     * Creates a txn for reference-script creation, and\n     * adds it to the current transaction context to also be submitted.\n     *\n     * The reference script is stored in the Capo contract with a special\n     * Datum, and it can be used in future transactions to save space and fees.\n     *\n     * @param tcx - the transaction context\n     * @param scriptName - the name of the script, used in the addlTxn's  name\n     * @param script - the script to be stored onchain for future reference\n     * @public\n     **/\n    async txnMkAddlRefScriptTxn<\n        TCX extends StellarTxnContext<anyState>,\n        scriptName extends string\n    >(\n        tcx: TCX,\n        scriptName: scriptName,\n        script: UplcProgram\n    ): Promise<\n        hasAddlTxns<\n            `refScript${Capitalize<scriptName>}` | otherAddlTxnNames<TCX>,\n            TCX\n        > // & unwrapped\n    > {\n        const refScriptUtxo = new TxOutput(\n            this.address,\n            new Value(this.ADA(0n)),\n            this.mkDatumScriptReference(),\n            script\n        );\n        refScriptUtxo.correctLovelace(this.networkParams);\n        const nextTcx = new StellarTxnContext(this.myActor).addOutput(\n            refScriptUtxo\n        );\n\n        const sn = scriptName[0].toUpperCase() + scriptName.slice(1);\n\n        return tcx.includeAddlTxn(`refScript${sn}`, {\n            description: `creates on-chain reference script for ${scriptName}`,\n            moreInfo: \"saves txn fees and txn space in future txns\",\n            optional: false,\n            tcx: nextTcx,\n        });\n    }\n\n    /**\n     * Attach the given script by reference to a transaction\n     * @remarks\n     *\n     * If the given script is found in the Capo's known list of reference scripts,\n     * it is used to attach the refScript to the transaction context.  Otherwise,\n     * the script's bytes are added directly to the transaction.\n     *\n     * The script name is expected to be found in the Capo's refScript datum.\n     * If a different name is found, a mismatch warning is emitted.\n     *\n     * If the given program is not found in the Capo's refScript datum, a\n     * missing-refScript warning is emitted, and the program is added directly\n     * to the transaction.  If this makes the transaction too big, the console\n     * warning will be followed by a thrown error during the transaction's\n     * wallet-submission sequence.\n     * @param program - the UPLC program to attach to the script\n     * @public\n     **/\n    @partialTxn\n    async txnAttachScriptOrRefScript<TCX extends StellarTxnContext>(\n        tcx: TCX,\n        program: UplcProgram = this.compiledScript\n    ): Promise<TCX> {\n        let expectedVh: string = this.getProgramHash(program);\n        const { purpose: expectedPurpose } = program.properties;\n        const isCorrectRefScript = (txin: TxInput) => {\n            const refScript = txin.origOutput.refScript;\n            if (!refScript) return false;\n            const { purpose } = refScript.properties || {};\n            if (purpose && purpose != expectedPurpose) return false;\n\n            const foundHash = this.getProgramHash(refScript);\n            return foundHash == expectedVh;\n        };\n        if (tcx.txRefInputs.find(isCorrectRefScript)) {\n            console.warn(\"suppressing second add of refScript\");\n            return tcx;\n        }\n        const scriptReferences = await this.findScriptReferences();\n        // for (const [txin, refScript] of scriptReferences) {\n        //     console.log(\"refScript\", dumpAny(txin));\n        // }\n\n        const matchingScriptRefs = scriptReferences.find(([txin, refScript]) =>\n            isCorrectRefScript(txin)\n        );\n        if (!matchingScriptRefs) {\n            console.warn(\n                `missing refScript in Capo ${this.address.toBech32()} for expected script hash ${expectedVh}; adding script directly to txn`\n            );\n            // console.log(\"------------------- NO REF SCRIPT\")\n            return tcx.addScriptProgram(program);\n        }\n        // console.log(\"------------------- REF SCRIPT\")\n        return tcx.addRefInput(matchingScriptRefs[0], program);\n    }\n\n    private getProgramHash(program: UplcProgram) {\n        let hash: string;\n        try {\n            hash = program.validatorHash.toString();\n        } catch (e1: any) {\n            try {\n                hash = program.mintingPolicyHash.toString();\n            } catch (e2: any) {\n                try {\n                    hash = program.stakingValidatorHash.toString();\n                } catch (e3: any) {\n                    debugger;\n                    throw new Error(\n                        `can't get script hash from program:` +\n                            `\\n  - tried validatorHash: ${e1.message}` +\n                            `\\n  - tried mintingPolicyHash: ${e2.message}` +\n                            `\\n  - tried stakingValidatorHash: ${e3.message}`\n                    );\n                }\n            }\n        }\n        return hash;\n    }\n\n    async findScriptReferences() {\n        const utxos = await this.network.getUtxos(this.address);\n        type TxoWithScriptRefs = [TxInput, any];\n        // console.log(\"finding script refs\", utxos);\n        const utxosWithDatum = (\n            await Promise.all(\n                utxos.map((utxo) => {\n                    const { datum } = utxo.origOutput;\n                    // console.log(\"datum\", datum);\n                    if (!datum) return null;\n                    return this.readDatum(\"ScriptReference\", datum)\n                        .catch(() => {\n                            // console.log(\"failed to parse\")\n                            return null;\n                        })\n                        .then((scriptRef) => {\n                            if (!scriptRef) return null;\n                            // console.log(\"scriptRef\", scriptRef);\n                            return [utxo, scriptRef] as TxoWithScriptRefs;\n                        });\n                })\n            )\n        ).filter((x) => !!x) as TxoWithScriptRefs[];\n\n        return utxosWithDatum;\n    }\n\n    @txn\n    async mkTxnUpdateCharter(\n        args: CDT,\n        activity: isActivity = this.activityUpdatingCharter(),\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor)\n    ): Promise<StellarTxnContext> {\n        console.log(\"update charter\", { activity });\n        return this.txnUpdateCharterUtxo(\n            tcx,\n            activity,\n            await this.mkDatumCharterToken(args)\n        );\n    }\n\n    async findSettingsUtxo(charterUtxo?: TxInput) {\n        const chUtxo = charterUtxo || (await this.mustFindCharterUtxo());\n        const charterDatum = await this.findCharterDatum(chUtxo);\n        const uutName = charterDatum.settingsUut;\n        console.log(\"findSettingsUut\", { uutName, charterDatum });\n        const uutValue = this.uutsValue(uutName);\n\n        return await this.mustFindMyUtxo(\n            \"set-uut\",\n            this.mkTokenPredicate(uutValue)\n        );\n    }\n\n    @txn\n    async mkTxnUpdateOnchainSettings<TCX extends StellarTxnContext>(\n        data: settingsType,\n        settingsUtxo?: TxInput,\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor)\n    ): Promise<TCX> {\n        // uses the charter ref input\n        settingsUtxo = settingsUtxo || (await this.findSettingsUtxo());\n        const spendingDelegate = await this.getSpendDelegate();\n        const mintDelegate = await this.getMintDelegate();\n        console.log(\"HI\");\n        const tcx2 = await this.txnAddGovAuthority(tcx);\n        const tcx2a = await this.txnMustUseCharterUtxo(tcx2, \"refInput\");\n        const tcx2b = await this.txnAttachScriptOrRefScript(tcx2a);\n        const tcx2c = await spendingDelegate.txnGrantAuthority(\n            tcx2b, \n            spendingDelegate.activityValidatingSettings()\n        );\n        const tcx2d = await mintDelegate.txnGrantAuthority(\n            tcx2c, \n            mintDelegate.activityValidatingSettings()\n        );\n        \n        const tcx3 = tcx2d\n            .addInput(settingsUtxo, this.activityUpdatingSettings())\n            .addOutput(\n                new TxOutput(\n                    this.address,\n                    settingsUtxo.origOutput.value,\n                    this.mkDatumSettingsData(data)\n                )\n            );\n        return tcx3 as TCX & typeof tcx3;\n    }\n\n    /**\n     * Installs a new Minting delegate to the Capo contract\n     * @remarks\n     *\n     * Updates the policy by which minting under the contract's minting policy is allowed.\n     *\n     * This supports the evolution of logic for token-minting.\n     * Note that updating the minting policy can't modify or interfere with constraints\n     * enforced by any existing mintInvariants.\n     *\n     * Normally, the existing minting delegate is signalled to be Retiring its delegation token,\n     * burning it as part of the update transaction and cleaning things up.  The minUtxo from\n     * the old delegation UUT will be recycled for use in the new delegate.\n     *\n     * @param delegateInfo - the new minting delegate's info\n     * @param options - allows a forced update, which leaves a dangling delegation token\n     *   in the old minting delegate, but allows the new minting delegate to take over without\n     *   involving the old delegate in the transaction.\n     * @param tcx - any existing transaction context\n     * @public\n     **/\n    @txn\n    async mkTxnUpdatingMintDelegate<\n        DT extends StellarDelegate,\n        thisType extends DefaultCapo<settingsType, MinterType, CDT, configType>\n    >(\n        this: thisType,\n        delegateInfo: MinimalDelegateLink<DT> & {\n            strategyName: string &\n                keyof thisType[\"delegateRoles\"][\"mintDelegate\"][\"variants\"];\n        },\n        options: {\n            forcedUpdate?: true;\n        } = {},\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor)\n    ): Promise<StellarTxnContext> {\n        const currentCharter = await this.mustFindCharterUtxo();\n        const currentDatum = await this.findCharterDatum(currentCharter);\n        const mintDelegate = await this.getMintDelegate();\n        const { minter } = this;\n        const tcxWithSeed = await this.addSeedUtxo(tcx);\n        const uutOptions: UutCreationAttrs = options.forcedUpdate\n            ? {\n                  omitMintDelegate: true,\n                  minterActivity: minter.activityForcingNewMintDelegate({\n                      seedTxn: tcxWithSeed.state.seedUtxo.outputId.txId,\n                      seedIndex: tcxWithSeed.state.seedUtxo.outputId.utxoIdx,\n                  }),\n              }\n            : {\n                  usingMintDelegateActivity: mintDelegate.activityReplacingMe({\n                      seedTxn: tcxWithSeed.state.seedUtxo.outputId.txId,\n                      seedIndex: tcxWithSeed.state.seedUtxo.outputId.utxoIdx,\n                      purpose: \"mintDgt\",\n                  }),\n                  additionalMintValues: this.mkValuesBurningDelegateUut(\n                      currentDatum.mintDelegateLink\n                  ),\n                  returnExistingDelegateToScript: false, // so it can be burned without a txn imbalance\n              };\n        debugger;\n        const tcx2 = await this.txnMintingUuts(\n            // todo: make sure seed-utxo is selected with enough minUtxo ADA for the new UUT name.\n            // const seedUtxo = await this.txnMustGetSeedUtxo(tcx, \"mintDgt\", [\"mintDgt-XxxxXxxxXxxx\"]);\n            tcxWithSeed,\n            [\"mintDgt\"],\n            uutOptions,\n            {\n                mintDelegate: \"mintDgt\",\n            }\n        );\n        const newMintDelegate = await this.txnCreateDelegateLink<\n            DT,\n            \"mintDelegate\"\n        >(tcx2, \"mintDelegate\", delegateInfo);\n        // currentDatum.mintDelegateLink);\n\n        // const spendDelegate = await this.txnCreateDelegateLink<\n        //     StellarDelegate<any>,\n        //     \"spendDelegate\"\n        // >(tcx, \"spendDelegate\", charterDatumArgs.spendDelegateLink);\n\n        //@ts-expect-error \"could be instantiated with different subtype\"\n        const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n            ...currentDatum,\n            mintDelegateLink: newMintDelegate,\n        };\n        return this.mkTxnUpdateCharter(\n            fullCharterArgs,\n            undefined,\n            await this.txnAddGovAuthority(tcx2)\n        );\n        // const datum = await this.mkDatumCharterToken(fullCharterArgs);\n\n        // const charterOut = new TxOutput(\n        //     this.address,\n        //     this.tvCharter(),\n        //     datum\n        //     // this.compiledScript\n        // );\n\n        // return tcx2.addOutput(charterOut);\n    }\n\n    mkValuesBurningDelegateUut(current: RelativeDelegateLink<any>) {\n        return [mkValuesEntry(current.uutName, -1n)];\n    }\n\n    @txn\n    async mkTxnUpdatingSpendDelegate<\n        DT extends StellarDelegate,\n        thisType extends DefaultCapo<settingsType, MinterType, CDT, configType>\n    >(\n        this: thisType,\n        delegateInfo: MinimalDelegateLink<DT> & {\n            strategyName: string &\n                keyof thisType[\"delegateRoles\"][\"spendDelegate\"][\"variants\"];\n        },\n        options: {\n            forcedUpdate?: true;\n        } = {},\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor)\n    ): Promise<StellarTxnContext> {\n        const currentCharter = await this.mustFindCharterUtxo();\n        const currentDatum = await this.findCharterDatum(currentCharter);\n        const spendDelegate = await this.getSpendDelegate();\n        const tcxWithSeed = await this.addSeedUtxo(tcx);\n        const uutOptions: UutCreationAttrs = {\n            omitMintDelegate: true,\n            minterActivity: this.minter.activityCreatingNewSpendDelegate({\n                seedTxn: tcxWithSeed.state.seedUtxo.outputId.txId,\n                seedIndex: tcxWithSeed.state.seedUtxo.outputId.utxoIdx,\n                ...(options.forcedUpdate\n                    ? {}\n                    : {  // minter will enforce this Burn\n                          replacingUut: spendDelegate.authorityTokenName,\n                      }),\n            }),\n            ...(options.forcedUpdate\n                ? { // the minter won't require the old delegate to be burned\n                      returnExistingDelegateToScript: false, // so it can be burned without a txn imbalance\n                  }\n                : {\n                      additionalMintValues: this.mkValuesBurningDelegateUut(\n                          currentDatum.spendDelegateLink\n                      ),\n                  }),\n        };\n        debugger;\n        const tcx2 = await this.txnMintingUuts(\n            // todo: make sure seed-utxo is selected with enough minUtxo ADA for the new UUT name.\n            // const seedUtxo = await this.txnMustGetSeedUtxo(tcx, \"mintDgt\", [\"mintDgt-XxxxXxxxXxxx\"]);\n            tcxWithSeed,\n            [\"spendDgt\"],\n            uutOptions,\n            {\n                spendDelegate: \"spendDgt\",\n            }\n        );\n        const newSpendDelegate = await this.txnCreateConfiguredDelegate<\n            DT,\n            \"spendDelegate\"\n        >(tcx2, \"spendDelegate\", delegateInfo);\n        // currentDatum.mintDelegateLink);\n\n        const tcx2a = options.forcedUpdate\n            ? tcx2\n            : await spendDelegate.txnGrantAuthority(\n                  tcx2,\n                  spendDelegate.activityReplacingMe({\n                      seedTxn: tcxWithSeed.state.seedUtxo.outputId.txId,\n                      seedIndex: tcxWithSeed.state.seedUtxo.outputId.utxoIdx,\n                      purpose: \"spendDgt\",\n                  }),\n                  false\n              );\n        const tcx2b = await newSpendDelegate.delegate.txnReceiveAuthorityToken(\n            tcx2a,\n            newSpendDelegate.delegate.tvAuthorityToken()\n        );\n\n        debugger;\n\n        //@ts-expect-error \"could be instantiated with different subtype\"\n        const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n            ...currentDatum,\n            spendDelegateLink: newSpendDelegate,\n        };\n\n        return this.mkTxnUpdateCharter(\n            fullCharterArgs,\n            undefined,\n            await this.txnAddGovAuthority(tcx2b)\n        );\n    }\n\n    @txn\n    async mkTxnAddingMintInvariant<\n        DT extends StellarDelegate,\n        thisType extends DefaultCapo<settingsType, MinterType, CDT, configType>\n    >(\n        this: thisType,\n        delegateInfo: MinimalDelegateLink<DT> & {\n            strategyName: string &\n            keyof thisType[\"delegateRoles\"][\"mintDelegate\"];\n        },\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor),\n    ): Promise<StellarTxnContext> {\n        const currentDatum = await this.findCharterDatum();\n\n        // const seedUtxo = await this.txnMustGetSeedUtxo(tcx, \"mintDgt\", [\"mintDgt-XxxxXxxxXxxx\"]);\n        const tcx2 = await this.txnMintingUuts(\n            await this.addSeedUtxo(tcx),\n            [\"mintDgt\"],\n            {},\n            {\n                mintDelegate: \"mintDgt\",\n            }\n        );\n        const mintDelegate = await this.txnCreateDelegateLink<\n            DT,\n            \"mintDelegate\"\n        >(tcx2, \"mintDelegate\", delegateInfo);\n        // currentDatum.mintDelegateLink);\n\n        // const spendDelegate = await this.txnCreateDelegateLink<\n        //     StellarDelegate<any>,\n        //     \"spendDelegate\"\n        // >(tcx, \"spendDelegate\", charterDatumArgs.spendDelegateLink);\n\n        //@ts-expect-error \"could be instantiated with different subtype\"\n        const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n            ...currentDatum,\n            mintInvariants: [...currentDatum.mintInvariants, mintDelegate],\n        };\n        const datum = await this.mkDatumCharterToken(fullCharterArgs);\n\n        const charterOut = new TxOutput(\n            this.address,\n            this.tvCharter(),\n            datum\n            // this.compiledScript\n        );\n\n        return tcx2.addOutput(charterOut);\n    }\n\n    // How can someone be holding interest in a project?\n    //      ignorant  // never seen, or not investigated\n    //      Watching for updates\n    //      Bought in / privy to more info\n    //      Contributing:\n    //          - note, no-conflict-of-interest assertion wanted, even though\n    //          - it may not be very much enforceable\n\n    @txn\n    async mkTxnAddingSpendInvariant<\n        DT extends StellarDelegate,\n        thisType extends DefaultCapo<settingsType, MinterType, CDT, configType>\n    >(\n        this: thisType,\n        delegateInfo: MinimalDelegateLink<DT> & {\n            strategyName: string &\n            keyof thisType[\"delegateRoles\"][\"spendDelegate\"];\n        },\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor),\n    ) {\n        const currentDatum = await this.findCharterDatum();\n\n        // const seedUtxo = await this.txnMustGetSeedUtxo(tcx, \"mintDgt\", [\"mintDgt-XxxxXxxxXxxx\"]);\n        const tcx2 = await this.txnMintingUuts(\n            await this.addSeedUtxo(tcx),\n            [\"spendDgt\"],\n            {},\n            {\n                spendDelegate: \"spendDgt\",\n            }\n        );\n        const spendDelegate = await this.txnCreateDelegateLink<\n            DT,\n            \"spendDelegate\"\n        >(tcx2, \"spendDelegate\", delegateInfo);\n        // currentDatum.mintDelegateLink);\n\n        // const spendDelegate = await this.txnCreateDelegateLink<\n        //     StellarDelegate<any>,\n        //     \"spendDelegate\"\n        // >(tcx, \"spendDelegate\", charterDatumArgs.spendDelegateLink);\n\n        //@ts-expect-error \"could be instantiated with different subtype\"\n        const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n            ...currentDatum,\n            spendInvariants: [...currentDatum.spendInvariants, spendDelegate],\n        };\n        const datum = await this.mkDatumCharterToken(fullCharterArgs);\n\n        const charterOut = new TxOutput(\n            this.address,\n            this.tvCharter(),\n            datum\n            // this.compiledScript\n        );\n\n        return tcx2.addOutput(charterOut);\n    }\n\n    async mkTxnAddingNamedDelegate<\n        DT extends StellarDelegate,\n        thisType extends DefaultCapo<settingsType, MinterType, CDT, configType>\n    >(\n        this: thisType,\n        delegateName: string,\n        delegateInfo: MinimalDelegateLink<DT> & {\n            strategyName: string &\n            keyof thisType[\"delegateRoles\"][\"spendDelegate\"];\n        },\n        tcx: StellarTxnContext = new StellarTxnContext(this.myActor),\n    ) {\n        const currentDatum = await this.findCharterDatum();\n\n        // const seedUtxo = await this.txnMustGetSeedUtxo(tcx, \"mintDgt\", [\"mintDgt-XxxxXxxxXxxx\"]);\n        const tcx2 = await this.txnMintingUuts(\n            await this.addSeedUtxo(tcx),\n            [\"spendDgt\"],\n            {},\n            {\n                spendDelegate: \"spendDgt\",\n            }\n        );\n        const spendDelegate = await this.txnCreateDelegateLink<\n            DT,\n            \"spendDelegate\"\n        >(tcx2, \"spendDelegate\", delegateInfo);\n\n        //@ts-expect-error \"could be instantiated with different subtype\"\n        const fullCharterArgs: DefaultCharterDatumArgs & CDT = {\n            ...currentDatum,\n            namedDelegates: {\n                ...currentDatum.namedDelegates,\n                [delegateName]: spendDelegate,\n            },\n        };\n        const datum = await this.mkDatumCharterToken(fullCharterArgs);\n\n        const charterOut = new TxOutput(\n            this.address,\n            this.tvCharter(),\n            datum\n            // this.compiledScript\n        );\n\n        return tcx2.addOutput(charterOut);\n    }\n\n    async findUutSeedUtxo(uutPurposes: string[], tcx: StellarTxnContext<any>) {\n        //!!! make it big enough to serve minUtxo for the new UUT(s)\n        const uutSeed = this.mkValuePredicate(BigInt(42_000), tcx);\n        return this.mustFindActorUtxo(\n            `seed-for-uut ${uutPurposes.join(\"+\")}`,\n            uutSeed,\n            tcx\n        );\n    }\n\n    /**\n     * Adds UUT minting to a transaction\n     * @remarks\n     *\n     * Constructs UUTs with the indicated purposes, and adds them to the contract state.\n     * This is a useful generic capability to support any application-specific purpose.\n     *\n     * The provided transaction context must have a seedUtxo - use {@link DefaultCapo.addSeedUtxo | addSeedUtxo()} to add one\n     * from the current user's wallet. The seed utxo is consumed, so it can never be used again; its\n     * value will be returned to the user wallet.  All the uuts named in the uutPurposes argument will\n     * be minted from the same seedUtxo, and will share the same suffix, because it is derived from the\n     * seedUtxo's outputId.\n     *\n     * This method uses a generic uutMinting activity in the transaction by default, which may\n     * fail if the mint delegate has disabled that generic minting.   In this case, add an `options.activity`\n     * matching an app-specific activity/redeemer.\n     *\n     * It's recommended to create custom activities in the minting delegate, to go with your\n     * application's use-cases for minting UUTs.  To include the seedUtxo details in the transaction,\n     * you can follow the SeedAttrs pattern  seen in {@link CapoMinter.activityMintingUuts | activityMintingUuts()},\n     * using the StellarTxnContext's {@link StellarTxnContext.getSeedAttrs | getSeedAttrs()}\n     * method to access the seedUtxo details.\n     *\n     * The mintingUuts\\{...\\} activity defined in the on-chain specialized mint delegate demonstrates\n     * the inclusion of seedUtxo details in the activity/redeemer type, and the use of those details in\n     * its on-chain call to `validateUutMinting()`.\n     *\n     * If additional mints or burns are needed in the transaction, they can be included in\n     * `options.additionalMintValues`.  See {@link mkValuesEntry | mkValuesEntry()} to create\n     * these.  In this case, you'll need to provide a `options.activity`, whose on-chain\n     * validation should ensure that all-and-only the expected values are minted.\n     *\n     * The returnExistingDelegate option can be used if needed to prevent a burned delegate\n     * token from being returned to the delegate contract's script address, creating an imbalanced txn.\n     *\n     * @param initialTcx - an existing transaction context\n     * @param uutPurposes - a set of purpose-names (prefixes) for the UUTs to be minted\n     * @param options - additional options for the minting operation.  In particular, you likely want\n     * to provide a custom activity instead of the default uutMinting activity.\n     * @param roles - a map of role-names to purpose-names\n     * @public\n     **/\n    @partialTxn\n    async txnMintingUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext & hasSeedUtxo,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends keyof RM & string = string & keyof RM\n    >(\n        initialTcx: existingTcx,\n        uutPurposes: purposes[],\n        options: UutCreationAttrs = {},\n        //@ts-expect-error\n        roles: RM = {} as Record<ROLES, purposes>\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx> {\n        const {\n            usingSeedUtxo,\n            additionalMintValues = [],\n            usingMintDelegateActivity,\n            omitMintDelegate = false,\n            minterActivity,\n            returnExistingDelegateToScript = true,\n        } = options;\n        const mintDelegate = await this.getMintDelegate();\n        const { seedUtxo } = initialTcx.state;\n\n        const tcx = await this.txnWillMintUuts(\n            initialTcx,\n            uutPurposes,\n            {\n                usingSeedUtxo: seedUtxo,\n                // additionalMintValues,\n                // existingDelegateReplacementActivity,\n            },\n            roles\n        );\n\n        if (omitMintDelegate) {\n            if (usingMintDelegateActivity)\n                throw new Error(\n                    `omitMintDelegate and usingMintDelegateActivity are mutually exclusive`\n                );\n            if (!minterActivity) {\n                throw new Error(\n                    `txnMintingUuts: omitMintDelegate requires a minterActivity to be specified\\n` +\n                        `  ... this indicates an activity in the MINTER (not the minting delegate), ` +\n                        ` ... the minter should be able to honor that activity/redeemer.`\n                );\n            }\n\n            // directly mint the UUTs, without involving the mint delegate\n            const tcx2 = await this.minter.txnMIntingWithoutDelegate(\n                tcx,\n                [\n                    ...mkUutValuesEntries(tcx.state.uuts),\n                    ...additionalMintValues,\n                ],\n                minterActivity\n            );\n            return tcx2;\n        }\n        if (additionalMintValues.length && !usingMintDelegateActivity) {\n            throw new Error(\n                `additionalMintValues requires a custom activity provided by your mint delegate specialization`\n            );\n        }\n\n        const dgtActivity =\n            usingMintDelegateActivity ||\n            mintDelegate.activityMintingUuts({\n                purposes: uutPurposes,\n                ...tcx.getSeedAttrs(),\n            });\n\n        // const tcx2 = await mintDelegate.txnGenericMintingUuts(\n        //     tcx,\n        //     uutPurposes,\n        //     mintDelegateActivity\n        // );\n\n        const tcx2 = await this.minter.txnMintWithDelegateAuthorizing(\n            tcx,\n            [...mkUutValuesEntries(tcx.state.uuts), ...additionalMintValues],\n            mintDelegate,\n            dgtActivity,\n            returnExistingDelegateToScript\n        );\n        console.log(\n            \"    🐞🐞 @end of txnMintingUuts\",\n            dumpAny(tcx2, this.networkParams)\n        );\n        return tcx2;\n        // const tcx4 = await mintDelegate.txnMintingUuts(tcx3,\n        //     uutPurposes,\n        //     seedUtxo,\n        //     roles\n        // );\n\n        // return this.txnAddMintDelegate(tcx4);\n    }\n\n    /**\n     * Finds a free seed-utxo from the user wallet, and adds it to the transaction\n     * @remarks\n     *\n     * The seedUtxo will be consumed in the transaction, so it can never be used\n     * again; its value will be returned to the user wallet.\n     *\n     * The seedUtxo is needed for UUT minting, and the transaction is typed with\n     * the presence of that seed (found in tcx.state.seedUtxo).\n     * @public\n     **/\n    async addSeedUtxo<TCX extends StellarTxnContext>(\n        tcx: TCX\n    ): Promise<TCX & hasSeedUtxo> {\n        const seedUtxo = await this.findUutSeedUtxo([], tcx);\n\n        const tcx2 = tcx.addInput(seedUtxo) as TCX & hasSeedUtxo;\n        tcx2.state.seedUtxo = seedUtxo;\n        return tcx2;\n    }\n\n    /**\n     * Adds UUT types to the transaction context\n     * @remarks\n     *\n     * adds tcx.state.uut entries for each purpose.\n     *\n     * also adds a second uut entry for each role-name found in the roles map, corresponding to the uut entry for its purpose.\n     *\n     * NOTE: this method doesn't add a minting instruction to the transaction, so that\n     * all the minting/burning needed for the txn can (because it must) be done in one minting instruction.\n     *\n     * If the uuts being minted are the only minting/burning needed in the transaction, then\n     * you can use {@link txnMintingUuts | txnMintingUuts()} instead of this method.\n     *\n     * @param tcx - the transaction context\n     * @param uutPurposes - a list of short names for the UUTs (will be augmented with unique suffixes)\n     * @param usingSeedUtxo - the seed utxo to be used for minting the UUTs (consumed in the transaction, and controls the suffixes)\n     * @param roles - a map of role-names to purpose-names\n     * @typeParam ‹pName› - descr (for generic types)\n     * @public\n     **/\n    @partialTxn\n    async txnWillMintUuts<\n        const purposes extends string,\n        existingTcx extends StellarTxnContext,\n        const RM extends Record<ROLES, purposes>,\n        const ROLES extends string & keyof RM = string & keyof RM\n    >(\n        tcx: existingTcx,\n        uutPurposes: purposes[],\n        { usingSeedUtxo }: Pick<UutCreationAttrsWithSeed, \"usingSeedUtxo\">,\n        //@ts-expect-error\n        roles: RM = {} as Record<string, purposes>\n    ): Promise<hasUutContext<ROLES | purposes> & existingTcx> {\n        const { txId, utxoIdx } = usingSeedUtxo.outputId;\n\n        const { blake2b } = Crypto;\n\n        const uutMap: uutPurposeMap<ROLES | purposes> = Object.fromEntries(\n            uutPurposes.map((uutPurpose) => {\n                const idx = new HInt(utxoIdx).toCbor();\n                const txoId = txId.bytes.concat([\"@\".charCodeAt(0)], idx);\n                // console.warn(\"&&&&&&&& txoId\", bytesToHex(txoId));\n                const uutName = new UutName(\n                    uutPurpose,\n                    `${uutPurpose}-${bytesToHex(blake2b(txoId).slice(0, 6))}`\n                );\n                return [uutPurpose, uutName];\n            })\n        ) as uutPurposeMap<ROLES | purposes>;\n        for (const [role, uutPurpose] of Object.entries(roles)) {\n            uutMap[role] = uutMap[uutPurpose as string];\n        }\n\n        if (!tcx.state) tcx.state = { uuts: {} };\n        tcx.state.uuts = {\n            ...tcx.state.uuts,\n            ...uutMap,\n        };\n\n        return tcx as hasUutContext<ROLES | purposes> & existingTcx;\n    }\n\n    requirements() {\n        return hasReqts({\n            \"positively governs all administrative actions\": {\n                purpose: \"to maintain clear control by an abstract entity\",\n                details: [\n                    // descriptive details of the requirement (not the tech):\n                    \"A governance delegate is defined during contract creation\",\n                    \"The contract's policy for allowing governance actions is abstract, \",\n                    \"  ... enforced only by a delegation pattern. \",\n                    \"Thus, the Capo doesn't contain any of the policy details.\",\n                    \"The delegate can be evolved through governance action\",\n                ],\n                mech: [\n                    // descriptive details of the chosen mechanisms for implementing the reqts:\n                    \"uses a 'charter' token specialized for this contract\",\n                    \"the charter token has a govDgt (governance delegate) in its Datum structure\",\n                    \"the gov delegate's token can provide authorization for administrative actions\",\n                    \"the charter Datum is updated when needed to reflect a new gov delegation config\",\n                ],\n                requires: [\n                    \"has a unique, permanent charter token\",\n                    \"has a unique, permanent treasury address\",\n                    // \"the trustee threshold is enforced on all administrative actions\",\n                    // \"the trustee group can be changed\",\n                    \"the charter token is always kept in the contract\",\n                    \"the charter details can be updated by authority of the capoGov-* token\",\n                    \"can mint other tokens, on the authority of the charter's registered mintDgt- token\",\n                    \"can handle large transactions with reference scripts\",\n                ],\n            },\n\n            \"has a singleton minting policy\": {\n                purpose: \"to mint various tokens authorized by the treasury\",\n                details: [\n                    \"A chosen minting script is bound deterministically to the contract constellation\",\n                    \"Its inaugural (aka 'initial Charter' or 'Charter Mint') transaction creates a charter token\",\n                    \"The minting script can issue further tokens approved by the Capo's minting delegate\",\n                    \"The minting script does not need to concern itself with details of the delegate's approval\",\n                ],\n                mech: [\n                    \"has an initial UTxO chosen arbitrarily, and that UTxO is consumed during initial Charter\",\n                    \"makes a different address depending on (txId, outputIndex) parameters of the Minting script\",\n                ],\n                requires: [\n                    \"can mint other tokens, on the authority of the charter's registered mintDgt- token\",\n                ],\n            },\n\n            \"the charter details can be updated by authority of the capoGov-* token\":\n                {\n                    purpose:\n                        \"to support behavioral changes over time by repointing the delegate links\",\n                    details: [\n                        \"The Capo's ability to accept charter-configuration changes allows its behavior to evolve. \",\n                        \"These configuration changes can accept a new minting-delegate configuration ,\",\n                        \" ... or other details of the Charter datum that may be specialized.\",\n                        \"Charter updates are authorized by the gov delegate\",\n                    ],\n                    mech: [\"can update details of the datum\"],\n                    requires: [\n                        \"can update the minting delegate in the charter data\",\n                        \"can update the spending delegate in the charter data\",\n                        \"can add invariant minting delegates to the charter data\",\n                        \"can add invariant spending delegates to the charter data\",\n                    ],\n                },\n            \"can update the minting delegate in the charter data\": {\n                purpose: \"to evolve the minting policy for the contract\",\n                details: [\n                    \"when updating the minting policy delegate, the gov authority is used to authorize the change\",\n                    \"the minting policy is updated in the charter datum\",\n                    \"the old minting policy should be retired when changing policies\",\n                ],\n                impl: \"mkTxnUpdatingMintDelegate()\",\n                mech: [\n                    \"can install an updated minting delegate\",\n                    \"fails without the capoGov- authority uut\",\n                    \"normally requires the eixsting mint delegate to be involved in the replacement\",\n                    \"can force-replace the mint delegate if needed\",\n                    \"keeps the charter token in the contract address\",\n                    \"uses the new minting delegate after it is installed\",\n                    \"can't use the old minting delegate after it is replaced\",\n                ],\n            },\n            \"can update the spending delegate in the charter data\": {\n                purpose:\n                    \"to evolve the spending policy for the contract's delegated-datum types\",\n                details: [\n                    \"when updating the spending policy delegate, the gov authority is used to authorize the change\",\n                    \"the spending policy is updated in the charter datum\",\n                    \"the old spending policy should be retired when changing policies\",\n                ],\n                mech: [\n                    \"can install an updated spending delegate\",\n                    \"fails without the capoGov- authority uut\",\n                    \"normally requires the eixsting mint delegate to be involved in the replacement\",\n                    \"can force-replace the mint delegate if needed\",\n                    \"keeps the charter token in the contract address\",\n                    \"uses the new spending delegate after it is installed\",\n                    \"can't use the old spending delegate after it is replaced\",\n                ],\n            },\n\n            \"can add invariant spending delegates to the charter data\": {\n                purpose:\n                    \"to arrange permanent spending policies for custom data types\",\n                details: [\n                    \"The Capo can add invariant spending policies for custom data types\",\n                    \"These invariants are enforced forever, and can't be changed\",\n                    \"The baseline scripts directly enforce these invariants, so that a delegate-swap actvity can't undermine the invariant\",\n                ],\n                mech: [\n                    \"TODO: TEST can add an invariant spending delegate for a datum type\",\n                    \"TODO: TEST cannot change any other charter settings when adding an invariant\",\n                    \"TODO: TEST cannot change spend invariants when updating other charter settings\",\n                    \"TODO: TEST new invariants are always enforced\",\n                    \"TODO: TEST can never remove an invariant spending delegate for a datum type\",\n                ],\n            },\n\n            \"can add invariant minting delegates to the charter data\": {\n                purpose:\n                    \"to arrange permanent minting policies constraining what can be minted\",\n                details: [\n                    \"The Capo can add invariant mint policies\",\n                    \"These invariants are enforced forever, and can't be changed\",\n                    \"The baseline scripts directly enforce these invariants, so that a mint-delegate-swap actvity can't undermine the invariant\",\n                ],\n                mech: [\n                    \"TODO: TEST can add an invariant mint delegate\",\n                    \"TODO: TEST fails without the capoGov- authority uut\",\n                    \"TODO: TEST cannot change any other charter settings when adding the mint invariant\",\n                    \"TODO: TEST can never remove an mint invariant mint after it is added\",\n                    \"TODO: TEST cannot change mint invariants when updating other charter settings\",\n                    \"TODO: TEST always enforces new mint invariants\",\n                ],\n            },\n\n            \"has a unique, permanent treasury address\": {\n                purpose: \"to give continuity for its stakeholders\",\n                details: [\n                    \"One-time creation is ensured by UTxO's unique-spendability property\",\n                    \"Determinism is transferred from the charter utxo to the MPH and to the treasury address\",\n                    \"Further software development lifecycle is enabled by evolution of details stored in the Charter datum\",\n                ],\n                mech: [\n                    \"uses the Minting Policy Hash as the sole parameter for the treasury spending script\",\n                ],\n                requires: [\"has a singleton minting policy\"],\n            },\n\n            \"has a unique, permanent charter token\": {\n                purpose:\n                    \"to guarantee permanent identity of a token constraining administrative actions\",\n                details: [\n                    \"a charter token is uniquely created when bootstrapping the constellation contract\",\n                    \"the charter token can't ever be recreated (it's non-fungible and can't be re-minted)\",\n                    \"the treasury address, minting policy hash, and charter token are all deterministic based on input utxo\",\n                ],\n                impl: \"txnMintCharterToken()\",\n                mech: [\n                    \"creates a unique 'charter' token, with assetId determined from minting-policy-hash+'charter'\",\n                    // \"XXX - move to multi-sig Delegate - TODO: fails if minSigs is longer than trustee list\",\n                    \"doesn't work with a different spent utxo\",\n                ],\n                requires: [\n                    \"has a singleton minting policy\",\n                    \"the charter token is always kept in the contract\",\n                ],\n            },\n\n            \"supports an abstract Settings structure stored in the contact\": {\n                purpose:\n                    \"allows settings that can evolve to support Capo-related scripts as needed\",\n                details: [\n                    \"The Settings structure can be stored in the contract, separately from the CharterDatum. \",\n                    \"It can be updated by the govAuthority, and can be used to store any \",\n                    \"  ... data needed by the Capo's scripts, such as minting and spending delegates.\",\n                    \"The charter datum references the settings uut, and shouldn't \",\n                    \"  ... ever need to change that reference, since the settings data can be updated in place.\",\n                    \"The settings can store various data using string keys and conventions defined within the Capo.\",\n                    \"The Capo contract MUST NOT make any calls to methods in the Settings structure, \",\n                    \"  ... so that that the Capo's code won't be changed if any methods are modified.\",\n                ],\n                mech: [\n                    \"has a 'SettingsData' datum variant & utxo in the contract\",\n                    \"offchain code can read the settings data from the contract\",\n                    \"TODO: TEST onchain code can read the settings data from the contract\",\n                    \"charter creation requires a CharterDatum reference to the settings UUT\",\n                    \"charter creation requires presence of a SettingsData map\",\n                    \"updatingCharter activity MUST NOT change the set-UUT reference\",\n                ],\n                requires: [\n                    \"mkTxnUpdateSettings(): can update the settings\",\n                    \"added and updated delegates always validate the present configuration data\",\n                ],\n            },\n            \"mkTxnUpdateSettings(): can update the settings\": {\n                purpose: \"to support parameter changes\",\n                impl: \"mkTxnUpdateSettings()\",\n                details: [\n                    \"The minting delegate is expected to validate all updates to the configuration data.\",\n                    \"The spending delegate is expected to validate all updates to the configuration data.\",\n                    \"Settings changes are validated by all registered delegates before being accepted.\",\n                ],\n                mech: [\n                    \"can update the settings data with a separate UpdatingSettings Activity on the Settings\",\n                    \"requires the capoGov- authority uut to update the settings data\",\n                    \"the spending delegate must validate the UpdatingSettings details\",\n                    \"the minting delegate must validate the UpdatingSettings details\",\n                    \"all named delegates must validate the UpdatingSettings details\",\n                    \"TODO: the spending invariant delegates must validate the UpdatingSettings details\",\n                    \"TODO: the minting invariant delegates must validate the UpdatingSettings details\",\n                ],\n            },\n            \"added and updated delegates always validate the present configuration data\":\n                {\n                    purpose:\n                        \"to ensure that the entirety of policies in a contract suite have integrity\",\n                    details: [\n                        \"New delegates cannot be adopted unless they also validate the present configuration data, \",\n                        \"  ... so that configuration and current delegates can always be expected to be in sync.\",\n                        \"However, a new delegate can't verify the config during their creation, \",\n                        \"  ... because its policy can be triggered only after it has a utxo in it)\",\n                        \"With an an initial step of staging a prospective delegate, the new delegate can \",\n                        \"  ... provide positive assurance of  compatibility with the current settings.\",\n                    ],\n                    impl: \"mkTxnStagingNewDelegate\",\n                    mech: [\n                        \"TODO: staging a Named delegate updates the namedDelegates structure with staged item\",\n                        \"TODO: staging a Mint delegate updates the mintDelegateLink structure with staged item\",\n                        \"TODO: staging a Spend delegate updates the spendDelegateLink structure with staged item\",\n                        \"TODO: staging an invariant delegate updates the invariantDelegates structure with staged item\",\n                    ],\n                    requires: [\"can commit new delegates\"],\n                },\n            \"can commit new delegates\": {\n                purpose:\n                    \"to finalize the adoption of a new or updated delegate\",\n                details: [\n                    \"A staged delegate can be committed, if it the current settings validate okay with it. \",\n                    \"This gives that delegate space to exist, so that its settings-validation logic can \",\n                    \"  ... possibly be triggered.\",\n                ],\n                mech: [\n                    \"TODO: a staged delegate is only adopted if it validates ok with the then-current settings\",\n                ]\n            },\n\n            \"supports storing new types of datum not pre-defined in the Capo's on-chain script\":\n                {\n                    purpose:\n                        \"to allow data extensibility and evolution in a backwards-compatible way\",\n                    details: [\n                        \"The Capo's DelegatedDatum type encapsulates all custom data types, \",\n                        \"  ... and can be thought of as a Union of types that can be extended over time\",\n                        \"This allows the policies governing each type of data to evolve independently\",\n                        \"  ... without those data needing to be moved between contract addresses when changing the policies.\",\n                        \"The spending delegate script is expected to enforce spending rules for each type of custom data\",\n                        \"The minting delegate is expected to enforce creation rules for each type of custom data\",\n                        \"The mint- and spend-delegates can evolve to handle new types of data\",\n                        \"A namedDelegates structure in the Capo provides a manifest of additional delegates, \",\n                        \"  ... whose involvement may be required as needed by the mint- and spend-delegates.\",\n                    ],\n                    mech: [\n                        \"has named delegates, as a string map to named delegate links\",\n                        \"the spending policy \",\n                    ],\n                    requires: [\n                        \"the charter has a namedDelegates structure for semantic delegate links\",\n                        \"CreatingDelegatedDatum: creates a UTxO with any custom datum\",\n                        \"UpdatingDelegatedDatum: checks that a custom data element can be updated\",\n                    ],\n                },\n\n            \"the charter has a namedDelegates structure for semantic delegate links\":\n                {\n                    purpose:\n                        \"to provide a manifest of additional delegates that may be required to enforce application semantics\",\n                    details: [\n                        \"The namedDelegates structure is a string map to named delegate links\",\n                        \"The minting and spending delegates can use these named delegates as needed\",\n                        \"The minting and spending delegates can evolve to handle new types of data\",\n                        \"The namedDelegates structure can be updated by the gov delegate\",\n                    ],\n                    mech: [\n                        \"has a namedDelegates structure in the charter datum\",\n                        \"the namedDelegates structure can be updated by the gov delegate\",\n                    ],\n                    requires: [],\n                },\n            \"CreatingDelegatedDatum: creates a UTxO with any custom datum\": {\n                purpose:\n                    \"allows the application to enforce policies for custom record creation\",\n                details: [\n                    \"The Capo must involve the minting delegate in creating a custom datum\",\n                    \"  ... which can apply its own logic to deciding whether the creation is allowed.\",\n                    \"The Capo trusts the minting delegate's enforcement of policy.\",\n                ],\n                impl: \"mkTxnCreatingDelegatedDatum\",\n                mech: [\n                    \"builds transactions including the minting delegate\",\n                    \"fails if the minting delegate is not included in the transaction\",\n                ]\n            },\n\n            \"UpdatingDelegatedDatum: checks that a custom data element can be updated\":\n                {\n                    purpose:\n                        \"guards appropriate updates to custom data elements\",\n                    details: [\n                        \"When updating a custom datum, the Capo must involve the spending delegate \",\n                        \"  ... which can apply its own logic to deciding whether the update is allowed.\",\n                        \"The Capo trusts the spending delegate's enforcement of policy.\",\n                    ],\n                    mech: [\n                        \"builds transactions including the spending-delegate\",\n                        \"fails if the spending delegate is not included in the transaction\",\n                        \"TODO: builds transactions including the invariant spending-delegates\",\n                        \"TODO: fails if the expected invariant delegate is not included in the transaction\",\n                    ],\n                },\n\n            \"the charter token is always kept in the contract\": {\n                purpose:\n                    \"so that the treasury contract is always in control of administrative changes\",\n                details: [\n                    \"The charter token's spendability' is used as a signal of administrative authority for transactions wanting proof of authority\",\n                    \"... thus, other scripts don't need to express any of the authority policy, but can simply verify the token's presence in the txn\",\n                    \"It shouldn't ever be possible to interfere with its spendability, e.g. by bundling it in an inconvenient way with other assets\",\n                    \"By enforcing that the charter token is always returned to the contract, \",\n                    \"... it has assurance of continuing ability to govern the next activity using that token\",\n                    \"Note: the charter mint can bind with any contract having suitable assurances, \",\n                    \"... but we only focus on the case of binding to this treasury contract\",\n                ],\n                mech: [\n                    \"builds transactions with the charter token returned to the contract\",\n                    \"fails to spend the charter token if it's not returned to the contract\",\n                    \"TODO: ensures that the charter token is kept separate from other assets in the contract\",\n                ],\n                requires: [],\n            },\n\n            \"can mint other tokens, on the authority of the charter's registered mintDgt- token\":\n                {\n                    purpose:\n                        \"to simplify the logic of minting, while being sure of minting authority\",\n                    details: [\n                        \"the minting policy doesn't have to directly express detailed policy for authorization\",\n                        \"instead, it defers authority to the minting delegate, \",\n                        \"... which can implement its own policy for minting\",\n                        \"... and by simply requiring that the mintDgt token is being spent.\",\n                        \"The minting delegate decides whether that's to be allowed.\",\n                    ],\n                    mech: [\n                        \"can build transactions that mint non-'charter' tokens\",\n                        \"requires the charter-token to be spent as proof of authority\",\n                        \"fails if the charter-token is not returned to the treasury\",\n                        \"fails if the charter-token parameters are modified\",\n                    ],\n                },\n\n            \"can handle large transactions with reference scripts\": {\n                purpose:\n                    \"to support large transactions and reduce per-transaction costs\",\n                details: [\n                    \"Each Capo involves the leader contract, a short minting script, \",\n                    \"  ... and a minting delegate.  Particularly in pre-production, these \",\n                    \"  ... can easily add up to more than the basic 16kB transaction size limit.\",\n                    \"By creating reference scripts, the size budget overhead for later \",\n                    \"  ... transactions is reduced, at cost of an initial deposit for each refScript. \",\n                    \"Very small validators may get away without refScripts, but more complicated \",\n                    \"  ... transactions will need them.  So creating them is recommended in all cases.\",\n                ],\n                mech: [\n                    \"creates refScript for minter during charter creation\",\n                    \"creates refScript for capo during charter creation\",\n                    \"creates refScript for mintDgt during charter creation\",\n                    \"finds refScripts in the Capo's utxos\",\n                    \"txnAttachScriptOrRefScript(): uses scriptRefs in txns on request\",\n                ],\n            },\n        });\n    }\n}\n","/**\n * Properties for a Helios source file\n * @public\n **/\nexport type HeliosModuleSrc = string & {\n    srcFile: string;\n    purpose: string;\n    moduleName: string;\n};\n\n/**\n * Creates a String object from Helios source code, having additional properties about the helios source \n * @remarks\n * \n * `srcFile`, `purpose`, and `moduleName` are parsed from the Helios source string using a simple regular expression.\n * @public\n **/\nexport function mkHeliosModule(src: string, filename: string): HeliosModuleSrc {\n    //@ts-expect-error - the later lines add the props that typescript wants to see.\n    const module: HeliosModuleSrc = new String(src);\n    const [_, purpose, moduleName] =\n        src.match(/(module|minting|spending|endpoint)\\s+([a-zA-Z0-9]+)/m) || [];\n\n    module.srcFile = filename;\n    module.purpose = purpose;\n    module.moduleName = moduleName;\n\n    return module;\n}\n","import path from \"path\";\nimport { createFilter } from \"rollup-pluginutils\";\nimport * as helios from \"@hyperionbt/helios\";\n\n/**\n * Rollup loader for Helios source files\n * @public\n **/\nexport function heliosRollupLoader(\n    opts = {\n        include: \"**/*.hl\",\n        exclude: [],\n    }\n)  {\n    if (!opts.include) {\n        throw Error(\"missing required 'include' option for helios loader\");\n    }\n\n    const filter = createFilter(opts.include, opts.exclude);\n\n    type Loader = { \n        code: string, \n        map: {mappings: string} \n    }\n    let esbuildApi;\n    return {\n        name: \"helios\",\n\n        transform(content, id) {\n            if (filter(id)) {\n                const relPath = path.relative(\".\", id);\n                console.warn(\n                    `heliosLoader: generating javascript for ${relPath}`\n                );\n\n                // helios.Program.new(content) // fails unless it can resolve deps\n\n                const [_, purpose, moduleName] =\n                    content.match(\n                        /(module|minting|spending|endpoint)\\s+([a-zA-Z0-9]+)/m\n                    ) || [];\n\n                if (!(purpose && moduleName))\n                    throw new Error(`Bad format for helios file ${id}`);\n\n                const code = `const code = new String(${JSON.stringify(content)});\\n\\n`+\n                    `code.srcFile = ${JSON.stringify(relPath)};\\n`+\n                    `code.purpose = ${JSON.stringify(purpose)}\\n`+\n                    `code.moduleName = ${JSON.stringify(moduleName)}\\n`+\n                    // `type foo={ hello: \"world\" }\\n`+\n                    `\\nexport default code\\n`\n                ;\n\n                return {\n                    code: code,                    \n                    map: { mappings: \"\" },\n                };\n            }\n        },\n\n        // buildStart({ plugins }) {\n\t\t// \tconst parentName = 'esbuild';\n\t\t// \tconst parentPlugin = plugins.find(\n\t\t// \t\tplugin => plugin.name === parentName\n\t\t// \t);\n\t\t// \tif (!parentPlugin) {\n\t\t// \t\t// or handle this silently if it is optional\n\t\t// \t\tthrow new Error(\n\t\t// \t\t\t`This plugin depends on the \"${parentName}\" plugin.`\n\t\t// \t\t);\n\t\t// \t}\n\t\t// \t// now you can access the API methods in subsequent hooks\n\t\t// \tesbuildApi = parentPlugin;\n\t\t// },\n\n    };\n}\n","import {\n    NetworkParams,\n    SimpleWallet as WalletEmulator,\n    SimpleWallet,\n} from \"@hyperionbt/helios\";\n\nimport type {\n    ConfigFor,\n    StellarContract,\n    configBase,\n    stellarSubclass,\n} from \"../StellarContract.js\";\nimport type { StellarTestContext } from \"./StellarTestContext.js\";\nimport type { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport ppParams from \"../../preprod.json\" assert { type: \"json\" };\nimport type { DefaultCapoTestHelper } from \"./DefaultCapoTestHelper.js\";\nimport type { Capo } from \"../Capo.js\";\nimport type { DefaultCapo } from \"../DefaultCapo.js\";\n\nexport const preProdParams = ppParams;\n\nexport type enhancedNetworkParams = NetworkParams & {\n    slotToTimestamp(n: bigint): Date;\n};\nexport type stellarTestHelperSubclass<SC extends StellarContract<any>> = new (\n    config: ConfigFor<SC> & canHaveRandomSeed\n) => StellarTestHelper<SC>;\n\nexport type DefaultCapoTestHelperClass<SC extends DefaultCapo<any,any,any,any>> = new (\n    config: ConfigFor<SC> & canHaveRandomSeed\n) => StellarTestHelper<SC> & DefaultCapoTestHelper<SC> \n// & { get stellarClass(): stellarSubclass<SC> };\n\n// type DefaultCapoTestHelperSubclass<SC extends DefaultCapo<any>> = new (\n//     args: StellarConstructorArgs<CapoBaseConfig>\n// ) => DefaultCapoTestHelper<SC>;\n\nexport type canHaveRandomSeed = {\n    randomSeed?: number;\n};\nexport type canSkipSetup = {\n    skipSetup?: true;\n};\n\n/**\n * Adds a test helper class to a `vitest` testing context.\n * @remarks\n *\n * @param context -  a vitest context, typically created with StellarTestContext\n * @param TestHelperClass - typically created with DefaultCapoTestHelper\n * @param params - preset configuration for the contract under test\n * @public\n **/\nexport async function addTestContext<\n    SC extends StellarContract<any>,\n    P extends configBase = SC extends StellarContract<infer PT> ? PT : never\n>(\n    context: StellarTestContext<any, SC>,\n    TestHelperClass: stellarTestHelperSubclass<SC>,\n    params?: P\n) {\n    console.log(\" ======== ========= ======== +test context\");\n    Object.defineProperty(context, \"strella\", {\n        get: function () {\n            return this.h.strella;\n        },\n    });\n\n    context.initHelper = async (params) => {\n        //@ts-expect-error\n        const helper = new TestHelperClass(params);\n        await helper.setupPending;\n        if (context.h) {\n            if (!params.skipSetup)\n                throw new Error(\n                    `re-initializing shouldn't be necessary without skipSetup`\n                );\n            console.log(\n                \"   ............. reinitializing test helper without setup\"\n            );\n        }\n        context.h = helper;\n        // console.log(\"context IS \", context)\n        return helper;\n    };\n    try {\n        //@ts-expect-error\n        await context.initHelper(params);\n    } catch (e) {\n        if (!params) {\n            // console.error(e.stack || e.message || JSON.stringify(e));\n            console.error(\n                `${TestHelperClass.name}: error during initialization; does this test helper require initialization with explicit params?`\n            );\n            throw e;\n        } else {\n            console.error(\"urgh\");\n            throw e;\n        }\n    }\n}\n\nexport type actorMap = Record<string, WalletEmulator>;\n\n/**\n * 1 million as bigint.  Multiply by this a `Bigint` ADA value to get lovelace\n * @public\n * @example\n *    const three = 3n * ADA\n *    const four = Bigint(4) * ADA\n **/\nexport const ADA = 1_000_000n; // lovelace\n\n// type debugging - typeinfo\nexport type Expand<T> = T extends (...args: infer A) => infer R\n  ? (...args: Expand<A>) => Expand<R>\n  : T extends infer O\n  ? { [K in keyof O]: O[K] }\n  : never;\n\n\nexport type ExpandRecursively<T> = T extends object\n  ? T extends infer O ? { [K in keyof O]: ExpandRecursively<O[K]> } : never\n  : T;\n","import * as helios from \"@hyperionbt/helios\";\nimport {\n    Address,\n    Crypto,\n    NetworkEmulator,\n    NetworkParams,\n    Tx,\n    TxId,\n    TxOutput,\n    Value,\n    SimpleWallet,\n    SimpleWallet as WalletEmulator,\n} from \"@hyperionbt/helios\";\nimport type { Wallet } from \"@hyperionbt/helios\";\n\nimport { StellarContract, findInputsInWallets } from \"../StellarContract.js\";\nimport type {\n    stellarSubclass,\n    ConfigFor,\n    StellarFactoryArgs,\n} from \"../StellarContract.js\";\n\nimport {\n    dumpAny,\n    lovelaceToAda,\n    txAsString,\n    utxosAsString,\n} from \"../diagnostics.js\";\nimport { ADA, preProdParams } from \"./types.js\";\nimport type {\n    actorMap,\n    canHaveRandomSeed,\n    canSkipSetup,\n    enhancedNetworkParams,\n} from \"./types.js\";\n\n/**\n * Base class for test-helpers on generic Stellar contracts\n * @remarks\n *\n * NOTE: DefaultCapoTestHelper is likely to be a better fit for typical testing needs and typical contract-development scenarios.\n * Use this class for specific unit-testing needs not sufficiently served by integration-testing on a Capo.\n * @public\n **/\nexport abstract class StellarTestHelper<SC extends StellarContract<any>> {\n    state: Record<string, any>;\n    abstract get stellarClass(): stellarSubclass<SC, any>;\n    config?: ConfigFor<SC>;\n    defaultActor?: string;\n    strella!: SC;\n    actors: actorMap;\n    optimize = false;\n    liveSlotParams: NetworkParams;\n    networkParams: NetworkParams;\n    network: NetworkEmulator;\n    private _actorName!: string;\n\n    get actorName() {\n        return this._actorName;\n    }\n    /**\n     * Gets the current actor wallet\n     *\n     * @public\n     **/\n    get currentActor(): WalletEmulator {\n        return this.actors[this._actorName];\n    }\n    /**\n     * @deprecated\n     * NOTE: setting currentActor = <string> is obsolete; use setActor() instead\n     *\n     * @internal\n     **/\n    set currentActor(actorName: string) {\n        throw new Error(`deprecated; use async setActor()`);\n    }\n\n    async setActor(actorName: string) {\n        const thisActor = this.actors[actorName];\n        if (!thisActor)\n            throw new Error(\n                `setCurrentActor: invalid actor name '${actorName}'`\n            );\n        if (this._actorName) {\n            console.log(\n                `\\n🎭 -> 🎭 changing actor from 🎭 ${\n                    this._actorName\n                } to  🎭 ${actorName} ${dumpAny(thisActor.address)}`\n            );\n        } else {\n            console.log(\n                `\\n🎭🎭 initial actor ${actorName} ${dumpAny(\n                    thisActor.address\n                )}`\n            );\n        }\n        this._actorName = actorName;\n\n        if (this.strella) {\n            this.strella = await this.initStellarClass(\n                this.state.parsedConfig || this.config\n            );\n        }\n    }\n\n    address?: Address;\n\n    setupPending?: Promise<any>;\n    async setupActors() {\n        console.warn(\n            `using 'hiro' as default actor because ${this.constructor.name} doesn't define setupActors()`\n        );\n        this.addActor(\"hiro\", 1863n * ADA);\n        return this.setActor(\"hiro\");\n    }\n\n    constructor(config?: ConfigFor<SC> & canHaveRandomSeed & canSkipSetup) {\n        this.state = {};\n        if (config) {\n            console.log(\n                \"XXXXXXXXXXXXXXXXXXXXXXXXXX test helper with config\",\n                config\n            );\n\n            this.config = config;\n        }\n\n        const [theNetwork, emuParams] = this.mkNetwork();\n        this.liveSlotParams = emuParams;\n        this.network = theNetwork;\n        this.networkParams = new NetworkParams(preProdParams);\n\n        this.actors = {};\n        const now = new Date();\n        this.waitUntil(now);\n        if (config?.skipSetup) {\n            console.log(\"test helper skipping setup\");\n            return;\n        }\n\n        //@ts-expect-error - can serve no-params case or params case\n        this.setupPending = this.initialize(config);\n    }\n\n    async initialize(config: ConfigFor<SC> & canHaveRandomSeed): Promise<SC> {\n        const { randomSeed, ...p } = config;\n\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate setup() in test helper\"\n            );\n            return this.strella;\n        }\n        if (this.strella) {\n            console.warn(\n                \".... warning: new test helper setup with new seed....\"\n            );\n            this.rand = undefined;\n            this.randomSeed = randomSeed;\n            this.actors = {};\n            this.setupPending = undefined;\n        } else {\n            console.log(\n                \"???????????????????????? Test helper initializing without this.strella\"\n            );\n        }\n        if (this.setupPending) return this.setupPending;\n        this._actorName = \"\"; //only to make typescript happy\n        const actorSetup = this.setupActors();\n        await actorSetup;\n\n        if (!this._actorName)\n            throw new Error(\n                `${this.constructor.name} doesn't setActor()  in setupActors()`\n            );\n\n        return this.initStellarClass();\n    }\n\n    async initStellarClass(config = this.config) {\n        const TargetClass = this.stellarClass;\n\n        const strella = await this.initStrella(TargetClass, config);\n\n        this.strella = strella;\n        this.address = strella.address;\n        return strella;\n    }\n\n    //!!! reconnect tests to tcx-based config-capture\n    // onInstanceCreated: async (config: ConfigFor<SC>) => {\n    //     this.config = config\n    //     return {\n    //         evidence: this,\n    //         id: \"empheral\",\n    //         scope: \"unit test\"\n    //     }\n    // }\n\n    async initStrella(\n        TargetClass: stellarSubclass<SC, ConfigFor<SC>>,\n        config?: ConfigFor<SC>\n    ) {\n        const setup = {\n            network: this.network,\n            myActor: this.currentActor,\n            networkParams: this.networkParams,\n            isTest: true,\n        };\n\n        let cfg: StellarFactoryArgs<ConfigFor<SC>> = {\n            setup,\n            config: config!,\n        };\n\n        if (!config)\n            cfg = {\n                setup,\n                partialConfig: {},\n            };\n        if (setup.myActor) {\n            console.log(\n                \"+strella init with actor addr\",\n                setup.myActor.address.toBech32()\n            );\n        } else {\n            console.log(\"+strella init without actor\");\n        }\n        return TargetClass.createWith(cfg);\n    }\n\n    //! it has a seed for mkRandomBytes, which must be set by caller\n    randomSeed?: number;\n    //! it makes a rand() function based on the randomSeed after first call to mkRandomBytes\n    rand?: () => number;\n\n    delay(ms) {\n        return new Promise((res) => setTimeout(res, ms));\n    }\n\n    async mkSeedUtxo(seedIndex: bigint = 0n) {\n        const { currentActor } = this;\n        const { network } = this;\n\n        const tx = new Tx();\n        const actorMoney = await currentActor.utxos;\n        console.log(\n            `${this._actorName} has money: \\n` + utxosAsString(actorMoney)\n        );\n\n        tx.addInput(\n            await findInputsInWallets(\n                new helios.Value(30n * ADA),\n                { wallets: [currentActor] },\n                network\n            )\n        );\n\n        tx.addOutput(new TxOutput(currentActor.address, new Value(10n * ADA)));\n        tx.addOutput(new TxOutput(currentActor.address, new Value(10n * ADA)));\n        let si = 2;\n        for (; si < seedIndex; si++) {\n            tx.addOutput(\n                new TxOutput(currentActor.address, new Value(10n * ADA))\n            );\n        }\n        const txId = await this.submitTx(tx, \"force\");\n\n        return txId;\n    }\n\n    async submitTx(tx: Tx, force?: \"force\"): Promise<TxId> {\n        const sendChangeToCurrentActor = this.currentActor.address;\n        const isAlreadyInitialized = !!this.strella;\n        try {\n            await tx.finalize(this.networkParams, sendChangeToCurrentActor);\n        } catch (e: any) {\n            throw new Error(\n                e.message +\n                    \"\\nin tx: \" +\n                    txAsString(tx, this.networkParams) +\n                    \"\\nprofile: \" +\n                    tx.profileReport\n            );\n        }\n        if (isAlreadyInitialized && !force) {\n            throw new Error(\n                `helper is already initialized; use the submitTx from the testing-context's 'strella' object instead`\n            );\n        }\n\n        console.log(\n            `Test helper ${force || \"\"} submitting tx${\n                (force && \"\") || \" prior to instantiateWithParams()\"\n            }:\\n` + txAsString(tx, this.networkParams)\n            // new Error(`at stack`).stack\n        );\n\n        try {\n            const txId = await this.network.submitTx(tx);\n            console.log(\n                \"test helper submitted direct txn:\" +\n                    txAsString(tx, this.networkParams)\n            );\n            this.network.tick(1n);\n            // await this.delay(1000)\n            // debugger\n            // this.network.dump();\n            return txId;\n        } catch (e: any) {\n            console.error(\n                `submit failed: ${e.message}\\n  ... in tx ${txAsString(tx)}`\n            );\n            throw e;\n        }\n    }\n\n    mkRandomBytes(length: number): number[] {\n        if (!this.randomSeed)\n            throw new Error(\n                `test must set context.randomSeed for deterministic randomness in tests`\n            );\n        if (!this.rand) this.rand = Crypto.rand(this.randomSeed);\n\n        const bytes: number[] = [];\n        for (let i = 0; i < length; i++) {\n            bytes.push(Math.floor(this.rand() * 256));\n        }\n        return bytes;\n    }\n\n    /**\n     * creates a new Actor in the transaction context with initial funds, returning a Wallet object\n     * @remarks\n     *\n     * Given an actor name (\"marcie\") or role name (\"marketer\"), and a number\n     * of indicated lovelace, creates and returns a wallet having the indicated starting balance.\n     *\n     * By default, three additional, separate 5-ADA utxos are created, to ensure sufficient Collateral and\n     * small-change are existing, making typical transaction scenarios work easily.  If you want to include\n     * other utxo's instead you can supply their lovelace sizes.\n     *\n     * To suppress creation of additional utxos, use `0n` for arg3.\n     *\n     * You may wish to import {@link ADA} = 1_000_000n from the testing/ module, and\n     * multiply smaller integers by that constant.\n     *\n     * @param roleName - an actor name or role-name for this wallet\n     * @param walletBalance - initial wallet balance\n     * @param moreUtxos - additional utxos to include\n     *\n     * @example\n     *     this.addActor(\"cheapo\", 14n * ADA, 0n);  //  14 ADA and no additional utxos\n     *     this.addActor(\"flexible\", 14n * ADA);  //  14 ADA + default 15 ADA in 3 additional utxos\n     *     this.addActor(\"moneyBags\", 42_000_000n * ADA, 5n, 4n);  //  many ADA and two collaterals\n     *\n     *     //  3O ADA in 6 separate utxos:\n     *     this.addActor(\"smallChange\", 5n * ADA, 5n * ADA, 5n * ADA, 5n * ADA, 5n * ADA, 5n * ADA);\n     *\n     * @public\n     **/\n    addActor(\n        roleName: string,\n        walletBalance: bigint,\n        ...moreUtxos: bigint[]\n    ): Wallet {\n        if (this.actors[roleName])\n            throw new Error(`duplicate role name '${roleName}'`);\n        //! it instantiates a wallet with the indicated balance pre-set\n        // console.log(new Error(`add actor ${roleName}`).stack);\n        const a = this.network.createWallet(walletBalance);\n        const addr = a.address.toBech32();\n        console.log(\n            `+🎭 Actor: ${roleName}: ${addr.slice(0, 12)}…${addr.slice(\n                -4\n            )} ${lovelaceToAda(\n                walletBalance\n            )} (🔑#${a.address.pubKeyHash?.hex.substring(0, 8)}…)`\n        );\n\n        //! it makes collateral for each actor, above and beyond the initial balance,\n        //  ... so that the full balance is spendable and the actor can immediately\n        //  ... engage in smart-contract interactions.\n        this.network.tick(BigInt(2));\n        const five = 5n * ADA;\n        if (0 == moreUtxos.length) moreUtxos = [five, five, five];\n        for (const moreLovelace of moreUtxos) {\n            if (moreLovelace > 0n) {\n                this.network.createUtxo(a, moreLovelace);\n            }\n        }\n        this.network.tick(BigInt(1));\n\n        this.actors[roleName] = a;\n        return a;\n    }\n\n    mkNetwork(): [NetworkEmulator, enhancedNetworkParams] {\n        const theNetwork = new NetworkEmulator();\n\n        //@ts-expect-error with missing methods\n        const emuParams = theNetwork.initNetworkParams({\n            ...preProdParams,\n            raw: { ...preProdParams },\n        }) as enhancedNetworkParams;\n\n        // debugger\n        //@xxxts-expect-error\n        // emuParams.timeToSlot = function (t) {\n        //     const seconds = BigInt(t / 1000n);\n        //     return seconds;\n        // };\n        // emuParams.slotToTimestamp = this.slotToTimestamp;\n\n        return [theNetwork, emuParams];\n    }\n\n    slotToTimestamp(s: bigint) {\n        return this.networkParams.slotToTime(s);\n\n        const num = parseInt(BigInt.asIntN(52, s * 1000n).toString());\n        return new Date(num);\n    }\n\n    currentSlot() {\n        return this.liveSlotParams.liveSlot;\n    }\n\n    waitUntil(time: Date) {\n        const targetTimeMillis = BigInt(time.getTime());\n        // debugger\n        const targetSlot = this.networkParams.timeToSlot(targetTimeMillis);\n        const c = this.currentSlot();\n\n        const slotsToWait = targetSlot - (c || 0n);\n        if (slotsToWait < 1) {\n            throw new Error(`the indicated time is not in the future`);\n        }\n        // console.warn(`waiting ${slotsToWait} slots -> ${time}`);\n        this.network.tick(slotsToWait);\n        return slotsToWait;\n    }\n}\n","import {\n    Capo,\n} from \"../Capo.js\";\nimport type {\n    CapoBaseConfig,\n    MinterBaseMethods,\n    anyDatumArgs,\n    hasBootstrappedConfig,\n    hasUutContext,\n} from \"../Capo.js\";\n\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport type { MinimalDefaultCharterDatumArgs } from \"../DefaultCapo.js\";\nimport { CapoMinter } from \"../minting/CapoMinter.js\";\n\n/**\n * Base class for test helpers for Capo contracts\n * @remarks\n * \n * Unless you have a custom Capo not based on DefaultCapo, you \n * should probably use DefaultCapoTestHelper instead of this class.\n * @public\n **/\nexport abstract class CapoTestHelper<\n    SC extends Capo<any, MinterBaseMethods & CapoMinter, CDT, CT>,\n    CDT extends anyDatumArgs = //prettier-ignore\n        SC extends Capo<any, infer iCDT> ? iCDT : anyDatumArgs, //prettier-ignore\n    CT extends CapoBaseConfig  =  //prettier-ignore\n        SC extends Capo<any, any, any, infer iCT> ? iCT : never //prettier-ignore\n> extends StellarTestHelper<SC> {\n    async initialize({\n        randomSeed = 42,\n        config,\n    }: { config?: CT; randomSeed?: number } = {}): Promise<SC> {\n        // Note: This method diverges from the base class impl, due to type difficulties.\n        // Patches welcome.\n\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate setup() in test helper\"\n            );\n\n            return this.strella;\n        }\n        // console.log(\"A in capo test helper\")\n\n        if (this.strella) {\n            console.log(\n                `  ---  new test helper setup with new seed (was ${this.randomSeed}, now ${randomSeed})...\\n` +\n                    new Error(\"stack\")\n                        .stack!.split(\"\\n\")\n                        .slice(1)\n                        .filter(\n                            (line) =>\n                                !line.match(/node_modules/) &&\n                                !line.match(/node:internal/)\n                        )\n                        .join(\"\\n\")\n            );\n            this.setupPending = undefined;\n            this.actors = {};\n        }\n        if (this.setupPending) {\n            return this.setupPending;\n        }\n        await this.delay(1);\n        const actorSetup = this.setupActors();\n        await actorSetup\n    \n        this.randomSeed = randomSeed;\n        this.state.mintedCharterToken = undefined;\n        this.state.parsedConfig = undefined;\n\n        //! when there's not a preset config, it leaves the detailed setup to be done just-in-time\n        //   based on seedUtxo in mkTxnMintCharterToken\n        if (!config)\n            return (this.strella = await this.initStrella(this.stellarClass));\n\n        //@ts-expect-error either we got too fancy for Typescript, or the other way round\n        const strella = await this.initStrella(this.stellarClass, config);\n\n        this.strella = strella;\n        const { address, mintingPolicyHash: mph } = strella;\n\n        const { name } = strella.scriptProgram!;\n        console.log(\n            name,\n            address.toBech32().substring(0, 18) + \"…\",\n            \"vHash 📜 \" +\n                strella.validatorHash.hex.substring(0, 12) +\n                \"…\",\n            \"mph 🏦 \" + mph?.hex.substring(0, 12) + \"…\"\n        );\n        return strella;\n    }\n    \n    get ready() {\n        return !!(this.strella.configIn || this.state.parsedConfig)\n    }\n\n    /**\n     * Creates a new transaction-context with the helper's current or default actor\n     * @public\n     **/\n    mkTcx() {\n        return new StellarTxnContext(this.currentActor);\n    }\n    \n    async bootstrap(args?: MinimalDefaultCharterDatumArgs) {\n        let strella = this.strella || (await this.initialize());\n        if (this.ready) return strella;\n\n        await this.mintCharterToken(args);\n        return strella;\n    }\n    \n    abstract mkDefaultCharterArgs(): Partial<MinimalDefaultCharterDatumArgs<any>>\n    abstract mintCharterToken(\n        args?: MinimalDefaultCharterDatumArgs<any>\n    ): Promise<\n        & hasUutContext<\"govAuthority\" | \"capoGov\" | \"mintDelegate\" | \"mintDgt\">\n        & hasBootstrappedConfig<CapoBaseConfig>\n    >\n}\n","import type {\n    DefaultCharterDatumArgs,\n    MinimalDefaultCharterDatumArgs,\n} from \"../DefaultCapo.js\";\n\nimport { DefaultCapo } from \"../DefaultCapo.js\";\n\nimport { StellarTxnContext } from \"../StellarTxnContext.js\";\nimport { ADA } from \"./types.js\";\nimport type {\n    DefaultCapoTestHelperClass,\n    canHaveRandomSeed,\n    stellarTestHelperSubclass,\n} from \"./types.js\";\nimport { CapoTestHelper } from \"./CapoTestHelper.js\";\nimport type { stellarSubclass } from \"../StellarContract.js\";\nimport { Capo } from \"../Capo.js\";\nimport type {\n    CapoBaseConfig,\n    hasBootstrappedConfig,\n    hasUutContext,\n} from \"../Capo.js\";\nimport { CapoMinter } from \"../minting/CapoMinter.js\";\n\nimport type { expect as expectType } from \"vitest\";\nimport type { OffchainSettingsType } from \"../CapoSettingsTypes.js\";\n\ndeclare namespace NodeJS {\n    interface Global {\n        expect: typeof expectType;\n    }\n}\ndeclare const expect: typeof expectType;\n\n/**\n * Test helper for classes extending DefaultCapo\n * @remarks\n *\n * Arranges an test environment with predefined actor-names having various amounts of ADA in their (emulated) wallets,\n * and default helpers for setting up test scenarios.  Provides a simplified framework for testing Stellar contracts extending\n * the DefaultCapo class.\n *\n * To use it, you MUST extend DefaultCapoTestHelper<YourStellarCapoClass>.\n *\n * You MUST also implement a getter  for stellarClass, returning the specific class for YourStellarCapoClass\n *\n * You SHOULD also implement a setupActors method to arrange named actors for your test scenarios.\n * It's recommended to identify general roles of different people who will interact with the contract, and create\n * one or more actor names for each role, where the actor names start with the same letter as the role-names.\n * For example, a set of Trustees in a contract might have actor names tina, tracy and tom, while\n * unprivileged Public users might have actor names like pablo and peter.  setupActors() also\n * should pre-assign some ADA funds to each actor: e.g. `this.addActor(‹actorName›, 142n * ADA)`\n *\n * @typeParam DC - the specific DefaultCapo subclass under test\n * @public\n **/\nexport class DefaultCapoTestHelper<\n    //@ts-expect-error spurious fail  type; it tries to strongly match the generic abstract type\n    //    from (abstract) Capo, instead of paying attention to the clearly-matching concrete version in DefaultCapo\n    DC extends DefaultCapo<any, CapoMinter, CDT, CT> = DefaultCapo, //prettier-ignore\n    CDT extends DefaultCharterDatumArgs =        \n        DC extends Capo<any, any, infer iCDT> ? iCDT : DefaultCharterDatumArgs, //prettier-ignore\n    CT extends CapoBaseConfig  = \n        DC extends Capo<any, any, any, infer iCT> ? iCT : never //prettier-ignore\n    //@ts-ignore because of a mismatch between the Capo's abstract mkTxnMintCharterToken's defined constraints\n    //    ... vs the only concrete impl in DefaultCapo, with types that are actually nicely matchy.\n    //    vscode is okay with it, but api-extractor is not :/\n> extends CapoTestHelper<DC, CDT, CT> {\n    /**\n     * Creates a prepared test helper for a given Capo class, with boilerplate built-in\n     *\n     * @remarks\n     *\n     * You may wish to provide an overridden setupActors() method, to arrange actor\n     * names that fit your project's user-roles / profiles.\n     *\n     * You may also wish to add methods that satisfy some of your application's key\n     * use-cases in simple predefined ways, so that your automated tests can re-use\n     * the logic and syntax instead of repeating them in multiple test-cases.\n     *\n     * @param s - your Capo class that extends DefaultCapo\n     * @typeParam DC - no need to specify it; it's inferred from your parameter\n     * @public\n     **/\n    static forCapoClass<DC extends DefaultCapo<any, CapoMinter, any, any>>(\n        s: stellarSubclass<DC>\n    ): DefaultCapoTestHelperClass<DC> {\n        class specificCapoHelper extends DefaultCapoTestHelper<DC> {\n            get stellarClass() {\n                return s;\n            }\n        }\n        return specificCapoHelper;\n    }\n\n    //@ts-expect-error\n    get stellarClass(): stellarSubclass<DC> {\n        //@ts-expect-error\n        return DefaultCapo;\n    }\n\n    //!!! todo: create type-safe ActorMap helper hasActors(), on same pattern as hasRequirements\n    async setupActors() {\n        // console.log(\"DCTH: setupActors\")\n\n        this.addActor(\"tina\", 1100n * ADA);\n        this.addActor(\"tracy\", 13n * ADA);\n        this.addActor(\"tom\", 120n * ADA);\n        return this.setActor(\"tina\");\n    }\n\n    async mkCharterSpendTx(): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n\n        const treasury = await this.strella!;\n        const tcx: StellarTxnContext = new StellarTxnContext(this.currentActor);\n        const tcx2 = await treasury.txnAttachScriptOrRefScript(\n             await treasury.txnAddGovAuthority(tcx),\n            treasury.compiledScript\n        )\n\n        return treasury.txnMustUseCharterUtxo(\n            tcx2,\n            treasury.activityUsingAuthority()\n        );\n\n        // return treasury.txnAddCharterWithAuthority(tcx);\n    }\n\n    mkDefaultCharterArgs(): MinimalDefaultCharterDatumArgs<CDT> {\n        const addr = this.currentActor.address;\n        console.log(\"test helper charter -> actor addr\", addr.toBech32());\n        return {\n            govAuthorityLink: {\n                strategyName: \"address\",\n                config: {\n                    addrHint: [addr],\n                },\n            },\n            mintDelegateLink: {\n                strategyName: \"default\",\n            },\n            spendDelegateLink: {\n                strategyName: \"default\",\n            },\n            mintInvariants: [],\n            spendInvariants: []\n        };\n    }\n\n    async mintCharterToken(\n        args?: MinimalDefaultCharterDatumArgs<CDT>\n    ) {\n        const { delay } = this;\n        const { tina, tom, tracy } = this.actors;\n\n        if (this.state.mintedCharterToken) {\n            console.warn(\n                \"reusing minted charter from existing testing-context\"\n            );\n            return this.state.mintedCharterToken as typeof tcx;\n        }\n\n        if (!this.strella) await this.initialize();\n        const script = await this.strella!;\n        const goodArgs = (args ||\n            this.mkDefaultCharterArgs()) as MinimalDefaultCharterDatumArgs<CDT>;\n        // debugger\n\n        const tcx = await script.mkTxnMintCharterToken(goodArgs);\n        const rawConfig =\n            (this.state.rawConfig =\n            this.state.config =\n                tcx.state.bootstrappedConfig);\n\n        this.state.parsedConfig = this.stellarClass.parseConfig(rawConfig);\n\n        expect(script.network).toBe(this.network);\n\n        await script.submit(tcx);\n        console.log(\n            `----- charter token minted at slot ${this.network.currentSlot}`\n        );\n        this.network.tick(1n);\n        await script.submitAddlTxns(tcx, ({\n            txName, description\n        }) => {\n            this.network.tick(1n);\n            console.log(\n                `           ------- submitting addl txn ${txName} at slot ${this.network.currentSlot}:`\n            );\n        })\n\n        this.network.tick(1n);\n        this.state.mintedCharterToken = tcx;\n        return tcx;\n    }\n\n    async updateCharter(args: CDT): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n        const treasury = await this.strella!;\n\n        const { signers } = this.state;\n\n        const tcx = await treasury.mkTxnUpdateCharter(args);\n        return treasury.submit(tcx, { signers }).then(() => {\n            this.network.tick(1n);\n            return tcx;\n        });\n    }\n\n    async updateSettings(args:  OffchainSettingsType<DC>) {\n        await this.mintCharterToken();\n        const capo = this.strella!;\n        const tcx = await capo.mkTxnUpdateOnchainSettings(args);\n        return capo.submit(tcx).then(() => {\n            this.network.tick(1n);\n            return tcx;\n        });\n    }\n}\n","// declare module \"@donecollectively/stellar-contracts/testing\";\n\nexport { CapoTestHelper } from \"./CapoTestHelper.js\";\n\nexport { ADA, addTestContext } from \"./types.js\";\nexport type { DefaultCapoTestHelperClass } from \"./types.js\";\n\nexport const insufficientInputError =\n    /(need .* lovelace, but only have|transaction doesn't have enough inputs)/;\n\nexport type { StellarTestContext } from \"./StellarTestContext.js\";\n\nError.stackTraceLimit = 100;\n\nexport { DefaultCapoTestHelper } from \"./DefaultCapoTestHelper.js\";\nexport { StellarTestHelper } from \"./StellarTestHelper.js\";\n"],"names":["x","datum","name","e","tcx","__decorateClass","cmh","cdh","contract","StellarHeliosHelpers","mph","basics","ch","tcx2","params"],"mappings":"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"}