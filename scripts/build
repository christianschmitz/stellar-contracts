#!/bin/bash
# set -x # debug mode
#set -e # exit on error
#//! EXPECTS to be run in context of `pnpm exec`

srcDir=$(dirname $0)
STC_PROJECT_PITCH=0
. $srcDir/support.sh

WITHDOCS=${DOCS:-1}
ESBUILD="esbuild --format=esm --bundle --sourcemap --packages=external"
startTime=$(date)

ESBUILD_EXTERNALS=$(cat <<EOF
--external:esbuild 
--external:rollup 
--external:rollup-plugin-esbuild 
--external:rollup-pluginutils 
--external:@helios-lang
EOF
)
withDocs() {
    [[ $WITHDOCS -eq 0 ]] || $*
}

rollupPluginDTS() {
    # stage 1: raw DTS to be fed to api-extractor
    tsc -p ./tsconfig.rollupPlugins.dts.json  &&
    # .d.ts only for now (do we need separate docs?)
    # stage 2: api extractor brings it all together
    # only if WITHDOCS isn't 0
    withDocs api-extractor run --local -c api-extractor.rollupPlugins.json 
}

makeRollupPlugin() {
    $ESBUILD --platform=node $ESBUILD_EXTERNALS \
        --drop-labels=__BROWSER_ONLY__ \
        --outfile=dist/rollup-plugins.mjs \
        index-rollup-plugins.ts

    # raw DTS to be fed to api-extractor 
    inBackground "updating rollup-plugin.d.ts..." \
        rollupPluginDTS &
} 

programDTS() {
    tsc -p ./tsconfig.programWithCacheAPI.dts.json &&
    withDocs api-extractor run --local  -c api-extractor.programWithCacheAPI.json 
}

makeHeliosProgramWithCacheAPI() {
    inBackground "-- cacheable program .d.ts" \
        programDTS

    $ESBUILD --platform=node $ESBUILD_EXTERNALS \
        --drop-labels=__BROWSER_ONLY__ \
        --outfile=dist/HeliosProgramWithFSCache.mjs \
        src/helios/HeliosProgramWithFSCache.ts
    $ESBUILD $ESBUILD_EXTERNALS \
        --drop-labels=__NODEJS_ONLY__ \
        --outfile=dist/HeliosProgramWithMockCacheAPI.mjs \
        src/helios/HeliosProgramWithMockCacheAPI.ts    
}

testingDTS() {
    tsc -p ./tsconfig.testing.dts.json &&
    withDocs api-extractor run --local -c api-extractor.testing.json 
}

playStartSound &
{
    # raw DTS to be fed to api-extractor
    inBackground "make dist/HeliosProgramWithCacheAPI" \
        makeHeliosProgramWithCacheAPI &
        # ... has nested background jobs.
        # ... needed for the rollup plugin

    wait  # for stuff above to finish
    inBackground "build rollupPlugin" \
        makeRollupPlugin &
    inBackground "typecheck all, prep for doc-gen and main .d.ts" \
        tsc -p ./tsconfig.all.dts.json  &

}  

echo "In foreground: rollup main code bundle" 
./scripts/rollup

sleep 0.5
echo "------------------------------ waiting ------------------------------"
wait

exitIfError
playCheckpointSound

{
    inBackground "main .d.ts and docs" \
        withDocs api-extractor run --local  &

    inBackground "testing.d.ts" \
        testingDTS
}

wait

exitIfError
echo "build started at  $startTime"
echo "build finished at $(date)"

playSuccessSound 
wait

# api-extractor run --local --verbose

# to debug rollup plugins:
#   pnpm exec node --inspect-brk \
#      node_modules/rollup/dist/bin/rollup \
#         --config rollup.config.ts \
#         --configPlugin 'esbuild={loaders:{".json": "json"}, target: "esnext", tsconfig:"./tsconfig.rollupconfig.json"}'
