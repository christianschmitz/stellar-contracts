spending Capo

// needed in helios 0.13: defaults
const mph : MintingPolicyHash = MintingPolicyHash::new(#1234)
const rev : Int = 1
const devGen : Int = 0
const isDev: Bool = false

// import {
//     tvCharter
// } from CapoHelpers

import { 
    MustUseDelegateActivity,
    RelativeDelegateLink,
    requiresValidDelegateOutput,
    requiresNoDelegateInput
} from CapoDelegateHelpers

import {
    tvCharter,
    mkTv,
    didSign,
    didSignInCtx
} from StellarHeliosHelpers

import {
    getTxCharterDatum,
    mustFindInputRedeemer,
    mustHaveGovAuthority
} from CapoHelpers

import { 
    Datum, 
    Activity
 } from specializedCapo

/**
 * 
 */
func requiresAuthorization(ctx: ScriptContext, ctd: Datum::CharterToken) -> Bool {
    govDelegate : RelativeDelegateLink = ctd.govAuthorityLink;

    requiresValidDelegateOutput(govDelegate, mph, ctx)
}

func getCharterOutput(tx: Tx) -> TxOutput {
    charterTokenValue : Value = Value::new(
        AssetClass::new(mph, "charter".encode_utf8()), 
        1
    );
    tx.outputs.find_safe(
        (txo : TxOutput) -> Bool {
            txo.value >= charterTokenValue
        }
    ).switch{
        None => error("this could only happen if the charter token is burned."),
        Some{o} => o
    }
}

func notUpdatingCharter(activity: Activity) -> Bool { activity.switch {
    updatingCharter => false,  
    _ => true
}}

func preventCharterChange(ctx: ScriptContext, datum: Datum::CharterToken) -> Bool {
    tx: Tx = ctx.tx;

    charterOutput : TxOutput = getCharterOutput(tx);

    cvh : ValidatorHash = ctx.get_current_validator_hash();
    myself : Credential = Credential::new_validator(cvh);
    if (charterOutput.address.credential != myself) {
        error("charter token must be returned to the contract ")
        // actual : String = charterOutput.address.credential.switch{
        //     PubKey{pkh} => "pkh:ðŸ”‘#" + pkh.show(),
        //     Validator{vh} => "val:ðŸ“œ#:" + vh.show()
        // };
        // error(
        //     "charter token must be returned to the contract " + cvh.show() +
        //     "... but was sent to " +actual
        // )
    };

    newDatum : Datum = Datum::from_data( 
        charterOutput.datum.get_inline_data() 
    );
    if (datum.serialize() != newDatum.serialize()) {
        error("invalid update to charter settings") 
    };

    true
}

func checkpoint(s: String) -> Bool {
    print("checkpoint: " + s);
    true
}

func main(datum: Datum, activity: Activity, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    // now: Time = tx.time_range.start;
    print("hi from capo");

    if (isDev) {
        print("is dev @gen " + devGen.show() )
    };
    
    allDatumSpecificChecks: Bool = datum.switch {
        ctd : CharterToken => {
            // throws if bad
            if (notUpdatingCharter(activity)) { 
                preventCharterChange(ctx, ctd)
            } else {
                true // "maybe", really -> depends on the activity
            }
        },
        SettingsData => {
            true // maybe -> activity updatingSettings will check
        },

        scriptRef : ScriptReference => {
            // only here to ensure specializations are properly arranged
            assert(true || (scriptRef == scriptRef), "never");
            true
        },

        _ => { // delegates to specialization's Datum::validateSpend() method.
            datum.validateSpend(ctx, mph)
        }
    };

    // the normal case for validation is to use Datum-specific checks.  
    // however, this section allows activity-specific checks to be included, so extensions aren't painted into a corner.
    allActivitySpecificChecks : Bool = activity.switch {
        updatingCharter => {
            // print("hi from updatingCharter");

            charterOutput : TxOutput = getCharterOutput(tx);
            newCtDatum = Datum::CharterToken::from_data( 
                charterOutput.datum.get_inline_data() 
            );
            oldCtDatum : Datum::CharterToken = datum.switch {
                octd: CharterToken => octd,
                _ => error("wrong use of updatingCharter action for non-CharterToken datum")
            };
            Datum::CharterToken{                
                spendDelegate, 
                spendInvariants,
                settingsUut,
                namedDelegates,
                mintDelegate, 
                mintInvariants,
                govDelegate
            } = newCtDatum;

            Datum::CharterToken{
                oldSpendDelegate, 
                oldSpendInvariants, 
                oldSettingsUut,
                oldNamedDelegates,
                oldMintDelegate, 
                oldMintInvariants,
                /* _oldGovDelegate */ _ 
            } = oldCtDatum;

            mustNotModifyMintInvariants : Bool =  ( mintInvariants == oldMintInvariants );
            mustNotModifySpendInvariants : Bool = ( spendInvariants == oldSpendInvariants );

            unchangedSpendDgt : Bool = ( spendDelegate.serialize() == oldSpendDelegate.serialize() );
            unchangedMintDgt : Bool = ( mintDelegate.serialize() == oldMintDelegate.serialize() );
            changedAnyNamedDelegate : Bool = ( namedDelegates.serialize() != oldNamedDelegates.serialize() );
            mustNotModifySettings : Bool = ( settingsUut == oldSettingsUut );

            if (isDev) {
                print("is spendDgt unchanged? " + unchangedSpendDgt.show() +
                    "\n  - old: "+ oldSpendDelegate.uutName + " = " + oldSpendDelegate.strategyName +
                    " => "+  oldSpendDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"} +
                "\n  - new: "+ spendDelegate.uutName + " = " + spendDelegate.strategyName +
                    " => "+ spendDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"} 
                );
                print("is mintDgt unchanged?  " + unchangedMintDgt.show() + 
                    "\n  - old: "+ oldMintDelegate.uutName + " = " + oldMintDelegate.strategyName +
                    " => "+  oldMintDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"} +
                    "\n  - new: "+ mintDelegate.uutName + " = " + mintDelegate.strategyName +
                    " => "+ mintDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"}
                );
                print("is config unchanged? " + mustNotModifySettings.show() +
                    "\n  - old: "+ oldSettingsUut.decode_utf8() +
                    "\n  - new: "+ settingsUut.decode_utf8()
                )
            };
            assert(mustNotModifySettings, "cannot change settings uut");

            // govDelegate is always spent, so we always check its destination is kosher.
            mustNotModifySettings &&
            requiresValidDelegateOutput(govDelegate, mph, ctx) &&
            checkpoint("1") &&
            if (unchangedMintDgt) {
                // unchanged mintDgt must not be included in the tx
                checkpoint("2b") &&
                requiresNoDelegateInput(mintDelegate, mph, ctx)
            } else {
                //  the new one has to go to the right place
                checkpoint("2a") &&
                 requiresValidDelegateOutput(mintDelegate, mph, ctx)
            } && 
            checkpoint("3") &&
            if ( unchangedSpendDgt) {
                // unchanged spendDgt must not be included in the tx
                checkpoint("4b") &&
                requiresNoDelegateInput(spendDelegate, mph, ctx)
            } else {
                //  the new one has to go to the right place
                checkpoint("4a") &&
                requiresValidDelegateOutput(spendDelegate, mph, ctx)
            } &&
            checkpoint("5") &&
            if (!changedAnyNamedDelegate) { true } else {
                // namedDelegates are not allowed to change
                checkpoint("5b") && 
                namedDelegates.fold( (ok: Bool, name : String, dgt : RelativeDelegateLink) -> Bool {
                    oldDgt : RelativeDelegateLink = oldNamedDelegates.get(name);
                    ok && if (oldDgt.serialize() == dgt.serialize()) {
                        // unchanged named delegate must not be included in the tx
                        requiresNoDelegateInput(dgt, mph, ctx)
                    } else {
                        //  the new one has to go to the right place
                        requiresValidDelegateOutput(dgt, mph, ctx)
                    }
                }, true)
            } &&
            mustNotModifyMintInvariants &&
            mustNotModifySpendInvariants &&
            requiresAuthorization(ctx, oldCtDatum) &&
            checkpoint("6")
        },

        retiringRefScript => {
            // the ref script is being spent:
            isSpendingRefScript : Bool = datum.switch{
                ScriptReference => true,
                _ => error("wrong use of retiringRefScript action for non-ScriptRef datum")
            };

            hasGovAuthority : Bool = mustHaveGovAuthority(ctx,mph);

            isSpendingRefScript && 
            hasGovAuthority &&
            true
            // no other constraints; the ref script could be re-created or
            // replaced with a new one, or simply destroyed.
        },

        usingAuthority => {
            // by definition, we're truly notUpdatingCharter(activity) 
            datum.switch {
                 // throws if bad
                ctd : CharterToken => requiresAuthorization(ctx, ctd),
                _ => error("wrong use of usingAuthority action for non-CharterToken datum")
            }
        },

        updatingSettings => {
            datum.switch {
                SettingsData => {
                    charterDatum : Datum::CharterToken = getTxCharterDatum(
                        ctx: ctx,
                        mph: mph
                    );
                    // it requires the govAuthority to be present
                    hasGovAuthority : Bool = mustHaveGovAuthority(
                        ctx : ctx,
                        mph: mph,
                        charterDatum: charterDatum // already resolved
                   );
                   Datum::CharterToken{
                        spendDelegate,
                        /* spendInvariants */ _,
                        /* settingsUut */ _,
                        /* namedDelegates */ _,
                        /* mintDelegate */ _,
                        /* mintInvariants */ _,
                        /* govDelegate */ _
                    } = charterDatum;
                    
                   // ?? can we iterate inputs along with delegates, to reduce the overhead
                   //    ... of multiple passes over the tx inputs?
                    //  option 1: pay for iterating N inputs, 
                    //    - times a switch{} for delegate-matching
                    //    -    ... and invariants-iteration
                    //    -    ... and namedDelegates-iteration
                    //    - Plus a "is-anything-missing" check over delegates/invariants/namedDelegates
                    // option 2: switch and iterate over delegates, invariants, namedDelegates
                    //    - times a switch for input-finding
                    //    - ... and no separate is-anything-missing checks.
                    // ^^^ option 2 has to be cheaper.

                    inputs: []TxInput = ctx.tx.inputs;

                    // spending delegates are checking the settings
                    Option[TxInput]::Some{spendDelegateInput} = spendDelegate.hasDelegateInput(
                        inputs: inputs,
                        mph: mph,
                        validatorHashRequired: true,
                        inputRequired: true
                    );
                    spendDelegateIsValidating : Bool = MustUseDelegateActivity::from_data( 
                        mustFindInputRedeemer(ctx, spendDelegateInput)
                    ).switch {
                        DelegateActivity{a} => {
                            a.switch {
                                ValidatingSettings => requiresValidDelegateOutput(
                                    spendDelegate, mph, ctx
                                ),
                                _ => error("delegate not ValidatingSettings: "+ spendDelegate.uutName)
                            }
                        },
                        _ => error("no way") // throws if the redeemer isn't #0.
                    };

                    // todo: minting delegates are checking the settings
                    // mintDelegateInput : Bool = mintDelegate.hasDelegateInput(
                    //     inputs: inputs,
                    //     validatorHashRequired: true
                    // );

                    //     address: spendDelegate.delegateValidatorHash,
                    //     mustFindInputRedeemer
                    // );
                    // requiresValidDelegateOutput(
                        //     charterDatum.spendDelegate, mph, ctx,
                        //     spentWithRedeemer: (
                            // );
                            
                            
                    // todo: govAuthority is checking the settings
                    // todo: spendInvariants are checking the settings
                    // todo: mintInvariants are checking the settings

                    spendDelegateIsValidating &&
                    // mintDelegateIsValidating &&
                    // govDelegateIsValidating &&
                    // spendInvariantsAreValidating &&
                    // mintInvariantsAreValidating &&
                    // namedDelegatesAreValidating &&
                    hasGovAuthority
                },
                _ => error("wrong use of updatingSettings action for non-SettingsData datum")
            }
        },
        retiringSettings => {
            error("implement me")
        },
        // defers to the specialization's Activity::allowActivity() method for checking other activities
        _ => activity.allowActivity(datum, ctx, mph)
    };

    assert(allDatumSpecificChecks, "some datum-check failed");
    assert(allActivitySpecificChecks, "some redeeemer-check failed");

    //! retains mph in parameterization
    assert(
        ( allDatumSpecificChecks && allActivitySpecificChecks ) ||
            // this should never execute (much less fail), yet it also shouldn't be optimized out.
             mph.serialize() /* never */ == datum.serialize(), 
        "unreachable"
    ); 

    allDatumSpecificChecks && 
    allActivitySpecificChecks &&
    tx.serialize() != datum.serialize()
}
