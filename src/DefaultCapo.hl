spending Capo

// needed in helios 0.13: defaults
const mph : MintingPolicyHash = MintingPolicyHash::new(#1234)
const rev : Int = 1

// import {
//     tvCharter
// } from CapoHelpers

import {
    tx, 
    get_current_input,
    get_current_validator_hash
} from ScriptContext

import { 
    AbstractDelegateActivitiesEnum,
    DgTknDisposition as DgTkn,
    requiresNoDelegateInput,    
    RelativeDelegateLink
} from CapoDelegateHelpers

import {
    TODO,
    REQT,
    mustFindInputRedeemer,
    outputAndDatum,
    AnyData,
    tvCharter,
    mkTv,
    didSign
} from StellarHeliosHelpers

import {
    getTxCharterDatum,
    mustHaveGovAuthority,
    mkTokenShow,
    CapoDatum,
    CapoActivity
} from CapoHelpers

// import {
//     capoSettings
// } from CustomCapoSettings

func requiresAuthorization(ctd: CapoDatum::CharterToken) -> Bool {
    govDelegate : RelativeDelegateLink = ctd.govAuthorityLink;

    govDelegate.hasValidOutput(mph)
}

func getCharterOutput(tx: Tx) -> TxOutput {
    charterTokenValue : Value = Value::new(
        AssetClass::new(mph, "charter".encode_utf8()), 
        1
    );

    tx.outputs.find_safe(
        (txo : TxOutput) -> Bool {
            txo.value >= charterTokenValue
        }
    ).switch {
        None => error("this could only happen if the charter token is burned."),
        Some{o} => o
    }
}

func preventCharterChange(datum: CapoDatum::CharterToken) -> Bool {
    charterOutput : TxOutput = getCharterOutput(tx);

    cvh : ValidatorHash = get_current_validator_hash();
    myself : SpendingCredential = SpendingCredential::new_validator(cvh);
    if (charterOutput.address.credential != myself) {
        error("charter token must be returned to the contract ")
        // actual : String = charterOutput.address.credential.switch{
        //     PubKey{pkh} => "pkh:üîë#" + pkh.show(),
        //     Validator{vh} => "val:üìú#:" + vh.show()
        // };
        // error(
        //     "charter token must be returned to the contract " + cvh.show() +
        //     "... but was sent to " +actual
        // )
    } else { 
        print("ok\n")
    };

    newDatum : CapoDatum = CapoDatum::from_data( 
        charterOutput.datum.inline
    );
    if (datum.serialize() != newDatum.serialize()) {
        error("invalid update to charter settings") 
    } else {
        true
    }
}

func checkpoint(s: String) -> Bool {
    print("checkpoint: " + s);
    print("\n");
    true
}

func main(datum: Data, activity: CapoActivity) -> Bool {
    // now: Time = tx.time_range.start;
    print("üö•‚ùìCapo\n");
    TODO("implement activity updatingTypeMap");

    showMyTokens : (Value) -> String = mkTokenShow(mph);
    input : TxInput = get_current_input();
    print("  -- Capo: checks spend of ");
    print(showMyTokens(input.value));
    print("\n");
    
    capoDatum : CapoDatum = CapoDatum::from_data(datum);
    allDatumSpecificChecks: Bool = capoDatum.switch {
        // checks that unsupported activities for a datum are rejected promptly 
        // +special things we want to always guard against for specific Datum types:
        ctd : CharterToken => {
            invalid : String = "invalid activity on CharterToken";
            activity.switch {
                updatingCharter => true,  // more activity-checks happen below.
                addingSpendInvariant => error("todo"),
                // updatingSettings => error(invalid),
                // retiringSettings => error(invalid),
                spendingDelegatedDatum => error(invalid),
                _ => {
                    preventCharterChange(ctd)  // throws if bad                
                    // ... plus activity-specific checks below.
                }
            }
        },
        // SettingsData => activity.switch {
        //     updatingSettings => true,  // more checks below.
        //     retiringSettings => error("there is no use case for this activity, unless it's part of a complete teardown"),
        //     _ => error("invalid activity on SettingsData")
        // },
        ScriptReference => activity.switch {
            retiringRefScript => true,
            _ => error("invalid activity on ScriptReference")            
        },
        DelegatedData => activity.switch {
            spendingDelegatedDatum => true,  // more checks below.
            // ^ this is part one of j6bmfv
            _ => error("invalid activity on DelegatedData")
        }
        // maybe bring this back in v2
        //, TypeMapInfo => activity.switch {
        //     updatingTypeMap => true,
        //     _ => error("invalid activity on TypeMapInfo")
        // }

        // ‚ùóno default case, to ensure that all variants are always covered.
        // _ => true
    };

    // the normal case for validation is to use CapoDatum-specific checks.  
    // however, this section allows activity-specific checks to be included, so extensions aren't painted into a corner.
    allActivitySpecificChecks : Bool = activity.switch {
        // checks for higher-frequency cases first
        spendingDelegatedDatum => {
            // this is part two of j6bmfv
            print( "  ...with activity spendingDelegatedDatum\n");
            // check that the datum is a DelegatedData variant
            datumId : ByteArray = capoDatum.switch{
                DelegatedData => AnyData::from_data(datum).id,
                _ => {
                    error(
                        "activity spendingDelegatedDatum used on mismatched datum type"
                    )
                }
            };
            hasMatchingValue : Bool = input.value.contains(mkTv(mph: mph, tnBytes: datumId));
            charterDatum : CapoDatum::CharterToken = getTxCharterDatum(
                mph: mph
            );
            spendDelegate: RelativeDelegateLink = charterDatum.spendDelegateLink;
            
            // consider allowing this as a refInput, with other stuff to enable more parallelism for populations
            spendDelegateInput: TxInput = spendDelegate.hasDelegateInput(
                //!!!!!! todo: audit for usages of hasDelegateInput - do we need to pass inputs as an arg?
                inputs: tx.inputs,
                mph: mph
            ).unwrap();

            delegateReturned: Bool = spendDelegate.hasValidOutput(mph).trace(" -- delegate returned ok? ");

            spendDgtInputRedeemer: Data = mustFindInputRedeemer(spendDelegateInput);
            print("  -- check appropriate delegate activity\n");
            getSpendingRecId : (Data) -> ByteArray = (dgSpendActivity : Data) -> ByteArray {
                dgSpendActivity.switch {
                    ConstrData{index, fields} => {
                        assert(true || index==index, "no way"); // prevent unused variable warning
                        fields.head.switch {
                            ByteArrayData{recId} => recId,
                            _ => error("spending activity must have a record-id as first field")
                        }
                    },
                    _ => error("no way")
                }
            };
            uniqMatchingSpendDgtActivity : Bool = AbstractDelegateActivitiesEnum::from_data(
                spendDgtInputRedeemer
            ).switch {
                SpendingActivities{sa} => {
                    // unwrap the abstract Data from sa, expecting an Enum 
                    // ... with a first data-field having the token-name 
                    // ... that matches with the delegated-data record `id`
                    recId : ByteArray = getSpendingRecId(sa);
                    assert(recId == datumId, "spendDgt SpendingActivity must act on the correct record-id");
                    true
                },
                UpdatingDelegatedData{/*dataType*/ _ , recId} => {
                    // todo: expect that this record-id matches the token in the current UTxO.
                    assert(recId == datumId, "spendDgt UpdDgData must act on the correct record-id");
                    true
                },
                MultipleDelegateActivities{activities} => {
                    found: []Data = activities.filter(
                        (act: Data) -> Bool {
                            AbstractDelegateActivitiesEnum::from_data(act).switch {
                                SpendingActivities{sa} => {                                    
                                    // unwrap / check record-id
                                    recId : ByteArray = getSpendingRecId(sa);
                                    recId == datumId
                                },
                                UpdatingDelegatedData{
                                    /* dgDataType*/ _ , recId
                                } => {
                                    // verify token name match
                                    recId == datumId
                                },
                                _ => false
                            }
                        }
                    );
                    TODO("TEST THIS v");
                    print("recId: " + datumId.show());
                    print("\n");
                    REQT("spendDgt must be acting on the matching record-id");
                    assert(  // fails a test having a spending activity, but on wrong recId
                        ( found.length > 0 ).trace( "found activity for this recId? ")
                    , "‚ùó no spend delegate activity on this dgData");
                    TODO("TEST THIS too v");
                    REQT("spendDgt fails with multiple activities for the same recId");
                    assert(  // fails a test having multiple spending activities on the same rec id
                        (found.length == 1).trace("has exactly one matching activity? ")
                        , "‚ùó spend delegate tried to act in multiple ways on the same token"
                    );
                    true
                },
                _ => {
                    spendDgtInputRedeemer.switch {
                        ConstrData{index, fields} => {
                            print("unexpected redeemer: " + index.show() );
                            print("\n");
                            assert(true || /* never executed */ fields.length > 0, "no way");
                            error("spend delegate not triggered with a Spending activity")
                        },
                        _ => error("no way")
                    }
                }
            };

            true
            && hasMatchingValue
            && uniqMatchingSpendDgtActivity
            && delegateReturned 
        },
        updatingCharter => {
            print( "  ...with activity updatingCharter\n");

            charterOutput : TxOutput = getCharterOutput(tx);
            newCtDatum = CapoDatum::CharterToken::from_data( 
                charterOutput.datum.inline
            );

            oldCtDatum : CapoDatum::CharterToken = capoDatum.switch {
                octd: CharterToken => octd,
                _ => error("wrong use of updatingCharter action for non-CharterToken datum")                
            };
            CapoDatum::CharterToken{                
                spendDelegate, 
                spendInvariants,
                // settingsUut,
                namedDelegates,
                mintDelegate, 
                mintInvariants,
                nextGovDelegate
                // oldTypeMapUut
            } = newCtDatum;

            CharterToken{
                oldSpendDelegate, 
                oldSpendInvariants, 
                // oldSettingsUut,
                oldNamedDelegates,
                oldMintDelegate, 
                oldMintInvariants,
                oldGovDelegate
                // typeMapUut
            } = capoDatum; // or oldCtDatum - same error result either way



            mustNotModifyMintInvariants : Bool =  ( mintInvariants == oldMintInvariants );
            mustNotModifySpendInvariants : Bool = ( spendInvariants == oldSpendInvariants );
            unchangedGovDelegate : Bool = ( nextGovDelegate.serialize() == oldGovDelegate.serialize() );

            hasNeededGovDelegate : Bool =  true ||
            checkpoint("must be validated by existing govDelegate") && 
            nextGovDelegate.hasValidOutput(mph) && (
                unchangedGovDelegate || oldGovDelegate.hasDelegateInput( 
                    inputs: tx.inputs, 
                    mph: mph,
                    required: true
                ).switch {
                    None => error("unreachable"),
                    Some => true
                }
            );

            unchangedSpendDgt : Bool = ( spendDelegate.serialize() == oldSpendDelegate.serialize() );
            unchangedMintDgt : Bool = ( mintDelegate.serialize() == oldMintDelegate.serialize() );
            // print(" oldMintDgt: " + oldMintDelegate.serialize().show());
            // print("\n");
            // print(" newMintDgt: " + mintDelegate.serialize().show());
            // print("\n");
            
            changedAnyNamedDelegate : Bool = ( namedDelegates.serialize() != oldNamedDelegates.serialize() );

            // mustNotModifySettings : Bool = ( settingsUut == oldSettingsUut );
            // mustNotModifyTypeInfo : Bool = ( typeMapUut == oldTypeMapUut );

            if (true) {
                print("is spendDgt unchanged? " + unchangedSpendDgt.show());
                print("\n  - old: "+ oldSpendDelegate.uutName + " = " + oldSpendDelegate.strategyName);
                print("\n       => "+  oldSpendDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"});
                print("\n       + cfg " + oldSpendDelegate.config.decode_utf8());
                print("\n  - new: "+ spendDelegate.uutName + " = " + spendDelegate.strategyName);
                print("\n       => "+ spendDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"});
                print("\n       + cfg " + spendDelegate.config.decode_utf8());
                print("\n");
                // print(" - old: " + oldSpendDelegate.serialize().show());
                // print(" - new: " + spendDelegate.serialize().show());

                print(" -- is mintDgt unchanged?  " + unchangedMintDgt.show());
                print("\n  - old: "+ oldMintDelegate.uutName + " = " + oldMintDelegate.strategyName);
                print("\n       => "+ oldMintDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"});
                print("\n       + cfg " + oldMintDelegate.config.decode_utf8());
                print("\n  - new: "+ mintDelegate.uutName + " = " + mintDelegate.strategyName);
                print("\n       => "+ mintDelegate.delegateValidatorHash.switch{Some{v} => v.show(), None => " (any addr)"});
                print("\n       + cfg " + mintDelegate.config.decode_utf8());
                print("\n")
                // print(" - old: " + oldMintDelegate.serialize().show());
                // print(" - new: " + mintDelegate.serialize().show());

                // print(" -- is config unchanged? " + mustNotModifySettings.show());
                // print("\n  - old: "+ oldSettingsUut.decode_utf8());
                // print("\n  - new: "+ settingsUut.decode_utf8());
                // print("\n")
            };
            // assert(mustNotModifySettings, "cannot change settings uut");
            // assert(mustNotModifyTypeInfo, "cannot change typeInfo uut");


            // the high-level use-cases that can update charter are all mutually exclusive.  Count them
            // and ensure that only one is present.
            countUpdatedThings : Int = 
                if ((!unchangedGovDelegate).trace("\n -- govDgt changed? ")) { 1 } else { 0 } +
                if ((!unchangedSpendDgt).trace("\n -- spendDgt changed? ") ) { 1 } else { 0 } +
                if ((!unchangedMintDgt).trace("\n -- mintDgt changed? ") ) { 1 } else { 0 } +
                if (changedAnyNamedDelegate.trace("\n -- namedDgt changed? ") ) { 1 } else { 0 };
            assert(countUpdatedThings == 1, "\n"+countUpdatedThings.show() + 
              " types of charterUpdate found; expected exactly one"
            );            

            // mustNotModifySettings &&
            // mustNotModifyTypeInfo &&
            hasNeededGovDelegate &&
            checkpoint("1") &&
            if (unchangedMintDgt) {
                // unchanged mintDgt must not be included in the tx
                checkpoint("2b") &&
                mintDelegate.hasDelegateInput(
                    inputs: tx.inputs, 
                    mph: mph,
                    required: false
                ).switch {
                    None => {
                        // was requiresNoDelegateInput(mintDelegate, mph)
                        //  - it's ok to have it not included.
                        true
                    },
                    Some{mintDgtInput} => {
                        delegateActivity: AbstractDelegateActivitiesEnum = 
                            mintDelegate.getRedeemer(mintDgtInput);
                        print("mint delegate input found\n");
                        delegateActivity.switch {
                            CapoLifecycleActivities{CLA} => CLA.switch {
                                CreatingDelegate => {
                                    print("TEMPORARY: allowing delegate creation while **updatingCharter**\n");

                                    TODO("move delegate-creation to be separate from updatingCharter");
                                    TODO(" ?? use capo ActivatingXxxxDelegate activity when adopting delegate");

                                    mintDelegate.hasValidOutput(mph)
                                }
                                // no other variants exist (yet).
                                // _ => error("invalid use of mint delegate during charter update")
                            },
                            _ => error("invalid use of mint delegate during charter update")
                        }
                    }
                }
            } else {
                //  the new one has to go to the right place
                checkpoint("2a") &&
                 mintDelegate.hasValidOutput(mph)
            } && 
            checkpoint("3") &&
            if ( unchangedSpendDgt) {
                // unchanged spendDgt must not be included in the tx
                checkpoint("4b") &&
                requiresNoDelegateInput(spendDelegate, mph)
            } else {
                //  the new one has to go to the right place
                checkpoint("4a") &&
                spendDelegate.hasValidOutput(mph)
            } &&
            checkpoint("5") &&
            if (!changedAnyNamedDelegate) { true } else {
                checkpoint("5b") && 
                namedDelegates.fold( (ok: Bool, name : String, dgt : RelativeDelegateLink) -> Bool {
                    ok && 
                    oldNamedDelegates.get_safe(name).switch {
                        None => {
                            print (" - adopting named delegate: " + name);
                            print("\n");
                            true
                        },
                        Some{oldDgt} => { 
                            if (oldDgt.serialize() == dgt.serialize()) {
                               // unchanged named delegate must not be included in the tx
                                requiresNoDelegateInput(dgt, mph)
                            } else {
                                TODO("the old named delegate must be retired, or be force-replaced (in a different activity?)");
                                //  the new one has to go to the right place
                                dgt.hasValidOutput(
                                    mph, required: true, 
                                    createdOrReturned: DgTkn::Created)
                            }
                        }
                    }
                }, true)
            } &&
            mustNotModifyMintInvariants &&
            mustNotModifySpendInvariants &&
            requiresAuthorization(oldCtDatum) &&
            checkpoint("6")
        },

        retiringRefScript => {
            print( "  ...with activity retiringRefScript\n");
            // the ref script is being spent:
            isSpendingRefScript : Bool = capoDatum.switch{
                ScriptReference => true,
                _ => error("wrong use of retiringRefScript action for non-ScriptRef datum")
            };

            hasGovAuthority : Bool = mustHaveGovAuthority(mph);

            isSpendingRefScript && 
            hasGovAuthority &&
            true
            // no other constraints; the ref script could be re-created or
            // replaced with a new one, or simply destroyed.
        },

        usingAuthority => {
            print( "  ...with activity usingAuthority\n");
            capoDatum.switch {
                 // throws if bad
                ctd : CharterToken => requiresAuthorization(ctd),
                _ => error("wrong use of usingAuthority action for non-CharterToken datum")
            }
        },

        // updatingSettings => {
        //     print( "  ...with activity updatingSettings\n");
        //     isRelevantDatum : Bool = capoDatum.switch {
        //         // SettingsData => true,
        //         TypeMapInfo => true,
        //         _ => error("wrong use of updatingSettings action; must use only on Settings and TypeInfo")
        //     };
        //     if (isRelevantDatum) { // temporary to minimize commit diff
        //         if (isRelevantDatum) { // temporary to minimize commit diff
        //             charterDatum : CapoDatum::CharterToken = getTxCharterDatum(
        //                 mph: mph
        //             );
        //             // it requires the govAuthority to be present 
        //             REQT( "gov authority must be present to update settings");
        //             hasGovAuthority : Bool = mustHaveGovAuthority(
        //                 mph: mph,
        //                 charterDatum: charterDatum // already resolved
        //            );
        //            CapoDatum::CharterToken{
        //                 spendDelegate,
        //                 spendInvariants,
        //                 /* settingsUut */ _,
        //                 namedDelegates,
        //                 mintDelegate ,
        //                 mintInvariants,
        //                 govDelegate,
        //                 /* oldTypeMapUut */ _
        //             } = charterDatum;
                    
        //            // ?? can we iterate inputs along with delegates, to reduce the overhead
        //            //    ... of multiple passes over the tx inputs?
        //             //  option 1: pay for iterating N inputs, 
        //             //    - times a switch{} for delegate-matching
        //             //    -    ... and invariants-iteration
        //             //    -    ... and namedDelegates-iteration
        //             //    - Plus a "is-anything-missing" check over delegates/invariants/namedDelegates
        //             // option 2: switch and iterate over delegates, invariants, namedDelegates
        //             //    - times a switch for input-finding
        //             //    - ... and no separate is-anything-missing checks.
        //             // ^^^ option 2 has to be cheaper.

        //             inputs: []TxInput = tx.inputs;

        //             REQT( "spend delegate must validate settings");
        //             spendDelegateIsValidating : Bool = 
        //                 spendDelegate.validatesUpdatedSettings(
        //                     inputs: inputs,
        //                     mph: mph,
        //                     inputRequired: true
        //                 ).unwrap();

        //             REQT("mint delegate must validate settings");
        //             mintDelegateIsValidating : Bool = 
        //                 mintDelegate.validatesUpdatedSettings(
        //                     inputs: inputs,
        //                     mph: mph,
        //                     inputRequired: true
        //                 ).unwrap();

        //             // govAuthority is checking the settings
        //             REQT( "govDelegate MAY contribute to settings validation");
        //             govDelegateMaybeValidating : Bool = 
        //                 govDelegate.validatesUpdatedSettings(
        //                     inputs: inputs,
        //                     mph: mph,
        //                     inputRequired: false
        //                 ).switch{
        //                     Some => true,
        //                     None => {
        //                         print("  -- govAuthority isn't a script-based validator; doesn't validate new settings\n");
        //                         true
        //                     }
        //                 };
        //             checkOneInvariant : (RelativeDelegateLink) -> Bool = 
        //             (oneDgt: RelativeDelegateLink) -> Bool {
        //                 REQT( "invariant must validate settings");
        //                 oneDgt.validatesUpdatedSettings(
        //                     inputs: inputs,
        //                     mph: mph,
        //                     inputRequired: true
        //                 ).unwrap()
        //             };
        //             // spendInvariants are checking the settings
        //             REQT( "spend invariants must validate settings");
        //             spendInvariantsAreValidating : Bool = spendInvariants.all( 
        //                 checkOneInvariant
        //             );
        //             // mintInvariants are checking the settings
        //             REQT( "mint invariants must validate settings");
        //             mintInvariantsAreValidating : Bool = mintInvariants.all( 
        //                 checkOneInvariant
        //             );
        //             // namedDelegates are checking the settings
        //             REQT( "named delegates must validate settings");
        //             namedDelegatesAreValidating : Bool = namedDelegates.fold( 
        //                 REQT( "  - each named delegate must validate settings");
        //                 (ok: Bool, key: String, dgt: RelativeDelegateLink) -> Bool {
        //                     print("  - named delegate: " + key);
        //                     print("\n");
        //                     ok && dgt.validatesUpdatedSettings(
        //                         inputs: inputs,
        //                         mph: mph,
        //                         inputRequired: true
        //                     ).unwrap()
        //                 }, true
        //             );

        //             isRelevantDatum &&
        //             spendDelegateIsValidating &&
        //             mintDelegateIsValidating &&
        //             govDelegateMaybeValidating &&
        //             spendInvariantsAreValidating &&
        //             mintInvariantsAreValidating &&
        //             namedDelegatesAreValidating &&
        //             hasGovAuthority
        //         } else { error("unreachable") }
        //     } else { error("unreachable") }
        // },
        // retiringSettings => {
        //     print( "  ...with activity retiringSettings\n");
        //     error("implement me")
        // },
        updatingTypeMap => {
            print( "  ...with activity updatingTypeMap\n");
            error("implement me")            
        },
        _ => error("unhandled activity")
    };

    assert(allDatumSpecificChecks, "some datum-check failed");
    assert(allActivitySpecificChecks, "some redeeemer-check failed");

    //! retains mph in parameterization
    assert(
        ( allDatumSpecificChecks && allActivitySpecificChecks ) ||
            // this should never execute (much less fail), yet it also shouldn't be optimized out.
             mph.serialize() /* never */ == mph.serialize(), 
        "unreachable"
    ); 
    print("\nüö•üü¢ Capo validator: ok!\n\n");

    allDatumSpecificChecks && 
    allActivitySpecificChecks
    // tx.serialize() != datum.serialize()
}
