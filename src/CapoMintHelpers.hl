module CapoMintHelpers
import {
    mkTv,
    tvCharter
} from StellarHeliosHelpers

import {
    getTxCharterDatum,
    getRefCharterDatum,
    mustFindInputRedeemer
} from CapoHelpers

import {
    Datum, Activity as CapoActivity
} from specializedCapo

import {
    RelativeDelegateLink,
    requiresDelegateAuthorizingMint // todo: move it into this file instead.
} from CapoDelegateHelpers

func hasSeedUtxo(tx: Tx, seedTxId : TxId, seedIdx: Int
    // , reason: String
) -> Bool {
    seedUtxo: TxOutputId = TxOutputId::new(
        seedTxId,
        seedIdx
    );
    assert(tx.inputs.any( (input: TxInput) -> Bool {
        input.output_id == seedUtxo
    }),  "seed utxo required for minting "
        // +reason 
        // + "\n"+seedTxId.show() + " : " + seedIdx.show()
    );
    print( "  -- has seed -> ok");
    true
}

func requiresMintDelegateApproval(
    ctx: ScriptContext, 
    mph: MintingPolicyHash
) -> Bool {
    Datum::CharterToken {
        /*spendDgt*/ _,  
        /* spendInvariants */ _,
        /* settings */ _,
        mintDgt, 
        /* mintInvariants */ _, 
        /* govAuthority */ _
    } = getRefCharterDatum(ctx, mph);

    requiresDelegateAuthorizingMint(
        delegateLink: mintDgt, 
        mph: mph,
        ctx: ctx
    )
}

//! pre-computes the hash-based suffix for a token name, returning
//  a function that cheaply makes Uut names with any given purpose, 
// given the initial seed-txn details
func mkUutTnFactory(
    seedTxId : TxId, seedIdx : Int
) -> (String) -> String {
   
    idxBytes : ByteArray = seedIdx.serialize();
    // assert(idxBytes.length == 1, "surprise!");

    //! yuck: un-CBOR...
    rawTxId : ByteArray = seedTxId.serialize().slice(5,37);

    txoInfo : ByteArray = if (idxBytes.length > 9) { 
        // allows 9 bytes to ensure we can support 
        // the largest possible cbor encoding of txo-index integers, 
        // even though we only expect integers < 256 currently
        assert(false, 
            //"expected cbor(txo index) to be at most 9 bytes, got cbor( index=
            //  + seedIdx.show() + " ).hex = " + idxBytes.show()
            "cbor(txoId) len > 9 !!"  
        );
        idxBytes // never used
    } else {
       ( rawTxId + "@".encode_utf8() )+ idxBytes
    };
    // assert(txoId.length == 34, "txId + @ + int should be length 34");
    // print( "******** txoId " + txoId.show());

    miniHash : ByteArray = txoInfo.blake2b().slice(0,6);
    // assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    mhs: String = miniHash.show();

    // returns a function computing a lightweight prefix + miniHash
    (p: String) -> String {
        p + "-" + mhs
    }
}

func validateUutBurning(
    ctx: ScriptContext, 
    tns: []String
) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    Datum::CharterToken {
        /*spendDgt*/ _,  
        /* spendInvariants */ _,
        /* settings */ _,
        mintDgt, 
        /* mintInvariants */ _, 
        /* govAuthority */ _
    } = getRefCharterDatum(ctx, mph);

    valueBurned: Value = tx.minted;

    expectedBurn : Value = Value::sum(tns.map(
        (tn: String) -> Value {
            mkTv(mph, tn, -1)
        }
    ));
    actualBurn : Map[ByteArray]Int = valueBurned.get_policy(mph);
    hasExpectedBurn : Bool = actualBurn == expectedBurn.get_policy(mph);
    if (!hasExpectedBurn)  {
        // actualBurn.for_each( (b : ByteArray, i: Int) -> {
        //     print( "actual: " + b.show() + " " + i.show() )
        // });
        // expectedBurn.get_policy(mph).for_each( (b : ByteArray, i: Int) -> {
        //     print( "expected: " + b.show() + " " + i.show() )
        // });
        assert(false, "mismatch in UUT burn, diff:\n"
            + (expectedBurn - valueBurned).show()
        )
    };

    hasExpectedBurn && requiresDelegateAuthorizingMint(
        mintDgt, 
        mph, 
        ctx
    )

}

// checks all of the following:
//  - there's an approving delegate (or we're bootstrapping)
//  - the mint includes the seed UTXO
//  - the mint matches the UUTs indicated by the list of purposes
func validateUutMinting(
    ctx: ScriptContext, 
    mph: MintingPolicyHash,
    seedTxId : TxId, seedIdx : Int, 
    purposes: []String,     
    mkTokenName: (String) -> String,
    bootstrapCharter:Value = Value::new(AssetClass::ADA, 0),
    otherMintedValue: Value = Value::new(AssetClass::ADA, 0),
    needsMintDelegateApproval: Bool = true,
    extraMintDelegateRedeemerCheck: Bool = true
) -> Bool {
    tx: Tx = ctx.tx;

    isBootstrapping : Bool = !( bootstrapCharter.is_zero() );
    delegateApproval : Bool = if ( isBootstrapping ) { 
        true 
    } else {
        // not bootstrapping; must honor the mintDelegate's authority
        Datum::CharterToken {
            /*spendDgt*/ _,  
            /* spendInvariants */ _,
            /* settings */ _,
            mintDgt, 
            /* mintInvariants */ _, 
            /* govAuthority */ _
        } = getTxCharterDatum(ctx, mph);

        if (needsMintDelegateApproval) {
            //!!! todo: add explicit activity details in authorization
            requiresDelegateAuthorizingMint(
                delegateLink: mintDgt, 
                mph: mph, 
                ctx: ctx,
                extraMintDelegateRedeemerCheck: extraMintDelegateRedeemerCheck
            )
        } else {
            true
        }
    };

    valueMinted: Value = tx.minted;

    // idxBytes : ByteArray = seedIdx.bound_max(255).serialize();
    // // assert(idxBytes.length == 1, "surprise!");

    // //! yuck: un-CBOR...
    // rawTxId : ByteArray = seedTxId.serialize().slice(5,37);

    // txoId : ByteArray = (rawTxId + "@".encode_utf8() + idxBytes);
    // assert(txoId.length == 34, "txId + @ + int should be length 34");
    // // print( "******** txoId " + txoId.show());

    // miniHash : ByteArray = txoId.blake2b().slice(0,6);
    // // assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    // tokenName1 = purpose + "." + miniHash.show();

    // print(" purposes: " + purposes.join(", "));
    expectedValue : Value = bootstrapCharter + otherMintedValue + Value::sum(
        purposes.sort((a:String, b:String) -> Bool { a != b }).map(
            (purpose: String) -> Value {
                // print("purpose: " + purpose);
                mkTv(mph, mkTokenName(purpose))
            }
        )
    );

    actualMint : Map[ByteArray]Int = valueMinted.get_policy(mph);
    // expectedMint : Map[ByteArray]Int = expectedValue.get_policy(mph);
    if (true) {
        actualMint.for_each( (b : ByteArray, i: Int) -> {
            print( "actual: " + b.decode_utf8() + " " + i.show() )
        });

        print("uut-minting seed: " + seedTxId.show() + "ðŸ”¹#" + seedIdx.show());
        expectedValue.get_policy(mph).for_each( (b : ByteArray, i: Int) -> {
            print( "expected: " + b.decode_utf8() + " " + i.show() )
        })
    };

    temp : []ByteArray = actualMint.fold( (l: []ByteArray, b : ByteArray, i: Int) -> {
        l.find_safe((x : ByteArray) -> Bool { x == b }).switch{
            None => l.prepend(b),
            Some /*{x}*/ => error("UUT duplicate purpose "
                // +  x.decode_utf8()
            )
        }
    }, []ByteArray{});
    assert(temp == temp, "prevent unused var");


    expectationsMet : Bool = valueMinted  == expectedValue;

    assert(expectationsMet, "mismatch in UUT mint"
        // +";\n   ... expected "+ expectedValue.show()+
        // "   ... actual "+ valueMinted.show()+
        // "   ... diff = \n" + (expectedValue - valueMinted).show()
    );

    delegateApproval && expectationsMet &&
    hasSeedUtxo(tx, seedTxId, seedIdx
        //, "UUT "+purposes.join("+")
    )
}

func mintsUutForCharterUsingRedeemerIndex(
    ctx: ScriptContext,
    mph: MintingPolicyHash,
    purpose: String,
    seedTxId: TxId,
    seedIdx: Int,
    charterRedeemerIndex: Int,
    otherMintedValue: Value = Value::new(AssetClass::ADA, 0),
    needsMintDelegateApproval: Bool = true,
    extraMintDelegateRedeemerCheck: Bool = true
) -> Bool {
            // only has to check that a) it's minting all-and-only the invariant-uut,
            // and b) the contract charter is BEING SPENT WITH THE ACTIVITY at the indicated index.
            // ------> The charter-spend policy for that activity checks all the other necessaries
            //     given that activity.

            // NOT needed; the charter-spend policy ensures the expected delegate output is created when adding a spend invariant.
            // hasRightDestination : Bool = output.value == value_minted &&
            //     output.address == charterUtxo.address;

    chVal : Value = tvCharter(mph);
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };
    print("  --- finding required charter input ");
    charterInput : TxInput = ctx.tx.inputs.find(hasCharter);
    print ("  <-- found charter input");
    charterRedeemer : Data  = mustFindInputRedeemer(ctx, charterInput);
    // print("defaultMinter @A");

    charterRedeemer.switch{
        (index: Int, _fields: []Data) => {
            /* avoids unused-variable warning: */ _fields == _fields && 

            if (index == charterRedeemerIndex) { 
                // ok, good charter-redeemer as expected; print("ok here");
                true 
            } else {  
                error("wrong charter Activity for adding spend invariant; expected redeemer #"+ 
                    charterRedeemerIndex.show()+
                     ", got "+index.show()
                )
            }
        },
        _ => error("incontheeivable!")
    } &&
    validateUutMinting(
        ctx: ctx, 
        mph: mph,
        seedTxId: seedTxId, 
        seedIdx: seedIdx, 
        purposes: []String{purpose}, 
        mkTokenName: mkUutTnFactory(seedTxId, seedIdx),
        otherMintedValue: otherMintedValue,
        needsMintDelegateApproval: needsMintDelegateApproval,
        extraMintDelegateRedeemerCheck: extraMintDelegateRedeemerCheck
    ) && if (/* more debug info? */ true) {
        print ("  -- CMH: mint UUT "+purpose+" w/ charter redeemer #"+charterRedeemerIndex.show());
        true
    } else { true } 
}

enum MinterActivity { 
    mintingCharter
     {
        owner: Address
        // we don't have a responsiblity to enforce delivery to the right location
        // govAuthority: RelativeDelegateLink   // not needed 
    }
    mintWithDelegateAuthorizing // delegate is handling all mints

    addingMintInvariant {
        seedTxn: TxId
        seedIndex: Int
    }

    addingSpendInvariant {
        seedTxn: TxId
        seedIndex: Int
    }

    ForcingNewMintDelegate {
        seedTxn: TxId
        seedIndex: Int
    }

    CreatingNewSpendDelegate {
        seedTxn: TxId
        seedIndex: Int
        replacingUut: Option[ByteArray]
    }

    mintingUuts {
        seedTxn: TxId
        seedIndex: Int
        purposes: []String
    }

    //??? have the charter know about the UUT purposes, 
    // ... so we can limit the mint/burns to match the known list??
    burningUuts {
        tns: []String
    }

    func tvForPurpose(self, ctx: ScriptContext, purpose: String) -> Value {
        mph : MintingPolicyHash = ctx.get_current_minting_policy_hash();
        
        mkTv(mph, self.uutTnFactory()(purpose))
    }

    func uutTnFactory(self) -> (String) -> String {
        self.switch{
            mintingUuts{MUseedTxn, MUseedIndex, _} => {
                mkUutTnFactory(MUseedTxn, MUseedIndex)
            },
            // mintingCharter => {
            //     mkUutTnFactory(seedTxn, seedIndex)
            // },
            _ => error("uutTnFactory: not mintingUuts!")
        } 
    }
}
