

module CapoMintHelpers
import {
    mustFindInputRedeemer,
    mkTv,
    TODO,
    REQT,
    tvCharter
} from StellarHeliosHelpers

import {tx, get_current_input} from ScriptContext

import {
    getTxCharterDatum,
    CapoCtx,
    mkCapoCtx,
    DelegateInput,
    CapoDatum, 
    CapoActivity
} from CapoHelpers


import {
    RelativeDelegateLink,
    AbstractDelegateActivitiesEnum,
    DelegateLifecycleActivity
} from CapoDelegateHelpers

func hasSeedUtxo(tx: Tx, seedUtxo: TxOutputId
    // , reason: String
) -> Bool {
    if (!tx.inputs.any( (input: TxInput) -> Bool {
        input.output_id == seedUtxo
    })) {
        print(" - expected seedUtxo: ");
        print(seedUtxo.show());
        print("\n");
        // + "\n"+seedUtxo.tx_id.show() + " : " +seedUtxo.index.show()
        assert(false, "missing expected seed input for minting")
        // +reason 
    };
    print( "  -- has seed -> ok\n");
    true
}

func requiresDelegateAuthorizingMint(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash, 
    extraMintDelegateRedeemerCheck: Bool = true
) -> Bool {
    authzVal : Value = Value::new(AssetClass::new(mph, delegateLink.uutName.encode_utf8()), 1);
    print("finding input dgTkn: ");
    print( delegateLink.uutName);
    print("\n");

    targetId: TxOutputId = tx.inputs.find_safe((i: TxInput) -> {
        // print("   ?  in "+i.value.show());
        i.value.contains(authzVal) // find my authority token
    }).switch{
        Some{x} => x.output_id,
        None => error("missing dgTkn "+delegateLink.uutName)
    };
    print ("    -- found dgTkn^");
    spendsAuthorityUut : ScriptPurpose = tx.redeemers.find_key( 
        (purpose : ScriptPurpose) -> { purpose.switch{ 
            sp: Spending => {
                // print ("oid: " + sp.output_id.show());
                sp.output_id == targetId
            }, 
            _ => false 
        } }
    );

    // r : Data = tx.redeemers.get(  // index redeemers by...
    //     ScriptPurpose::new_spending(  // [spending, plus ...
    //     );
        //!!! Todo replace this with a return of Option[delegate-redeemer}?
    err : String = "dgTkn "+delegateLink.uutName+" not being spent as expected"; // "not spent with an authorizing activity!")
    maybeCheckedMintDelegateAuthority : Bool = tx.redeemers.get_safe(
        spendsAuthorityUut
    ).switch {
        None => {
            error(err)
        },
        Some{x} => x.switch {
            ConstrData{index, fields} => {
                /* avoids unused-variable warning: */ fields == fields && 
                if (!extraMintDelegateRedeemerCheck) {
                    print("  -- ok, dgTkn spent\n");
                    print("  ---- skip redeemer check\n");
                    true
                } else { 
                    if (0 == index) {
                        dgtActivity : DelegateLifecycleActivity = DelegateLifecycleActivity::from_data(fields.head);
                        dgtActivity.switch {
                            ReplacingMe => {
                                print("  -- ok, dgTkn spent\n");
                                true
                            },
                            Retiring => error("DLA::Retiring can't mint!"),
                            ValidatingSettings => error("DLA::ValidatingSettings can't mint!")
                        }
                    } else { true }
                }
            },
            _ => {
                error(err)
            }
        }
    };
    delegateDidAuthorize = true; // otherwise, we'd have failed above.

    // NOTE: DOESN'T CHECK that the AUTHORIZING DELEGATE is returned anywhere specific.
    //    - it's not generally a minting responsibility (however, as an exception the bootstrap charter event DOES 
    //      actually check for valid delegate outputs).  All other cases should have the correct
    //      delegate outputs checked (e.g. in the Capo's CharterDatum spend checker).
    // maybeCheckDelegateOutput : Bool = if (!checkDelegateOutput) {
    //     print("  -- skipping check for expected delegate output ");
    //     true
    // } else {
    //     delegateLink.hasValidOutput(mph)        
    // };
    delegateDidAuthorize && maybeCheckedMintDelegateAuthority
}

func requiresMintDelegateApproval(
    mph: MintingPolicyHash
) -> Bool {
    cctx : CapoCtx = mkCapoCtx(mph).withCharterRef();
    print("Minter needs mintDgt + mint activity\n");
    REQT("EXPECTS the application-specific mintDelegate to explicitly check and approve the full minted value");
    
    // print ("      ❇️  "+ 
    //     tx.minted.get_policy(mph).to_list(
    //         (b : ByteArray, i: Int) -> String { 
    //             i.show() + "x " + b.decode_utf8()
    //         }
    //     ).join(" + ") 
    // + "\n");

    print("    -- ^ e.g. assert(tx.minted.get_policy(mph) == expectedMintedValue);\n");
    print("    ---- (if it's only responsible for one minting policy)\n");
    // if (true) {
        // todo: enforces minting invariants.
        TODO("must enforce minting invariants");
    // }; 

    mintDgtInput : DelegateInput = cctx.requiresMintDelegateInput();
    mintDgtActivity : AbstractDelegateActivitiesEnum = mintDgtInput.genericDelegateActivity();


    // TODO restore this: mintDgtInput.requiresValidOutput() && 
    mintDgtActivity.switch {
        CapoLifecycleActivities{CLA} => CLA.switch {
            CreatingDelegate => {
                print("  -- minter wants mintDgt + CapoLifecycle (delegate-creation)\n");

                mintDgtInput.requiresValidOutput() && 
                true
            }
            // _ => error("no")// ---- left as a compile-time error if any further variants are added 
        },
        SpendingActivities => error("DelegateInput::SpendingActivity can't mint!"),
        DelegateLifecycleActivities{DLA} => {
            DLA.switch {
                ReplacingMe => {
                    TODO( "relay delegate installation sequence" 
                        // "the new delegate should be minted under CapoLifecycleActivities::CreatingDelegate, then installed \n  ...without the minter's involvement, using its DelegateLifecycle::Installing activity"
                    );
                    print("  -- TEMPORARY: the mint delegate is being replaced\n");
                    true
                },
                Retiring => error("DLA::Retiring can't mint!"),
                ValidatingSettings => error("DLA::ValidatingSettings can't mint!")
            }
        },
        MintingActivities => {
            print("  -- app-specific minting; trust mintDgt\n");
            mintDgtInput.requiresValidOutput() && 
                true
        },
        BurningActivities => {
            print("  -- app-specific burning; trust mintDgt");
            mintDgtInput.requiresValidOutput() && 
                true
        },
        CreatingDelegatedData => {
            print("  -- mint for dgData; trust mintDgt");            
            mintDgtInput.requiresValidOutput() && 
                true
        },
        DeletingDelegatedData => {
            print("  -- burn for dgData; trust mintDgt");
            mintDgtInput.requiresValidOutput() && 
                true
        },
        UpdatingDelegatedData => error("invalid mint-delegate activity for minting; UpdatingDelegatedDatum can't mint"),
        MultipleDelegateActivities{ma} => {
            // assert(false && ma.length > 0, "empty MultipleDelegateActivities");
            mintDgtInput.requiresValidOutput()
            && ma.map(AbstractDelegateActivitiesEnum::from_data). all(
                (mintDgtActivity: AbstractDelegateActivitiesEnum) -> Bool {
                    mintDgtActivity.switch {
                        CreatingDelegatedData => true, // short version of recursing the full check
                        DeletingDelegatedData => true, // short version of recursing the full check
                        MintingActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested MintingActivities invalid"
                        ),
                        BurningActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested BurningActivities invalid"
                        ),
                        MultipleDelegateActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested MultipleDelegateActivities invalid"
                        ),
                        UpdatingDelegatedData => error(
                            "mintDgt: MultipleDelegateActivities: nested UpdatingDelegatedData invalid"
                        ),
                        SpendingActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested SpendingActivities invalid"
                        ),
                        CapoLifecycleActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested CapoLifecycleActivities invalid"
                        ),
                        DelegateLifecycleActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested DelegateLifecycleActivities invalid"
                        )
                    }
                }
            )
        }
    }

    // CapoDatum::CharterToken {
    //     /*spendDgt*/ _,  
    //     /* spendInvariants */ _,
    //     /* settings */ _,
    //     /* namedDelegates */ _,
    //     mintDgt, 
    //     /* mintInvariants */ _, 
    //     /* govAuthority */ _
    // } = getRefCharterDatum(mph);



    // requiresDelegateAuthorizingMint(
    //     delegateLink: mintDgt, 
    //     mph: mph,
    // )
}

//! pre-computes the hash-based suffix for a token name, returning
//  a function that cheaply makes Uut names with any given purpose, 
// given the initial seed-txn details
func mkUutTnFactory(
    seed: TxOutputId
) -> (String) -> String {

    seedTxId : TxId = seed.tx_id;
    seedIdx : Int = seed.index;


    idxBytes : ByteArray = seedIdx.serialize();
    // assert(idxBytes.length == 1, "surprise!");

    //! yuck: un-CBOR...
    rawTxId : ByteArray = seedTxId.serialize().slice(5,37);

    txoInfo : ByteArray = if (idxBytes.length > 9) { 
        // allows 9 bytes to ensure we can support 
        // the largest possible cbor encoding of txo-index integers, 
        // even though we only expect integers < 256 currently
        assert(false, 
            //"expected cbor(txo index) to be at most 9 bytes, got cbor( index=
            //  + seedIdx.show() + " ).hex = " + idxBytes.show()
            "cbor(txoId) len > 9 !!"  
        );
        idxBytes // never used
    } else {
       ( rawTxId + "@".encode_utf8() )+ idxBytes
    };
    // assert(txoId.length == 34, "txId + @ + int should be length 34");
    // print( "******** txoId " + txoId.show());

    miniHash : ByteArray = txoInfo.blake2b().slice(0,6);
    // assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    mhs: String = miniHash.show();

    // returns a function computing a lightweight prefix + miniHash
    (p: String) -> String {
        p + "-" + mhs
    }
}

func tnCip68nft222(tn : String) -> ByteArray{
    #000de140 + tn.encode_utf8()
}

func tnCip68ref100(tn : String) -> ByteArray {
    #000643b0 + tn.encode_utf8()
}

// checks all of the following:
//  - there's an approving delegate (or we're bootstrapping)
//  - the mint includes the seed UTXO
//  - the mint matches the UUTs indicated by the list of purposes
func validateUutMinting(
    mph: MintingPolicyHash,
    seed: TxOutputId,
    purposes: []String,     
    mkTokenName: (String) -> String = mkUutTnFactory(seed),
    bootstrapCharter:Value = Value::ZERO,
    otherMintedValue: Value = Value::ZERO,
    needsMintDelegateApproval: Bool = true,
    extraMintDelegateRedeemerCheck: Bool = true
) -> Bool {
    isBootstrapping : Bool = !( bootstrapCharter.is_zero() );
    delegateApproval : Bool = if ( isBootstrapping ) { 
        true 
    } else {
        // not bootstrapping; must honor the mintDelegate's authority
        CapoDatum::CharterToken {
            _spendDgt,
            _spendInvariants,
            // _settings,
            _namedDelegates,
            mintDgt, 
            _mintInvariants, 
            _govAuthority
            /* _typeInfo */ 
        } = getTxCharterDatum(mph);

        if (needsMintDelegateApproval) {
            //!!! todo: add explicit activity details in authorization
                                    //!todo change this one
            requiresDelegateAuthorizingMint(
                delegateLink: mintDgt, 
                mph: mph, 
                extraMintDelegateRedeemerCheck: extraMintDelegateRedeemerCheck
            )
        } else {
            true
        }
    };


    valueMinted: Value = tx.minted;

    // idxBytes : ByteArray = seedIdx.bound_max(255).serialize();
    // // assert(idxBytes.length == 1, "surprise!");

    // //! yuck: un-CBOR...
    // rawTxId : ByteArray = seedTxId.serialize().slice(5,37);

    // txoId : ByteArray = (rawTxId + "@".encode_utf8() + idxBytes);
    // assert(txoId.length == 34, "txId + @ + int should be length 34");
    // // print( "******** txoId " + txoId.show());

    // miniHash : ByteArray = txoId.blake2b().slice(0,6);
    // // assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    // tokenName1 = purpose + "." + miniHash.show();

    // print(" purposes: " + purposes.join(", "));
    expectedValue : Value = bootstrapCharter + otherMintedValue + Value::sum(
        purposes.sort((a:String, b:String) -> Bool { a != b }).map(
            (purpose: String) -> Value {
                // print("purpose: " + purpose);
                mkTv(mph, mkTokenName(purpose))
            }
        )
    );
    if (! valueMinted.contains_policy(mph) ) {
        print( "  -- no mint from our policy at (mph, valueMinted): ( ");
        print( mph.show() );
        print(valueMinted.show() );
        print(")\n");
        error("validateUutMinting(): no mint")
    } else {
        assert(true, "no")
        // print("  -- minted: " + valueMinted.get_policy(mph).show());
    };

    print("\n  -- uut-minting seed: " + seed.tx_id.show() + "🔹#"+seed.index.show() + "\n");

    expectedValue.get_policy(mph).for_each( (b : ByteArray, i: Int) -> {
        print( "    ℹ️ 🐞 expected: "+ i.show() + "x " + b.decode_utf8() + "\n" )
    });

    actualMint : Map[ByteArray]Int = valueMinted.get_policy(mph);
    // expectedMint : Map[ByteArray]Int = expectedValue.get_policy(mph);
    if (true) {
        actualMint.for_each( (b : ByteArray, i: Int) -> {
            print( "    ℹ️ 🐞   actual: " + i.show() + "x " + b.decode_utf8() + "\n" )
        });
        print(Value::from_map(valueMinted.to_map().filter( (b:MintingPolicyHash, _ /* Map[ByteArray]Int */ ) -> Bool {
            b != mph
        })).show());
        print("^ other policy values minted \n")
        
    } else {
        assert(true, "never")
    };

    temp : []ByteArray = actualMint.fold( (l: []ByteArray, b : ByteArray, i: Int) -> {
        l.find_safe((x : ByteArray) -> Bool { x == b }).switch{
            None => l.prepend(b),
            Some /*{x}*/ => error("UUT duplicate purpose "
                // +  x.decode_utf8()
            )
        }
    }, []ByteArray{});
    assert(true || (temp == temp), "prevent unused var");

    expectationsMet : Bool = valueMinted  == expectedValue;

    assert(expectationsMet, "mismatch in UUT mint"
        // +";\n   ... expected "+ expectedValue.show()+
        // "   ... actual "+ valueMinted.show()+
        // "   ... diff = \n" + (expectedValue - valueMinted).show()
    );
    assert(hasSeedUtxo(tx, seed), "no seed"); //, "UUT "+purposes.join("+")
    print(" ✅ validateUutMinting:  ok!\n");

    delegateApproval && expectationsMet     
}

func mintsUutForCharterUsingRedeemerIndex(
    mph: MintingPolicyHash,
    purpose: String,
    seed: TxOutputId,
    charterRedeemerIndex: Int,
    otherMintedValue: Value = Value::new(AssetClass::ADA, 0),
    needsMintDelegateApproval: Bool = true,
    extraMintDelegateRedeemerCheck: Bool = true
) -> Bool {
            // only has to check that a) it's minting all-and-only the expected uut,
            // and b) the contract charter is BEING SPENT WITH THE ACTIVITY at the indicated index.
            // ------> The charter-spend policy for that activity checks all the other necessaries
            //     given that activity.

            // NOT needed; the charter-spend policy ensures the expected 
            //   ... delegate output is created when adding a spend invariant.
            // hasRightDestination : Bool = output.value == value_minted &&
            //     output.address == charterUtxo.address;

    chVal : Value = tvCharter(mph);
    REQT("ensures granted authority, implied by requiring the charter to be spent with the indicated minting activity");
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };
    print("  --- finding required charter input\n");
    charterInput : TxInput = tx.inputs.find(hasCharter);
    print ("  <-- found charter input\n");
    charterRedeemer : Data  = mustFindInputRedeemer(charterInput);
    // print("defaultMinter @A");

    charterRedeemer.switch{
        ConstrData{index, _fields} => {
//            /* avoids unused-variable warning: */ _fields == _fields && 

            if (index == charterRedeemerIndex) { 
                // ok, good charter-redeemer as expected; print("ok here");
                // the charter update itself will check that there's a valid delegate output for the new delegate
                true 
            } else {  
                error("wrong charter Activity for adding spend invariant; expected redeemer #"+ 
                    charterRedeemerIndex.show()+
                     ", got "+index.show()
                )
            }
        },
        _ => error("incontheeivable!")
    } &&
    validateUutMinting(
        mph: mph,
        seed: seed,
        purposes: []String{purpose}, 
        mkTokenName: mkUutTnFactory(seed),
        otherMintedValue: otherMintedValue,
        needsMintDelegateApproval: needsMintDelegateApproval,
        extraMintDelegateRedeemerCheck: extraMintDelegateRedeemerCheck
    ) && if (/* more debug info? */ true) {
        print ("  -- CMH: mint UUT ");
        print(purpose);
        print(" w/ charter redeemer #");
        print(charterRedeemerIndex.show());
        print("\n");
        true
    } else { true } 
}

enum MinterActivity { 
    mintingCharter //0
     {
        owner: Address
        // we don't have a responsiblity to enforce delivery to the right location
        // govAuthority: RelativeDelegateLink   // not needed 
    }
    mintWithDelegateAuthorizing // 1 - delegate is handling all mints

    addingMintInvariant { //2 
        seed: TxOutputId
    }

    addingSpendInvariant { //3
        seed: TxOutputId
    }

    ForcingNewMintDelegate { //4
        seed: TxOutputId
    }

    CreatingNewSpendDelegate { //5
        seed: TxOutputId
        replacingUut: Option[ByteArray]
    }

}

