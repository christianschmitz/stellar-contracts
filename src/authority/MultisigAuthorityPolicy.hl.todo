spending MultiSigAuthority

const rev : Int = 1
const instance : ByteArray = #67656e6572616c

func preventCharterChange(ctx: ScriptContext, datum: Datum) -> Bool {
    tx: Tx = ctx.tx;

    charterOutput : TxOutput = getCharterOutput(tx);

    cvh : ValidatorHash = ctx.get_current_validator_hash();
    myself : SpendingCredential = SpendingCredential::new_validator(cvh);
    if (charterOutput.address.credential != myself) {
        error("charter token must be returned to the contract")
        // actual : String = charterOutput.address.credential.switch{
        //     PubKey{pkh} => "pkh:ðŸ”‘#" + pkh.show(),
        //     Validator{vh} => "val:ðŸ“œ#:" + vh.show()
        // };
        // error(
        //     "charter token must be returned to the contract " + cvh.show() +
        //     "... but was sent to " +actual
        // )
    };

    Datum::CharterData{trustees, minSigs} = datum;
    Datum::CharterData{newTrustees, newMinSigs} = Datum::from_data( 
        charterOutput.datum.inline
    );
    if ( !(
        newTrustees == trustees &&
        newMinSigs == minSigs
    )) { 
        error("invalid update to charter settings") 
    };

    true
}

func requiresValidMinSigs(datum: Datum) -> Bool {
    Datum::CharterData{trustees, minSigs} = datum;

    assert(
        minSigs <= trustees.length,
        "minSigs can't be more than the size of the trustee-list"
    );

    true
}

func requiresProofOfNewTrustees(
    ctx: ScriptContext,
    datum: Datum
) -> Bool {
    Datum::CharterData{newTrustees, _} = datum;

    assert(
        newTrustees.all(didSignInCtx(ctx)), 
        "all the new trustees must sign"
    );

    requiresValidMinSigs(datum)
}

//!!! adapt to use my UUT
func requiresAuthorization(ctx: ScriptContext, datum: Datum) -> Bool {
    Datum::CharterData{trustees, minSigs} = datum;

    foundSigs: Int = trustees.fold[Int](
        (count: Int, a: Address) -> Int {            
            count + if (didSign(ctx, a)) {1} else {0}
        }, 0
    );
    assert(foundSigs >= minSigs, 
        "not enough trustees have signed the tx" 
        // "not enough trustees ("+foundSigs.show()+ " of " + minSigs.show() + " needed) have signed the tx" 
    );

    true
}
func main(_,_,_) -> Bool {
    true
}
// for updating trustee list:
// requiresProofOfNewTrustees(ctx, newDatum)
