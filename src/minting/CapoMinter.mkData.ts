// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in CapoMinter (src/minting/CapoMinter.hl)

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";

import {
    MinterActivity$CreatingNewSpendDelegate,
    MinterActivity
} from "./CapoMinter.hlbundle.js"
import { someDataMaker } from "../helios/dataBridge/someDataMaker.js"
import { tagOnly } from "../helios/HeliosScriptBundle.js"
import {hasSeed} from "../StellarContract.js"

export default class mkDatumBridgeCapoMinter extends someDataMaker {
    
}

class MinterActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { mintingCharter: /*minEnumVariant*/ Address /*singleVariantField*/  }
        | { mintWithDelegateAuthorizing: /*minEnumVariant*/ tagOnly }
        | { addingMintInvariant: /*minEnumVariant*/ TxOutputId /*singleVariantField*/  }
        | { addingSpendInvariant: /*minEnumVariant*/ TxOutputId /*singleVariantField*/  }
        | { ForcingNewMintDelegate: /*minEnumVariant*/ TxOutputId /*singleVariantField*/  }
        | { CreatingNewSpendDelegate: /*minEnumVariant*/ MinterActivity$CreatingNewSpendDelegate }, 
       
        | { mintingCharter: /*minEnumVariant*/ Address | string /*singleVariantField*/  }
        | { mintWithDelegateAuthorizing: /*minEnumVariant*/ tagOnly }
        | { addingMintInvariant: /*minEnumVariant*/ TxOutputId | string /*singleVariantField*/  }
        | { addingSpendInvariant: /*minEnumVariant*/ TxOutputId | string /*singleVariantField*/  }
        | { ForcingNewMintDelegate: /*minEnumVariant*/ TxOutputId | string /*singleVariantField*/  }
        | { CreatingNewSpendDelegate: /*minEnumVariant*/ MinterActivity$CreatingNewSpendDelegateLike }
   >(MinterActivitySchema, { isMainnet: true });
    mintingCharter(
        value: Address | string
    ) {
        return this.enumCast.toUplcData({ 
           mintingCharter: { owner: value } 
        });
    }

    get mintWithDelegateAuthorizing() {
        return this.enumCast.toUplcData({ mintWithDelegateAuthorizing: {} });
    }

    addingMintInvariant(value: hasSeed | TxOutputId | string) {
       const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        return this.enumCast.toUplcData({ 
           addingMintInvariant: { seed: seedTxOutputId } 
        });
    }

    addingSpendInvariant(value: hasSeed | TxOutputId | string) {
       const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        return this.enumCast.toUplcData({ 
           addingSpendInvariant: { seed: seedTxOutputId } 
        });
    }

    ForcingNewMintDelegate(value: hasSeed | TxOutputId | string) {
       const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        return this.enumCast.toUplcData({ 
           ForcingNewMintDelegate: { seed: seedTxOutputId } 
        });
    }

    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingNewSpendDelegate(value: hasSeed, fields: { 
        replacingUut: Option<number[]> 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingNewSpendDelegate(fields: {
        seed: TxOutputId | string,
        replacingUut: Option<number[]> 
    } ) : UplcData
    CreatingNewSpendDelegate(
        seedOrUf: hasSeed | { 
            seed: TxOutputId | string,
            replacingUut: Option<number[]>
        }, 
        filteredFields?: { 
            replacingUut: Option<number[]>
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
               CreatingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf; 
            return this.enumCast.toUplcData({
                CreatingNewSpendDelegate: fields 
            });
        }
    }

}


