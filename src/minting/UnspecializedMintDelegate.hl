module specializedMintDelegate

//! provides a basic version, not actually specialized,
// of the "specializedMintDelegate" interface, which simply
// exports a DelegateDatum enum and DelegateActivities (redeemer enum).  
//! these specializations MAY include additional enum variants, and 
//  ... they MUST include the same enum variants found in this
//  ... unspecialized version.  
//  If you're specializing and you get a Helios compiler error,
// ... these are the first things you should check!
//! Your specialization MAY include any 
// ... additional functions, imports or methods

import {
     DelegationDetail,
     unmodifiedDelegation
} from CapoDelegateHelpers

enum MintDelegateDatum {
    IsDelegation {
        dd: DelegationDetail
        // provides structural space for (non-string) configuration data.
        // the string case is degenerate (expect empty string always)
        CustomConfig: String
    }
    
    func validateCDConfig(self, updated: MintDelegateDatum::IsDelegation) -> Bool {
        self.switch {
            ddd: IsDelegation => {
                (ddd.CustomConfig == "") &&
                (updated == self)
            },
            _ => error("unreachable")
        }
    }
}

enum MintDelegateActivity {
    // Authorizing  - obsolete
    Reassigning
    Retiring
    Modifying
    _reserved3
    _reserved4
    _reserved5
    _reserved6
    _reserved7
    _reserved8
    _reserved9
    // note: all activities at index > 9 are reserved for application-specific use-cases

    // NOTE: prefer application-specific use-cases with particular minting validations,
    // ... rather than generic mintingUuts
    mintingUuts {
        seedTxn: TxId
        seedIndex: Int
        purposes: []String
    }

    //prefer application-specific use-cases with particular minting validations,
    // ... rather than generic mintingUuts
    //xxx //??? have the charter know about the UUT purposes, 
    //xxx // ... so we can limit the mint/burns to match the known list??
    //xxx burningUuts {
    // xxx    tns: []String
    //xxx }

    func usesGenericUutMinting(self) -> Bool {
        self == self
        && true
    }
    //! used only for validating IsDelegation datum, that is,
    //   ... to approve minting requests or any customize spending modes 
    //   ... of that datum.  In this unspecialized version, 
    //   ... the "Modifying" activity is an unsupported stand-in for that use-case, always rejecting.
    //! in a real-life customization case, additional custom IsDelegation config can be
    //   ... enforced in "Modifying" event the second field of IsDelegation (the "CDConfig" stand-in here)
    //   ... the BasicMintDelegate allows for that field's presence, without any assumptions
    //   ... about its type.
    //  Note that the basic mint delegate already
    //   ... enforces the authority UUT being returned to the delegate script,
    //   ... and other basic administrative expectations, so any specialization
    //   ... can focus on higher-level policy considerations.
    func additionalDelegateValidation( self,
        priorMddd: MintDelegateDatum::IsDelegation, 
        ctx: ScriptContext
    ) -> Bool {
        // print("  ----- checking additional delegate validation");
        self.switch {
            // Authorizing => {
            //     unmodifiedDelegation(priorMddd.serialize(), ctx) && 
            //     true
            // },
            Modifying => false,
            _ => true
        } || ctx.tx.serialize() != priorMddd.serialize()
    }

    //! used only for validating non-IsDelegation datum types.
    //   if you have any admininstrative data structures that inform 
    //   your minting policy, these
    func otherDatumValidation( self,
        priorMdd: MintDelegateDatum, 
        ctx: ScriptContext
    ) -> Bool {
        neverTriggered = () -> {  error("never called") };
        self.switch{
            // Authorizing => neverTriggered(),
            Reassigning => neverTriggered(),
            Retiring => neverTriggered(),
            Modifying => neverTriggered(),
            _ => false
        } && (priorMdd.serialize() != ctx.serialize())
    }
}

struct types {
    redeemers: MintDelegateActivity
    datum : MintDelegateDatum
}
