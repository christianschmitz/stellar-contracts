// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import type { UplcData } from "@helios-lang/uplc";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { Cast } from "@helios-lang/contract-utils";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";


import {HeliosScriptBundle, type tagOnly, type EnumTypeMeta, type singleEnumVariantMeta} from "../helios/HeliosScriptBundle.js"
        

export type MinterActivity$CreatingNewSpendDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    replacingUut: Option<number[]>  /*minVariantField*/ 
}

export type MinterActivity$CreatingNewSpendDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    replacingUut: Option<number[]>  /*minVariantField*/ 
}


export type MinterActivityMeta = EnumTypeMeta<
    {module: "CapoMintHelpers", enumName: "MinterActivity"}, {
        mintingCharter: singleEnumVariantMeta<MinterActivityMeta, "mintingCharter",
            "Constr#0", "singletonField", Address /*singleVariantField ; elided extra { owner: Address} structure*/
  , "noSpecialFlags"
        >,
        mintWithDelegateAuthorizing: singleEnumVariantMeta<MinterActivityMeta, "mintWithDelegateAuthorizing",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        addingMintInvariant: singleEnumVariantMeta<MinterActivityMeta, "addingMintInvariant",
            "Constr#2", "singletonField", TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
  , "isSeededActivity"
        >,
        addingSpendInvariant: singleEnumVariantMeta<MinterActivityMeta, "addingSpendInvariant",
            "Constr#3", "singletonField", TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
  , "isSeededActivity"
        >,
        ForcingNewMintDelegate: singleEnumVariantMeta<MinterActivityMeta, "ForcingNewMintDelegate",
            "Constr#4", "singletonField", TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
  , "isSeededActivity"
        >,
        CreatingNewSpendDelegate: singleEnumVariantMeta<MinterActivityMeta, "CreatingNewSpendDelegate",
            "Constr#5", 
            "fields", MinterActivity$CreatingNewSpendDelegate, "isSeededActivity"
        >
    }
>;


/**
 * MinterActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **6 variant(s)** of the MinterActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MinterActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type MinterActivity = 
        | { mintingCharter: /*minEnumVariant*/ Address /*singleVariantField ; elided extra { owner: Address} structure*/
   }
        | { mintWithDelegateAuthorizing: /*minEnumVariant*/ tagOnly }
        | { addingMintInvariant: /*minEnumVariant*/ TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
   }
        | { addingSpendInvariant: /*minEnumVariant*/ TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
   }
        | { ForcingNewMintDelegate: /*minEnumVariant*/ TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
   }
        | { CreatingNewSpendDelegate: /*minEnumVariant*/ MinterActivity$CreatingNewSpendDelegate }

/**
 * MinterActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **6 variant(s)** of the MinterActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MinterActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type MinterActivityLike = 
        | { mintingCharter: /*minEnumVariant*/ Address | string /*singleVariantField ; elided extra { owner: Address | string} structure*/
   }
        | { mintWithDelegateAuthorizing: /*minEnumVariant*/ tagOnly }
        | { addingMintInvariant: /*minEnumVariant*/ TxOutputId | string /*singleVariantField ; elided extra { seed: TxOutputId | string} structure*/
   }
        | { addingSpendInvariant: /*minEnumVariant*/ TxOutputId | string /*singleVariantField ; elided extra { seed: TxOutputId | string} structure*/
   }
        | { ForcingNewMintDelegate: /*minEnumVariant*/ TxOutputId | string /*singleVariantField ; elided extra { seed: TxOutputId | string} structure*/
   }
        | { CreatingNewSpendDelegate: /*minEnumVariant*/ MinterActivity$CreatingNewSpendDelegateLike }

