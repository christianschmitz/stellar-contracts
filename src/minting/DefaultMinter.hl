minting DefaultMinter 

import { 
    hasSeedUtxo, 
    mkUutTnFactory,
    requiresDelegateApproval,
    validateUutMinting, 
    validateUutBurning,
    Activity
} from CapoMintHelpers

import {mkTv} from StellarHeliosHelpers

// import {
//     requiresValidDelegateOutput
// } from CapoDelegateHelpers

//!!!! todo: change to TxOutputId, rolling up these two things:
const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42
const rev : Int = 1

func hasContractSeedUtxo(tx: Tx) -> Bool {
    hasSeedUtxo(tx, seedTxn, seedIndex
        // , "charter"
    )
}

func main(r : Activity, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;
    assert(rev.serialize() == rev.serialize(), "impossible!");

    ok : Bool = r.switch {
        charter: mintingCharter => {       
            charterVal : Value = mkTv(mph, "charter");
            authTnBase : String = "capoGov";
            mintDgtTnBase : String = "mintDgt";
  

            assert(value_minted >= charterVal,
                "charter token not minted");

            hasContractSeedUtxo(tx) &&
            validateUutMinting(
                ctx: ctx, 
                mph: mph,
                seedTxId: seedTxn, 
                seedIdx: seedIndex, 
                purposes: []String{authTnBase, mintDgtTnBase}, 
                mkTokenName: mkUutTnFactory(seedTxn, seedIndex),
                bootstrapCharter: charterVal
            ) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.owner
                )
            })
        },
        mintWithDelegateAuthorizing => {
            requiresDelegateApproval(ctx, mph)
        },

        mintingUuts => { // {sTxId, sIdx, purposes} => {
            error("minter:mintingUuts obsolete; use minter:followingDelegate with delegate:mintingUuts or a more application-specific activity")
            // validateUutMinting(
            //     ctx: ctx, 
            //     seedTxId: sTxId, 
            //     seedIdx: sIdx, 
            //     purposes: purposes,
            //     mkTokenName: r.uutTnFactory()
            // )
        },
        burningUuts => { // {tns} => {
            error("minter:burningUuts obslete; use minter:followingDelegate with delegate:burningUuts or a more application-specific activity")
            // validateUutBurning(
            //     ctx: ctx,
            //     tns: tns
            // ) 
        },
        _ => true
    };

    // print("defaultMinter: minting value: " + value_minted.show());

    ok
}

