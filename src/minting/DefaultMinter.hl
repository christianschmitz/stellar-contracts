minting DefaultMinter 

import { 
    hasSeedUtxo, 
    validateUutMinting
} from CapoMintHelpers

import {mkTv} from StellarHeliosHelpers

import {
    requiresValidDelegateOutput
} from CapoDelegateHelpers

//!!!! todo: change to TxOutputId, rolling up these two things:
const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42

enum Activity { 
    mintingCharter {
        owner: Address

        // we don't have a responsiblity to enforce delivery to the right location
        // govAuthority: RelativeDelegateLink   // not needed 
    }
    mintingUuts {
        //!!!! todo: change to TxOutputId, rolling up these two things:
        seedTxn: TxId
        seedIndex: Int
        purposes: []String
    }
}

func hasContractSeedUtxo(tx: Tx) -> Bool {
    hasSeedUtxo(tx, seedTxn, seedIndex, "charter")
}

func main(r : Activity, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;

    ok : Bool = r.switch {
        charter: mintingCharter => {       
            charterVal : Value = mkTv(mph, "charter");
            authTnBase : String = "capoGov";
            mintDgtTnBase : String = "mintDgt";

            assert(value_minted >= charterVal,
                "charter token not minted");

            hasContractSeedUtxo(tx) &&
            validateUutMinting(ctx:ctx, 
                seedTxId:seedTxn, 
                seedIdx:seedIndex, 
                purposes: []String{authTnBase, mintDgtTnBase}, 
                bootstrapCharter:charterVal
            ) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.owner
                )
            })
        },

        mintingUuts{sTxId, sIdx, purposes} => validateUutMinting(ctx, sTxId, sIdx, purposes),
        _ => true
    };

    print("defaultMinter: minting value: " + value_minted.show());

    ok
}

