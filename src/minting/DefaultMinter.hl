minting DefaultMinter 

import { 
    hasSeedUtxo, 
    mkUutTnFactory,
    validateUutMinting, 
    Activity
} from CapoMintHelpers

import {mkTv} from StellarHeliosHelpers

import {
    requiresValidDelegateOutput
} from CapoDelegateHelpers

//!!!! todo: change to TxOutputId, rolling up these two things:
const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42


func hasContractSeedUtxo(tx: Tx) -> Bool {
    hasSeedUtxo(tx, seedTxn, seedIndex
        // , "charter"
    )
}

func main(r : Activity, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;

    ok : Bool = r.switch {
        charter: mintingCharter => {       
            charterVal : Value = mkTv(mph, "charter");
            authTnBase : String = "capoGov";
            mintDgtTnBase : String = "mintDgt";
  

            assert(value_minted >= charterVal,
                "charter token not minted");

            hasContractSeedUtxo(tx) &&
            validateUutMinting(
                ctx: ctx, 
                seedTxId: seedTxn, 
                seedIdx: seedIndex, 
                purposes: []String{authTnBase, mintDgtTnBase}, 
                mkTokenName: mkUutTnFactory(seedTxn, seedIndex),
                bootstrapCharter: charterVal
            ) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.owner
                )
            })
        },

        mintingUuts{sTxId, sIdx, purposes} => validateUutMinting(
            ctx: ctx, 
            seedTxId: sTxId, 
            seedIdx: sIdx, 
            purposes: purposes,
            mkTokenName: r.uutTnFactory()
        ),
        _ => true
    };

    // print("defaultMinter: minting value: " + value_minted.show());

    ok
}

