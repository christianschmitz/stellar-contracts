// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in CapoMinter (src/minting/CapoMinter.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData, ConstrData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
 import { TxOutputDatum } from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { 
    DataBridge, 
    ContractDataBridge, 
    DataBridgeReaderClass,
    type callWith,
} from "../helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../helios/HeliosScriptBundle.js"
import type { IntersectedEnum } from "../helios/typeUtils.js"
import { StellarCast } from "../helios/dataBridge/StellarCast.js"
import type {hasSeed, isActivity} from "../StellarContract.js"


import type {
    MinterActivity$CreatingNewSpendDelegate, MinterActivity$Ergo$CreatingNewSpendDelegate, MinterActivity$CreatingNewSpendDelegateLike,
    MinterActivity, ErgoMinterActivity, MinterActivityLike
} from "./CapoMinter.typeInfo.js";

export type * as types from "./CapoMinter.typeInfo.js";
import type * as types from "./CapoMinter.typeInfo.js";



//Note about @ts-expect-error drilling through protected accessors: This 
//   allows the interface for the nested accessor to show only the public details,
//   while allowing us to collaborate between these two closely-related classes.
//   Like "friends" in C++.

/**
 * GENERATED data bridge for **CapoMinter** script (defined in class ***CapoMinterBundle***)}
 * main: **src/minting/CapoMinter.hl**, project: **stellar-contracts**
 * @remarks - note that you may override get dataBridgeName() { return "..." } to customize the name of this bridge class
 */
export class CapoMinterDataBridge extends ContractDataBridge {
    static isAbstract = false as const;
    isAbstract = false as const;
datum=null // no datum type defined for this bundle (minter / rewards script)


    /**
     * generates UplcData for the activity type (***MinterActivity***) for the `CapoMinter` script
     */
    activity : MinterActivityHelper= new MinterActivityHelper(this.bundle, {isActivity: true}); // activityAccessor/enum
        MinterActivity: MinterActivityHelper = this.activity;

    reader = new CapoMinterDataBridgeReader(this);

    /**
     * accessors for all the types defined in the `CapoMinter` script
     * @remarks - these accessors are used to generate UplcData for each type
     */
    types = {
      /**
       * generates UplcData for the enum type ***MinterActivity*** for the `CapoMinter` script
       */
        MinterActivity: new MinterActivityHelper(this.bundle),

    }    



}
export default CapoMinterDataBridge;

class CapoMinterDataBridgeReader extends DataBridgeReaderClass {
    constructor(public bridge: CapoMinterDataBridge) {
        super();
    }
    /**
        * reads UplcData *known to fit the **MinterActivity*** enum type,
        * for the CapoMinter script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    MinterActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.MinterActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as ErgoMinterActivity;        
    } /* enumReader helper */


}

/**
 * Helper class for generating UplcData for variants of the ***MinterActivity*** enum type.
 */
export class MinterActivityHelper extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    protected __cast = new StellarCast<
       MinterActivity,
       MinterActivityLike
   >(MinterActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.mintingCharter"***
     */
    mintingCharter(
        owner: Address | string
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           mintingCharter: owner
        }, "CapoMintHelpers::MinterActivity.mintingCharter"); /*singleField enum variant*/
       return uplc;
    }

/**
 * (property getter): UplcData for ***"CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get mintWithDelegateAuthorizing() {
        const uplc = this.mkUplcData({ mintWithDelegateAuthorizing: {} }, 
            "CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing");
        return uplc;
    } /* tagOnly variant accessor */

    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingMintInvariant"***, 
    * given a transaction-context with a ***seed utxo*** and other field details
    * @remarks - to get a transaction context having the seed needed for this argment, 
    * see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.    */
    addingMintInvariant(value: hasSeed | TxOutputId | string) : isActivity {
        const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        const uplc = this.mkUplcData({ 
           addingMintInvariant: seedTxOutputId
        },"CapoMintHelpers::MinterActivity.addingMintInvariant");  /*singleField/seeded enum variant*/
       return uplc;
    }

    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingSpendInvariant"***, 
    * given a transaction-context with a ***seed utxo*** and other field details
    * @remarks - to get a transaction context having the seed needed for this argment, 
    * see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.    */
    addingSpendInvariant(value: hasSeed | TxOutputId | string) : isActivity {
        const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        const uplc = this.mkUplcData({ 
           addingSpendInvariant: seedTxOutputId
        },"CapoMintHelpers::MinterActivity.addingSpendInvariant");  /*singleField/seeded enum variant*/
       return uplc;
    }

    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.forcingNewMintDelegate"***, 
    * given a transaction-context with a ***seed utxo*** and other field details
    * @remarks - to get a transaction context having the seed needed for this argment, 
    * see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.    */
    forcingNewMintDelegate(value: hasSeed | TxOutputId | string) : isActivity {
        const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        const uplc = this.mkUplcData({ 
           forcingNewMintDelegate: seedTxOutputId
        },"CapoMintHelpers::MinterActivity.forcingNewMintDelegate");  /*singleField/seeded enum variant*/
       return uplc;
    }

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    CreatingNewSpendDelegate(value: hasSeed, fields: { 
        replacingUut: Option<number[]> 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate"*** 
     * with raw seed details included in fields.
     */
    CreatingNewSpendDelegate(fields: MinterActivity$CreatingNewSpendDelegateLike | {
            seed: TxOutputId | string,
            replacingUut: Option<number[]>
    } ): isActivity
    CreatingNewSpendDelegate(
        seedOrUf: hasSeed | MinterActivity$CreatingNewSpendDelegateLike, 
        filteredFields?: { 
            replacingUut: Option<number[]>
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as MinterActivity$CreatingNewSpendDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingNewSpendDelegate: fields 
            }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

}/*mkEnumHelperClass*/


export const MinterActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "MinterActivity",
    "id": "__module__CapoMintHelpers__MinterActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoMintHelpers__MinterActivity[]__mintingCharter",
            "name": "mintingCharter",
            "fieldTypes": [
                {
                    "name": "owner",
                    "type": {
                        "kind": "internal",
                        "name": "Address"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoMintHelpers__MinterActivity[]__mintWithDelegateAuthorizing",
            "name": "mintWithDelegateAuthorizing",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoMintHelpers__MinterActivity[]__addingMintInvariant",
            "name": "addingMintInvariant",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoMintHelpers__MinterActivity[]__addingSpendInvariant",
            "name": "addingSpendInvariant",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoMintHelpers__MinterActivity[]__forcingNewMintDelegate",
            "name": "forcingNewMintDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoMintHelpers__MinterActivity[]__CreatingNewSpendDelegate",
            "name": "CreatingNewSpendDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "replacingUut",
                    "type": {
                        "kind": "option",
                        "someType": {
                            "kind": "internal",
                            "name": "ByteArray"
                        }
                    }
                }
            ]
        }
    ]
};
// }
