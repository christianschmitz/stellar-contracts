// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in CapoMinter (src/minting/CapoMinter.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { DataBridge } from "../helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../helios/HeliosScriptBundle.js"
import type {hasSeed, isActivity} from "../StellarContract.js"

// todo: namespacing for all the good stuff here
// namespace CapoMinterDataBridge {

import type {
    MinterActivity$CreatingNewSpendDelegate, MinterActivity$CreatingNewSpendDelegateLike,
    MinterActivity, MinterActivityLike
} from "./CapoMinter.typeInfo.js";

export type * as types from "./CapoMinter.typeInfo.js";
import type * as types from "./CapoMinter.typeInfo.js";



//Note about @ts-expect-error drilling through protected accessors: This 
//   allows the interface for the nested accessor to show only the public details,
//   while allowing us to collaborate between these two closely-related classes.
//   Like "friends" in C++.

/**
 * data bridge for CapoMinter script (defined in CapoMinterBundle)}
 * main: src/minting/CapoMinter.hl, project: stellar-contracts
 * @remarks - note that you may override get dataBridgeName() { return "..." } to customize the name of this bridge class
 */
export class CapoMinterDataBridge extends DataBridge {
    // for datum:


// for activity types:

    __activityCast = new Cast<
        MinterActivity, MinterActivityLike
    >(MinterActivitySchema, { isMainnet: true }); // activityAccessorCast

    /**
     * generates UplcData for the activity type (MinterActivity) for the CapoMinter script
     */
    activity : MinterActivityHelper= new MinterActivityHelper(this.bundle, {isActivity: true}); // activityAccessor/enum
        MinterActivity: MinterActivityHelper = this.activity;


    // include accessors for other enums (other than datum/activity)

    // include accessors for any other structs (other than datum/activity)

    // TODO: include any utility functions defined in the contract
}
export default CapoMinterDataBridge;


/**
 * Helper class for generating UplcData for variants of the MinterActivity enum type.
 */
export class MinterActivityHelper extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       MinterActivity,
       MinterActivityLike
   >(MinterActivitySchema, { isMainnet: true });

    mintingCharter(
        owner: Address | string
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           mintingCharter: { owner: owner } 
        }, "CapoMintHelpers::MinterActivity.mintingCharter"); /*SingleField enum variant*/
       return uplc;
    }

/**
 * (property getter): UplcData for "CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing"
 */
    get mintWithDelegateAuthorizing() {
        const uplc = this.mkUplcData({ mintWithDelegateAuthorizing: {} }, 
            "CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing");
       return uplc;
    } /* tagOnly variant accessor */

    addingMintInvariant(value: hasSeed | TxOutputId | string) : isActivity {
        const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        const uplc = this.mkUplcData({ 
           addingMintInvariant: { seed: seedTxOutputId } 
        },"CapoMintHelpers::MinterActivity.addingMintInvariant");  /*SingleField/seeded enum variant*/
       return uplc;
    }

    addingSpendInvariant(value: hasSeed | TxOutputId | string) : isActivity {
        const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        const uplc = this.mkUplcData({ 
           addingSpendInvariant: { seed: seedTxOutputId } 
        },"CapoMintHelpers::MinterActivity.addingSpendInvariant");  /*SingleField/seeded enum variant*/
       return uplc;
    }

    ForcingNewMintDelegate(value: hasSeed | TxOutputId | string) : isActivity {
        const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        const uplc = this.mkUplcData({ 
           ForcingNewMintDelegate: { seed: seedTxOutputId } 
        },"CapoMintHelpers::MinterActivity.ForcingNewMintDelegate");  /*SingleField/seeded enum variant*/
       return uplc;
    }

    /**
     * generates isActivity/redeemer wrapper with UplcData for "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate", given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingNewSpendDelegate(value: hasSeed, fields: { 
        replacingUut: Option<number[]> 
    } ) : isActivity
    /**
    * generates UplcData for "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate" with raw seed details included in fields.
    */
    CreatingNewSpendDelegate(fields: MinterActivity$CreatingNewSpendDelegateLike | {
            seed: TxOutputId | string,
            replacingUut: Option<number[]>
    } ): isActivity
    CreatingNewSpendDelegate(
        seedOrUf: hasSeed | MinterActivity$CreatingNewSpendDelegateLike, 
        filteredFields?: { 
            replacingUut: Option<number[]>
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as MinterActivity$CreatingNewSpendDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingNewSpendDelegate: fields 
            }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

}


export const MinterActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "MinterActivity",
    "id": "__module__CapoMintHelpers__MinterActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoMintHelpers__MinterActivity[]__mintingCharter",
            "name": "mintingCharter",
            "fieldTypes": [
                {
                    "name": "owner",
                    "type": {
                        "kind": "internal",
                        "name": "Address"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoMintHelpers__MinterActivity[]__mintWithDelegateAuthorizing",
            "name": "mintWithDelegateAuthorizing",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoMintHelpers__MinterActivity[]__addingMintInvariant",
            "name": "addingMintInvariant",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoMintHelpers__MinterActivity[]__addingSpendInvariant",
            "name": "addingSpendInvariant",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoMintHelpers__MinterActivity[]__ForcingNewMintDelegate",
            "name": "ForcingNewMintDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoMintHelpers__MinterActivity[]__CreatingNewSpendDelegate",
            "name": "CreatingNewSpendDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "replacingUut",
                    "type": {
                        "kind": "option",
                        "someType": {
                            "kind": "internal",
                            "name": "ByteArray"
                        }
                    }
                }
            ]
        }
    ]
};
// }
