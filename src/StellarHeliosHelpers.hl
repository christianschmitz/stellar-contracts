module StellarHeliosHelpers

func didSign(ctx : ScriptContext, a: Address) -> Bool {
    tx : Tx = ctx.tx;

    pkh : PubKeyHash = a.credential.switch{
        PubKey{h} => h,
        _ => error("trustee can't be a contract")
    };
    // print("checking if trustee signed: " + pkh.show());

    tx.is_signed_by(pkh)
}

func didSignInCtx(ctx: ScriptContext) -> (a: Address) -> Bool {
    (a : Address) -> Bool {
        didSign(ctx, a)
    }
}

//! represents the indicated token name as a Value
func mkTv(mph: MintingPolicyHash, tn: String, count : Int = 1) -> Value {
    Value::new(
        AssetClass::new(mph, tn.encode_utf8()), 
        count
    )
}

//! returns the charter-token from our minter, as a Value
func tvCharter(mph: MintingPolicyHash)  -> Value {
    mkTv(mph, "charter")
}

func returnsValue(value : Value, ctx : ScriptContext, input: TxInput) -> Bool {
    input.value.contains(value) &&
    ctx.tx.outputs.any( (txo : TxOutput) -> Bool {
        txo.address == input.address &&
        txo.value.contains(value)
    } )
}

func returnsValueToScript(value : Value, ctx : ScriptContext) -> Bool {
    input : TxInput = ctx.get_current_input();
    input.value.contains(value) &&
    ctx.tx.outputs.any( (txo : TxOutput) -> Bool {
        txo.address == input.address &&
        txo.value.contains(value)
    } )
}


func getOutputWithValue(ctx: ScriptContext, v : Value) -> TxOutput {
    ctx.tx.outputs.find((txo: TxOutput) -> { txo.value >= v })
}

func getSingleAssetValue(input: TxInput) -> Value{
    inputMap : Map[MintingPolicyHash]Map[ByteArray]Int = input.value.get_assets().to_map();
    assert( inputMap.length == 1, "getSingleAssetValue needs single-asset input");

    inputTokens : Map[ByteArray]Int = inputMap.head_value;
    assert(inputTokens.length == 1, "getSingleAssetValue needs single-token input");

    input.value.get_assets()
}

func outputDatum[T](newTxo : TxOutput) -> T {
    T::from_data(newTxo.datum.get_inline_data())
}

func getOutputForInput(ctx: ScriptContext, input: TxInput) -> TxOutput {
    inputValue : Value = getSingleAssetValue(input);

    getOutputWithValue(ctx, inputValue)
}