// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
/// <reference types="@helios-lang/uplc" />
/// <reference types="@helios-lang/ledger" />
/// <reference types="@helios-lang/contract-utils" />
/// <reference types="../delegation/CapoDelegateBundle.ts">;  // development
/// <reference types="./CapoHeliosBundle.ts">
/// <reference types="./HeliosScriptBundle.ts">
/// <reference types="@donecollectively/stellar-contracts" /> // production



/** ------------ BEGIN hlbundle imports --------- */
/** if you want to maintain these in a .ts file, you can use the following imports there */
// import type { UplcData } from "@helios-lang/uplc";
// import type {
//     Address,
//     AssetClass,
//     DatumHash,
//     MintingPolicyHash,
//     PubKey,
//     PubKeyHash,
//     ScriptHash,
//     SpendingCredential,
//     StakingCredential,
//     StakingHash,
//     StakingValidatorHash,
//     TimeRange,
//     TxId,
//     TxInput,
//     TxOutput,
//     TxOutputId,
//     TxOutputDatum,
//     ValidatorHash,
//     Value,
// } from "@helios-lang/ledger";
// import type { Cast } from "@helios-lang/contract-utils";
// import type { 
//     IntLike,
//     ByteArrayLike,
//  } from "@helios-lang/codec-utils";

// import type {CapoHeliosBundle} from "@donecollectively/stellar-contracts"
// import type {CapoDelegateBundle} from "@donecollectively/stellar-contracts"
// import type {
//     HeliosScriptBundle,
//     mkEnum,
//     type EnumType,
//     type singleEnumVariant,
// } from "@donecollectively/stellar-contracts"

/** ------------ BEGIN hlbundle types ------------ */
export type DelegationDetail = {
    capoAddr: Address
    mph: MintingPolicyHash
    tn: number[]
};

export type DelegationDetailLike = {
    capoAddr: Address | string
    mph: MintingPolicyHash | string | number[]
    tn: number[]
};


export type DelegateDatum = EnumType<{module: "uutMintingDelegate", enumName: "DelegateDatum"}, {
        IsDelegation: singleEnumVariant<DelegateDatum, "IsDelegation",
            "Constr#0", "singletonField", 
            DelegationDetail, "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariant<DelegateDatum, "ScriptReference",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >
    }
>;

export type DelegateDatumLike = EnumType<{module: "uutMintingDelegate", enumName: "DelegateDatum"}, {
        IsDelegation: singleEnumVariant<DelegateDatum, "IsDelegation",
            "Constr#0", "singletonField", 
            DelegationDetailLike, "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariant<DelegateDatum, "ScriptReference",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >
    }
>;


export type CapoLifecycleActivity = EnumType<{module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariant<CapoLifecycleActivity, "CreatingDelegate",
            "Constr#0", 
            "fields", {
                seed: TxOutputId,
                purpose: string
            }, "isSeededActivity"
        >
    }
>;

export type CapoLifecycleActivityLike = EnumType<{module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariant<CapoLifecycleActivity, "CreatingDelegate",
            "Constr#0", 
            "fields", {
                seed: TxOutputId | string,
                purpose: string
            }, "isSeededActivity"
        >
    }
>;


export type DelegateLifecycleActivity = EnumType<{module: "CapoDelegateHelpers", enumName: "DelegateLifecycleActivity"}, {
        ReplacingMe: singleEnumVariant<DelegateLifecycleActivity, "ReplacingMe",
            "Constr#0", 
            "fields", {
                seed: TxOutputId,
                purpose: string
            }, "isSeededActivity"
        >,
        Retiring: singleEnumVariant<DelegateLifecycleActivity, "Retiring",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >,
        ValidatingSettings: singleEnumVariant<DelegateLifecycleActivity, "ValidatingSettings",
            "Constr#2", "tagOnly", never, "noSpecialFlags"
        >
    }
>;

export type DelegateLifecycleActivityLike = EnumType<{module: "CapoDelegateHelpers", enumName: "DelegateLifecycleActivity"}, {
        ReplacingMe: singleEnumVariant<DelegateLifecycleActivity, "ReplacingMe",
            "Constr#0", 
            "fields", {
                seed: TxOutputId | string,
                purpose: string
            }, "isSeededActivity"
        >,
        Retiring: singleEnumVariant<DelegateLifecycleActivity, "Retiring",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >,
        ValidatingSettings: singleEnumVariant<DelegateLifecycleActivity, "ValidatingSettings",
            "Constr#2", "tagOnly", never, "noSpecialFlags"
        >
    }
>;


export type SpendingActivity = EnumType<{module: "uutMintingDelegate", enumName: "SpendingActivity"}, {
        _placeholder2SA: singleEnumVariant<SpendingActivity, "_placeholder2SA",
            "Constr#0", "singletonField", 
            number[], "noSpecialFlags"
        >,
        mockWorkingSpendActivity: singleEnumVariant<SpendingActivity, "mockWorkingSpendActivity",
            "Constr#1", "singletonField", 
            number[], "noSpecialFlags"
        >
    }
>;

export type SpendingActivityLike = EnumType<{module: "uutMintingDelegate", enumName: "SpendingActivity"}, {
        _placeholder2SA: singleEnumVariant<SpendingActivity, "_placeholder2SA",
            "Constr#0", "singletonField", 
            number[], "noSpecialFlags"
        >,
        mockWorkingSpendActivity: singleEnumVariant<SpendingActivity, "mockWorkingSpendActivity",
            "Constr#1", "singletonField", 
            number[], "noSpecialFlags"
        >
    }
>;


export type MintingActivity = EnumType<{module: "uutMintingDelegate", enumName: "MintingActivity"}, {
        mintingUuts: singleEnumVariant<MintingActivity, "mintingUuts",
            "Constr#0", 
            "fields", {
                seed: TxOutputId,
                purposes: Array<string>
            }, "isSeededActivity"
        >,
        mockOtherActivity: singleEnumVariant<MintingActivity, "mockOtherActivity",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >
    }
>;

export type MintingActivityLike = EnumType<{module: "uutMintingDelegate", enumName: "MintingActivity"}, {
        mintingUuts: singleEnumVariant<MintingActivity, "mintingUuts",
            "Constr#0", 
            "fields", {
                seed: TxOutputId | string,
                purposes: Array<string>
            }, "isSeededActivity"
        >,
        mockOtherActivity: singleEnumVariant<MintingActivity, "mockOtherActivity",
            "Constr#1", "tagOnly", never, "noSpecialFlags"
        >
    }
>;


export type BurningActivity = EnumType<{module: "uutMintingDelegate", enumName: "BurningActivity"}, {
        _placeholder2BA: singleEnumVariant<BurningActivity, "_placeholder2BA",
            "Constr#0", "singletonField", 
            number[], "noSpecialFlags"
        >
    }
>;

export type BurningActivityLike = EnumType<{module: "uutMintingDelegate", enumName: "BurningActivity"}, {
        _placeholder2BA: singleEnumVariant<BurningActivity, "_placeholder2BA",
            "Constr#0", "singletonField", 
            number[], "noSpecialFlags"
        >
    }
>;


export type DelegateActivity = EnumType<{module: "uutMintingDelegate", enumName: "DelegateActivity"}, {
        CapoLifecycleActivities: singleEnumVariant<DelegateActivity, "CapoLifecycleActivities",
            "Constr#0", "singletonField", 
            CapoLifecycleActivity, "noSpecialFlags"
        >,
        DelegateLifecycleActivities: singleEnumVariant<DelegateActivity, "DelegateLifecycleActivities",
            "Constr#1", "singletonField", 
            DelegateLifecycleActivity, "noSpecialFlags"
        >,
        SpendingActivities: singleEnumVariant<DelegateActivity, "SpendingActivities",
            "Constr#2", "singletonField", 
            SpendingActivity, "noSpecialFlags"
        >,
        MintingActivities: singleEnumVariant<DelegateActivity, "MintingActivities",
            "Constr#3", "singletonField", 
            MintingActivity, "noSpecialFlags"
        >,
        BurningActivities: singleEnumVariant<DelegateActivity, "BurningActivities",
            "Constr#4", "singletonField", 
            BurningActivity, "noSpecialFlags"
        >,
        CreatingDelegatedData: singleEnumVariant<DelegateActivity, "CreatingDelegatedData",
            "Constr#5", 
            "fields", {
                seed: TxOutputId,
                dataType: string
            }, "isSeededActivity"
        >,
        UpdatingDelegatedData: singleEnumVariant<DelegateActivity, "UpdatingDelegatedData",
            "Constr#6", 
            "fields", {
                dataType: string,
                recId: number[]
            }, "noSpecialFlags"
        >,
        DeletingDelegatedData: singleEnumVariant<DelegateActivity, "DeletingDelegatedData",
            "Constr#7", 
            "fields", {
                dataType: string,
                recId: number[]
            }, "noSpecialFlags"
        >,
        MultipleDelegateActivities: singleEnumVariant<DelegateActivity, "MultipleDelegateActivities",
            "Constr#8", "singletonField", 
            Array<UplcData>, "noSpecialFlags"
        >
    }
>;

export type DelegateActivityLike = EnumType<{module: "uutMintingDelegate", enumName: "DelegateActivity"}, {
        CapoLifecycleActivities: singleEnumVariant<DelegateActivity, "CapoLifecycleActivities",
            "Constr#0", "singletonField", 
            CapoLifecycleActivityLike, "noSpecialFlags"
        >,
        DelegateLifecycleActivities: singleEnumVariant<DelegateActivity, "DelegateLifecycleActivities",
            "Constr#1", "singletonField", 
            DelegateLifecycleActivityLike, "noSpecialFlags"
        >,
        SpendingActivities: singleEnumVariant<DelegateActivity, "SpendingActivities",
            "Constr#2", "singletonField", 
            SpendingActivityLike, "noSpecialFlags"
        >,
        MintingActivities: singleEnumVariant<DelegateActivity, "MintingActivities",
            "Constr#3", "singletonField", 
            MintingActivityLike, "noSpecialFlags"
        >,
        BurningActivities: singleEnumVariant<DelegateActivity, "BurningActivities",
            "Constr#4", "singletonField", 
            BurningActivityLike, "noSpecialFlags"
        >,
        CreatingDelegatedData: singleEnumVariant<DelegateActivity, "CreatingDelegatedData",
            "Constr#5", 
            "fields", {
                seed: TxOutputId | string,
                dataType: string
            }, "isSeededActivity"
        >,
        UpdatingDelegatedData: singleEnumVariant<DelegateActivity, "UpdatingDelegatedData",
            "Constr#6", 
            "fields", {
                dataType: string,
                recId: number[]
            }, "noSpecialFlags"
        >,
        DeletingDelegatedData: singleEnumVariant<DelegateActivity, "DeletingDelegatedData",
            "Constr#7", 
            "fields", {
                dataType: string,
                recId: number[]
            }, "noSpecialFlags"
        >,
        MultipleDelegateActivities: singleEnumVariant<DelegateActivity, "MultipleDelegateActivities",
            "Constr#8", "singletonField", 
            Array<UplcData>, "noSpecialFlags"
        >
    }
>;


/** ------------- hlbundle types END ------------- */

export default
class BundleMintDelegateWithGenericUuts 
extends CapoDelegateBundle {
    mkDatum: mkEnum<DelegateDatumLike>;
    readDatum: readEnum<DelegateDatum>;

    Activity: mkEnum<DelegateActivityLike>;

}
