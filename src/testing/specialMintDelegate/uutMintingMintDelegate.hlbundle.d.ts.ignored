// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
/// <reference types="@helios-lang/uplc" />
/// <reference types="@helios-lang/ledger" />
/// <reference types="@helios-lang/contract-utils" />
/// <reference types="../delegation/CapoDelegateBundle.ts">;  // development
/// <reference types="./CapoHeliosBundle.ts">
/// <reference types="./HeliosScriptBundle.ts">
/// <reference types="@donecollectively/stellar-contracts" /> // production



/** ------------ BEGIN hlbundle imports --------- */
/** if you want to maintain these in a .ts file, you can use the following imports there */
// import type { UplcData } from "@helios-lang/uplc";
// import type {
//     Address,
//     AssetClass,
//     DatumHash,
//     MintingPolicyHash,
//     PubKey,
//     PubKeyHash,
//     ScriptHash,
//     SpendingCredential,
//     StakingCredential,
//     StakingHash,
//     StakingValidatorHash,
//     TimeRange,
//     TxId,
//     TxInput,
//     TxOutput,
//     TxOutputId,
//     TxOutputDatum,
//     ValidatorHash,
//     Value,
// } from "@helios-lang/ledger";
// import type { Cast } from "@helios-lang/contract-utils";
// import type { 
//     IntLike,
//     ByteArrayLike,
//  } from "@helios-lang/codec-utils";

// import type {CapoHeliosBundle} from "@donecollectively/stellar-contracts"
// import type {CapoDelegateBundle} from "@donecollectively/stellar-contracts"
// import type {
//     HeliosScriptBundle,
//     mkEnum,
//     type EnumTypeMeta,
//     type singleEnumVariantMeta,
//     type tagOnly
// } from "@donecollectively/stellar-contracts"

/** ------------ BEGIN hlbundle types ------------ */
export type DelegationDetail = {
    capoAddr: /*minStructField*/ Address
    mph: /*minStructField*/ MintingPolicyHash
    tn: /*minStructField*/ number[]
}

export type DelegationDetailLike = {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}


export type SampleStruct = {
    a: /*minStructField*/ bigint
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}

export type SampleStructLike = {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}


export type SomeEnum$hasNestedFields = {
    m: SampleStruct  /*minVariantField*/ ,
    n: bigint  /*minVariantField*/ 
}

export type SomeEnum$hasNestedFieldsLike = {
    m: SampleStructLike  /*minVariantField*/ ,
    n: IntLike  /*minVariantField*/ 
}


export type SomeEnum$hasRecursiveFields = {
    placeholder: bigint  /*minVariantField*/ ,
    ph2: string  /*minVariantField*/ 
}

export type SomeEnum$hasRecursiveFieldsLike = {
    placeholder: IntLike  /*minVariantField*/ ,
    ph2: string  /*minVariantField*/ 
}


export type SomeEnumMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "SomeEnum"}, {
        justATag: singleEnumVariantMeta<SomeEnumMeta, "justATag",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        justAnInt: singleEnumVariantMeta<SomeEnumMeta, "justAnInt",
            "Constr#1", "singletonField", bigint /*singleVariantField*/ , "noSpecialFlags"
        >,
        oneNestedStruct: singleEnumVariantMeta<SomeEnumMeta, "oneNestedStruct",
            "Constr#2", "singletonField", SampleStruct /*singleVariantField*/ , "noSpecialFlags"
        >,
        hasNestedFields: singleEnumVariantMeta<SomeEnumMeta, "hasNestedFields",
            "Constr#3", 
            "fields", SomeEnum$hasNestedFields, "noSpecialFlags"
        >,
        hasRecursiveFields: singleEnumVariantMeta<SomeEnumMeta, "hasRecursiveFields",
            "Constr#4", 
            "fields", SomeEnum$hasRecursiveFields, "noSpecialFlags"
        >
    }
>;

export type SomeEnum = 
        | { justATag: /*minEnumVariant*/ tagOnly }
        | { justAnInt: /*minEnumVariant*/ bigint /*singleVariantField*/  }
        | { oneNestedStruct: /*minEnumVariant*/ SampleStruct /*singleVariantField*/  }
        | { hasNestedFields: /*minEnumVariant*/ SomeEnum$hasNestedFields }
        | { hasRecursiveFields: /*minEnumVariant*/ SomeEnum$hasRecursiveFields }
export type SomeEnumLike = 
        | { justATag: /*minEnumVariant*/ tagOnly }
        | { justAnInt: /*minEnumVariant*/ IntLike /*singleVariantField*/  }
        | { oneNestedStruct: /*minEnumVariant*/ SampleStructLike /*singleVariantField*/  }
        | { hasNestedFields: /*minEnumVariant*/ SomeEnum$hasNestedFieldsLike }
        | { hasRecursiveFields: /*minEnumVariant*/ SomeEnum$hasRecursiveFieldsLike }

export type DelegateDatum$MultiFieldVariant = {
    field1: bigint  /*minVariantField*/ ,
    field2: string  /*minVariantField*/ 
}

export type DelegateDatum$MultiFieldVariantLike = {
    field1: IntLike  /*minVariantField*/ ,
    field2: string  /*minVariantField*/ 
}


export type DelegateDatum$MultiFieldNestedThings = {
    nestedStruct: SampleStruct  /*minVariantField*/ ,
    nestedEnumMaybe: Option<SomeEnum>  /*minVariantField*/ 
}

export type DelegateDatum$MultiFieldNestedThingsLike = {
    nestedStruct: SampleStructLike  /*minVariantField*/ ,
    nestedEnumMaybe: Option<SomeEnumLike>  /*minVariantField*/ 
}


export type DelegateDatumMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "DelegateDatum"}, {
        IsDelegation: singleEnumVariantMeta<DelegateDatumMeta, "IsDelegation",
            "Constr#0", "singletonField", DelegationDetail /*singleVariantField*/ , "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariantMeta<DelegateDatumMeta, "ScriptReference",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SingleDataElement: singleEnumVariantMeta<DelegateDatumMeta, "SingleDataElement",
            "Constr#2", "singletonField", string /*singleVariantField*/ , "noSpecialFlags"
        >,
        SingleNestedStruct: singleEnumVariantMeta<DelegateDatumMeta, "SingleNestedStruct",
            "Constr#3", "singletonField", SampleStruct /*singleVariantField*/ , "noSpecialFlags"
        >,
        HasNestedEnum: singleEnumVariantMeta<DelegateDatumMeta, "HasNestedEnum",
            "Constr#4", "singletonField", SomeEnum /*singleVariantField*/ , "noSpecialFlags"
        >,
        MultiFieldVariant: singleEnumVariantMeta<DelegateDatumMeta, "MultiFieldVariant",
            "Constr#5", 
            "fields", DelegateDatum$MultiFieldVariant, "noSpecialFlags"
        >,
        MultiFieldNestedThings: singleEnumVariantMeta<DelegateDatumMeta, "MultiFieldNestedThings",
            "Constr#6", 
            "fields", DelegateDatum$MultiFieldNestedThings, "noSpecialFlags"
        >
    }
>;

export type DelegateDatum = 
        | { IsDelegation: /*minEnumVariant*/ DelegationDetail /*singleVariantField*/  }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { SingleDataElement: /*minEnumVariant*/ string /*singleVariantField*/  }
        | { SingleNestedStruct: /*minEnumVariant*/ SampleStruct /*singleVariantField*/  }
        | { HasNestedEnum: /*minEnumVariant*/ SomeEnum /*singleVariantField*/  }
        | { MultiFieldVariant: /*minEnumVariant*/ DelegateDatum$MultiFieldVariant }
        | { MultiFieldNestedThings: /*minEnumVariant*/ DelegateDatum$MultiFieldNestedThings }
export type DelegateDatumLike = 
        | { IsDelegation: /*minEnumVariant*/ DelegationDetailLike /*singleVariantField*/  }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { SingleDataElement: /*minEnumVariant*/ string /*singleVariantField*/  }
        | { SingleNestedStruct: /*minEnumVariant*/ SampleStructLike /*singleVariantField*/  }
        | { HasNestedEnum: /*minEnumVariant*/ SomeEnumLike /*singleVariantField*/  }
        | { MultiFieldVariant: /*minEnumVariant*/ DelegateDatum$MultiFieldVariantLike }
        | { MultiFieldNestedThings: /*minEnumVariant*/ DelegateDatum$MultiFieldNestedThingsLike }

export type CapoLifecycleActivity$CreatingDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$CreatingDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "CreatingDelegate",
            "Constr#0", 
            "fields", CapoLifecycleActivity$CreatingDelegate, "isSeededActivity"
        >
    }
>;

export type CapoLifecycleActivity = 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegate }
export type CapoLifecycleActivityLike = 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegateLike }

export type DelegateLifecycleActivity$ReplacingMe = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type DelegateLifecycleActivity$ReplacingMeLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type DelegateLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateLifecycleActivity"}, {
        ReplacingMe: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ReplacingMe",
            "Constr#0", 
            "fields", DelegateLifecycleActivity$ReplacingMe, "isSeededActivity"
        >,
        Retiring: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "Retiring",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        ValidatingSettings: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ValidatingSettings",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;

export type DelegateLifecycleActivity = 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMe }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }
export type DelegateLifecycleActivityLike = 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMeLike }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }

export type SpendingActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "SpendingActivity"}, {
        _placeholder2SA: singleEnumVariantMeta<SpendingActivityMeta, "_placeholder2SA",
            "Constr#0", "singletonField", number[] /*singleVariantField*/ , "noSpecialFlags"
        >,
        mockWorkingSpendActivity: singleEnumVariantMeta<SpendingActivityMeta, "mockWorkingSpendActivity",
            "Constr#1", "singletonField", number[] /*singleVariantField*/ , "noSpecialFlags"
        >
    }
>;

export type SpendingActivity = 
        | { _placeholder2SA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
        | { mockWorkingSpendActivity: /*minEnumVariant*/ number[] /*singleVariantField*/  }
export type SpendingActivityLike = 
        | { _placeholder2SA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
        | { mockWorkingSpendActivity: /*minEnumVariant*/ number[] /*singleVariantField*/  }

export type MintingActivity$mintingUuts = {
    seed: TxOutputId  /*minVariantField*/ ,
    purposes: Array<string>  /*minVariantField*/ 
}

export type MintingActivity$mintingUutsLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purposes: Array<string>  /*minVariantField*/ 
}


export type MintingActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "MintingActivity"}, {
        mintingUuts: singleEnumVariantMeta<MintingActivityMeta, "mintingUuts",
            "Constr#0", 
            "fields", MintingActivity$mintingUuts, "isSeededActivity"
        >,
        mockOtherActivity: singleEnumVariantMeta<MintingActivityMeta, "mockOtherActivity",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;

export type MintingActivity = 
        | { mintingUuts: /*minEnumVariant*/ MintingActivity$mintingUuts }
        | { mockOtherActivity: /*minEnumVariant*/ tagOnly }
export type MintingActivityLike = 
        | { mintingUuts: /*minEnumVariant*/ MintingActivity$mintingUutsLike }
        | { mockOtherActivity: /*minEnumVariant*/ tagOnly }

export type BurningActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "BurningActivity"}, {
        _placeholder2BA: singleEnumVariantMeta<BurningActivityMeta, "_placeholder2BA",
            "Constr#0", "singletonField", number[] /*singleVariantField*/ , "noSpecialFlags"
        >
    }
>;

export type BurningActivity = 
        | { _placeholder2BA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
export type BurningActivityLike = 
        | { _placeholder2BA: /*minEnumVariant*/ number[] /*singleVariantField*/  }

export type DelegateActivity$CreatingDelegatedData = {
    seed: TxOutputId  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}

export type DelegateActivity$CreatingDelegatedDataLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}


export type DelegateActivity$UpdatingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$UpdatingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivity$DeletingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$DeletingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "DelegateActivity"}, {
        CapoLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "CapoLifecycleActivities",
            "Constr#0", "singletonField", CapoLifecycleActivity /*singleVariantField*/ , "noSpecialFlags"
        >,
        DelegateLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "DelegateLifecycleActivities",
            "Constr#1", "singletonField", DelegateLifecycleActivity /*singleVariantField*/ , "noSpecialFlags"
        >,
        SpendingActivities: singleEnumVariantMeta<DelegateActivityMeta, "SpendingActivities",
            "Constr#2", "singletonField", SpendingActivity /*singleVariantField*/ , "noSpecialFlags"
        >,
        MintingActivities: singleEnumVariantMeta<DelegateActivityMeta, "MintingActivities",
            "Constr#3", "singletonField", MintingActivity /*singleVariantField*/ , "noSpecialFlags"
        >,
        BurningActivities: singleEnumVariantMeta<DelegateActivityMeta, "BurningActivities",
            "Constr#4", "singletonField", BurningActivity /*singleVariantField*/ , "noSpecialFlags"
        >,
        CreatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "CreatingDelegatedData",
            "Constr#5", 
            "fields", DelegateActivity$CreatingDelegatedData, "isSeededActivity"
        >,
        UpdatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "UpdatingDelegatedData",
            "Constr#6", 
            "fields", DelegateActivity$UpdatingDelegatedData, "noSpecialFlags"
        >,
        DeletingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "DeletingDelegatedData",
            "Constr#7", 
            "fields", DelegateActivity$DeletingDelegatedData, "noSpecialFlags"
        >,
        MultipleDelegateActivities: singleEnumVariantMeta<DelegateActivityMeta, "MultipleDelegateActivities",
            "Constr#8", "singletonField", Array<UplcData> /*singleVariantField*/ , "noSpecialFlags"
        >
    }
>;

export type DelegateActivity = 
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivity /*singleVariantField*/  }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivity /*singleVariantField*/  }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivity /*singleVariantField*/  }
        | { MintingActivities: /*minEnumVariant*/ MintingActivity /*singleVariantField*/  }
        | { BurningActivities: /*minEnumVariant*/ BurningActivity /*singleVariantField*/  }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedData }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedData }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedData }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField*/  }
export type DelegateActivityLike = 
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivityLike /*singleVariantField*/  }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivityLike /*singleVariantField*/  }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivityLike /*singleVariantField*/  }
        | { MintingActivities: /*minEnumVariant*/ MintingActivityLike /*singleVariantField*/  }
        | { BurningActivities: /*minEnumVariant*/ BurningActivityLike /*singleVariantField*/  }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedDataLike }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedDataLike }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedDataLike }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField*/  }

/** ------------- hlbundle types END ------------- */

export default
class BundleMintDelegateWithGenericUuts 
extends CapoDelegateBundle {
    mkDatum: makesUplcEnumData<DelegateDatumLike>;
    readDatum: readsUplcEnumData<DelegateDatum>;

    Activity: makesUplcActivityEnumData<DelegateActivityLike>;

}
