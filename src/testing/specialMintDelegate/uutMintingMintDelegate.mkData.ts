// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in BasicDelegate (src/delegation/BasicDelegate.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema } from "@helios-lang/type-utils";

import type {
    DelegationDetail, DelegationDetailLike,
    SampleStruct, SampleStructLike,
    SomeEnum$hasNestedFields, SomeEnum$hasNestedFieldsLike,
    SomeEnum$hasRecursiveFields, SomeEnum$hasRecursiveFieldsLike,
    SomeEnum, SomeEnumLike,
    DelegateDatum$MultiFieldVariant, DelegateDatum$MultiFieldVariantLike,
    DelegateDatum$MultiFieldNestedThings, DelegateDatum$MultiFieldNestedThingsLike,
    DelegateDatum, DelegateDatumLike,
    CapoLifecycleActivity$CreatingDelegate, CapoLifecycleActivity$CreatingDelegateLike,
    CapoLifecycleActivity, CapoLifecycleActivityLike,
    DelegateLifecycleActivity$ReplacingMe, DelegateLifecycleActivity$ReplacingMeLike,
    DelegateLifecycleActivity, DelegateLifecycleActivityLike,
    SpendingActivity, SpendingActivityLike,
    MintingActivity$mintingUuts, MintingActivity$mintingUutsLike,
    MintingActivity, MintingActivityLike,
    BurningActivity, BurningActivityLike,
    DelegateActivity$CreatingDelegatedData, DelegateActivity$CreatingDelegatedDataLike,
    DelegateActivity$UpdatingDelegatedData, DelegateActivity$UpdatingDelegatedDataLike,
    DelegateActivity$DeletingDelegatedData, DelegateActivity$DeletingDelegatedDataLike,
    DelegateActivity, DelegateActivityLike
} from "./uutMintingMintDelegate.typeInfo.js"

import { someDataMaker } from "../../helios/dataBridge/someDataMaker.js"
import type { tagOnly } from "../../helios/HeliosScriptBundle.js"
import type {hasSeed} from "../../StellarContract.js"

export default class mkDatumBridgeBasicDelegate extends someDataMaker {
    datum: DelegateDatumHelper = new DelegateDatumHelper(this.bundle)   // datumAccessor
    DelegateDatum: DelegateDatumHelper = this.datum;

    // include accessors for activity types

    // include accessors for other enums (other than datum/activity)

    // include accessors for any other structs (other than datum/activity)

    // TODO: include any utility functions defined in the contract
}

class SomeEnumHelper extends someDataMaker {
    enumCast = new Cast<
       SomeEnum,
       SomeEnumLike
   >(SomeEnumSchema, { isMainnet: true });
    get justATag() {
        return this.enumCast.toUplcData({ justATag: {} });
    }

    justAnInt(
        value: IntLike
    ) {
        return this.enumCast.toUplcData({ 
           justAnInt: { m: value } 
        }); /*SingleField*/
    }

    oneNestedStruct(
        value: {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}

    ) {
        return this.enumCast.toUplcData({ 
           oneNestedStruct: { m: value } 
        }); /*SingleField*/
    }

    hasNestedFields(fields: { 
        m: {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
},
        n: IntLike
    }) {
        return this.enumCast.toUplcData({
            hasNestedFields: fields 
        });
    }

    hasRecursiveFields(fields: { 
        placeholder: IntLike,
        ph2: string
    }) {
        return this.enumCast.toUplcData({
            hasRecursiveFields: fields 
        });
    }
}


class DelegateDatumHelper extends someDataMaker {
    enumCast = new Cast<
       DelegateDatum,
       DelegateDatumLike
   >(DelegateDatumSchema, { isMainnet: true });
    IsDelegation(
        value: {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}

    ) {
        return this.enumCast.toUplcData({ 
           IsDelegation: { dd: value } 
        }); /*SingleField*/
    }

    get ScriptReference() {
        return this.enumCast.toUplcData({ ScriptReference: {} });
    }

    SingleDataElement(
        value: string
    ) {
        return this.enumCast.toUplcData({ 
           SingleDataElement: { aString: value } 
        }); /*SingleField*/
    }

    SingleNestedStruct(
        value: {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}

    ) {
        return this.enumCast.toUplcData({ 
           SingleNestedStruct: { aStruct: value } 
        }); /*SingleField*/
    }

    HasNestedEnum(
        value: SomeEnumLike
    ) {
        return this.enumCast.toUplcData({ 
           HasNestedEnum: { nested: value } 
        }); /*SingleField*/
    }

    MultiFieldVariant(fields: { 
        field1: IntLike,
        field2: string
    }) {
        return this.enumCast.toUplcData({
            MultiFieldVariant: fields 
        });
    }

    MultiFieldNestedThings(fields: { 
        nestedStruct: {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
},
        nestedEnumMaybe: Option<
        | { justATag: /*minEnumVariant*/ tagOnly }
        | { justAnInt: /*minEnumVariant*/ { m: IntLike /*singleVariantField*/ }  }
        | { oneNestedStruct: /*minEnumVariant*/ { m: SampleStructLike /*singleVariantField*/ }  }
        | { hasNestedFields: /*minEnumVariant*/ SomeEnum$hasNestedFieldsLike }
        | { hasRecursiveFields: /*minEnumVariant*/ SomeEnum$hasRecursiveFieldsLike }>
    }) {
        return this.enumCast.toUplcData({
            MultiFieldNestedThings: fields 
        });
    }
}


class CapoLifecycleActivityHelper extends someDataMaker {
    enumCast = new Cast<
       CapoLifecycleActivity,
       CapoLifecycleActivityLike
   >(CapoLifecycleActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingDelegate(fields: CapoLifecycleActivity$CreatingDelegateLike): UplcData
    CreatingDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$CreatingDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$CreatingDelegateLike; 
            return this.enumCast.toUplcData({
                CreatingDelegate: fields 
            });
        }
    }

}


class DelegateLifecycleActivityHelper extends someDataMaker {
    enumCast = new Cast<
       DelegateLifecycleActivity,
       DelegateLifecycleActivityLike
   >(DelegateLifecycleActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    ReplacingMe(fields: DelegateLifecycleActivity$ReplacingMeLike): UplcData
    ReplacingMe(
        seedOrUf: hasSeed | DelegateLifecycleActivity$ReplacingMeLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as DelegateLifecycleActivity$ReplacingMeLike; 
            return this.enumCast.toUplcData({
                ReplacingMe: fields 
            });
        }
    }


    get Retiring() {
        return this.enumCast.toUplcData({ Retiring: {} });
    }

    get ValidatingSettings() {
        return this.enumCast.toUplcData({ ValidatingSettings: {} });
    }
}


class SpendingActivityHelper extends someDataMaker {
    enumCast = new Cast<
       SpendingActivity,
       SpendingActivityLike
   >(SpendingActivitySchema, { isMainnet: true });
    _placeholder2SA(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           _placeholder2SA: { id: value } 
        }); /*SingleField*/
    }

    mockWorkingSpendActivity(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           mockWorkingSpendActivity: { id: value } 
        }); /*SingleField*/
    }
}


class MintingActivityHelper extends someDataMaker {
    enumCast = new Cast<
       MintingActivity,
       MintingActivityLike
   >(MintingActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    mintingUuts(value: hasSeed, fields: { 
        purposes: Array<string> 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    mintingUuts(fields: MintingActivity$mintingUutsLike): UplcData
    mintingUuts(
        seedOrUf: hasSeed | MintingActivity$mintingUutsLike, 
        filteredFields?: { 
            purposes: Array<string>
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                mintingUuts: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as MintingActivity$mintingUutsLike; 
            return this.enumCast.toUplcData({
                mintingUuts: fields 
            });
        }
    }


    get mockOtherActivity() {
        return this.enumCast.toUplcData({ mockOtherActivity: {} });
    }
}


class BurningActivityHelper extends someDataMaker {
    enumCast = new Cast<
       BurningActivity,
       BurningActivityLike
   >(BurningActivitySchema, { isMainnet: true });
    _placeholder2BA(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           _placeholder2BA: { recId: value } 
        }); /*SingleField*/
    }
}


class DelegateActivityHelper extends someDataMaker {
    enumCast = new Cast<
       DelegateActivity,
       DelegateActivityLike
   >(DelegateActivitySchema, { isMainnet: true });
    CapoLifecycleActivities(
        value: CapoLifecycleActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           CapoLifecycleActivities: { activity: value } 
        }); /*SingleField*/
    }

    DelegateLifecycleActivities(
        value: DelegateLifecycleActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           DelegateLifecycleActivities: { activity: value } 
        }); /*SingleField*/
    }

    SpendingActivities(
        value: SpendingActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           SpendingActivities: { activity: value } 
        }); /*SingleField*/
    }

    MintingActivities(
        value: MintingActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           MintingActivities: { activity: value } 
        }); /*SingleField*/
    }

    BurningActivities(
        value: BurningActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           BurningActivities: { activity: value } 
        }); /*SingleField*/
    }

    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingDelegatedData(value: hasSeed, fields: { 
        dataType: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingDelegatedData(fields: DelegateActivity$CreatingDelegatedDataLike): UplcData
    CreatingDelegatedData(
        seedOrUf: hasSeed | DelegateActivity$CreatingDelegatedDataLike, 
        filteredFields?: { 
            dataType: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as DelegateActivity$CreatingDelegatedDataLike; 
            return this.enumCast.toUplcData({
                CreatingDelegatedData: fields 
            });
        }
    }


    UpdatingDelegatedData(fields: { 
        dataType: string,
        recId: number[]
    }) {
        return this.enumCast.toUplcData({
            UpdatingDelegatedData: fields 
        });
    }

    DeletingDelegatedData(fields: { 
        dataType: string,
        recId: number[]
    }) {
        return this.enumCast.toUplcData({
            DeletingDelegatedData: fields 
        });
    }

    MultipleDelegateActivities(
        value: Array<UplcData>
    ) {
        return this.enumCast.toUplcData({ 
           MultipleDelegateActivities: { activities: value } 
        }); /*SingleField*/
    }
}


export const SomeEnumSchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "SomeEnum",
  "id": "__module__uutMintingDelegate__SomeEnum[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__uutMintingDelegate__SomeEnum[]__justATag",
      "name": "justATag",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__uutMintingDelegate__SomeEnum[]__justAnInt",
      "name": "justAnInt",
      "fieldTypes": [
        {
          "name": "m",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__uutMintingDelegate__SomeEnum[]__oneNestedStruct",
      "name": "oneNestedStruct",
      "fieldTypes": [
        {
          "name": "m",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__uutMintingDelegate__SampleStruct[]",
            "name": "SampleStruct",
            "fieldTypes": [
              {
                "name": "a",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              },
              {
                "name": "c",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "Bool"
                  }
                }
              },
              {
                "name": "d",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "Data"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__uutMintingDelegate__SomeEnum[]__hasNestedFields",
      "name": "hasNestedFields",
      "fieldTypes": [
        {
          "name": "m",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__uutMintingDelegate__SampleStruct[]",
            "name": "SampleStruct",
            "fieldTypes": [
              {
                "name": "a",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              },
              {
                "name": "c",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "Bool"
                  }
                }
              },
              {
                "name": "d",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "Data"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "n",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__uutMintingDelegate__SomeEnum[]__hasRecursiveFields",
      "name": "hasRecursiveFields",
      "fieldTypes": [
        {
          "name": "placeholder",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "ph2",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    }
  ]
};
export const DelegateDatumSchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "DelegateDatum",
  "id": "__module__uutMintingDelegate__DelegateDatum[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__IsDelegation",
      "name": "IsDelegation",
      "fieldTypes": [
        {
          "name": "dd",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
            "name": "DelegationDetail",
            "fieldTypes": [
              {
                "name": "capoAddr",
                "type": {
                  "kind": "internal",
                  "name": "Address"
                }
              },
              {
                "name": "mph",
                "type": {
                  "kind": "internal",
                  "name": "MintingPolicyHash"
                }
              },
              {
                "name": "tn",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__ScriptReference",
      "name": "ScriptReference",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__SingleDataElement",
      "name": "SingleDataElement",
      "fieldTypes": [
        {
          "name": "aString",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__SingleNestedStruct",
      "name": "SingleNestedStruct",
      "fieldTypes": [
        {
          "name": "aStruct",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__uutMintingDelegate__SampleStruct[]",
            "name": "SampleStruct",
            "fieldTypes": [
              {
                "name": "a",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              },
              {
                "name": "c",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "Bool"
                  }
                }
              },
              {
                "name": "d",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "Data"
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__HasNestedEnum",
      "name": "HasNestedEnum",
      "fieldTypes": [
        {
          "name": "nested",
          "type": {
            "kind": "enum",
            "name": "SomeEnum",
            "id": "__module__uutMintingDelegate__SomeEnum[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__uutMintingDelegate__SomeEnum[]__justATag",
                "name": "justATag",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__uutMintingDelegate__SomeEnum[]__justAnInt",
                "name": "justAnInt",
                "fieldTypes": [
                  {
                    "name": "m",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__uutMintingDelegate__SomeEnum[]__oneNestedStruct",
                "name": "oneNestedStruct",
                "fieldTypes": [
                  {
                    "name": "m",
                    "type": {
                      "kind": "struct",
                      "format": "list",
                      "id": "__module__uutMintingDelegate__SampleStruct[]",
                      "name": "SampleStruct",
                      "fieldTypes": [
                        {
                          "name": "a",
                          "type": {
                            "kind": "internal",
                            "name": "Int"
                          }
                        },
                        {
                          "name": "b",
                          "type": {
                            "kind": "map",
                            "keyType": {
                              "kind": "internal",
                              "name": "String"
                            },
                            "valueType": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        },
                        {
                          "name": "c",
                          "type": {
                            "kind": "list",
                            "itemType": {
                              "kind": "internal",
                              "name": "Bool"
                            }
                          }
                        },
                        {
                          "name": "d",
                          "type": {
                            "kind": "option",
                            "someType": {
                              "kind": "internal",
                              "name": "Data"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__uutMintingDelegate__SomeEnum[]__hasNestedFields",
                "name": "hasNestedFields",
                "fieldTypes": [
                  {
                    "name": "m",
                    "type": {
                      "kind": "struct",
                      "format": "list",
                      "id": "__module__uutMintingDelegate__SampleStruct[]",
                      "name": "SampleStruct",
                      "fieldTypes": [
                        {
                          "name": "a",
                          "type": {
                            "kind": "internal",
                            "name": "Int"
                          }
                        },
                        {
                          "name": "b",
                          "type": {
                            "kind": "map",
                            "keyType": {
                              "kind": "internal",
                              "name": "String"
                            },
                            "valueType": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        },
                        {
                          "name": "c",
                          "type": {
                            "kind": "list",
                            "itemType": {
                              "kind": "internal",
                              "name": "Bool"
                            }
                          }
                        },
                        {
                          "name": "d",
                          "type": {
                            "kind": "option",
                            "someType": {
                              "kind": "internal",
                              "name": "Data"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "n",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__uutMintingDelegate__SomeEnum[]__hasRecursiveFields",
                "name": "hasRecursiveFields",
                "fieldTypes": [
                  {
                    "name": "placeholder",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  },
                  {
                    "name": "ph2",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__MultiFieldVariant",
      "name": "MultiFieldVariant",
      "fieldTypes": [
        {
          "name": "field1",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "field2",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__uutMintingDelegate__DelegateDatum[]__MultiFieldNestedThings",
      "name": "MultiFieldNestedThings",
      "fieldTypes": [
        {
          "name": "nestedStruct",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__uutMintingDelegate__SampleStruct[]",
            "name": "SampleStruct",
            "fieldTypes": [
              {
                "name": "a",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              },
              {
                "name": "c",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "Bool"
                  }
                }
              },
              {
                "name": "d",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "Data"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "nestedEnumMaybe",
          "type": {
            "kind": "option",
            "someType": {
              "kind": "enum",
              "name": "SomeEnum",
              "id": "__module__uutMintingDelegate__SomeEnum[]",
              "variantTypes": [
                {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__uutMintingDelegate__SomeEnum[]__justATag",
                  "name": "justATag",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 1,
                  "id": "__module__uutMintingDelegate__SomeEnum[]__justAnInt",
                  "name": "justAnInt",
                  "fieldTypes": [
                    {
                      "name": "m",
                      "type": {
                        "kind": "internal",
                        "name": "Int"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 2,
                  "id": "__module__uutMintingDelegate__SomeEnum[]__oneNestedStruct",
                  "name": "oneNestedStruct",
                  "fieldTypes": [
                    {
                      "name": "m",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__uutMintingDelegate__SampleStruct[]",
                        "name": "SampleStruct",
                        "fieldTypes": [
                          {
                            "name": "a",
                            "type": {
                              "kind": "internal",
                              "name": "Int"
                            }
                          },
                          {
                            "name": "b",
                            "type": {
                              "kind": "map",
                              "keyType": {
                                "kind": "internal",
                                "name": "String"
                              },
                              "valueType": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          },
                          {
                            "name": "c",
                            "type": {
                              "kind": "list",
                              "itemType": {
                                "kind": "internal",
                                "name": "Bool"
                              }
                            }
                          },
                          {
                            "name": "d",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "Data"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 3,
                  "id": "__module__uutMintingDelegate__SomeEnum[]__hasNestedFields",
                  "name": "hasNestedFields",
                  "fieldTypes": [
                    {
                      "name": "m",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__uutMintingDelegate__SampleStruct[]",
                        "name": "SampleStruct",
                        "fieldTypes": [
                          {
                            "name": "a",
                            "type": {
                              "kind": "internal",
                              "name": "Int"
                            }
                          },
                          {
                            "name": "b",
                            "type": {
                              "kind": "map",
                              "keyType": {
                                "kind": "internal",
                                "name": "String"
                              },
                              "valueType": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          },
                          {
                            "name": "c",
                            "type": {
                              "kind": "list",
                              "itemType": {
                                "kind": "internal",
                                "name": "Bool"
                              }
                            }
                          },
                          {
                            "name": "d",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "Data"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "n",
                      "type": {
                        "kind": "internal",
                        "name": "Int"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 4,
                  "id": "__module__uutMintingDelegate__SomeEnum[]__hasRecursiveFields",
                  "name": "hasRecursiveFields",
                  "fieldTypes": [
                    {
                      "name": "placeholder",
                      "type": {
                        "kind": "internal",
                        "name": "Int"
                      }
                    },
                    {
                      "name": "ph2",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    }
  ]
};
export const CapoLifecycleActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "CapoLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
      "name": "CreatingDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    }
  ]
};
export const DelegateLifecycleActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "DelegateLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
      "name": "ReplacingMe",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
      "name": "Retiring",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
      "name": "ValidatingSettings",
      "fieldTypes": []
    }
  ]
};
export const SpendingActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "SpendingActivity",
  "id": "__module__uutMintingDelegate__SpendingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__uutMintingDelegate__SpendingActivity[]___placeholder2SA",
      "name": "_placeholder2SA",
      "fieldTypes": [
        {
          "name": "id",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__uutMintingDelegate__SpendingActivity[]__mockWorkingSpendActivity",
      "name": "mockWorkingSpendActivity",
      "fieldTypes": [
        {
          "name": "id",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
export const MintingActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "MintingActivity",
  "id": "__module__uutMintingDelegate__MintingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__uutMintingDelegate__MintingActivity[]__mintingUuts",
      "name": "mintingUuts",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purposes",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "internal",
              "name": "String"
            }
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__uutMintingDelegate__MintingActivity[]__mockOtherActivity",
      "name": "mockOtherActivity",
      "fieldTypes": []
    }
  ]
};
export const BurningActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "BurningActivity",
  "id": "__module__uutMintingDelegate__BurningActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__uutMintingDelegate__BurningActivity[]___placeholder2BA",
      "name": "_placeholder2BA",
      "fieldTypes": [
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
export const DelegateActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "DelegateActivity",
  "id": "__module__uutMintingDelegate__DelegateActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__CapoLifecycleActivities",
      "name": "CapoLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "CapoLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                "name": "CreatingDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__DelegateLifecycleActivities",
      "name": "DelegateLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "DelegateLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
                "name": "ReplacingMe",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
                "name": "Retiring",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
                "name": "ValidatingSettings",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__SpendingActivities",
      "name": "SpendingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "SpendingActivity",
            "id": "__module__uutMintingDelegate__SpendingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__uutMintingDelegate__SpendingActivity[]___placeholder2SA",
                "name": "_placeholder2SA",
                "fieldTypes": [
                  {
                    "name": "id",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__uutMintingDelegate__SpendingActivity[]__mockWorkingSpendActivity",
                "name": "mockWorkingSpendActivity",
                "fieldTypes": [
                  {
                    "name": "id",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__MintingActivities",
      "name": "MintingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "MintingActivity",
            "id": "__module__uutMintingDelegate__MintingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__uutMintingDelegate__MintingActivity[]__mintingUuts",
                "name": "mintingUuts",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purposes",
                    "type": {
                      "kind": "list",
                      "itemType": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__uutMintingDelegate__MintingActivity[]__mockOtherActivity",
                "name": "mockOtherActivity",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__BurningActivities",
      "name": "BurningActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "BurningActivity",
            "id": "__module__uutMintingDelegate__BurningActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__uutMintingDelegate__BurningActivity[]___placeholder2BA",
                "name": "_placeholder2BA",
                "fieldTypes": [
                  {
                    "name": "recId",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__CreatingDelegatedData",
      "name": "CreatingDelegatedData",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__UpdatingDelegatedData",
      "name": "UpdatingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__DeletingDelegatedData",
      "name": "DeletingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 8,
      "id": "__module__uutMintingDelegate__DelegateActivity[]__MultipleDelegateActivities",
      "name": "MultipleDelegateActivities",
      "fieldTypes": [
        {
          "name": "activities",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "internal",
              "name": "Data"
            }
          }
        }
      ]
    }
  ]
};
