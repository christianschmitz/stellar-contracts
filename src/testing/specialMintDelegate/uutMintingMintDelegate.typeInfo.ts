// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import type { UplcData } from "@helios-lang/uplc";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { Cast } from "@helios-lang/contract-utils";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";


import {HeliosScriptBundle, type tagOnly, type EnumTypeMeta, type singleEnumVariantMeta} from "../../helios/HeliosScriptBundle.js"
        

export type DelegationDetail = {
    capoAddr: /*minStructField*/ Address
    mph: /*minStructField*/ MintingPolicyHash
    tn: /*minStructField*/ number[]
}

export type DelegationDetailLike = {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}


export type AnyData = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}

export type AnyDataLike = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}


export type SampleStruct = {
    a: /*minStructField*/ bigint
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}

export type SampleStructLike = {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}


export type SomeEnum$hasNestedFields = {
    m: SampleStruct  /*minVariantField*/ ,
    n: bigint  /*minVariantField*/ 
}

export type SomeEnum$hasNestedFieldsLike = {
    m: SampleStructLike  /*minVariantField*/ ,
    n: IntLike  /*minVariantField*/ 
}


export type SomeEnum$hasRecursiveFields = {
    placeholder: bigint  /*minVariantField*/ ,
    ph2: string  /*minVariantField*/ 
}

export type SomeEnum$hasRecursiveFieldsLike = {
    placeholder: IntLike  /*minVariantField*/ ,
    ph2: string  /*minVariantField*/ 
}


export type SomeEnumMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "SomeEnum"}, {
        justATag: singleEnumVariantMeta<SomeEnumMeta, "justATag",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        justAnInt: singleEnumVariantMeta<SomeEnumMeta, "justAnInt",
            "Constr#1", "singletonField", bigint /*singleVariantField ; elided extra { m: bigint} structure*/
  , "noSpecialFlags"
        >,
        oneNestedStruct: singleEnumVariantMeta<SomeEnumMeta, "oneNestedStruct",
            "Constr#2", "singletonField", SampleStruct /*singleVariantField ; elided extra { m: SampleStruct} structure*/
  , "noSpecialFlags"
        >,
        hasNestedFields: singleEnumVariantMeta<SomeEnumMeta, "hasNestedFields",
            "Constr#3", 
            "fields", SomeEnum$hasNestedFields, "noSpecialFlags"
        >,
        hasRecursiveFields: singleEnumVariantMeta<SomeEnumMeta, "hasRecursiveFields",
            "Constr#4", 
            "fields", SomeEnum$hasRecursiveFields, "noSpecialFlags"
        >
    }
>;


/**
 * SomeEnum enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **5 variant(s)** of the SomeEnum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SomeEnumHelper` class
 *     for generating UPLC data for this enum type
 */
export type SomeEnum = 
        | { justATag: /*minEnumVariant*/ tagOnly }
        | { justAnInt: /*minEnumVariant*/ bigint /*singleVariantField ; elided extra { m: bigint} structure*/
   }
        | { oneNestedStruct: /*minEnumVariant*/ SampleStruct /*singleVariantField ; elided extra { m: SampleStruct} structure*/
   }
        | { hasNestedFields: /*minEnumVariant*/ SomeEnum$hasNestedFields }
        | { hasRecursiveFields: /*minEnumVariant*/ SomeEnum$hasRecursiveFields }

/**
 * SomeEnum enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **5 variant(s)** of the SomeEnum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SomeEnumHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type SomeEnumLike = 
        | { justATag: /*minEnumVariant*/ tagOnly }
        | { justAnInt: /*minEnumVariant*/ IntLike /*singleVariantField ; elided extra { m: IntLike} structure*/
   }
        | { oneNestedStruct: /*minEnumVariant*/ SampleStructLike /*singleVariantField ; elided extra { m: SampleStructLike} structure*/
   }
        | { hasNestedFields: /*minEnumVariant*/ SomeEnum$hasNestedFieldsLike }
        | { hasRecursiveFields: /*minEnumVariant*/ SomeEnum$hasRecursiveFieldsLike }

export type DelegateDatum$MultiFieldVariant = {
    field1: bigint  /*minVariantField*/ ,
    field2: string  /*minVariantField*/ 
}

export type DelegateDatum$MultiFieldVariantLike = {
    field1: IntLike  /*minVariantField*/ ,
    field2: string  /*minVariantField*/ 
}


export type DelegateDatum$MultiFieldNestedThings = {
    nestedStruct: SampleStruct  /*minVariantField*/ ,
    nestedEnumMaybe: Option<SomeEnum>  /*minVariantField*/ 
}

export type DelegateDatum$MultiFieldNestedThingsLike = {
    nestedStruct: SampleStructLike  /*minVariantField*/ ,
    nestedEnumMaybe: Option<SomeEnumLike>  /*minVariantField*/ 
}


export type DelegateDatumMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "DelegateDatum"}, {
        Cip68RefToken: singleEnumVariantMeta<DelegateDatumMeta, "Cip68RefToken",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        IsDelegation: singleEnumVariantMeta<DelegateDatumMeta, "IsDelegation",
            "Constr#1", "singletonField", DelegationDetail /*singleVariantField ; elided extra { dd: DelegationDetail} structure*/
  , "noSpecialFlags"
        >,
        capoStoredData: singleEnumVariantMeta<DelegateDatumMeta, "capoStoredData",
            "Constr#2", "singletonField", AnyData /*singleVariantField ; elided extra { data: AnyData} structure*/
  , "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariantMeta<DelegateDatumMeta, "ScriptReference",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SingleDataElement: singleEnumVariantMeta<DelegateDatumMeta, "SingleDataElement",
            "Constr#4", "singletonField", string /*singleVariantField ; elided extra { aString: string} structure*/
  , "noSpecialFlags"
        >,
        SingleNestedStruct: singleEnumVariantMeta<DelegateDatumMeta, "SingleNestedStruct",
            "Constr#5", "singletonField", SampleStruct /*singleVariantField ; elided extra { aStruct: SampleStruct} structure*/
  , "noSpecialFlags"
        >,
        HasNestedEnum: singleEnumVariantMeta<DelegateDatumMeta, "HasNestedEnum",
            "Constr#6", "singletonField", SomeEnum /*singleVariantField ; elided extra { nested: SomeEnum} structure*/
  , "noSpecialFlags"
        >,
        MultiFieldVariant: singleEnumVariantMeta<DelegateDatumMeta, "MultiFieldVariant",
            "Constr#7", 
            "fields", DelegateDatum$MultiFieldVariant, "noSpecialFlags"
        >,
        MultiFieldNestedThings: singleEnumVariantMeta<DelegateDatumMeta, "MultiFieldNestedThings",
            "Constr#8", 
            "fields", DelegateDatum$MultiFieldNestedThings, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateDatum enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **9 variant(s)** of the DelegateDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateDatumHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateDatum = 
        | { Cip68RefToken: /*minEnumVariant*/ tagOnly }
        | { IsDelegation: /*minEnumVariant*/ DelegationDetail /*singleVariantField ; elided extra { dd: DelegationDetail} structure*/
   }
        | { capoStoredData: /*minEnumVariant*/ AnyData /*singleVariantField ; elided extra { data: AnyData} structure*/
   }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { SingleDataElement: /*minEnumVariant*/ string /*singleVariantField ; elided extra { aString: string} structure*/
   }
        | { SingleNestedStruct: /*minEnumVariant*/ SampleStruct /*singleVariantField ; elided extra { aStruct: SampleStruct} structure*/
   }
        | { HasNestedEnum: /*minEnumVariant*/ SomeEnum /*singleVariantField ; elided extra { nested: SomeEnum} structure*/
   }
        | { MultiFieldVariant: /*minEnumVariant*/ DelegateDatum$MultiFieldVariant }
        | { MultiFieldNestedThings: /*minEnumVariant*/ DelegateDatum$MultiFieldNestedThings }

/**
 * DelegateDatum enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **9 variant(s)** of the DelegateDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateDatumHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateDatumLike = 
        | { Cip68RefToken: /*minEnumVariant*/ tagOnly }
        | { IsDelegation: /*minEnumVariant*/ DelegationDetailLike /*singleVariantField ; elided extra { dd: DelegationDetailLike} structure*/
   }
        | { capoStoredData: /*minEnumVariant*/ AnyDataLike /*singleVariantField ; elided extra { data: AnyDataLike} structure*/
   }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
        | { SingleDataElement: /*minEnumVariant*/ string /*singleVariantField ; elided extra { aString: string} structure*/
   }
        | { SingleNestedStruct: /*minEnumVariant*/ SampleStructLike /*singleVariantField ; elided extra { aStruct: SampleStructLike} structure*/
   }
        | { HasNestedEnum: /*minEnumVariant*/ SomeEnumLike /*singleVariantField ; elided extra { nested: SomeEnumLike} structure*/
   }
        | { MultiFieldVariant: /*minEnumVariant*/ DelegateDatum$MultiFieldVariantLike }
        | { MultiFieldNestedThings: /*minEnumVariant*/ DelegateDatum$MultiFieldNestedThingsLike }

export type CapoLifecycleActivity$CreatingDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$CreatingDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "CreatingDelegate",
            "Constr#0", 
            "fields", CapoLifecycleActivity$CreatingDelegate, "isSeededActivity"
        >
    }
>;


/**
 * CapoLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type CapoLifecycleActivity = 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegate }

/**
 * CapoLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **1 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type CapoLifecycleActivityLike = 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegateLike }

export type DelegateLifecycleActivity$ReplacingMe = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type DelegateLifecycleActivity$ReplacingMeLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type DelegateLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateLifecycleActivity"}, {
        ReplacingMe: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ReplacingMe",
            "Constr#0", 
            "fields", DelegateLifecycleActivity$ReplacingMe, "isSeededActivity"
        >,
        Retiring: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "Retiring",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        ValidatingSettings: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ValidatingSettings",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the DelegateLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateLifecycleActivity = 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMe }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }

/**
 * DelegateLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **3 variant(s)** of the DelegateLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateLifecycleActivityLike = 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMeLike }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }

export type SpendingActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "SpendingActivity"}, {
        _placeholder2SA: singleEnumVariantMeta<SpendingActivityMeta, "_placeholder2SA",
            "Constr#0", "singletonField", number[] /*singleVariantField ; elided extra { id: number[]} structure*/
  , "noSpecialFlags"
        >,
        mockWorkingSpendActivity: singleEnumVariantMeta<SpendingActivityMeta, "mockWorkingSpendActivity",
            "Constr#1", "singletonField", number[] /*singleVariantField ; elided extra { id: number[]} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * SpendingActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **2 variant(s)** of the SpendingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SpendingActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type SpendingActivity = 
        | { _placeholder2SA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { id: number[]} structure*/
   }
        | { mockWorkingSpendActivity: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { id: number[]} structure*/
   }

/**
 * SpendingActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **2 variant(s)** of the SpendingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SpendingActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type SpendingActivityLike = 
        | { _placeholder2SA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { id: number[]} structure*/
   }
        | { mockWorkingSpendActivity: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { id: number[]} structure*/
   }

export type MintingActivity$mintingUuts = {
    seed: TxOutputId  /*minVariantField*/ ,
    purposes: Array<string>  /*minVariantField*/ 
}

export type MintingActivity$mintingUutsLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purposes: Array<string>  /*minVariantField*/ 
}


export type MintingActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "MintingActivity"}, {
        mintingUuts: singleEnumVariantMeta<MintingActivityMeta, "mintingUuts",
            "Constr#0", 
            "fields", MintingActivity$mintingUuts, "isSeededActivity"
        >,
        mockOtherActivity: singleEnumVariantMeta<MintingActivityMeta, "mockOtherActivity",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * MintingActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **2 variant(s)** of the MintingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MintingActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type MintingActivity = 
        | { mintingUuts: /*minEnumVariant*/ MintingActivity$mintingUuts }
        | { mockOtherActivity: /*minEnumVariant*/ tagOnly }

/**
 * MintingActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **2 variant(s)** of the MintingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MintingActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type MintingActivityLike = 
        | { mintingUuts: /*minEnumVariant*/ MintingActivity$mintingUutsLike }
        | { mockOtherActivity: /*minEnumVariant*/ tagOnly }

export type BurningActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "BurningActivity"}, {
        _placeholder2BA: singleEnumVariantMeta<BurningActivityMeta, "_placeholder2BA",
            "Constr#0", "singletonField", number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * BurningActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the BurningActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `BurningActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type BurningActivity = 
        | { _placeholder2BA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
   }

/**
 * BurningActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **1 variant(s)** of the BurningActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `BurningActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type BurningActivityLike = 
        | { _placeholder2BA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
   }

export type DelegateActivity$CreatingDelegatedData = {
    seed: TxOutputId  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}

export type DelegateActivity$CreatingDelegatedDataLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}


export type DelegateActivity$UpdatingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$UpdatingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivity$DeletingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$DeletingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivityMeta = EnumTypeMeta<
    {module: "uutMintingDelegate", enumName: "DelegateActivity"}, {
        CapoLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "CapoLifecycleActivities",
            "Constr#0", "singletonField", CapoLifecycleActivity /*singleVariantField ; elided extra { activity: CapoLifecycleActivity} structure*/
  , "noSpecialFlags"
        >,
        DelegateLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "DelegateLifecycleActivities",
            "Constr#1", "singletonField", DelegateLifecycleActivity /*singleVariantField ; elided extra { activity: DelegateLifecycleActivity} structure*/
  , "noSpecialFlags"
        >,
        SpendingActivities: singleEnumVariantMeta<DelegateActivityMeta, "SpendingActivities",
            "Constr#2", "singletonField", SpendingActivity /*singleVariantField ; elided extra { activity: SpendingActivity} structure*/
  , "noSpecialFlags"
        >,
        MintingActivities: singleEnumVariantMeta<DelegateActivityMeta, "MintingActivities",
            "Constr#3", "singletonField", MintingActivity /*singleVariantField ; elided extra { activity: MintingActivity} structure*/
  , "noSpecialFlags"
        >,
        BurningActivities: singleEnumVariantMeta<DelegateActivityMeta, "BurningActivities",
            "Constr#4", "singletonField", BurningActivity /*singleVariantField ; elided extra { activity: BurningActivity} structure*/
  , "noSpecialFlags"
        >,
        CreatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "CreatingDelegatedData",
            "Constr#5", 
            "fields", DelegateActivity$CreatingDelegatedData, "isSeededActivity"
        >,
        UpdatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "UpdatingDelegatedData",
            "Constr#6", 
            "fields", DelegateActivity$UpdatingDelegatedData, "noSpecialFlags"
        >,
        DeletingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "DeletingDelegatedData",
            "Constr#7", 
            "fields", DelegateActivity$DeletingDelegatedData, "noSpecialFlags"
        >,
        MultipleDelegateActivities: singleEnumVariantMeta<DelegateActivityMeta, "MultipleDelegateActivities",
            "Constr#8", "singletonField", Array<UplcData> /*singleVariantField ; elided extra { activities: Array<UplcData>} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * DelegateActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **9 variant(s)** of the DelegateActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateActivity = 
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivity /*singleVariantField ; elided extra { activity: CapoLifecycleActivity} structure*/
   }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivity /*singleVariantField ; elided extra { activity: DelegateLifecycleActivity} structure*/
   }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivity /*singleVariantField ; elided extra { activity: SpendingActivity} structure*/
   }
        | { MintingActivities: /*minEnumVariant*/ MintingActivity /*singleVariantField ; elided extra { activity: MintingActivity} structure*/
   }
        | { BurningActivities: /*minEnumVariant*/ BurningActivity /*singleVariantField ; elided extra { activity: BurningActivity} structure*/
   }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedData }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedData }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedData }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField ; elided extra { activities: Array<UplcData>} structure*/
   }

/**
 * DelegateActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **9 variant(s)** of the DelegateActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateActivityLike = 
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivityLike /*singleVariantField ; elided extra { activity: CapoLifecycleActivityLike} structure*/
   }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivityLike /*singleVariantField ; elided extra { activity: DelegateLifecycleActivityLike} structure*/
   }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivityLike /*singleVariantField ; elided extra { activity: SpendingActivityLike} structure*/
   }
        | { MintingActivities: /*minEnumVariant*/ MintingActivityLike /*singleVariantField ; elided extra { activity: MintingActivityLike} structure*/
   }
        | { BurningActivities: /*minEnumVariant*/ BurningActivityLike /*singleVariantField ; elided extra { activity: BurningActivityLike} structure*/
   }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedDataLike }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedDataLike }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedDataLike }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField ; elided extra { activities: Array<UplcData>} structure*/
   }

