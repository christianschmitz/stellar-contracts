// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in BasicDelegate (src/delegation/BasicDelegate.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData, ConstrData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { 
    DataBridge, 
    ContractDataBridge, 
    DataBridgeReaderClass,
    type callWith,
} from "../../helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../../helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../../helios/HeliosScriptBundle.js"
import type { IntersectedEnum } from "../../helios/typeUtils.js"
import type {hasSeed, isActivity} from "../../StellarContract.js"


import type {
    DelegationDetail, DelegationDetailLike,
    SampleStruct, SampleStructLike,
    SomeEnum$hasNestedFields, SomeEnum$hasNestedFieldsLike,
    SomeEnum$hasRecursiveFields, SomeEnum$hasRecursiveFieldsLike,
    SomeEnum, SomeEnumLike,
    DelegateDatum$MultiFieldVariant, DelegateDatum$MultiFieldVariantLike,
    DelegateDatum$MultiFieldNestedThings, DelegateDatum$MultiFieldNestedThingsLike,
    DelegateDatum, DelegateDatumLike,
    CapoLifecycleActivity$CreatingDelegate, CapoLifecycleActivity$CreatingDelegateLike,
    CapoLifecycleActivity, CapoLifecycleActivityLike,
    DelegateLifecycleActivity$ReplacingMe, DelegateLifecycleActivity$ReplacingMeLike,
    DelegateLifecycleActivity, DelegateLifecycleActivityLike,
    SpendingActivity, SpendingActivityLike,
    MintingActivity$mintingUuts, MintingActivity$mintingUutsLike,
    MintingActivity, MintingActivityLike,
    BurningActivity, BurningActivityLike,
    DelegateActivity$CreatingDelegatedData, DelegateActivity$CreatingDelegatedDataLike,
    DelegateActivity$UpdatingDelegatedData, DelegateActivity$UpdatingDelegatedDataLike,
    DelegateActivity$DeletingDelegatedData, DelegateActivity$DeletingDelegatedDataLike,
    DelegateActivity, DelegateActivityLike
} from "./uutMintingMintDelegate.typeInfo.js";

export type * as types from "./uutMintingMintDelegate.typeInfo.js";
import type * as types from "./uutMintingMintDelegate.typeInfo.js";



//Note about @ts-expect-error drilling through protected accessors: This 
//   allows the interface for the nested accessor to show only the public details,
//   while allowing us to collaborate between these two closely-related classes.
//   Like "friends" in C++.

/**
 * data bridge for **BasicDelegate** script (defined in class ***BundleMintDelegateWithGenericUuts***)}
 * main: **src/delegation/BasicDelegate.hl**, project: **stellar-contracts**
 * @remarks - note that you may override get dataBridgeName() { return "..." } to customize the name of this bridge class
 */
export class uutMintingDelegateDataBridge extends ContractDataBridge {
    static isAbstract = false as const;
    isAbstract = false as const;
    /**
     * Helper class for generating UplcData for the datum type ***
     * for this contract script. 
     */
    datum: DelegateDatumHelper
     = new DelegateDatumHelper(this.bundle, {})   // datumAccessor/enum

    /**
     * this is the specific type of datum for the `BasicDelegate` script
     */
    DelegateDatum: DelegateDatumHelper = this.datum;

    readDatum : (d: UplcData) => IntersectedEnum<DelegateDatum> = (d) =>  {
        //XXX@ts-expect-error drilling through the protected accessor.
        //   ... see more comments about that above
        //return this.datum.__cast.fromUplcData(d);
        return this.reader.DelegateDatum(d)
    }


    /**
     * generates UplcData for the activity type (***DelegateActivity***) for the `BasicDelegate` script
     */
    activity : DelegateActivityHelper= new DelegateActivityHelper(this.bundle, {isActivity: true}); // activityAccessor/enum
        DelegateActivity: DelegateActivityHelper = this.activity;

    reader = new uutMintingDelegateDataBridgeReader(this);

    /**
     * accessors for all the types defined in the `BasicDelegate` script
     * @remarks - these accessors are used to generate UplcData for each type
     */
    types = {
      /**
       * generates UplcData for the enum type ***SomeEnum*** for the `BasicDelegate` script
       */
        SomeEnum: new SomeEnumHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***DelegateDatum*** for the `BasicDelegate` script
       */
        DelegateDatum: new DelegateDatumHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***CapoLifecycleActivity*** for the `BasicDelegate` script
       */
        CapoLifecycleActivity: new CapoLifecycleActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***DelegateLifecycleActivity*** for the `BasicDelegate` script
       */
        DelegateLifecycleActivity: new DelegateLifecycleActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***SpendingActivity*** for the `BasicDelegate` script
       */
        SpendingActivity: new SpendingActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***MintingActivity*** for the `BasicDelegate` script
       */
        MintingActivity: new MintingActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***BurningActivity*** for the `BasicDelegate` script
       */
        BurningActivity: new BurningActivityHelper(this.bundle),
      /**
       * generates UplcData for the enum type ***DelegateActivity*** for the `BasicDelegate` script
       */
        DelegateActivity: new DelegateActivityHelper(this.bundle),

      /**
       * generates UplcData for the enum type ***DelegationDetail*** for the `BasicDelegate` script
       */
        DelegationDetail: (fields: DelegationDetailLike | {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}
) => {
        return this.__DelegationDetailCast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***SampleStruct*** for the `BasicDelegate` script
       */
        SampleStruct: (fields: SampleStructLike | {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}
) => {
        return this.__SampleStructCast.toUplcData(fields);
    },    }    

    protected __DelegationDetailCast = new Cast<
                DelegationDetail, DelegationDetailLike
            >(DelegationDetailSchema, { isMainnet: true });
    protected __SampleStructCast = new Cast<
                SampleStruct, SampleStructLike
            >(SampleStructSchema, { isMainnet: true });


}
export default uutMintingDelegateDataBridge;

class uutMintingDelegateDataBridgeReader extends DataBridgeReaderClass {
    constructor(public bridge: uutMintingDelegateDataBridge) {
        super();
    }
    /**
        * reads UplcData *known to fit the **SomeEnum*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    SomeEnum(d : UplcData) { 
        const typeHelper = this.bridge.types.SomeEnum;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<SomeEnum>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegateDatum*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateDatum(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateDatum;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<DelegateDatum>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **CapoLifecycleActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    CapoLifecycleActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.CapoLifecycleActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<CapoLifecycleActivity>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegateLifecycleActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateLifecycleActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateLifecycleActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<DelegateLifecycleActivity>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **SpendingActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    SpendingActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.SpendingActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<SpendingActivity>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **MintingActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    MintingActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.MintingActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<MintingActivity>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **BurningActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    BurningActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.BurningActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<BurningActivity>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegateActivity*** enum type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegateActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.DelegateActivity;
        //@ts-expect-error drilling through the protected accessor.
        const cast = typeHelper.__cast;

        return cast.fromUplcData(d) as IntersectedEnum<DelegateActivity>;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **DelegationDetail*** struct type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the struct type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DelegationDetail(d: UplcData) {
        //@ts-expect-error drilling through the protected accessor.
        const cast = this.bridge.__DelegationDetailCast;
        return cast.fromUplcData(d);        
    } /* structReader helper */

    /**
        * reads UplcData *known to fit the **SampleStruct*** struct type,
        * for the BasicDelegate script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the struct type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    SampleStruct(d: UplcData) {
        //@ts-expect-error drilling through the protected accessor.
        const cast = this.bridge.__SampleStructCast;
        return cast.fromUplcData(d);        
    } /* structReader helper */

}

/**
 * Helper class for generating UplcData for the ***DelegationDetail*** struct type.
 */
export class DelegationDetailHelper extends DataBridge {
    isCallable = true
    protected __cast = new Cast<
        DelegationDetail,
        DelegationDetailLike
    >(DelegationDetailSchema, { isMainnet: true });

    // You might expect a function as follows, but no.  However, a similar uplc-generating capability
    // is instead provided, with that same sort of interface, by a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // DelegationDetail(fields: DelegationDetailLike) {
    //    return this.__cast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for the ***SampleStruct*** struct type.
 */
export class SampleStructHelper extends DataBridge {
    isCallable = true
    protected __cast = new Cast<
        SampleStruct,
        SampleStructLike
    >(SampleStructSchema, { isMainnet: true });

    // You might expect a function as follows, but no.  However, a similar uplc-generating capability
    // is instead provided, with that same sort of interface, by a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // SampleStruct(fields: SampleStructLike) {
    //    return this.__cast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for variants of the ***SomeEnum*** enum type.
 */
export class SomeEnumHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       SomeEnum,
       SomeEnumLike
   >(SomeEnumSchema, { isMainnet: true });

/**
 * (property getter): UplcData for ***"uutMintingDelegate::SomeEnum.justATag"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
 */
    get justATag() {
        const uplc = this.mkUplcData({ justATag: {} }, 
            "uutMintingDelegate::SomeEnum.justATag");
       return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.justAnInt"***
     */
    justAnInt(
        m: IntLike
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           justAnInt: { m: m } 
        }, "uutMintingDelegate::SomeEnum.justAnInt"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.oneNestedStruct"***
     * @remarks - ***SampleStructLike*** is the same as the expanded field-type.
     */
    oneNestedStruct(
        m: SampleStructLike | {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           oneNestedStruct: { m: m } 
        }, "uutMintingDelegate::SomeEnum.oneNestedStruct"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.hasNestedFields"***
     * @remarks - ***SomeEnum$hasNestedFieldsLike*** is the same as the expanded field-types.
     */
    hasNestedFields(fields: SomeEnum$hasNestedFieldsLike | { 
        m: SampleStructLike,
        n: IntLike } ) : UplcData {
        const uplc = this.mkUplcData({
            hasNestedFields: fields 
        }, "uutMintingDelegate::SomeEnum.hasNestedFields");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.hasRecursiveFields"***
     * @remarks - ***SomeEnum$hasRecursiveFieldsLike*** is the same as the expanded field-types.
     */
    hasRecursiveFields(fields: SomeEnum$hasRecursiveFieldsLike | { 
        placeholder: IntLike,
        ph2: string } ) : UplcData {
        const uplc = this.mkUplcData({
            hasRecursiveFields: fields 
        }, "uutMintingDelegate::SomeEnum.hasRecursiveFields");
       return uplc;
    } /*multiFieldVariant enum accessor*/
}


/**
 * Helper class for generating UplcData for variants of the ***SomeEnum*** enum type.
 */
export class SomeEnumHelperNested extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       SomeEnum,
       SomeEnumLike
   >(SomeEnumSchema, { isMainnet: true });

/**
 * (property getter): UplcData for ***"uutMintingDelegate::SomeEnum.justATag"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
 */
    get justATag() {
        const uplc = this.mkUplcData({ justATag: {} }, 
            "uutMintingDelegate::SomeEnum.justATag");
       return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.justAnInt"***
     */
    justAnInt(
        m: IntLike
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           justAnInt: { m: m } 
        }, "uutMintingDelegate::SomeEnum.justAnInt"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.oneNestedStruct"***
     * @remarks - ***SampleStructLike*** is the same as the expanded field-type.
     */
    oneNestedStruct(
        m: SampleStructLike | {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           oneNestedStruct: { m: m } 
        }, "uutMintingDelegate::SomeEnum.oneNestedStruct"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.hasNestedFields"***
     * @remarks - ***SomeEnum$hasNestedFieldsLike*** is the same as the expanded field-types.
     */
    hasNestedFields(fields: SomeEnum$hasNestedFieldsLike | { 
        m: SampleStructLike,
        n: IntLike } ) : UplcData {
        const uplc = this.mkUplcData({
            hasNestedFields: fields 
        }, "uutMintingDelegate::SomeEnum.hasNestedFields");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  UplcData for ***"uutMintingDelegate::SomeEnum.hasRecursiveFields"***
     * @remarks - ***SomeEnum$hasRecursiveFieldsLike*** is the same as the expanded field-types.
     */
    hasRecursiveFields(fields: SomeEnum$hasRecursiveFieldsLike | { 
        placeholder: IntLike,
        ph2: string } ) : UplcData {
        const uplc = this.mkUplcData({
            hasRecursiveFields: fields 
        }, "uutMintingDelegate::SomeEnum.hasRecursiveFields");
       return uplc;
    } /*multiFieldVariant enum accessor*/
}


/**
 * Helper class for generating UplcData for variants of the ***DelegateDatum*** enum type.
 */
export class DelegateDatumHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       DelegateDatum,
       DelegateDatumLike
   >(DelegateDatumSchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"uutMintingDelegate::DelegateDatum.IsDelegation"***
     * @remarks - ***DelegationDetailLike*** is the same as the expanded field-type.
     */
    IsDelegation(
        dd: DelegationDetailLike | {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           IsDelegation: { dd: dd } 
        }, "uutMintingDelegate::DelegateDatum.IsDelegation"); /*SingleField enum variant*/
       return uplc;
    }

/**
 * (property getter): UplcData for ***"uutMintingDelegate::DelegateDatum.ScriptReference"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get ScriptReference() {
        const uplc = this.mkUplcData({ ScriptReference: {} }, 
            "uutMintingDelegate::DelegateDatum.ScriptReference");
       return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates  UplcData for ***"uutMintingDelegate::DelegateDatum.SingleDataElement"***
     */
    SingleDataElement(
        aString: string
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           SingleDataElement: { aString: aString } 
        }, "uutMintingDelegate::DelegateDatum.SingleDataElement"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"uutMintingDelegate::DelegateDatum.SingleNestedStruct"***
     * @remarks - ***SampleStructLike*** is the same as the expanded field-type.
     */
    SingleNestedStruct(
        aStruct: SampleStructLike | {
    a: /*minStructField*/ IntLike
    b: /*minStructField*/ Map<string, number[]>
    c: /*minStructField*/ Array<boolean>
    d: /*minStructField*/ Option<UplcData>
}
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           SingleNestedStruct: { aStruct: aStruct } 
        }, "uutMintingDelegate::DelegateDatum.SingleNestedStruct"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * access to different variants of the ***nested SomeEnum*** type needed for ***DelegateDatum:HasNestedEnum***.
     */
    get HasNestedEnum() {
        const nestedAccessor = new SomeEnumHelperNested(this.bundle,
            {isNested: true, isActivity: false 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia((nested: SomeEnumLike) => {
           return  this.mkUplcData({ HasNestedEnum: { nested: nested } }, 
            "uutMintingDelegate::DelegateDatum.HasNestedEnum");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * generates  UplcData for ***"uutMintingDelegate::DelegateDatum.MultiFieldVariant"***
     * @remarks - ***DelegateDatum$MultiFieldVariantLike*** is the same as the expanded field-types.
     */
    MultiFieldVariant(fields: DelegateDatum$MultiFieldVariantLike | { 
        field1: IntLike,
        field2: string } ) : UplcData {
        const uplc = this.mkUplcData({
            MultiFieldVariant: fields 
        }, "uutMintingDelegate::DelegateDatum.MultiFieldVariant");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates  UplcData for ***"uutMintingDelegate::DelegateDatum.MultiFieldNestedThings"***
     * @remarks - ***DelegateDatum$MultiFieldNestedThingsLike*** is the same as the expanded field-types.
     */
    MultiFieldNestedThings(fields: DelegateDatum$MultiFieldNestedThingsLike | { 
        nestedStruct: SampleStructLike,
        nestedEnumMaybe: Option<
        | { justATag: /*minEnumVariant*/ tagOnly }
        | { justAnInt: /*minEnumVariant*/ { m: IntLike /*singleVariantField*/ }  }
        | { oneNestedStruct: /*minEnumVariant*/ { m: SampleStructLike /*singleVariantField*/ }  }
        | { hasNestedFields: /*minEnumVariant*/ SomeEnum$hasNestedFieldsLike }
        | { hasRecursiveFields: /*minEnumVariant*/ SomeEnum$hasRecursiveFieldsLike }> } ) : UplcData {
        const uplc = this.mkUplcData({
            MultiFieldNestedThings: fields 
        }, "uutMintingDelegate::DelegateDatum.MultiFieldNestedThings");
       return uplc;
    } /*multiFieldVariant enum accessor*/
}


/**
 * Helper class for generating UplcData for variants of the ***CapoLifecycleActivity*** enum type.
 */
export class CapoLifecycleActivityHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       CapoLifecycleActivity,
       CapoLifecycleActivityLike
   >(CapoLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
     * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"*** 
     * with raw seed details included in fields.
     */
    CreatingDelegate(fields: CapoLifecycleActivity$CreatingDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): UplcData
    CreatingDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$CreatingDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$CreatingDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

}


/**
 * Helper class for generating UplcData for variants of the ***DelegateLifecycleActivity*** enum type.
 */
export class DelegateLifecycleActivityHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       DelegateLifecycleActivity,
       DelegateLifecycleActivityLike
   >(DelegateLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
     * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"*** 
     * with raw seed details included in fields.
     */
    ReplacingMe(fields: DelegateLifecycleActivity$ReplacingMeLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): UplcData
    ReplacingMe(
        seedOrUf: hasSeed | DelegateLifecycleActivity$ReplacingMeLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        } else {
            const fields = seedOrUf as DelegateLifecycleActivity$ReplacingMeLike; 
           const uplc = this.mkUplcData({
                ReplacingMe: fields 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 


/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get Retiring() {
        const uplc = this.mkUplcData({ Retiring: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring");
       return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
 */
    get ValidatingSettings() {
        const uplc = this.mkUplcData({ ValidatingSettings: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings");
       return uplc;
    } /* tagOnly variant accessor */
}


/**
 * Helper class for generating UplcData for variants of the ***SpendingActivity*** enum type.
 */
export class SpendingActivityHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       SpendingActivity,
       SpendingActivityLike
   >(SpendingActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"uutMintingDelegate::SpendingActivity._placeholder2SA"***
     */
    _placeholder2SA(
        id: number[]
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           _placeholder2SA: { id: id } 
        }, "uutMintingDelegate::SpendingActivity._placeholder2SA"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates  UplcData for ***"uutMintingDelegate::SpendingActivity.mockWorkingSpendActivity"***
     */
    mockWorkingSpendActivity(
        id: number[]
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           mockWorkingSpendActivity: { id: id } 
        }, "uutMintingDelegate::SpendingActivity.mockWorkingSpendActivity"); /*SingleField enum variant*/
       return uplc;
    }
}


/**
 * Helper class for generating UplcData for variants of the ***MintingActivity*** enum type.
 */
export class MintingActivityHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       MintingActivity,
       MintingActivityLike
   >(MintingActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"uutMintingDelegate::MintingActivity.mintingUuts"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    mintingUuts(value: hasSeed, fields: { 
        purposes: Array<string> 
    } ) : UplcData
    /**
     * generates  UplcData for ***"uutMintingDelegate::MintingActivity.mintingUuts"*** 
     * with raw seed details included in fields.
     */
    mintingUuts(fields: MintingActivity$mintingUutsLike | {
            seed: TxOutputId | string,
            purposes: Array<string>
    } ): UplcData
    mintingUuts(
        seedOrUf: hasSeed | MintingActivity$mintingUutsLike, 
        filteredFields?: { 
            purposes: Array<string>
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                mintingUuts: { seed: seedTxOutputId, ...filteredFields } 
            }, "uutMintingDelegate::MintingActivity.mintingUuts");
           return uplc;
        } else {
            const fields = seedOrUf as MintingActivity$mintingUutsLike; 
           const uplc = this.mkUplcData({
                mintingUuts: fields 
            }, "uutMintingDelegate::MintingActivity.mintingUuts");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 


/**
 * (property getter): UplcData for ***"uutMintingDelegate::MintingActivity.mockOtherActivity"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get mockOtherActivity() {
        const uplc = this.mkUplcData({ mockOtherActivity: {} }, 
            "uutMintingDelegate::MintingActivity.mockOtherActivity");
       return uplc;
    } /* tagOnly variant accessor */
}


/**
 * Helper class for generating UplcData for variants of the ***BurningActivity*** enum type.
 */
export class BurningActivityHelper extends EnumBridge<JustAnEnum> {
    protected __cast = new Cast<
       BurningActivity,
       BurningActivityLike
   >(BurningActivitySchema, { isMainnet: true });

    /**
     * generates  UplcData for ***"uutMintingDelegate::BurningActivity._placeholder2BA"***
     */
    _placeholder2BA(
        recId: number[]
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           _placeholder2BA: { recId: recId } 
        }, "uutMintingDelegate::BurningActivity._placeholder2BA"); /*SingleField enum variant*/
       return uplc;
    }
}


/**
 * Helper class for generating UplcData for variants of the ***CapoLifecycleActivity*** enum type.
 */
export class CapoLifecycleActivityHelperNested extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       CapoLifecycleActivity,
       CapoLifecycleActivityLike
   >(CapoLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"*** 
     * with raw seed details included in fields.
     */
    CreatingDelegate(fields: CapoLifecycleActivity$CreatingDelegateLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): isActivity
    CreatingDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$CreatingDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$CreatingDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingDelegate: fields 
            }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

}


/**
 * Helper class for generating UplcData for variants of the ***DelegateLifecycleActivity*** enum type.
 */
export class DelegateLifecycleActivityHelperNested extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       DelegateLifecycleActivity,
       DelegateLifecycleActivityLike
   >(DelegateLifecycleActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"*** 
     * with raw seed details included in fields.
     */
    ReplacingMe(fields: DelegateLifecycleActivity$ReplacingMeLike | {
            seed: TxOutputId | string,
            purpose: string
    } ): isActivity
    ReplacingMe(
        seedOrUf: hasSeed | DelegateLifecycleActivity$ReplacingMeLike, 
        filteredFields?: { 
            purpose: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        } else {
            const fields = seedOrUf as DelegateLifecycleActivity$ReplacingMeLike; 
           const uplc = this.mkUplcData({
                ReplacingMe: fields 
            }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 


/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get Retiring() {
        const uplc = this.mkUplcData({ Retiring: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring");
       return uplc;
    } /* tagOnly variant accessor */

/**
 * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
 */
    get ValidatingSettings() {
        const uplc = this.mkUplcData({ ValidatingSettings: {} }, 
            "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings");
       return uplc;
    } /* tagOnly variant accessor */
}


/**
 * Helper class for generating UplcData for variants of the ***SpendingActivity*** enum type.
 */
export class SpendingActivityHelperNested extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       SpendingActivity,
       SpendingActivityLike
   >(SpendingActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::SpendingActivity._placeholder2SA"***
     */
    _placeholder2SA(
        id: number[]
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           _placeholder2SA: { id: id } 
        }, "uutMintingDelegate::SpendingActivity._placeholder2SA"); /*SingleField enum variant*/
       return uplc;
    }

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::SpendingActivity.mockWorkingSpendActivity"***
     */
    mockWorkingSpendActivity(
        id: number[]
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           mockWorkingSpendActivity: { id: id } 
        }, "uutMintingDelegate::SpendingActivity.mockWorkingSpendActivity"); /*SingleField enum variant*/
       return uplc;
    }
}


/**
 * Helper class for generating UplcData for variants of the ***MintingActivity*** enum type.
 */
export class MintingActivityHelperNested extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       MintingActivity,
       MintingActivityLike
   >(MintingActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::MintingActivity.mintingUuts"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    mintingUuts(value: hasSeed, fields: { 
        purposes: Array<string> 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::MintingActivity.mintingUuts"*** 
     * with raw seed details included in fields.
     */
    mintingUuts(fields: MintingActivity$mintingUutsLike | {
            seed: TxOutputId | string,
            purposes: Array<string>
    } ): isActivity
    mintingUuts(
        seedOrUf: hasSeed | MintingActivity$mintingUutsLike, 
        filteredFields?: { 
            purposes: Array<string>
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                mintingUuts: { seed: seedTxOutputId, ...filteredFields } 
            }, "uutMintingDelegate::MintingActivity.mintingUuts");
           return uplc;
        } else {
            const fields = seedOrUf as MintingActivity$mintingUutsLike; 
           const uplc = this.mkUplcData({
                mintingUuts: fields 
            }, "uutMintingDelegate::MintingActivity.mintingUuts");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 


/**
 * (property getter): UplcData for ***"uutMintingDelegate::MintingActivity.mockOtherActivity"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get mockOtherActivity() {
        const uplc = this.mkUplcData({ mockOtherActivity: {} }, 
            "uutMintingDelegate::MintingActivity.mockOtherActivity");
       return uplc;
    } /* tagOnly variant accessor */
}


/**
 * Helper class for generating UplcData for variants of the ***BurningActivity*** enum type.
 */
export class BurningActivityHelperNested extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       BurningActivity,
       BurningActivityLike
   >(BurningActivitySchema, { isMainnet: true });

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::BurningActivity._placeholder2BA"***
     */
    _placeholder2BA(
        recId: number[]
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           _placeholder2BA: { recId: recId } 
        }, "uutMintingDelegate::BurningActivity._placeholder2BA"); /*SingleField enum variant*/
       return uplc;
    }
}


/**
 * Helper class for generating UplcData for variants of the ***DelegateActivity*** enum type.
 */
export class DelegateActivityHelper extends EnumBridge<isActivity> {
    protected __cast = new Cast<
       DelegateActivity,
       DelegateActivityLike
   >(DelegateActivitySchema, { isMainnet: true });

    /**
     * access to different variants of the ***nested CapoLifecycleActivity*** type needed for ***DelegateActivity:CapoLifecycleActivities***.
     */
    get CapoLifecycleActivities() {
        const nestedAccessor = new CapoLifecycleActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia((nested: CapoLifecycleActivityLike) => {
           return  this.mkUplcData({ CapoLifecycleActivities: { activity: nested } }, 
            "uutMintingDelegate::DelegateActivity.CapoLifecycleActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested DelegateLifecycleActivity*** type needed for ***DelegateActivity:DelegateLifecycleActivities***.
     */
    get DelegateLifecycleActivities() {
        const nestedAccessor = new DelegateLifecycleActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia((nested: DelegateLifecycleActivityLike) => {
           return  this.mkUplcData({ DelegateLifecycleActivities: { activity: nested } }, 
            "uutMintingDelegate::DelegateActivity.DelegateLifecycleActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested SpendingActivity*** type needed for ***DelegateActivity:SpendingActivities***.
     */
    get SpendingActivities() {
        const nestedAccessor = new SpendingActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia((nested: SpendingActivityLike) => {
           return  this.mkUplcData({ SpendingActivities: { activity: nested } }, 
            "uutMintingDelegate::DelegateActivity.SpendingActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested MintingActivity*** type needed for ***DelegateActivity:MintingActivities***.
     */
    get MintingActivities() {
        const nestedAccessor = new MintingActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia((nested: MintingActivityLike) => {
           return  this.mkUplcData({ MintingActivities: { activity: nested } }, 
            "uutMintingDelegate::DelegateActivity.MintingActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * access to different variants of the ***nested BurningActivity*** type needed for ***DelegateActivity:BurningActivities***.
     */
    get BurningActivities() {
        const nestedAccessor = new BurningActivityHelperNested(this.bundle,
            {isNested: true, isActivity: true 
        });
        //@ts-expect-error drilling through the protected accessor.  See more comments about that above
        nestedAccessor.mkDataVia((nested: BurningActivityLike) => {
           return  this.mkUplcData({ BurningActivities: { activity: nested } }, 
            "uutMintingDelegate::DelegateActivity.BurningActivities");
        });
        return nestedAccessor;
    } /* nested enum accessor */

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::DelegateActivity.CreatingDelegatedData"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     */
    CreatingDelegatedData(value: hasSeed, fields: { 
        dataType: string 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::DelegateActivity.CreatingDelegatedData"*** 
     * with raw seed details included in fields.
     */
    CreatingDelegatedData(fields: DelegateActivity$CreatingDelegatedDataLike | {
            seed: TxOutputId | string,
            dataType: string
    } ): isActivity
    CreatingDelegatedData(
        seedOrUf: hasSeed | DelegateActivity$CreatingDelegatedDataLike, 
        filteredFields?: { 
            dataType: string
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields } 
            }, "uutMintingDelegate::DelegateActivity.CreatingDelegatedData");
           return uplc;
        } else {
            const fields = seedOrUf as DelegateActivity$CreatingDelegatedDataLike; 
           const uplc = this.mkUplcData({
                CreatingDelegatedData: fields 
            }, "uutMintingDelegate::DelegateActivity.CreatingDelegatedData");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 


    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::DelegateActivity.UpdatingDelegatedData"***
     * @remarks - ***DelegateActivity$UpdatingDelegatedDataLike*** is the same as the expanded field-types.
     */
    UpdatingDelegatedData(fields: DelegateActivity$UpdatingDelegatedDataLike | { 
        dataType: string,
        recId: number[] } ) : isActivity {
        const uplc = this.mkUplcData({
            UpdatingDelegatedData: fields 
        }, "uutMintingDelegate::DelegateActivity.UpdatingDelegatedData");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::DelegateActivity.DeletingDelegatedData"***
     * @remarks - ***DelegateActivity$DeletingDelegatedDataLike*** is the same as the expanded field-types.
     */
    DeletingDelegatedData(fields: DelegateActivity$DeletingDelegatedDataLike | { 
        dataType: string,
        recId: number[] } ) : isActivity {
        const uplc = this.mkUplcData({
            DeletingDelegatedData: fields 
        }, "uutMintingDelegate::DelegateActivity.DeletingDelegatedData");
       return uplc;
    } /*multiFieldVariant enum accessor*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"uutMintingDelegate::DelegateActivity.MultipleDelegateActivities"***
     */
    MultipleDelegateActivities(
        activities: Array<UplcData>
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           MultipleDelegateActivities: { activities: activities } 
        }, "uutMintingDelegate::DelegateActivity.MultipleDelegateActivities"); /*SingleField enum variant*/
       return uplc;
    }
}


export const DelegationDetailSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
    "name": "DelegationDetail",
    "fieldTypes": [
        {
            "name": "capoAddr",
            "type": {
                "kind": "internal",
                "name": "Address"
            }
        },
        {
            "name": "mph",
            "type": {
                "kind": "internal",
                "name": "MintingPolicyHash"
            }
        },
        {
            "name": "tn",
            "type": {
                "kind": "internal",
                "name": "ByteArray"
            }
        }
    ]
};

export const SampleStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__uutMintingDelegate__SampleStruct[]",
    "name": "SampleStruct",
    "fieldTypes": [
        {
            "name": "a",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "b",
            "type": {
                "kind": "map",
                "keyType": {
                    "kind": "internal",
                    "name": "String"
                },
                "valueType": {
                    "kind": "internal",
                    "name": "ByteArray"
                }
            }
        },
        {
            "name": "c",
            "type": {
                "kind": "list",
                "itemType": {
                    "kind": "internal",
                    "name": "Bool"
                }
            }
        },
        {
            "name": "d",
            "type": {
                "kind": "option",
                "someType": {
                    "kind": "internal",
                    "name": "Data"
                }
            }
        }
    ]
};

export const SomeEnumSchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "SomeEnum",
    "id": "__module__uutMintingDelegate__SomeEnum[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__uutMintingDelegate__SomeEnum[]__justATag",
            "name": "justATag",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__uutMintingDelegate__SomeEnum[]__justAnInt",
            "name": "justAnInt",
            "fieldTypes": [
                {
                    "name": "m",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__uutMintingDelegate__SomeEnum[]__oneNestedStruct",
            "name": "oneNestedStruct",
            "fieldTypes": [
                {
                    "name": "m",
                    "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__uutMintingDelegate__SampleStruct[]",
                        "name": "SampleStruct",
                        "fieldTypes": [
                            {
                                "name": "a",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                }
                            },
                            {
                                "name": "b",
                                "type": {
                                    "kind": "map",
                                    "keyType": {
                                        "kind": "internal",
                                        "name": "String"
                                    },
                                    "valueType": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                    }
                                }
                            },
                            {
                                "name": "c",
                                "type": {
                                    "kind": "list",
                                    "itemType": {
                                        "kind": "internal",
                                        "name": "Bool"
                                    }
                                }
                            },
                            {
                                "name": "d",
                                "type": {
                                    "kind": "option",
                                    "someType": {
                                        "kind": "internal",
                                        "name": "Data"
                                    }
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__uutMintingDelegate__SomeEnum[]__hasNestedFields",
            "name": "hasNestedFields",
            "fieldTypes": [
                {
                    "name": "m",
                    "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__uutMintingDelegate__SampleStruct[]",
                        "name": "SampleStruct",
                        "fieldTypes": [
                            {
                                "name": "a",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                }
                            },
                            {
                                "name": "b",
                                "type": {
                                    "kind": "map",
                                    "keyType": {
                                        "kind": "internal",
                                        "name": "String"
                                    },
                                    "valueType": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                    }
                                }
                            },
                            {
                                "name": "c",
                                "type": {
                                    "kind": "list",
                                    "itemType": {
                                        "kind": "internal",
                                        "name": "Bool"
                                    }
                                }
                            },
                            {
                                "name": "d",
                                "type": {
                                    "kind": "option",
                                    "someType": {
                                        "kind": "internal",
                                        "name": "Data"
                                    }
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "n",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__uutMintingDelegate__SomeEnum[]__hasRecursiveFields",
            "name": "hasRecursiveFields",
            "fieldTypes": [
                {
                    "name": "placeholder",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                },
                {
                    "name": "ph2",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        }
    ]
};

export const DelegateDatumSchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateDatum",
    "id": "__module__uutMintingDelegate__DelegateDatum[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__IsDelegation",
            "name": "IsDelegation",
            "fieldTypes": [
                {
                    "name": "dd",
                    "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
                        "name": "DelegationDetail",
                        "fieldTypes": [
                            {
                                "name": "capoAddr",
                                "type": {
                                    "kind": "internal",
                                    "name": "Address"
                                }
                            },
                            {
                                "name": "mph",
                                "type": {
                                    "kind": "internal",
                                    "name": "MintingPolicyHash"
                                }
                            },
                            {
                                "name": "tn",
                                "type": {
                                    "kind": "internal",
                                    "name": "ByteArray"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__ScriptReference",
            "name": "ScriptReference",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__SingleDataElement",
            "name": "SingleDataElement",
            "fieldTypes": [
                {
                    "name": "aString",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__SingleNestedStruct",
            "name": "SingleNestedStruct",
            "fieldTypes": [
                {
                    "name": "aStruct",
                    "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__uutMintingDelegate__SampleStruct[]",
                        "name": "SampleStruct",
                        "fieldTypes": [
                            {
                                "name": "a",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                }
                            },
                            {
                                "name": "b",
                                "type": {
                                    "kind": "map",
                                    "keyType": {
                                        "kind": "internal",
                                        "name": "String"
                                    },
                                    "valueType": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                    }
                                }
                            },
                            {
                                "name": "c",
                                "type": {
                                    "kind": "list",
                                    "itemType": {
                                        "kind": "internal",
                                        "name": "Bool"
                                    }
                                }
                            },
                            {
                                "name": "d",
                                "type": {
                                    "kind": "option",
                                    "someType": {
                                        "kind": "internal",
                                        "name": "Data"
                                    }
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__HasNestedEnum",
            "name": "HasNestedEnum",
            "fieldTypes": [
                {
                    "name": "nested",
                    "type": {
                        "kind": "enum",
                        "name": "SomeEnum",
                        "id": "__module__uutMintingDelegate__SomeEnum[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__uutMintingDelegate__SomeEnum[]__justATag",
                                "name": "justATag",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__uutMintingDelegate__SomeEnum[]__justAnInt",
                                "name": "justAnInt",
                                "fieldTypes": [
                                    {
                                        "name": "m",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 2,
                                "id": "__module__uutMintingDelegate__SomeEnum[]__oneNestedStruct",
                                "name": "oneNestedStruct",
                                "fieldTypes": [
                                    {
                                        "name": "m",
                                        "type": {
                                            "kind": "struct",
                                            "format": "list",
                                            "id": "__module__uutMintingDelegate__SampleStruct[]",
                                            "name": "SampleStruct",
                                            "fieldTypes": [
                                                {
                                                    "name": "a",
                                                    "type": {
                                                        "kind": "internal",
                                                        "name": "Int"
                                                    }
                                                },
                                                {
                                                    "name": "b",
                                                    "type": {
                                                        "kind": "map",
                                                        "keyType": {
                                                            "kind": "internal",
                                                            "name": "String"
                                                        },
                                                        "valueType": {
                                                            "kind": "internal",
                                                            "name": "ByteArray"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "c",
                                                    "type": {
                                                        "kind": "list",
                                                        "itemType": {
                                                            "kind": "internal",
                                                            "name": "Bool"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "d",
                                                    "type": {
                                                        "kind": "option",
                                                        "someType": {
                                                            "kind": "internal",
                                                            "name": "Data"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 3,
                                "id": "__module__uutMintingDelegate__SomeEnum[]__hasNestedFields",
                                "name": "hasNestedFields",
                                "fieldTypes": [
                                    {
                                        "name": "m",
                                        "type": {
                                            "kind": "struct",
                                            "format": "list",
                                            "id": "__module__uutMintingDelegate__SampleStruct[]",
                                            "name": "SampleStruct",
                                            "fieldTypes": [
                                                {
                                                    "name": "a",
                                                    "type": {
                                                        "kind": "internal",
                                                        "name": "Int"
                                                    }
                                                },
                                                {
                                                    "name": "b",
                                                    "type": {
                                                        "kind": "map",
                                                        "keyType": {
                                                            "kind": "internal",
                                                            "name": "String"
                                                        },
                                                        "valueType": {
                                                            "kind": "internal",
                                                            "name": "ByteArray"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "c",
                                                    "type": {
                                                        "kind": "list",
                                                        "itemType": {
                                                            "kind": "internal",
                                                            "name": "Bool"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "d",
                                                    "type": {
                                                        "kind": "option",
                                                        "someType": {
                                                            "kind": "internal",
                                                            "name": "Data"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "name": "n",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 4,
                                "id": "__module__uutMintingDelegate__SomeEnum[]__hasRecursiveFields",
                                "name": "hasRecursiveFields",
                                "fieldTypes": [
                                    {
                                        "name": "placeholder",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    },
                                    {
                                        "name": "ph2",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__MultiFieldVariant",
            "name": "MultiFieldVariant",
            "fieldTypes": [
                {
                    "name": "field1",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                },
                {
                    "name": "field2",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 6,
            "id": "__module__uutMintingDelegate__DelegateDatum[]__MultiFieldNestedThings",
            "name": "MultiFieldNestedThings",
            "fieldTypes": [
                {
                    "name": "nestedStruct",
                    "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__uutMintingDelegate__SampleStruct[]",
                        "name": "SampleStruct",
                        "fieldTypes": [
                            {
                                "name": "a",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                }
                            },
                            {
                                "name": "b",
                                "type": {
                                    "kind": "map",
                                    "keyType": {
                                        "kind": "internal",
                                        "name": "String"
                                    },
                                    "valueType": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                    }
                                }
                            },
                            {
                                "name": "c",
                                "type": {
                                    "kind": "list",
                                    "itemType": {
                                        "kind": "internal",
                                        "name": "Bool"
                                    }
                                }
                            },
                            {
                                "name": "d",
                                "type": {
                                    "kind": "option",
                                    "someType": {
                                        "kind": "internal",
                                        "name": "Data"
                                    }
                                }
                            }
                        ]
                    }
                },
                {
                    "name": "nestedEnumMaybe",
                    "type": {
                        "kind": "option",
                        "someType": {
                            "kind": "enum",
                            "name": "SomeEnum",
                            "id": "__module__uutMintingDelegate__SomeEnum[]",
                            "variantTypes": [
                                {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__uutMintingDelegate__SomeEnum[]__justATag",
                                    "name": "justATag",
                                    "fieldTypes": []
                                },
                                {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__uutMintingDelegate__SomeEnum[]__justAnInt",
                                    "name": "justAnInt",
                                    "fieldTypes": [
                                        {
                                            "name": "m",
                                            "type": {
                                                "kind": "internal",
                                                "name": "Int"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__uutMintingDelegate__SomeEnum[]__oneNestedStruct",
                                    "name": "oneNestedStruct",
                                    "fieldTypes": [
                                        {
                                            "name": "m",
                                            "type": {
                                                "kind": "struct",
                                                "format": "list",
                                                "id": "__module__uutMintingDelegate__SampleStruct[]",
                                                "name": "SampleStruct",
                                                "fieldTypes": [
                                                    {
                                                        "name": "a",
                                                        "type": {
                                                            "kind": "internal",
                                                            "name": "Int"
                                                        }
                                                    },
                                                    {
                                                        "name": "b",
                                                        "type": {
                                                            "kind": "map",
                                                            "keyType": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            },
                                                            "valueType": {
                                                                "kind": "internal",
                                                                "name": "ByteArray"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "c",
                                                        "type": {
                                                            "kind": "list",
                                                            "itemType": {
                                                                "kind": "internal",
                                                                "name": "Bool"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "d",
                                                        "type": {
                                                            "kind": "option",
                                                            "someType": {
                                                                "kind": "internal",
                                                                "name": "Data"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__uutMintingDelegate__SomeEnum[]__hasNestedFields",
                                    "name": "hasNestedFields",
                                    "fieldTypes": [
                                        {
                                            "name": "m",
                                            "type": {
                                                "kind": "struct",
                                                "format": "list",
                                                "id": "__module__uutMintingDelegate__SampleStruct[]",
                                                "name": "SampleStruct",
                                                "fieldTypes": [
                                                    {
                                                        "name": "a",
                                                        "type": {
                                                            "kind": "internal",
                                                            "name": "Int"
                                                        }
                                                    },
                                                    {
                                                        "name": "b",
                                                        "type": {
                                                            "kind": "map",
                                                            "keyType": {
                                                                "kind": "internal",
                                                                "name": "String"
                                                            },
                                                            "valueType": {
                                                                "kind": "internal",
                                                                "name": "ByteArray"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "c",
                                                        "type": {
                                                            "kind": "list",
                                                            "itemType": {
                                                                "kind": "internal",
                                                                "name": "Bool"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "d",
                                                        "type": {
                                                            "kind": "option",
                                                            "someType": {
                                                                "kind": "internal",
                                                                "name": "Data"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "n",
                                            "type": {
                                                "kind": "internal",
                                                "name": "Int"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__uutMintingDelegate__SomeEnum[]__hasRecursiveFields",
                                    "name": "hasRecursiveFields",
                                    "fieldTypes": [
                                        {
                                            "name": "placeholder",
                                            "type": {
                                                "kind": "internal",
                                                "name": "Int"
                                            }
                                        },
                                        {
                                            "name": "ph2",
                                            "type": {
                                                "kind": "internal",
                                                "name": "String"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                }
            ]
        }
    ]
};

export const CapoLifecycleActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "CapoLifecycleActivity",
    "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
            "name": "CreatingDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purpose",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        }
    ]
};

export const DelegateLifecycleActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateLifecycleActivity",
    "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
            "name": "ReplacingMe",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purpose",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
            "name": "Retiring",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
            "name": "ValidatingSettings",
            "fieldTypes": []
        }
    ]
};

export const SpendingActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "SpendingActivity",
    "id": "__module__uutMintingDelegate__SpendingActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__uutMintingDelegate__SpendingActivity[]___placeholder2SA",
            "name": "_placeholder2SA",
            "fieldTypes": [
                {
                    "name": "id",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__uutMintingDelegate__SpendingActivity[]__mockWorkingSpendActivity",
            "name": "mockWorkingSpendActivity",
            "fieldTypes": [
                {
                    "name": "id",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        }
    ]
};

export const MintingActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "MintingActivity",
    "id": "__module__uutMintingDelegate__MintingActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__uutMintingDelegate__MintingActivity[]__mintingUuts",
            "name": "mintingUuts",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "purposes",
                    "type": {
                        "kind": "list",
                        "itemType": {
                            "kind": "internal",
                            "name": "String"
                        }
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__uutMintingDelegate__MintingActivity[]__mockOtherActivity",
            "name": "mockOtherActivity",
            "fieldTypes": []
        }
    ]
};

export const BurningActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "BurningActivity",
    "id": "__module__uutMintingDelegate__BurningActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__uutMintingDelegate__BurningActivity[]___placeholder2BA",
            "name": "_placeholder2BA",
            "fieldTypes": [
                {
                    "name": "recId",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        }
    ]
};

export const DelegateActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "DelegateActivity",
    "id": "__module__uutMintingDelegate__DelegateActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__CapoLifecycleActivities",
            "name": "CapoLifecycleActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "CapoLifecycleActivity",
                        "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                                "name": "CreatingDelegate",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purpose",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__DelegateLifecycleActivities",
            "name": "DelegateLifecycleActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "DelegateLifecycleActivity",
                        "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
                                "name": "ReplacingMe",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purpose",
                                        "type": {
                                            "kind": "internal",
                                            "name": "String"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
                                "name": "Retiring",
                                "fieldTypes": []
                            },
                            {
                                "kind": "variant",
                                "tag": 2,
                                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
                                "name": "ValidatingSettings",
                                "fieldTypes": []
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__SpendingActivities",
            "name": "SpendingActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "SpendingActivity",
                        "id": "__module__uutMintingDelegate__SpendingActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__uutMintingDelegate__SpendingActivity[]___placeholder2SA",
                                "name": "_placeholder2SA",
                                "fieldTypes": [
                                    {
                                        "name": "id",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__uutMintingDelegate__SpendingActivity[]__mockWorkingSpendActivity",
                                "name": "mockWorkingSpendActivity",
                                "fieldTypes": [
                                    {
                                        "name": "id",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__MintingActivities",
            "name": "MintingActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "MintingActivity",
                        "id": "__module__uutMintingDelegate__MintingActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__uutMintingDelegate__MintingActivity[]__mintingUuts",
                                "name": "mintingUuts",
                                "fieldTypes": [
                                    {
                                        "name": "seed",
                                        "type": {
                                            "kind": "internal",
                                            "name": "TxOutputId"
                                        }
                                    },
                                    {
                                        "name": "purposes",
                                        "type": {
                                            "kind": "list",
                                            "itemType": {
                                                "kind": "internal",
                                                "name": "String"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "kind": "variant",
                                "tag": 1,
                                "id": "__module__uutMintingDelegate__MintingActivity[]__mockOtherActivity",
                                "name": "mockOtherActivity",
                                "fieldTypes": []
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__BurningActivities",
            "name": "BurningActivities",
            "fieldTypes": [
                {
                    "name": "activity",
                    "type": {
                        "kind": "enum",
                        "name": "BurningActivity",
                        "id": "__module__uutMintingDelegate__BurningActivity[]",
                        "variantTypes": [
                            {
                                "kind": "variant",
                                "tag": 0,
                                "id": "__module__uutMintingDelegate__BurningActivity[]___placeholder2BA",
                                "name": "_placeholder2BA",
                                "fieldTypes": [
                                    {
                                        "name": "recId",
                                        "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__CreatingDelegatedData",
            "name": "CreatingDelegatedData",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "dataType",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 6,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__UpdatingDelegatedData",
            "name": "UpdatingDelegatedData",
            "fieldTypes": [
                {
                    "name": "dataType",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "recId",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 7,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__DeletingDelegatedData",
            "name": "DeletingDelegatedData",
            "fieldTypes": [
                {
                    "name": "dataType",
                    "type": {
                        "kind": "internal",
                        "name": "String"
                    }
                },
                {
                    "name": "recId",
                    "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 8,
            "id": "__module__uutMintingDelegate__DelegateActivity[]__MultipleDelegateActivities",
            "name": "MultipleDelegateActivities",
            "fieldTypes": [
                {
                    "name": "activities",
                    "type": {
                        "kind": "list",
                        "itemType": {
                            "kind": "internal",
                            "name": "Data"
                        }
                    }
                }
            ]
        }
    ]
};
// }
