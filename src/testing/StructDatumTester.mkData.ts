// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in StructDatumTester (src/testing/StructDatumTester.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema } from "@helios-lang/type-utils";


import { someDataMaker } from "../helios/dataBridge/someDataMaker.js"
import type { tagOnly } from "../helios/HeliosScriptBundle.js"
import type {hasSeed} from "../StellarContract.js"


import type {
    struct3, struct3Like,
    OtherStruct, OtherStructLike,
    DatumStruct, DatumStructLike
} from "./StructDatumTester.typeInfo.js"

export default class mkDataBridgeStructDatumTester extends someDataMaker {
    __datumCast = new Cast<
        DatumStruct, DatumStructLike
    >(DatumStructSchema}, { isMainnet: true }); // datumAccessorCast

    /**
     * generates UplcData for the datum type (DatumStruct) for the StructDatumTester script
     */
    datum(x: DatumStructLike) {
        return this.__datumCast.toUplcData(x);
    }

    /**
     * generates UplcData for the datum type (DatumStruct) for the StructDatumTester script
     * @remarks - same as {@link datum}
     */
    DatumStruct(fields: DatumStructLike) {
        return this.__datumCast.toUplcData(fields);
    } // datumAccessor/byName 

    // include accessors for activity types

    // include accessors for other enums (other than datum/activity)

    // include accessors for any other structs (other than datum/activity)

    // TODO: include any utility functions defined in the contract
}



