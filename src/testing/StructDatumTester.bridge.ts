// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in StructDatumTester (src/testing/StructDatumTester.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { DataBridge } from "../helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../helios/HeliosScriptBundle.js"
import type {hasSeed, isActivity} from "../StellarContract.js"

// todo: namespacing for all the good stuff here
// namespace StructDatumTesterDataBridge {

import type {
    struct3, struct3Like,
    OtherStruct, OtherStructLike,
    DatumStruct, DatumStructLike
} from "./StructDatumTester.typeInfo.js";

export type * as types from "./StructDatumTester.typeInfo.js";
import type * as types from "./StructDatumTester.typeInfo.js";



//Note about @ts-expect-error drilling through protected accessors: This 
//   allows the interface for the nested accessor to show only the public details,
//   while allowing us to collaborate between these two closely-related classes.
//   Like "friends" in C++.

/**
 * data bridge for StructDatumTester script (defined in StructDatumTester)}
 * main: src/testing/StructDatumTester.hl, project: stellar-contracts
 * @remarks - note that you may override get dataBridgeName() { return "..." } to customize the name of this bridge class
 */
export class StructDatumTesterDataBridge extends DataBridge {
    __datumCast = new Cast<
        DatumStruct, DatumStructLike
    >(DatumStructSchema, { isMainnet: true }); // datumAccessorCast

        /**
         * reads UplcData for the datum type (DatumStruct) for the StructDatumTester script
         */
        readDatum(d: UplcData) { return this.__datumCast.fromUplcData(d); }

    /**
     * generates UplcData for the datum type (DatumStruct) for the StructDatumTester script
     */
    datum(x: DatumStructLike) {
        return this.__datumCast.toUplcData(x);
    }

    /**
     * generates UplcData for the datum type (DatumStruct) for the StructDatumTester script
     * @remarks - same as {@link datum}
     */
    DatumStruct(fields: DatumStructLike) {
        return this.__datumCast.toUplcData(fields);
    } // datumAccessor/byName 

            
    /**
     * generates UplcData for the activity type (undefined) for the StructDatumTester script
     * @remarks - same as {@link activity}
     */
    undefined(activity: IntLike) {
        return this.__activityCast.toUplcData(activity);
    }


    types = {


        struct3: (fields: struct3Like | {
    thirdLevelF1: /*minStructField*/ IntLike
}
) => {
        return this.__struct3Cast.toUplcData(fields);
    },
        OtherStruct: (fields: OtherStructLike | {
    secondLevelF1: /*minStructField*/ IntLike
    secondLevelF2: /*minStructField*/ struct3Like
}
) => {
        return this.__OtherStructCast.toUplcData(fields);
    },
        DatumStruct: (fields: DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
}
) => {
        return this.__DatumStructCast.toUplcData(fields);
    },    }    

    __struct3Cast = new Cast<
                struct3, struct3Like
            >(struct3Schema, { isMainnet: true });
    __OtherStructCast = new Cast<
                OtherStruct, OtherStructLike
            >(OtherStructSchema, { isMainnet: true });
    __DatumStructCast = new Cast<
                DatumStruct, DatumStructLike
            >(DatumStructSchema, { isMainnet: true });


}
export default StructDatumTesterDataBridge;



export const struct3Schema : StructTypeSchema = {
    "kind": "struct",
    "format": "singleton",
    "id": "__module__StructDatumTester__struct3[]",
    "name": "struct3",
    "fieldTypes": [
        {
            "name": "thirdLevelF1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        }
    ]
};

export const OtherStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__StructDatumTester__OtherStruct[]",
    "name": "OtherStruct",
    "fieldTypes": [
        {
            "name": "secondLevelF1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "secondLevelF2",
            "type": {
                "kind": "struct",
                "format": "singleton",
                "id": "__module__StructDatumTester__struct3[]",
                "name": "struct3",
                "fieldTypes": [
                    {
                        "name": "thirdLevelF1",
                        "type": {
                            "kind": "internal",
                            "name": "Int"
                        }
                    }
                ]
            }
        }
    ]
};

export const DatumStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__StructDatumTester__DatumStruct[]",
    "name": "DatumStruct",
    "fieldTypes": [
        {
            "name": "field1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "field2",
            "type": {
                "kind": "internal",
                "name": "String"
            }
        },
        {
            "name": "field3",
            "type": {
                "kind": "map",
                "keyType": {
                    "kind": "internal",
                    "name": "String"
                },
                "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__StructDatumTester__OtherStruct[]",
                    "name": "OtherStruct",
                    "fieldTypes": [
                        {
                            "name": "secondLevelF1",
                            "type": {
                                "kind": "internal",
                                "name": "Int"
                            }
                        },
                        {
                            "name": "secondLevelF2",
                            "type": {
                                "kind": "struct",
                                "format": "singleton",
                                "id": "__module__StructDatumTester__struct3[]",
                                "name": "struct3",
                                "fieldTypes": [
                                    {
                                        "name": "thirdLevelF1",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ]
};
// }
