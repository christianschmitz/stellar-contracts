// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in StructDatumTester (src/testing/StructDatumTester.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData, ConstrData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { 
    DataBridge, 
    ContractDataBridge, 
    DataBridgeReaderClass,
    type callWith,
} from "../helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../helios/HeliosScriptBundle.js"
import type { IntersectedEnum } from "../helios/typeUtils.js"
import type {hasSeed, isActivity} from "../StellarContract.js"


import type {
    struct3, struct3Like,
    OtherStruct, OtherStructLike,
    DatumStruct, DatumStructLike
} from "./StructDatumTester.typeInfo.js";

export type * as types from "./StructDatumTester.typeInfo.js";
import type * as types from "./StructDatumTester.typeInfo.js";



//Note about @ts-expect-error drilling through protected accessors: This 
//   allows the interface for the nested accessor to show only the public details,
//   while allowing us to collaborate between these two closely-related classes.
//   Like "friends" in C++.

/**
 * data bridge for **StructDatumTester** script (defined in class ***StructDatumTester***)}
 * main: **src/testing/StructDatumTester.hl**, project: **stellar-contracts**
 * @remarks - note that you may override get dataBridgeName() { return "..." } to customize the name of this bridge class
 */
export class StructDatumTesterDataBridge extends ContractDataBridge {
    static isAbstract = false as const;
    isAbstract = false as const;
    /**
     * Helper class for generating UplcData for the datum type ***
     * for this contract script. 
     * 
     * This accessor object is callable with the indicated argument-type
     * @example - contract.mkDatum(arg: /* ... see the indicated callWith args \*\/)
    *
    * DatumStructLike is the same as the expanded type details given

     */
    datum: callWith<DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
}
, DatumStructHelper>
     = new DatumStructHelper(this.bundle, {}) as any  // datumAccessor/struct


    /**
     * this is the specific type of datum for the `StructDatumTester` script
     * normally, we suggest accessing the `datum` property instead.
     */
    DatumStruct: callWith<DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
}
, DatumStructHelper> = this.datum;

    readDatum : (d: UplcData) => IntersectedEnum<DatumStruct> = (d) =>  {
        //XXX@ts-expect-error drilling through the protected accessor.
        //   ... see more comments about that above
        //return this.datum.__cast.fromUplcData(d);
        return this.reader.DatumStruct(d)
    }


    __activityCast = new Cast<
        bigint, IntLike
    >({"kind":"internal","name":"Int"}, { isMainnet: true }); // activityAccessorCast
            
    /**
     * generates UplcData for the activity type (***undefined***) for the `StructDatumTester` script
     * @remarks - same as {@link activity}
     */
    undefined(activity: IntLike) {
        return this.__activityCast.toUplcData(activity);
    }

    reader = new StructDatumTesterDataBridgeReader(this);

    /**
     * accessors for all the types defined in the `StructDatumTester` script
     * @remarks - these accessors are used to generate UplcData for each type
     */
    types = {


      /**
       * generates UplcData for the enum type ***struct3*** for the `StructDatumTester` script
       */
        struct3: (fields: struct3Like | {
    thirdLevelF1: /*minStructField*/ IntLike
}
) => {
        return this.__struct3Cast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***OtherStruct*** for the `StructDatumTester` script
       */
        OtherStruct: (fields: OtherStructLike | {
    secondLevelF1: /*minStructField*/ IntLike
    secondLevelF2: /*minStructField*/ struct3Like
}
) => {
        return this.__OtherStructCast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***DatumStruct*** for the `StructDatumTester` script
       */
        DatumStruct: (fields: DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
}
) => {
        return this.__DatumStructCast.toUplcData(fields);
    },    }    

    protected __struct3Cast = new Cast<
                struct3, struct3Like
            >(struct3Schema, { isMainnet: true });
    protected __OtherStructCast = new Cast<
                OtherStruct, OtherStructLike
            >(OtherStructSchema, { isMainnet: true });
    protected __DatumStructCast = new Cast<
                DatumStruct, DatumStructLike
            >(DatumStructSchema, { isMainnet: true });


}
export default StructDatumTesterDataBridge;

class StructDatumTesterDataBridgeReader extends DataBridgeReaderClass {
    constructor(public bridge: StructDatumTesterDataBridge) {
        super();
    }

    /**
        * reads UplcData *known to fit the **struct3*** struct type,
        * for the StructDatumTester script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the struct type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    struct3(d: UplcData) {
        //@ts-expect-error drilling through the protected accessor.
        const cast = this.bridge.__struct3Cast;
        return cast.fromUplcData(d);        
    } /* structReader helper */

    /**
        * reads UplcData *known to fit the **OtherStruct*** struct type,
        * for the StructDatumTester script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the struct type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    OtherStruct(d: UplcData) {
        //@ts-expect-error drilling through the protected accessor.
        const cast = this.bridge.__OtherStructCast;
        return cast.fromUplcData(d);        
    } /* structReader helper */

    /**
        * reads UplcData *known to fit the **DatumStruct*** struct type,
        * for the StructDatumTester script.
        * ### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the struct type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DatumStruct(d: UplcData) {
        //@ts-expect-error drilling through the protected accessor.
        const cast = this.bridge.__DatumStructCast;
        return cast.fromUplcData(d);        
    } /* structReader helper */

}

/**
 * Helper class for generating UplcData for the ***struct3*** struct type.
 */
export class struct3Helper extends DataBridge {
    isCallable = true
    protected __cast = new Cast<
        struct3,
        struct3Like
    >(struct3Schema, { isMainnet: true });

    // You might expect a function as follows, but no.  However, a similar uplc-generating capability
    // is instead provided, with that same sort of interface, by a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a üéÅ for curiosity-seekers! 
    //
    // struct3(fields: struct3Like) {
    //    return this.__cast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for the ***OtherStruct*** struct type.
 */
export class OtherStructHelper extends DataBridge {
    isCallable = true
    protected __cast = new Cast<
        OtherStruct,
        OtherStructLike
    >(OtherStructSchema, { isMainnet: true });

    // You might expect a function as follows, but no.  However, a similar uplc-generating capability
    // is instead provided, with that same sort of interface, by a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a üéÅ for curiosity-seekers! 
    //
    // OtherStruct(fields: OtherStructLike) {
    //    return this.__cast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for the ***DatumStruct*** struct type.
 */
export class DatumStructHelper extends DataBridge {
    isCallable = true
    protected __cast = new Cast<
        DatumStruct,
        DatumStructLike
    >(DatumStructSchema, { isMainnet: true });

    // You might expect a function as follows, but no.  However, a similar uplc-generating capability
    // is instead provided, with that same sort of interface, by a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a üéÅ for curiosity-seekers! 
    //
    // DatumStruct(fields: DatumStructLike) {
    //    return this.__cast.toUplcData(fields);
    //}
} //mkStructHelperClass 


export const struct3Schema : StructTypeSchema = {
    "kind": "struct",
    "format": "singleton",
    "id": "__module__StructDatumTester__struct3[]",
    "name": "struct3",
    "fieldTypes": [
        {
            "name": "thirdLevelF1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        }
    ]
};

export const OtherStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__StructDatumTester__OtherStruct[]",
    "name": "OtherStruct",
    "fieldTypes": [
        {
            "name": "secondLevelF1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "secondLevelF2",
            "type": {
                "kind": "struct",
                "format": "singleton",
                "id": "__module__StructDatumTester__struct3[]",
                "name": "struct3",
                "fieldTypes": [
                    {
                        "name": "thirdLevelF1",
                        "type": {
                            "kind": "internal",
                            "name": "Int"
                        }
                    }
                ]
            }
        }
    ]
};

export const DatumStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__StructDatumTester__DatumStruct[]",
    "name": "DatumStruct",
    "fieldTypes": [
        {
            "name": "field1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "field2",
            "type": {
                "kind": "internal",
                "name": "String"
            }
        },
        {
            "name": "field3",
            "type": {
                "kind": "map",
                "keyType": {
                    "kind": "internal",
                    "name": "String"
                },
                "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__StructDatumTester__OtherStruct[]",
                    "name": "OtherStruct",
                    "fieldTypes": [
                        {
                            "name": "secondLevelF1",
                            "type": {
                                "kind": "internal",
                                "name": "Int"
                            }
                        },
                        {
                            "name": "secondLevelF2",
                            "type": {
                                "kind": "struct",
                                "format": "singleton",
                                "id": "__module__StructDatumTester__struct3[]",
                                "name": "struct3",
                                "fieldTypes": [
                                    {
                                        "name": "thirdLevelF1",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ]
};
// }
