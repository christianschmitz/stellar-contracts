module CapoHelpers 

import {
    mkTv,
    tvCharter,
    mustFindInputRedeemer,
    outputAndDatum,
    AnyData,
    REQT,
    TODO
} from StellarHeliosHelpers

import {tx, get_current_input} from ScriptContext
import {
    TypeMap
} from TypeMapMetadata

import { 
    RelativeDelegateLink,
    AbstractDelegateActivitiesEnum,
    CapoLifecycleActivity,
    DgTknDisposition as DgTkn,
    DelegateRole,
    PendingDelegateChange
} from CapoDelegateHelpers

enum UtxoSource {
    RefInput
    Input

}

enum dgd_DataSrc {
    Unk
    Input { utxo: TxInput }
    Output { txo: TxOutput }
    Both {
        utxo: TxInput
        txo: TxOutput
    }
}

enum ManifestEntryType {
    // the name (entry's key) is simply a reference to a specific token 
    // (typically a specific kind of dgData record 
    //  ...using application-specific convention)
    NamedTokenRef 
    // the referenced token controls a specific type of dgData record,
    // ... indicated by the entry's key.  With refCount, it inventories multiple 
    // ... thread tokens, each held by the delegate contract, for parallelism.
    DgDataPolicy {
        policyLink: RelativeDelegateLink
        refCount: Int
    }
    // the referenced token inventories thread-tokens for a specific delegate role
    //  ... the key is expected to match that delegate role (
    //    mintDgt, spendDgt, mintInvar, spendInvar,
    //    govDgt, or ‹name› of otherNamedDelegate)
    // the first thread doesn't ever require a manifest entry,
    // ... and the first forked thread makes an entry with refCount = 2
    DelegateThreads {
        role: DelegateRole 
        refCount: Int
    }
    // the referenced token is a merkle-root of a membership-proof-tree
    MerkleMembership 
    // the referenced token is a merkle-root of a state-root-tree
    MerkleStateRoot    
}

/*
 * The UtxoManifest is a data structure that references a set of UUTs
 * that are important to the operation of a Capo (and its family of contract 
 * scripts).  It is used to maintain positive control over these operational
 * UUTs, inventorying them and giving every transaction a way to easily
 * reference their data for validation, operation, and reporting.
 *
 * A prime use-case for the capo's Manifest is for storing protocol-settings 
 * data ("settings").  Any application will need its own defined data structures
 * for settings, but the "settings" key is reserved for this general purpose.
 * The protocol ensures that every collaborating script ("delegate") has a
 * chance to validate any new settings before the (updated settings or the 
 * delegate, during installation) are activated.
 *
 * An additional case for manifest entries is for UUTs used as "thread tokens",
 * where multiple separate contract utxos are used to manage independent
 * threads of parallel operation for a single contract.  This provides a scalability
 * mechanism.
 */
struct CapoManifestEntry {
    // key: String // redundant / same as its map-key
    entryType: ManifestEntryType "tpe"
    tokenName: ByteArray "tn"
    mph: Option[MintingPolicyHash] // default = Capo's MPH
    
    func validate(self) -> Bool {
        // 3 bytes plus encoding overhead
        print("foo".serialize().length.show() + "<-- 3 chars has this serialized length");
        // assert(self.key.serialize().length > 5, "key too short");
        // assert("settings" == self.key, "manifest only supports 'settings' for now");

        assert(self.tokenName.length > 0, "no token name");
        // assert(self.refCount == 1, "only one ref allowed for now");
        // assert(!self.isThreadToken, "thread tokens not yet supported");
        self.mph.switch {
            Some => error("custom mph not yet supported"),
            _ => true
        }
    }
}

func mkTokenShow(mph: MintingPolicyHash) -> (Value) -> String {
    (v: Value) -> String {
        others : String = Value::from_map(
            v.get_assets().to_map().filter( (someMph: MintingPolicyHash, _) -> Bool {
                mph != someMph
            })
        ).show();
        ada : String = (
            (
                (0.0 + v.get_lovelace()) / 1_000.0
            ).round() / 1_000.0
        ).show() + " ADA";
        mine : String = v.get_policy(mph).fold[[]String]( (previous: []String, tokenName: ByteArray, c: Int) -> []String {
            []String{
                c.show() + "×💴 " + tokenName.decode_utf8()
            } + previous
        }, []String{}).join(" + ");
        // v.assets()

        mine + " + " + ada  + others
    }
}

/**************************************************************
      ************************************************************
      ************************************************************
      *******************                      *******************
      *******************                      *******************
      *******************        CapoDatum     *******************
      *******************                      *******************
      *******************                      *******************
      ************************************************************
      ************************************************************
      ************************************************************
*/      

enum CapoDatum {
    CharterToken {
        spendDelegateLink: RelativeDelegateLink
        spendInvariants: []RelativeDelegateLink
        otherNamedDelegates: Map[String]RelativeDelegateLink
        mintDelegateLink: RelativeDelegateLink
        mintInvariants: []RelativeDelegateLink
        govAuthorityLink: RelativeDelegateLink
        manifest: Map[String]CapoManifestEntry
        pendingDgtChanges: []PendingDelegateChange
        // typeMapUut: Option[ByteArray]   // optional reference to a UUT having TypeMapInfo datum
    }
    ScriptReference
    // settings are now just a distinguished case of delegated data
    // ... for contracts that use settings,
    // ... instead of being a special type of Datum
    // SettingsData {
    //     data:  Map[String]Data
    // }

    // same variant-index as delegate's capoStoredData:
    DelegatedData {  // the Capo redirects control of these to the spend delegate
        data: AnyData // the spend delegate may redirect control further, depending on what it sees in there
        version: Int // for CIP-68 compatibility
        otherDetails: Data // abstract additional info
    }

    func hasCharterRefInput(
        self,
        mph : MintingPolicyHash
    ) -> Option[CapoDatum::CharterToken] {
        assert(false, "deprecated use of hasCharterRefInput(); use CapoCtx instead.");

        assert( // avoid "unused variable self" error
            true || ( /* never executed */
                self.serialize() != mph.serialize()
            ), "never thrown"
        );
        assert(false, "unused?"); // see standalone getRefCharterDatum()
        
        chVal : Value = tvCharter(mph);
        hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };

        tx.ref_inputs.find_safe(hasCharter).switch{
            Some{txin} => Option[CapoDatum::CharterToken]::Some{
                CapoDatum::from_data( 
                    txin.datum.inline
                ).switch{
                    c : CharterToken => c,
                    _ => error("wrong enum")
                }
            },
            None => Option[CapoDatum::CharterToken]::None
        }
    }

    func countUpdatedThings(self, oldDatum: CapoDatum) -> Int {
        self.switch {
            CharterToken{ 
                nextSpendDelegate, 
                nextSpendInvariants, 
                nextNamedDelegates, 
                nextMintDelegate, 
                nextMintInvariants, 
                nextGovDelegate, 
                nextManifest,
                _nextPendingDgtChanges
            } => {
                CharterToken {
                    oldSpendDelegate,
                    oldSpendInvariants,
                    oldNamedDelegates,
                    oldMintDelegate,
                    oldMintInvariants,
                    oldGovDelegate,
                    oldManifest,
                    _oldPendingDgtChanges
                } = oldDatum;
                unchangedSpendDgt : Bool = ( nextSpendDelegate.serialize() == oldSpendDelegate.serialize() );
                unchangedSpendInvariants : Bool = ( nextSpendInvariants == oldSpendInvariants );
                unchangedNamedDelegate : Bool = ( nextNamedDelegates.serialize() == oldNamedDelegates.serialize() );

                unchangedMintDgt : Bool = ( nextMintDelegate.serialize() == oldMintDelegate.serialize() );    
                unchangedMintInvariants : Bool =  ( nextMintInvariants == oldMintInvariants );
                unchangedGovDelegate : Bool = ( nextGovDelegate.serialize() == oldGovDelegate.serialize() );
                unchangedManifest : Bool = ( nextManifest.serialize() == oldManifest.serialize() );
    
                if ((unchangedSpendDgt).trace("\n -- spendDgt changed? ") ) { 1 } else { 0 } +
                if ((unchangedSpendInvariants).trace("\n -- spendInvs changed? ") ) { 1 } else { 0 } +
                if (unchangedNamedDelegate.trace("\n -- namedDgt changed? ") ) { 1 } else { 0 }+
                if ((unchangedMintDgt).trace("\n -- mintDgt changed? ") ) { 1 } else { 0 } +
                if ((unchangedMintInvariants).trace("\n -- mintInvs changed? ") ) { 1 } else { 0 } +
                if ((unchangedGovDelegate).trace("\n -- govDgt changed? ")) { 1 } else { 0 } +
                if ((unchangedManifest).trace("\n -- manifest changed? ") ) { 1 } else { 0 }
            },
            _ => error("only CharterToken datum can count updated things")
        }
    }

    // func mustFindSettingsOutput(self, mph: MintingPolicyHash, inAddr: Address) -> outputAndDatum[CapoDatum::SettingsData] {
    //     settingsVal : Value = mkTv(mph: mph, tnBytes: self.switch {
    //         ct: CharterToken => {
    //             print( " ⬅️ 🔎 finding settings output: "+ ct.settingsUut.decode_utf8() + "\n");
    //             ct.settingsUut
    //         },
    //         _ => error("mustFindSettings - only valid on CharterToken datum")
    //     });
        
    //     notFound = Option[outputAndDatum[CapoDatum::SettingsData]]::None;
    //     foundSettings: []outputAndDatum[CapoDatum::SettingsData] = 
    //         tx.outputs.map_option[
    //             outputAndDatum[CapoDatum::SettingsData]
    //         ](
    //              (output: TxOutput) -> Option[outputAndDatum[CapoDatum::SettingsData]] {
    //                 if ( output.address != inAddr ) {
    //                     // print("not the right address");
    //                     notFound
    //                 } else {
    //                     rawDatum : Data = output.datum.inline;
    //                     CapoDatum::from_data(
    //                         rawDatum
    //                     ).switch {
    //                         settings: SettingsData => {
    //                             Option[
    //                                 outputAndDatum[CapoDatum::SettingsData]
    //                             ]::Some{
    //                                 outputAndDatum[CapoDatum::SettingsData] {
    //                                     output, settings, rawDatum
    //                                 }
    //                             }
    //                         },
    //                         _ => {
    //                             // print("found non-SettingsData");
    //                             notFound
    //                         }
    //                     }
    //                 }
    //             }
    //         );

    //     assert(foundSettings.length < 2, "too many settings outputs") ;
    //     assert(foundSettings.length == 1, "no settings output");

    //     settingsOutput : TxOutput = foundSettings.head.output;
    //     assert(
    //         // already checked above.
    //         // settingsOutput.address == charter.owner &&
    //         settingsOutput.value.contains(settingsVal),
    //             "settings output not found in contract with expected UUT"
    //     );
    //     assert(settingsVal.contains(settingsOutput.value.get_assets()), 
    //         "excess value in settings output: "+(settingsOutput.value - settingsVal).show()
    //     );
    //     print("\n ⬅️ ✅ found CapoDatum::SettingsData\n");
    //     foundSettings.head
    //     // ^^ fails if there's no settings output to the right address

    // }
}

enum cctx_CharterInputType {
    Unk
    RefInput { 
        datum: CapoDatum::CharterToken
        utxo: TxInput
    }
    Input { 
        datum: CapoDatum::CharterToken 
        utxo: TxInput 
    }
    // Minting {
    //     datum: CapoDatum::CharterToken
    //     address: Address
    // }
}    

/**************************************************************
      ************************************************************
      ************************************************************
      *******************                      *******************
      *******************                      *******************
      *******************      CapoActivity    *******************
      *******************                      *******************
      *******************                      *******************
      ************************************************************
      ************************************************************
      ************************************************************
*/      

enum CapoActivity {
    capoLifecycleActivity { // variant 0 mostly delegated to spendDgt
        activity: CapoLifecycleActivity
    }
    usingAuthority // variant 1
    retiringRefScript // variant 2
    addingSpendInvariant // variant 3
    spendingDelegatedDatum // variant 4

    // // possibly move this into CapoLifecycleActivity:
    // updatingManifest { // variant 5 always delegated to spendDgt
    //     activity: ManifestActivity
    // }
    updatingCharter // deprecated variant 6
}

func getRefCharterUtxo(mph : MintingPolicyHash) -> TxInput {
    chVal : Value = tvCharter(mph);
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };
    print("getting ref_input for charter\n");
    charterUtxo : TxInput = tx.ref_inputs.find_safe(hasCharter).switch{
        Some{ch} => ch,
        //!!! todo adjust this message: Missing required charter in ref_inputs
        None => {
            print("expected charter value");
            print(chVal.show());
            print("\n");
            error("Missing charter in required ref_inputs (use tcxWithCharterRef(tcx) in txn building functions)")
        }
    };

    charterUtxo
}

func getRefCharterDatum(mph : MintingPolicyHash) -> CapoDatum::CharterToken {
    charterUtxo : TxInput = getRefCharterUtxo(mph);
    ctd : CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
        charterUtxo.datum.inline
    );

    ctd
}

//! retrieves a required Capo Charter datum for the indicated minting-policy - 
// ... either from the txn's reference inputs  or inputs.
// prefer mkCapoCtx.needsCharter() for "get from anywhere" semantics
// and cctx.getCharterDatum() to get the datum
//  (... or mkCapoCtx.withCharterRef() to require unchanged charter)
//  (... or mkCapoCtx.withCharterInput() to require the charter to be spent & maybe updated)
func getTxCharterDatum(
    mph : MintingPolicyHash,
    refInputs : []TxInput = tx.ref_inputs
) -> CapoDatum::CharterToken {
    chVal : Value = tvCharter(mph);
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };

    charterUtxo : TxInput = refInputs.find_safe(hasCharter).switch{
        Some{ch} => ch,
        None => tx.inputs.find_safe(hasCharter).switch{
            Some{ch} => ch,
            None => error("Missing charter inputs / ref_inputs")
        }
    };
    ctd : CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
        charterUtxo.datum.inline
    );

    ctd
}

func mustHaveGovAuthority(
    mph : MintingPolicyHash,
    charterDatum : CapoDatum::CharterToken = getTxCharterDatum(mph)
) -> Bool {
    charterDatum.govAuthorityLink.hasValidOutput(mph)
}

/**************************************************************
      ************************************************************
      ************************************************************
      *******************                      *******************
      *******************                      *******************
      *******************     DelegateInput    *******************
      *******************                      *******************
      *******************                      *******************
      ************************************************************
      ************************************************************
      ************************************************************
*/

/**
 * A high-level helper for delegates, enabling various kinds of
 * validation and delegation-related operations.  Although this
 * is defined as related to an "Input", this object provides a gateway
 * for any script to involve that delegate policy in the abstract, by
 * virtue of having included that input in the transaction.
 * Callers should expect that the other policy will
 * do its responsibilities and may use this object to enforce that
 * the other policy is **triggered** in expected ways.
 */
struct DelegateInput {
    link: RelativeDelegateLink
    role: DelegateRole
    input: Option[TxInput]
    mph: MintingPolicyHash

    func genericDelegateActivityAsData(self) -> Data {
        i : TxInput = self.input.unwrap();
        inputData : Data = mustFindInputRedeemer(i);
        inputData.switch {
            ConstrData{index, fields} => {
                // ladybug emoji: "🐞"
                print("    --🐞 generic delegate activity at index ");
                print( index.show() );
                print("\n    ---- from input id:");
                print(i.output_id.tx_id.show());
                print("🔹#");
                print(i.output_id.index.show());
                print(" = ");
                print(i.value.show());
                print("\n");

                assert(index==index, "no way"); // must use each destruct field
                assert(fields.length >0, "no way") // must use each destruct field
            } 
        };
        inputData
    }

    func genericDelegateActivity(self) -> AbstractDelegateActivitiesEnum {
        AbstractDelegateActivitiesEnum::from_data(
            self.genericDelegateActivityAsData()
        )
    }    

    /**
     * Throws an error message including the delegation token id,
     * if the assertion is false.
     */
     func assert(self, assertionOk : Bool, msg: String) -> () {
        assert(true || /* never executed */ self.serialize() == self.serialize(), msg);
        if(assertionOk) { assert(true, "" ) } else {
            self.error(msg)
        }
     }

    /**
     * Throws an error message including the delegation token id.
     */     
    func error(self, msg: String) -> () {
        assert(true || /* never executed */ self.serialize() == self.serialize(), msg);
        // warning emoji: "⚠️"
        print("⚠️ ⚠️ ⚠️ error executing policy for dgTkn: ");
        print( mkTokenShow(self.mph)(
                (self.input.unwrap().value)
            )
        );
        print("\n");
        assert(false, msg)
    }

    func withSpendingActivity(self) -> DelegateInput {
        self.genericDelegateActivity().switch {
            SpendingActivities => self,
            _ => {
                self.error("non-spend activity!");
                error("")
            }
        }
    }

    func withMintingActivity(self) -> DelegateInput {
        self.genericDelegateActivity().switch {
            MintingActivities => self,
            _ => {
                self.error("non-mint activity!"); 
                error("") 
            }
        }
    }

    func updatingManifest(self) -> DelegateInput {
        self.role.switch {
            SpendDgt => {
                print("checking presence of SpendDgt: updatingManifest activity");
                self.genericDelegateActivity().switch {                    
                    CapoLifecycleActivities{cla} => cla.switch {
                        updatingManifest => self,
                        _ => {
                            self.error("not using required updatingManifest activity");
                            error("") // unreachable
                        }
                    },
                    _ => {
                        self.error("updatingManifest: only valid for CapoLifecycleActivities");
                        error("unreachable")
                    }
                }
            },
            _ => {
                self.error("updatingManifest: only valid for SpendDgt");
                error("unreachable")
            }
        }
    }

    func withUniqueSeededMintingActivity(self, seed: TxOutputId) -> DelegateInput {
        // tnFactory : (String) -> String = mkUutTnFactory(seed);

        REQT("ensures the delegate is unchanged; callers don't need to");
        self.genericDelegateActivity().switch {
            MintingActivities{ma} => {
                ma.switch {
                    ConstrData{_index, fields} => {
                        // assert(index==index, "no way"); // unused field can't be _
                        assert(
                            seed == TxOutputId::from_data(fields.get(0)),
                            "seed mismatch"
                        )
                    },
                    _ => error("no way")
                };
                self.delegateUnchanged()
            },
            MultipleDelegateActivities{activities} => {
                // can do one or more minting activities, but each one needs to be bound to a separate seed
                assert(activities.length > 0, "no minting activities found");
                foundWithThisSeed : []Data = activities.filter( (a : Data) -> Bool {
                    AbstractDelegateActivitiesEnum::from_data(a).switch {
                        MintingActivities{ma} => {
                            ma.switch {
                                ConstrData{index, fields} => {
                                    assert(index==index, "no way"); // unused field can't be _ in switch
                                    seed == TxOutputId::from_data(fields.head) &&
                                    true
                                },
                                _ => error("no way")
                            }
                        },
                        _ => false
                    }
                });
                REQT("one of the delegate multi-activities must be minting with this seed");
                self.assert(foundWithThisSeed.length > 0, "no minting activity found for seed!");
                REQT("only one of a multi-activity for a given seed is allowed");
                self.assert(foundWithThisSeed.length == 1, "multiple minting activities found for seed");

                self.delegateUnchanged()
            },
            _ => {
                self.error("non-mint activity!");
                error("")
            }
        }
    }

    func withUniqueDDSpendingActivity(self, recId: ByteArray) -> DelegateInput {
        self.role.switch {
            DgDataPolicy => print("ok, checking spending activity for a DgData Policy"),
            _ => error("withUniqueDDSpendingActivity: only valid for DgDataPolicy")
        };

        REQT("withUniqueDDSpendingActivity: checks presence of delegated-data controller's spending activity for recId");
        strId : String = recId.decode_utf8();
        print("    -- recId: ");
        print(strId);
        print("\n");

        TODO("TEST THIS v");
        REQT("spendDgt must be acting on the matching record-id");
        REQT("ensures the delegate is unchanged; callers don't need to");

        self.genericDelegateActivity().switch {
            SpendingActivities{sa} => {
                sa.switch {
                    ConstrData{index, fields } => {
                        assert(index==index, "no way"); // unused field can't be _
                        foundRecId: ByteArray = ByteArray::from_data(fields.head);
                        if(recId != foundRecId) {
                            print("  -- expected: Spending:"+strId);
                            print("\n  -- actual: Spending:"+foundRecId.show());
                            print("\n");
                            self.error("recId mismatch")
                        } else {
                            print ("  -- ok: DD controller spending activity for ");
                            print(strId);
                            print("\n")
                        }
                    },
                    _ => error("no way")
                };
                self.delegateUnchanged()
            },
            MultipleDelegateActivities{activities} => {
                print( "    -- multiple activities found\n" );
                self.assert(activities.length > 0, "no spending activities found");
                // can do one or more spending activities, but each one needs to be bound to a separate recId
                actsOnThisRecord : []Data = activities.filter( (a : Data) -> Bool {
                    AbstractDelegateActivitiesEnum::from_data(a).switch {
                        CreatingDelegatedData => {
                            self.error(
                                "dgInput: withSpendingActivity: CreatingDelegatedData invalid"
                            );
                            error("")
                        },
                        UpdatingDelegatedData => {
                            self.error(
                                "dgInput: withSpendingActivity: UpdatingDgData invalid; use a Spending variant in the delegated-data policy"
                            );
                            error("")
                            // " not the delegate controller's activities (use SpendingDelegatedData for that)"
                        },
                        DeletingDelegatedData => {
                            self.error(
                                "dgInput: withSpendingActivity: DeletingDelegatedData invalid" 
                                // is only valid in context of a mintDgt- when destroying a data record
                            );
                            error("")
                        },
                        SpendingActivities{sa} => {
                            // assert(false && sa.serialize() == sa.serialize(), "no way");
                            // false
                            sa.switch {
                                ConstrData{index, fields} => {
                                    assert(index==index, "no way"); // unused field can't be _
                                    foundRecId: ByteArray = ByteArray::from_data(fields.head);
                                    if(recId != foundRecId) {
                                        print("  -- expected: Spending: "+strId);
                                        print("\n  -- actual: Spending: "+foundRecId.show());
                                        self.error("recId mismatch");
                                        error("")
                                    } else { true }
                                },
                                _ => {
                                    self.error("wrong structure for spending activity");
                                    error("")
                                }
                            }
                        },
                        
                        _ => false
                    }
                });
                REQT("one of the delegate data-controller multi-activities must treat this recId");
                self.assert(
                    (actsOnThisRecord.length > 0).trace("dgt acting on this recId? ")
                    , "no spending activity found for recId: "+strId
                );
                REQT("only one of a multi-activity for a given recId is allowed");
                self.assert(
                    (actsOnThisRecord.length == 1).trace("exactly one activity? ")
                    , "multiple spending activities found for recId: "+strId
                );
                self.delegateUnchanged()
            },
            _ => {
                self.error("non-spend activity!");
                error("")
            }
        }
    }

    func requiresValidOutput(self, createdOrReturned : DgTkn=DgTkn::Returned) -> Bool {
        // TODO - would want this to be able to call our assert/error methods
        self.link.hasValidOutput(
            mph: self.mph, 
            required: true,
            createdOrReturned: createdOrReturned
          )
    }

    func getActivity[ACTIVITY](self) -> ACTIVITY {
        ACTIVITY::from_data(
            mustFindInputRedeemer(self.input.unwrap())
        )
    }

    func getDatum[DATUM](self) -> DATUM {
        DATUM::from_data(
            self.input.unwrap().datum.inline
        )
    }

    func delegateUnchanged(self) -> DelegateInput {
        DelegateInput{link, _role, input, mph} = self;

        RelativeDelegateLink{
            uut,
            //  _ /* strategy */,
            validatorHash,
            _configJson
        } = link;
        targetValue : Value = mkTv(mph, uut);
        returnedUnchanged : Bool = validatorHash.switch {
            Some{vh} => {
                // print(" ⬅️ 🔎 💁 expect dgTkn "+uut + " sent to vh " + vh.show());
                self.assert(
                    tx.value_locked_by(vh)   .
                    contains(
                        targetValue
                    ), 
                    "dgTkn not returned: "+ uut
                );
                tx.outputs.find_safe((o : TxOutput) -> Bool {
                    o.datum.serialize() == input.unwrap().datum.serialize()
                }).switch {
                    Some => {
                        print(" -- good, the dgTkn is unchanged: "+uut);
                        true
                    }, 
                    None => {
                        self.error("dgt modified");
                        error("")
                    }
                }
            },
            None => {
                self.error("unchOut - no vh"); // this method not valid on non-contract delegate tokens
                error("")
                // todo maybe make it valid by enforcing return to the input address?
            }
        };
        assert(returnedUnchanged, "no"); // already thrown
        assert(link.hasValidOutput(mph), "no"); // thrown inside the method

        self
    }
    // syntax sugar.  Implied is that that any other function calls will trip errors,
    func orFail(self) -> Bool {
        assert(true || /* never executed */ self.serialize() == self.serialize(), "no way");
        true
    }
}

// func genericDelegateActivity(
//     link: RelativeDelegateLink,
//     input: TxInput
// ) -> DelegateActivity[AbstractDelegateActivitiesEnum] {
//     DelegateActivity[AbstractDelegateActivitiesEnum]::new{
//         link,
//         input,
//         // datum: Option[DATUM]::None,
//         activity: Option[AbstractDelegateActivitiesEnum]::None
//     }
// }


/**************************************************************
      ************************************************************
      ************************************************************
      *******************                      *******************
      *******************                      *******************
      *******************     DgDataDetails    *******************
      *******************                      *******************
      *******************                      *******************
      ************************************************************
      ************************************************************
      ************************************************************
*/      


struct DgDataDetails {
    dataSrc: dgd_DataSrc
    // filteredInputs: []TxInput
    id: ByteArray
    type: String
    mph: MintingPolicyHash
    // inputs: []TxInput

    // see CapoCtx::updatingDgData(id)
    func updating(id : ByteArray, input: TxInput, output : TxOutput, mph : MintingPolicyHash) -> DgDataDetails {
        DgDataDetails{
            dataSrc: dgd_DataSrc::Both{input, output},
            id: id,
            type: "",
            mph: mph
        }
    }
    
    // see CapoCtx::creatingDgData(id)
    func creating(id : ByteArray, output : TxOutput, mph : MintingPolicyHash
    ) -> DgDataDetails {
        DgDataDetails{
            dataSrc: dgd_DataSrc::Output{output},
            id: id,
            type: "",
            mph: mph
        }
    } 

    func uutValue(self) -> Value {
        Value::new(
            AssetClass::new(self.mph, self.id), 
            1
        )
    }

    // func withOutput(id : ByteArray, input: []TxInput, output : TxOutput) -> DgDataDetails {
    //     DgDataDetails{
    //         dataSrc: dgd_DataSrc::Output{output},
    //         // filteredInputs: []TxInput{},
    //         id: id,
    //         type: ""
    //         // inputs: inputs
    //     }
    // }

    // func withInput(self) -> DgDataDetails {
    //     assert(self.id.length > 0, "no id; try cctx.updatingDgDat (id)");
    //     self.dataSrc.switch {
    //         Input => self,
    //         Both => self,
    //         _ => {
    //             oneInput: []TxInput = self.filterInputs();
    //             assert(1 == oneInput.length, "yikes! too many inputs");
    //             dataSrc : dgd_DataSrc = self.dataSrc.switch {
    //                 Unk => dgd_DataSrc::Input{oneInput.head},
    //                 Output{txo} => dgd_DataSrc::Both{oneInput.head, txo},
    //                 _ => error("no way") // already returned self
    //             };

    //             DgDataDetails{
    //                 dataSrc: dataSrc,
    //                    // filteredInputs: oneInput,
    //                 id: self.id,
    //                 type: self.type,
    //                 inputs: self.inputs
    //             }
    //         }
    //     }
    // }

    func input(self) -> TxInput {
        // assert(1 == self.filteredInputs.length, "use withId(id)");
        // assert(self.id.length > 0, "use withId(id) or cctx.updatingDgData(id).withInput()");

        // self.inputs.head
        self.dataSrc.switch {
            Input{utxo} => utxo,
            Both{utxo, _} => utxo,
            _ => error("no input data; use findInput() first")
        }
    }

    func output(self) -> TxOutput {
        self.dataSrc.switch {
            Output{txo} => txo,
            Both{_, txo} => txo,
            _ => error("no output data")
        }
    }

    // doesn't work - something about the way the IR is generated?
    //   - seems like it might be the list operations, 
    //   - or scoping of the fields of type []TxInput?
    //
    // func findInput(self) -> DgDataDetails {
    //     self.dataSrc.switch {
    //         Input => self,
    //         Both => self,
    //         _ => {
    //             targetId : ByteArray = self.id;
    //             isEmpty : Bool = targetId.length == 0;
    //             print("finding input dgData id: "+self.id.decode_utf8());
    //             utxo: TxInput = self.inputs.find_safe( (txin : TxInput) -> Bool {
    //                 rec : AnyData = AnyData::from_data(
    //                     txin.datum.inline
    //                 );
    //                 rec.type.starts_with(self.type)
    //                 && (isEmpty || rec.id == targetId)
    //             }).switch {
    //                 Some{x} => x,
    //                 None => error("❌ no input dgData")
    //             };
    //             newSrc: dgd_DataSrc = self.dataSrc.switch {
    //                 Output{txo} => dgd_DataSrc::Both{utxo, txo},
    //                 Unk => dgd_DataSrc::Input{utxo},
    //                 _ => error("no way") // unreachable
    //             };

    //             DgDataDetails{
    //                 dataSrc: newSrc,
    //                 // filteredInputs: [utxo],
    //                 id: self.id,
    //                 type: self.type,
    //                 inputs: self.inputs
    //             }
    //         }
    //     }
    // }


    // func filterInputs(self) -> []TxInput {
    //     self.inputs
    //     // targetId : ByteArray = self.id;
    //     // isEmpty : Bool = targetId.length == 0;
    //     // self.inputs.filter( (txin : TxInput) -> Bool {
    //     //     rec : AnyData = AnyData::from_data(
    //     //         txin.datum.inline
    //     //     );

    //     //     rec.type.starts_with(self.type)
    //     //     && (isEmpty || rec.id == targetId)
    //     // })
    // }

    // func withFilteredInputs(self) -> DgDataDetails {
    //     //!!! causes IR assertion error
    //     // if (self.filteredInputs.is_empty()) {
    //     // if (self.filteredInputs.length == 0) {
    //     if(true) {
    //             self
    //         // DgDataDetails {
    //         //     dataSrc: self.dataSrc,
    //         //     filteredInputs: self.filterInputs(),
    //         //     id: self.id,
    //         //     type: self.type,
    //         //     inputs: self.inputs
    //         // }

    //     // dataSrc: dgd_DataSrc
    //     // filteredInputs: []TxInput
    //     // id: ByteArray
    //     // type: String
    //     // inputs: []TxInput
    
    //     } else {
    //         self
    //     }
    // }

    func inputData(self) -> Data {
        self.input().datum.inline
        // self.dataSrc.switch {
        //     Input{utxo} => utxo.datum.inline,
        //     Both{utxo, _} => utxo.datum.inline,
        //     _ => error("no input data")
        // }
    }

    func outputData(self) -> Data {
        self.output().datum.inline
        // self.dataSrc.switch {
        //     Output{txo} => txo.datum.inline,
        //     Both{_, txo} => txo.datum.inline,
        //     _ => error("no output data")
        // }
    }
    
    // func mustHaveUut(self, uut: String) -> Bool {
    //     // todo
    //     false
    // }
}

/**************************************************************
      ************************************************************
      ************************************************************
      *******************                      *******************
      *******************                      *******************
      *******************        CapoCtx       *******************
      *******************                      *******************
      *******************                      *******************
      ************************************************************
      ************************************************************
      ************************************************************
*/      

struct CapoCtx {
    mph: MintingPolicyHash
    charter: cctx_CharterInputType

    func mkTv(self,
        tn: ByteArray,
        count : Int = 1
    ) -> Value {
        assert(tn.length > 0, "missing reqd tn");
        Value::new(
            AssetClass::new(self.mph, tn), 
            count
        )
    }

    // use this or updatingDgData() instead of getDDOutput()
    func creatingDgData(
        self,
        recId : String="", 
        recIdBytes : ByteArray = recId.encode_utf8()
    ) -> DgDataDetails {
        output : TxOutput = self.delegatedTxOutput(recIdBytes);
        DgDataDetails::creating(recIdBytes, output, self.mph)
    }

    func updatingDgData(
        self,
        recId : String="", 
        recIdBytes : ByteArray = recId.encode_utf8()
    ) -> DgDataDetails {
        output : TxOutput = self.delegatedTxOutput(recIdBytes);
        input : TxInput = self.delegatedDataTxInput(recIdBytes: recIdBytes);
        DgDataDetails::updating(recIdBytes, input, output, self.mph)
    }

    func now(_self, granularity: Duration = Duration::HOUR) -> Time {
        validity : TimeRange = tx.time_range;
        assert(
            validity.end - validity.start 
                <= granularity,
            "txn duration err"
        );
        validity.start
    }
    
    func getCharterRedeemer(self) -> CapoActivity {
        e : String = "requires charter as input";
        self.charter.switch {
            Unk => error(e),
            RefInput => error(e),
            Input{_, utxo} => {
                activity : CapoActivity = CapoActivity::from_data(
                    mustFindInputRedeemer(utxo)
                );
                // error-factory:
                wrongActivity = () -> CapoActivity { 
                    if (true) { error("non-CharterToken activity") } else { 
                        // unreachable
                        CapoActivity::usingAuthority
                    } 
                };
                // returns any activity valid for the CharterToken utxo:
                activity.switch {
                    retiringRefScript => wrongActivity(),
                    // updatingSettings => wrongActivity(),
                    // retiringSettings => wrongActivity(),                    
                    spendingDelegatedDatum => wrongActivity(),
                    usingAuthority => activity,
                    updatingCharter => activity, //todo: make this obsolete
                    addingSpendInvariant => activity,
                    capoLifecycleActivity => activity

                    // _ => // leaving other potential variants out to generate compile errors if they're added
                }
            }
        }
    }

    func findManifestEntry(self, key: String) -> Option[CapoManifestEntry] {
        print("    -- looking for capo's manifest entry: "+key);
        charterDatum : CapoDatum::CharterToken = self.getCharterDatum();
        charterDatum.manifest.get_safe(key)
    }

    func mustFindManifestEntry(self, key: String) -> CapoManifestEntry {
        self.findManifestEntry(key).switch {
            Some{entry} => entry,
            None => error("missing required manifest entry: " + key)
        }
    }

    func findManifestTokenName(self, key: String, required: Bool = true) -> Option[ByteArray] {
        oe = self.findManifestEntry(key);
        oe.switch {
            None => {
                assert(!required, "missing required manifest entry: " + key);
                Option[ByteArray]::None
            }, 
            Some{e} => Option[ByteArray]::Some{e.tokenName}
        }
    }

    func getSettingsId(self, required : Bool = true) -> Option[ByteArray] {
        self.findManifestTokenName("currentSettings", required)
    }
    //TODO getManifestDatum[ProtocolSettings]("settings")

    func getManifestedDatum[DATUM_TYPE](
        self, 
        key: String, 
        which : UtxoSource = UtxoSource::RefInput
    ) -> DATUM_TYPE {
        DATUM_TYPE::from_data(
            self.getManifestedDatumRaw(key, which)
        )
    }

    func getManifestedDatumRaw(self, key: String, which : UtxoSource) -> Data {
        manifestEntry : CapoManifestEntry = self.mustFindManifestEntry(key);
        tokenName : ByteArray = manifestEntry.tokenName;
        manifestValue : Value = mkTv(mph: self.mph, tnBytes: tokenName);
        print("  -- seeking input dgData utxo: "+ tokenName.decode_utf8()+"\n");

        inputs: []TxInput = which.switch {
            RefInput => tx.ref_inputs,
            Input => tx.inputs
        };
        utxo : TxInput = inputs.find_safe((txin : TxInput) -> Bool {
            txin.value.contains(manifestValue)
        }).switch{
            Some{txin} => {
                print ("  ✅ ➡️  📀💁 found ^ input dgData utxo" );
                txin
            },
            None => {                
                error(
                    "_❌ ➡️ 📀💁💣💥💣💥💣💥  missing expected '"+key+"' entry in the capo manifest ^^^ in "+
                    which.switch{RefInput => "ref_inputs", Input => "inputs"}+
                    "\n   -- this really shouldn't happen unless the tx-builder is doing a very wrong thing"
                    // lifecycle management should always ensure a good linkage between
                    // the capo's manifest entry and the matching utxo having that uut.
                )
            }
        };

        utxo.datum.inline
    }

    func getNextManifestDatum[DATUM_TYPE](self, key: String) -> DATUM_TYPE {
        DATUM_TYPE::from_data(
            self.getNextManifestedDatumRaw(key)
        )
    }

    func getNextManifestedDatumRaw(self, key: String) -> Data {
        charterDatum : CapoDatum::CharterToken = self.getCharterDatum();
        manifestEntry : CapoManifestEntry = charterDatum.manifest.get_safe(key).switch{
            Some{entry} => entry,
            None => error("missing required manifest entry: " + key)
        };
        manifestValue : Value = mkTv(mph: self.mph, tnBytes: manifestEntry.tokenName);
        utxo : TxOutput = tx.outputs.find_safe((txo : TxOutput) -> Bool {
            txo.value.contains(manifestValue)
        }).switch{
            Some{txo} => txo,
            None => error("missing required '"+key+"' manifest entry in outputs")
        };

        utxo.datum.inline
    }

    // func getRefSettingsUtxo(self) -> TxInput {
    //     charterDatum : CapoDatum::CharterToken = self.getCharterDatum();
    //     settingsValue : Value = mkTv(mph: self.mph, tnBytes: charterDatum.settingsUut);
    //     hasSettings = (txin : TxInput) -> Bool { txin.value.contains(settingsValue) };

    //     print("getting ref_input for settings\n");
    //     settingsUtxo : TxInput =  tx.ref_inputs.find_safe(hasSettings).switch{
    //         Some{s} => s,
    //         //!!! todo adjust this message: Missing required charter in ref_inputs
    //         None => error("Missing settings in required ref_inputs (use capo.addSettingsRef(tcx, 'refInput') in txn builder)")
    //     };
    
    //     settingsUtxo
    // }

    func requiresGovAuthority(self) -> CapoCtx {
        assert(self.getCharterDatum().govAuthorityLink.hasValidOutput(
            mph: self.mph  
        ) /*always true*/, "no way"); 

        self
    }

    // func getSettings[SettingsTYPE](self) -> SettingsTYPE {
    //     settings : TxInput = self.getRefSettingsUtxo();

    //     SettingsTYPE::from_data(settings.datum.inline)
    // }

    func requiresNamedDelegateInput(self, dgtName: String) -> DelegateInput {
        self.getCharterDatum().otherNamedDelegates.get_safe(dgtName).switch{
            None => error("missing required delegate with name: " + dgtName),

            Some{dgtLink} => {
                self.requiresDelegateInput(dgtLink, DelegateRole::OtherNamedDgt)
            }
        }
    }

    func requiresDgDataPolicyInput(self, typeName: String, required: Bool = true) -> DelegateInput {
        self.getCharterDatum().manifest.get_safe(typeName).switch{
            None => error("missing required data policy with type: " + typeName),
            Some{entry} => {
                dgtLink = entry.entryType.switch {
                    DgDataPolicy{policyLink, _refCount} => policyLink,
                    _ => error("manifest entry is not a data policy: "+typeName)
                };
                self.requiresDelegateInput(
                    dgtLink, 
                    DelegateRole::DgDataPolicy, 
                    required
                )
            }
        }
    }

    func nowActingAsMintDgt(self, required: Bool = true) -> Bool {
        input : TxInput = get_current_input();
        isMintDgt : Bool = (
            self.requiresMintDelegateInput(required: required).input.switch {
                Some{i} => i == input,
                None => false
            }
        ).trace("\nacting on mintDgt-* right now? ");
        assert(
            isMintDgt || !required
            , "\nnot acting as mint delegate"
        );
        isMintDgt
    }

    func nowActingAsSpendDgt(self, required: Bool = true) -> Bool {
        input : TxInput = get_current_input();
        isSpendDgt : Bool = (
            self.requiresSpendDelegateInput(required: required).input.switch {
                Some{i} => i == input,
                None => false
            }
        ).trace("\nacting on spendDgt-* right now? ");
        assert(
             isSpendDgt || !required
            , "not acting as spend delegate"
        );
        isSpendDgt
    }

    func requiresMintDelegateInput(self, required: Bool = true) -> DelegateInput {
        dgtLink : RelativeDelegateLink = self.getCharterDatum().mintDelegateLink;
        self.requiresDelegateInput(
            dgtLink: dgtLink, 
            role: DelegateRole::MintDgt,
            required: required
        )
    }

    func requiresSpendDelegateInput(self, required: Bool = true) -> DelegateInput {
        dgtLink : RelativeDelegateLink = self.getCharterDatum().spendDelegateLink;
        self.requiresDelegateInput(
            dgtLink: dgtLink, 
            role: DelegateRole::SpendDgt,
            required: required
        )
    }

    // internal / low-level function
    func getCharterDatum(self) -> CapoDatum::CharterToken {
        self.charter.switch {
            RefInput{datum, _} => datum,
            Input{datum, _} => datum,
            _ => error("CapoCtx.getCharterDatum(): unknown charter strategy; use result of withCharterInput(), withCharterRef(), or needsCharter() to resolve charter datum first")
        }
    }

    // func getNextCharterDatum(self) -> CapoDatum::CharterToken {
    //     self.charter.switch {
    //         Input => {
    //             charterDatum : CapoDatum::CharterToken = CapoDatum::from_data(
    //                 tx.outputs.find( (txo: TxOutput) => {
    //                     txo.address == self.resolveCharterUtxo().address &&
    //                     txo.value.contains(mkTv(self.mph, "charter"))
    //                 }).datum.inline
    //             );
    //             charterDatum
    //         },
    //         _ => error("CapoCtx.getNextCharterDatum(): invalid except with charter strategy Input")
    //     }
    // }

    func resolveCharterUtxo(self) -> TxInput {
        self.charter.switch {
            RefInput{_, utxo} => utxo,
            Input{_, utxo} => utxo,
            // Minting => error("can't get utxo during minting; be satisfied with the .address()!"),
            _ => error("CapoCtx.resolveCharterUtxo(): unknown charter strategy; use result of withCharterInput(), withCharterRef(), or needsCharter() to resolve charter utxo first")
        }
    }

    // internal / low-level function
    func requiresDelegateInput(self, 
        dgtLink: RelativeDelegateLink, 
        role: DelegateRole,
        required: Bool = true
    ) -> DelegateInput {
        DelegateInput{
            dgtLink,
            role,
            dgtLink.hasDelegateInput(
                inputs: tx.inputs, 
                mph: self.mph,
                required: required
            ),
            self.mph
        }
    }

    func address(self) -> Address {
        addr : Address = self.resolveCharterUtxo().address;
                // print("Capo addr: " + addr.show());
        addr    
    }

    func delegatedDataTxInput(self, 
        recId: String="",
        recIdBytes: ByteArray=recId.encode_utf8()
    ) -> TxInput {
        hasDD : (TxInput) -> Bool = self.mkDelegatedDataPredicate(
            id: recIdBytes
        );

        print("  -- expecting inDD ");
        print(recIdBytes.decode_utf8());
        print("\n");
        tx.inputs.find_safe(hasDD).switch {
            None => {
                error("❌ 📎 ^ inDD: not found\n")
            },
            Some{txin} => {
                print("✅ 📎 ^ inDD: ok\n");

                txin
            }
        }
    }
                
    func mkDelegatedDataPredicate(self, typeName: String="", id: ByteArray=#) -> (TxInput) -> Bool {
        capoAddr : Address = self.address();
        assert( 
            id.length > 0 
            || typeName.serialize().length > 0, 
            "data predicate must have id or typeName"
        );
        (txin : TxInput) -> Bool {
            if(txin.address == capoAddr) {
                data : Data = txin.datum.inline;

                CapoDatum::from_data(data).switch {
                    DelegatedData => {
                        x : AnyData = AnyData::from_data(data);
                        true 
                        && (typeName == "" || x.type == typeName) 
                        && (id == # || x.id == id)
                    },
                    _ => false
                }
            } else { false }
        }
    }

    func mkDelegatedDataOutputPredicate(self, typeName: String, id: ByteArray=#) -> (TxOutput) -> Bool {
        capoAddr : Address = self.address();
        // print("capoAddr: "+ capoAddr.show());
        // print("seeking type "+ typeName);
        // print("seeking id "+ id.decode_utf8());
        (txo : TxOutput) -> Bool {
            // print("txo.address: "+ txo.address.show());
            if(txo.address == capoAddr) {
                data : Data = txo.datum.inline;
                CapoDatum::from_data(data).switch {
                    DelegatedData => {
                        x : AnyData = AnyData::from_data(data);
                        // print( "found type " + x.type );
                        // print( "found id " + x.id.decode_utf8() );
                        // isMatch : Bool = 
                        x.type == typeName && (id == # || x.id == id)
                        // print( "isMatch: " + isMatch.show() );
                        // isMatch
                    },
                    _ => {
                        // print ("not DelegatedData");
                        false
                    }
                }
            } else { 
                // print ("not in capoAddr");
                false
             }
        }
    }


    // func toDelegatedData(self, typeName: String) -> (TxInput) -> Option[Data] {
    //     capoAddr : Address = self.resolveCharterUtxo().address;
    //     none : Option[Data]::None = Option[Data]::None;
    //     (txin : TxInput) -> Option[Data] {
    //         if(txin.address == capoAddr) {
    //             data : Data = txin.datum.inline;
    //             CapoDatum::from_data(data).switch {
    //                 DelegatedData => {
    //                     x : AnyData = AnyData::from_data(data);
    //                     if (x.type == typeName) {
    //                         Option[Data]::Some{data}
    //                     } else {
    //                         none
    //                     }
    //                 },
    //                 _ => none
    //             }
    //         } else { none }
    //     }
    // }

    // func foldDelegatedData_lazy[RT]( self, 
    //     typeName: String, 
    //     reducer: (
    //         Data, () -> RT
    //     ) -> RT, 
    //     final: RT
    // ) -> RT {
    //     // filter : (TxInput) -> Bool = self.delegatedDataFilter(typeName);
    //     hasDD : (TxInput) -> Option[Data] = self.toDelegatedData(typeName);
    //     // capoAddr : Address = self.resolveCharterUtxo().address;
    //     tx.inputs.fold_lazy[RT](
    //         (txin : TxInput, myNext: () -> RT) -> RT {
    //             hasDD(txin).switch {
    //                 Some{data} => reducer(data, myNext),
    //                 None => myNext()
    //             }
    //         }, final
    //     )
    // }

    // func filterDelegatedData(self, type: String, filter: (Data) -> Bool) -> []TxInput {
    //     //NOT: hasDD : (TxInput) -> Bool = self.delegatedDataFilter(type);
    //     // use toDelegatedData:
        
    //     hasDD : (TxInput) -> Option[Data] = self.mkDelegatedDataPredicate(type);
    //     tx.inputs.filter( (txin : TxInput) -> Bool {
    //         hasDD(txin).switch { 
    //             Some{data} => filter(data),
    //             None => false
    //         }
    //     })
    // }

    // func findDelegatedData[T](self, 
    //     type: String, 
    //     transform: (Data) -> Option[T],
    //     optional: Bool = false
    // ) -> []T {
    //     //not hasDD : (TxInput) -> Bool = self.delegatedDataFilter(type);
    //     // use toDelegatedData:
    //     hasDD : (TxInput) -> Option[Data] = self.toDelegatedData(type);
    //     none : Option[T]::None = Option[T]::None;
    //     result : []T = tx.inputs.map_option[T]( (txin : TxInput) -> Option[T] {
    //         hasDD(txin).switch { 
    //             Some{data} => {
    //                 transform(data)
    //             },
    //             None => none
    //         }
    //     });
    //     if (!optional && (result.length == 0)) {
    //         error(type + ": no match")
    //     };

    //     result
    // }

    // func findDelegatedDataUtxos(self, 
    //     type: String, 
    //     filter: (Data, TxInput) -> Bool,
    //     id: ByteArray=#,
    //     optional: Bool = false
    // ) -> []TxInput {
    //     //not hasDD : (TxInput) -> Bool = self.delegatedDataFilter(type);
    //     // use toDelegatedData:
    //     hasDD : (TxInput) -> Bool = self.mkDelegatedDataPredicate(type, id);
    //     none : Option[TxInput]::None = Option[TxInput]::None;
    //     result : []TxInput = tx.inputs.map_option[TxInput]( (txin : TxInput) -> Option[TxInput]{
    //         if (hasDD(txin)
    //             Some{data} => {
    //                 if (filter(data, txin)) {
    //                     Option[TxInput]::Some{txin}
    //                 } else {
    //                     none
    //                 }
    //             },
    //             None => none
    //         }
    //     });
    //     if (!optional && (result.length == 0)) {
    //         error(type + ": no match")
    //     };

    //     result
    // }


    func delegatedOutputData(self, 
        recId: ByteArray
    ) -> Data {
        self.internalHasDelegatedDataOutput(
            mkTv(mph: self.mph, tnBytes: recId)
        ).datum.inline
    }
    func mustOutputDelegatedData(self, newDataId : ByteArray, dataTypePurpose : String) -> Bool{
        dgData : Data = self.internalHasDelegatedDataOutput(
            mkTv(mph: self.mph, tnBytes: newDataId)
        ).datum.inline;
        dgDatum : CapoDatum = CapoDatum::from_data(dgData);
        // ndid: ByteArray = newDataId.encode_utf8();
        dgDatum.switch {
            DelegatedData => {
                data : AnyData = AnyData::from_data(dgData);
                if (data.id != newDataId) {
                    print("need id: "+newDataId.decode_utf8());
                    print("\n");
                    error("❌ 📎 outDD: wrong id: "+data.id.decode_utf8())
                } else {
                    if (data.type != dataTypePurpose) {
                        print("need type: "+ dataTypePurpose);
                        print("\n");
                        error("❌ 📎 outDD: bad type: "+data.type)
                    } else {
                        print(newDataId.decode_utf8());                        
                        print("\n✅ 📎 ^ outDD: ok: ^ outDD to Capo\n");
                        true
                    }
                }
            },
            _ => {
                error("output not delegated data")
            }
        }
    }        

    func delegatedTxOutput(self, 
        recId: ByteArray
    ) -> TxOutput {
        print("  -- seeking delegated-data output for "+recId.decode_utf8()+"\n");
        result : TxOutput = self.internalHasDelegatedDataOutput(
            mkTv(mph: self.mph, tnBytes: recId)
        );
        print("✅ 📎 ^ outDD: found\n");
        result
    }

    func internalHasDelegatedDataOutput(self, v : Value) -> TxOutput {
        capoAddr : Address = self.address();

        // print("seek txOutput" + v.show());
        // print("@addr" + capoAddr.show());

        tx.outputs.find_safe(
            (txout : TxOutput) -> Bool {
                // print("?? txOut" + txout.value.show());
                // print("@addr" + txout.address.show());
                true
                && txout.address == capoAddr
                && txout.value.contains(v)
            }
        ).switch{
            None => {
                print( "   ... expected value: ");
                print( v.show() );
                print("\n");
                error("^ no req'd delegated-data out")
            },
            Some{txout} => {
                txout
            }
        }
    }


    // func XXXmustFindDelegatedDatum[T](self, mph: MintingPolicyHash, tnBytes: ByteArray, inAddr: Address) -> outputAndDatum[T] {
    //     notFound = Option[outputAndDatum[T]]::None;
    //     idTokenValue = mkTv(mph: mph, tnBytes: tnBytes);
    //     print( " ⬅️ 🔎 finding DelegatedData output: "+ tnbBytes.decode_utf8() + "\n");

    //     foundDelegatedData: []outputAndDatum[T] = 
    //         tx.outputs.map_option[
    //             outputAndDatum[T]
    //         ](
    //             (output: TxOutput) -> Option[outputAndDatum[T]] {
    //                 if ( output.address != inAddr ) {
    //                     notFound
    //                 } else if (!output.value.contains(idTokenValue)) {
    //                     notFound
    //                 } else {
    //                     rawDatum : Data = output.datum.inline;
    //                     CapoDatum::from_data(
    //                         rawDatum
    //                     ).switch {
    //                         dd: DelegatedData => {
    //                             Option[
    //                                 outputAndDatum[T]
    //                             ]::Some{
    //                                 outputAndDatum[T] {
    //                                     output, dd, rawDatum
    //                                 }
    //                             }
    //                         },
    //                         _ => {
    //                             notFound
    //                         }
    //                     }
    //                 }
    //             }
    //         );
    //     assert(foundDelegatedData.length < 2, "too many delegated data outputs") ;
    //     assert(foundDelegatedData.length == 1, "no delegated data output");
    //     assert(idTokenValue.contains(foundDelegatedData.value.get_assets()), 
    //         "excess value in delegated-data output: "+(settingsOutput.value - settingsVal).show()
    //     );

    //     print("\n ⬅️ ✅ found DelegatedData\n");
    //     foundDelegatedData.head
    // }


    
    // doesn't care where the charter info comes from - refinput or input, both OK
    func needsCharter(self) -> CapoCtx {
        charter : cctx_CharterInputType = self.charter;
        charter.switch {
            RefInput => self,
            Input => self,
            Unk => {
                CapoCtx{mph, _} = self;
                chVal : Value = tvCharter(mph);
                hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };

                tx.ref_inputs.find_safe(hasCharter).switch{
                    None => {
                        print("CapoCtx needsCharter(): no charter ref; must be in inputs...\n");

                        self.withCharterInput()
                    },
                    Some{charterUtxo} => {
                        print("CapoCtx needsCharter(): found charter ref\n");

                        datum : CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
                            charterUtxo.datum.inline
                        );
                        CapoCtx{mph, cctx_CharterInputType::RefInput{datum, charterUtxo}}
                    }
                }
                // _ => self
            }
        }
    }

    func withCharterInput(self) -> CapoCtx {
        charter : cctx_CharterInputType = self.charter;

        charter.switch {
            Input => self,
            RefInput => error("CapoCtx.withCharterInput(): charter is from ref!"),
            Unk => {
                CapoCtx{mph, _} = self;

                chVal : Value = tvCharter(mph);
                hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };
        
                print("CapoCtx finding charter in inputs\n");
                charterUtxo: TxInput = tx.inputs.find_safe(hasCharter).switch{
                    Some{ch} => ch,
                    None => error("Missing required charter input")
                };
                datum : CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
                    charterUtxo.datum.inline
                );
                // datum : CapoDatum::CharterToken = getTxCharterDatum(self.mph);
                CapoCtx{mph, cctx_CharterInputType::Input{datum, charterUtxo}}
                // self.copy(charter: cctx_CharterInputType::Input{charterUtxo, datum})
            }
        }
    }

    // func nowMinting(self, address: Address, output: TxOutput) -> Bool {
    //     self.charter.switch {
    //         Input => error("CapoCtx.nowMinting(): charter is from inputs!"),
    //         RefInput => error("CapoCtx.nowMinting(): charter is from ref!"),
    //         Unk => {
    //             CapoCtx{mph, _} = self;
    //             datum: CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
    //                 output.datum.inline
    //             );
    //             CapoCtx{mph, cctx_CharterInputType::Minting{datum, address}}
    //     }
    // }

    func withCharterRef(self) -> CapoCtx {
        charter : cctx_CharterInputType = self.charter;
        charter.switch {
            RefInput => self,
            Input => error("CapoCtx.withCharterRef(): charter is from inputs!"),
            Unk => {
                CapoCtx{mph, _} = self;
                utxo : TxInput = getRefCharterUtxo(mph);
                datum : CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
                    utxo.datum.inline 
                );
            
                CapoCtx{mph, cctx_CharterInputType::RefInput{datum, utxo}}

                // self.copy(charter: cctx_CharterInputType::RefInput{datum})
            }
        }
    }

    func allDelegatesAreValidatingSettings(self) -> Bool {
        charterDatum = self.getCharterDatum();
        mph = self.mph;
        // REQT( "gov authority must be present to update settings");
        // hasGovAuthority : Bool = mustHaveGovAuthority(
        //     mph: mph,
        //     charterDatum: charterDatum // already resolved
        // );

        CapoDatum::CharterToken{
            spendDelegate,
            spendInvariants,
            otherNamedDelegates,
            mintDelegate,
            mintInvariants,
            govDelegate,
            manifest,
            _pendingDelegates
        } = charterDatum;

        // REQT("the current Settings must be spent and updated");
        // settingsDgtLink : RelativeDelegateLink = manifest.get_safe("settings").switch {
        //     None => error("'settings' delegate must be present to do updatingSettings activity"),
        //     Some{dgt} => dgt.dgDataPolicy.unwrap()
        // };
        
        // //!!! note, this is a hard-coded version of requiring the settings policy script:
        // settingsDgtInput = settingsDgtLink.hasDelegateInput(
        //     inputs: tx.inputs,
        //     mph: mph
        // ).unwrap();
        // settingsDelegateIsValid : Bool = AbstractDelegateActivitiesEnum::from_data( 
        //     mustFindInputRedeemer(settingsDgtInput)
        // ).switch {
        //     SpendingActivities => true,
        //     _ => error(
        //         "settings delegate must be updating the settings with its SpendingActivities variant"
        //     )
        // };
        // _nextSettings : Data = self.getNextManifestedDatumRaw("settings");
        // isUpdatingSettings : Bool = true;
        
        inputs: []TxInput = tx.inputs;
        //!!! actually requiring delegates' SettingsValidation starts here.
        REQT("spend delegate must validate settings ... wait - thats myself.  Call validate directly?");

        spendDelegateIsValidating : Bool = 
            spendDelegate.validatesUpdatedSettings(
                inputs: inputs,
                mph: mph,
                inputRequired: true
            ).unwrap();

        REQT("mint delegate must validate settings");
        mintDelegateIsValidating : Bool = 
            mintDelegate.validatesUpdatedSettings(
                inputs: inputs,
                mph: mph,
                inputRequired: true
            ).unwrap();

        // govAuthority is checking the settings
        REQT( "govDelegate MAY contribute to settings validation");
        govDelegateMaybeValidating : Bool = 
            govDelegate.validatesUpdatedSettings(
                inputs: inputs,
                mph: mph,
                inputRequired: false
            ).switch{
                Some => true,
                None => {
                    print("  -- govAuthority isn't a script-based validator; doesn't validate new settings\n");
                    true
                }
            };
        checkOneInvariant : (RelativeDelegateLink) -> Bool = 
        (oneDgt: RelativeDelegateLink) -> Bool {
            REQT( "invariant must validate settings");
            oneDgt.validatesUpdatedSettings(
                inputs: inputs,
                mph: mph,
                inputRequired: true
            ).unwrap()
        };
        // spendInvariants are checking the settings
        REQT( "spend invariants must validate settings");
        spendInvariantsAreValidating : Bool = spendInvariants.all( 
            checkOneInvariant
        );
        // mintInvariants are checking the settings
        REQT( "mint invariants must validate settings");
        mintInvariantsAreValidating : Bool = mintInvariants.all( 
            checkOneInvariant
        );
        REQT("dgDataControllers must validate settings");
        // dgDataControllers are checking the settings

        dgDataPoliciesAreValidating :Bool = manifest.all( 
            (key: String, entry: CapoManifestEntry) -> Bool {
                entry.entryType.switch{
                    DgDataPolicy{policyLink, _refCount} => {
                        policyLink.validatesUpdatedSettings(
                            inputs: inputs,
                            mph: mph,
                            inputRequired: true
                        ).unwrap()
                    },
                    _ => {
                        print("  -- ignoring manifest entry (not a data policy): " + key);
                        true
                    }
                }
            }
        );

        // namedDelegates are checking the settings
        REQT( "named delegates must validate settings");        
        namedDelegatesAreValidating : Bool = otherNamedDelegates.fold( 
            REQT( "  - each other-named-delegate must validate settings");
            (ok: Bool, key: String, dgt: RelativeDelegateLink) -> Bool {
                print("  - other-named-delegate: " + key);
                print("\n");
                ok && dgt.validatesUpdatedSettings(
                    inputs: inputs,
                    mph: mph,
                    inputRequired: true
                ).unwrap()
            }, true
        );

        // hasGovAuthority &&
        // settingsDelegateIsValid &&
        // isUpdatingSettings &&
        dgDataPoliciesAreValidating &&
        spendDelegateIsValidating &&
        mintDelegateIsValidating &&
        govDelegateMaybeValidating &&
        spendInvariantsAreValidating &&
        mintInvariantsAreValidating &&
        namedDelegatesAreValidating 
    }

}

func mkCapoCtx(mph: MintingPolicyHash) -> CapoCtx {
    CapoCtx{
        mph, cctx_CharterInputType::Unk
    }
}

