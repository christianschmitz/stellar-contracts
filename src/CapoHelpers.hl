module CapoHelpers

import {
    mkTv,
    tvCharter,
    outputAndDatum
} from StellarHeliosHelpers

import { 
    RelativeDelegateLink
} from CapoDelegateHelpers

// field-names style of struct, arbitrary & extensible
// field list, can be interpreted by any script that defines a 
// field-names style of struct with its own fields & data types.
struct AnyData {
    id: String "@id"  // same as the UUT name for this data
    // can have other fields; receiver will interpret their target types.
}

enum CapoDatum {
    CharterToken {
        spendDelegateLink: RelativeDelegateLink
        spendInvariants: []RelativeDelegateLink
        settingsUut: ByteArray // UUT-name links to SettingsData
        namedDelegates: Map[String]RelativeDelegateLink
        mintDelegateLink: RelativeDelegateLink
        mintInvariants: []RelativeDelegateLink
        govAuthorityLink: RelativeDelegateLink
    }
    ScriptReference
    SettingsData {
        data:  Map[String]Data
    }
    DelegatedData {
        data: AnyData
        delegateLink: RelativeDelegateLink
    }

    // this needs to be a method on the CapoDatum enum,
    // ... because it's called by other methods here, AND
    // ... it depends on the CapoDatum's own enum variants.
    func hasCharterRefInput(
        self,
        ctx: ScriptContext, 
        mph : MintingPolicyHash
    ) -> Option[CapoDatum::CharterToken] {
        assert( // avoid "unused variable self" error
            self.serialize() != ctx.serialize() &&
            self.serialize() != mph.serialize(), "never thrown"
        );
        
        chVal : Value = tvCharter(mph);
        hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };

        ctx.tx.ref_inputs.find_safe(hasCharter).switch{
            Some{txin} => Option[CapoDatum::CharterToken]::Some{
                CapoDatum::from_data( 
                    txin.datum.get_inline_data() 
                ).switch{
                    c : CharterToken => c,
                    _ => error("wrong enum")
                }
            },
            None => Option[CapoDatum::CharterToken]::None
        }
    }

    func mustFindSettingsOutput(self, ctx: ScriptContext, mph: MintingPolicyHash, inAddr: Address) -> outputAndDatum[CapoDatum::SettingsData] {
        settingsVal : Value = mkTv(mph: mph, tnBytes: self.switch {
            ct: CharterToken => ct.settingsUut,
            _ => error("mustFindSettings - only valid on CharterToken datum")
        });
        print( "finding settings output" );
        tx : Tx = ctx.tx;
        notFound = Option[outputAndDatum[CapoDatum::SettingsData]]::None;
        foundSettings: []outputAndDatum[CapoDatum::SettingsData] = 
            tx.outputs.map_option[
                outputAndDatum[CapoDatum::SettingsData]
            ](
                 (output: TxOutput) -> Option[outputAndDatum[CapoDatum::SettingsData]] {
                    print("defaultMinter finding settings output");
                    if ( output.address != inAddr ) {
                        // print("not the right address");
                        notFound
                    } else {
                        rawDatum : Data = output.datum.get_inline_data();
                        CapoDatum::from_data(
                            rawDatum
                        ).switch {
                            settings: SettingsData => {
                                print("found CapoDatum::SettingsData");
                                Option[
                                    outputAndDatum[CapoDatum::SettingsData]
                                ]::Some{
                                    outputAndDatum[CapoDatum::SettingsData] {
                                        output, settings, rawDatum
                                    }
                                }
                            },
                            _ => {
                                // print("found non-SettingsData");
                                notFound
                            }
                        }
                    }
                }
            );

        // if (isDev) { 
        assert(foundSettings.length < 2, "too many settings outputs") ;
        assert(foundSettings.length == 1, "no settings output");

        settingsOutput : TxOutput = foundSettings.head.output;
        assert(
            // already checked above.
            // settingsOutput.address == charter.owner &&
            settingsOutput.value.contains(settingsVal),
                "settings output not found in contract with expected UUT"
        );
        assert(settingsVal.contains(settingsOutput.value.get_assets()), 
            "excess value in settings output: "+(settingsOutput.value - settingsVal).show()
        );
        foundSettings.head
        // ^^ fails if there's no settings output to the right address

    }
}

enum CapoActivity {
    usingAuthority // variant 0
    updatingCharter // variant 1
    retiringRefScript // variant 2
    addingSpendInvariant // variant 3
    spendingDelegatedDatum // variant 4
    updatingSettings // variant 5
    retiringSettings // variant 6
}

func getRefCharterUtxo(ctx: ScriptContext, mph : MintingPolicyHash) -> TxInput {
    chVal : Value = tvCharter(mph);
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };
    print("getting ref_input for charter");
    charterUtxo : TxInput = ctx.tx.ref_inputs.find_safe(hasCharter).switch{
        Some{ch} => ch,
        None => error("Missing charter in required ref_inputs")
    };

    charterUtxo
}

func getRefCharterDatum(ctx: ScriptContext, mph : MintingPolicyHash) -> CapoDatum::CharterToken {
    charterUtxo : TxInput = getRefCharterUtxo(ctx, mph);
    ctd : CapoDatum::CharterToken = CapoDatum::from_data( 
        charterUtxo.datum.get_inline_data() 
    );

    ctd
}

//! retrieves a required Charter atum for the indicated policy - 
// ... either from the txn's reference inputs  or inputs.
func getTxCharterDatum(
    ctx: ScriptContext, 
    mph : MintingPolicyHash,
    refInputs : []TxInput = ctx.tx.ref_inputs
) -> CapoDatum::CharterToken {
    chVal : Value = tvCharter(mph);
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };

    charterUtxo : TxInput = refInputs.find_safe(hasCharter).switch{
        Some{ch} => ch,
        None => ctx.tx.inputs.find_safe(hasCharter).switch{
            Some{ch} => ch,
            None => error("Missing charter inputs / ref_inputs")
        }
    };
    ctd : CapoDatum::CharterToken = CapoDatum::CharterToken::from_data( 
        charterUtxo.datum.get_inline_data() 
    );

    ctd    
}

func mustHaveGovAuthority(
    ctx: ScriptContext, 
    mph : MintingPolicyHash,
    charterDatum : CapoDatum::CharterToken = getTxCharterDatum(ctx, mph)
) -> Bool {
    charterDatum.govAuthorityLink.hasValidOutput(mph, ctx)
}

