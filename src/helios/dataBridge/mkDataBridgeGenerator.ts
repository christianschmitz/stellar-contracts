import path from "path";
import { BundleTypes } from "../BundleTypes.js";
import type { HeliosScriptBundle } from "../HeliosScriptBundle.js";

/**
 * Gathers any number of types expressible for an on-chain Helios script,
 * and generates types and type aliases for the off-chain TypeScript context.
 *
 * Each struct type is directly expressed as its name
 * Each enum type is expressed as a proxy type, unioned with the possible raw enum variants for that type
 * As each type is encountered (as a **nested field** within a datum or redeemer), any named types encountered
 * are added to the context, with any recursive expansions generated and added to the context, depth-first,
 * ... then the named type is used for the **nested field** where it was encountered.
 */
export class mkDataBridgeGenerator {
    bundle: HeliosScriptBundle;
    typeBundle: BundleTypes

    constructor(bundle: HeliosScriptBundle, typeBundle?: BundleTypes) {
        this.bundle = bundle;
        if (typeBundle) {
            this. typeBundle = typeBundle;
        } else {
            this.typeBundle = new BundleTypes(bundle);
        }
    }

    get namedTypes() {
        return this.typeBundle.namedTypes;
    }
    
    get topLevelTypeDetails() {
        return this.typeBundle.topLevelTypeDetails;
    }

    get activityTypeDetails() {
        return this.typeBundle.activityTypeDetails;
    }

    get datumTypeDetails() {
        return this.typeBundle.datumTypeDetails;
    }

    generateMkDataBridge(projectName?: string, inputFile?: string) {
        let imports = `
            import { someDataMaker } from "@donecollectively/stellar-contracts"
        `.split("\n").map(line => line.trim()).join("\n");
        if ("stellar-contracts" == projectName) {
            if (!inputFile) {
                throw new Error("inputFile is required for stellar-contracts project");
            }
            // compute relative path from inputFile to src/helios/dataBridge/someDataMaker.js
            let relativePath = path.relative(path.dirname(inputFile), path.join("src/helios/dataBridge/someDataMaker.js"));
            if (relativePath[0] !== ".") {
                relativePath = `./${relativePath}`;
            }
            imports = `
                import { someDataMaker } from "${relativePath}"
            `.split("\n").map(line => line.trim()).join("\n");
        }
        return `// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in ${this.bundle.program.name} (${this.bundle.main.name})
${imports}
export const test = "" // placholder for generated code
`;
    }
        
}