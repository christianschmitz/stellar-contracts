// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in BasicDelegate (src/delegation/BasicDelegate.hl)

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";

import {
    AnyData,
    DelegationDetail,
    DelegateDatum$Cip68RefToken,
    DelegateDatum,
    CapoLifecycleActivity$CreatingDelegate,
    CapoLifecycleActivity,
    DelegateLifecycleActivity$ReplacingMe,
    DelegateLifecycleActivity,
    SpendingActivity,
    MintingActivity,
    BurningActivity,
    DelegateActivity$CreatingDelegatedData,
    DelegateActivity$UpdatingDelegatedData,
    DelegateActivity$DeletingDelegatedData,
    DelegateActivity
} from "./UnspecializedDelegate.hlbundle.js"
import { someDataMaker } from "../helios/dataBridge/someDataMaker.js"
import { tagOnly } from "../helios/HeliosScriptBundle.js"
import {hasSeed} from "../StellarContract.js"

export default class mkDatumBridgeBasicDelegate extends someDataMaker {
    
    datum: DelegateDatumHelper = new DelegateDatumHelper(this.bundle)   // datumAccessor
    DelegateDatum: DelegateDatumHelper = this.datum;


}

class DelegateDatumHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { Cip68RefToken: /*minEnumVariant*/ DelegateDatum$Cip68RefToken }
        | { IsDelegation: /*minEnumVariant*/ DelegationDetail /*singleVariantField*/  }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }, 
       
        | { Cip68RefToken: /*minEnumVariant*/ DelegateDatum$Cip68RefTokenLike }
        | { IsDelegation: /*minEnumVariant*/ DelegationDetailLike /*singleVariantField*/  }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }
   >(DelegateDatumSchema, { isMainnet: true });
    Cip68RefToken(fields: { 
        cip68meta: {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
},
        cip68version: IntLike,
        dd: Option<{
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}
>
    }) {
        return this.enumCast.toUplcData({
            Cip68RefToken: fields 
        });
    }

    IsDelegation(
        value: {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}

    ) {
        return this.enumCast.toUplcData({ 
           IsDelegation: { dd: value } 
        });
    }

    get ScriptReference() {
        return this.enumCast.toUplcData({ ScriptReference: {} });
    }
}


class CapoLifecycleActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegate }, 
       
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegateLike }
   >(CapoLifecycleActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingDelegate(fields: {
        seed: TxOutputId | string,
        purpose: string 
    } ) : UplcData
    CreatingDelegate(
        seedOrUf: hasSeed | { 
            seed: TxOutputId | string,
            purpose: string
        }, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
               CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf; 
            return this.enumCast.toUplcData({
                CreatingDelegate: fields 
            });
        }
    }

}


class DelegateLifecycleActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMe }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }, 
       
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMeLike }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }
   >(DelegateLifecycleActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    ReplacingMe(fields: {
        seed: TxOutputId | string,
        purpose: string 
    } ) : UplcData
    ReplacingMe(
        seedOrUf: hasSeed | { 
            seed: TxOutputId | string,
            purpose: string
        }, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
               ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf; 
            return this.enumCast.toUplcData({
                ReplacingMe: fields 
            });
        }
    }


    get Retiring() {
        return this.enumCast.toUplcData({ Retiring: {} });
    }

    get ValidatingSettings() {
        return this.enumCast.toUplcData({ ValidatingSettings: {} });
    }
}


class SpendingActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { _placeholder1SA: /*minEnumVariant*/ number[] /*singleVariantField*/  }, 
       
        | { _placeholder1SA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
   >(SpendingActivitySchema, { isMainnet: true });
    _placeholder1SA(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           _placeholder1SA: { recId: value } 
        });
    }
}


class MintingActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { _placeholder1MA: /*minEnumVariant*/ TxOutputId /*singleVariantField*/  }, 
       
        | { _placeholder1MA: /*minEnumVariant*/ TxOutputId | string /*singleVariantField*/  }
   >(MintingActivitySchema, { isMainnet: true });
    _placeholder1MA(value: hasSeed | TxOutputId | string) {
       const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        return this.enumCast.toUplcData({ 
           _placeholder1MA: { seed: seedTxOutputId } 
        });
    }
}


class BurningActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { _placeholder1BA: /*minEnumVariant*/ number[] /*singleVariantField*/  }, 
       
        | { _placeholder1BA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
   >(BurningActivitySchema, { isMainnet: true });
    _placeholder1BA(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           _placeholder1BA: { recId: value } 
        });
    }
}


class DelegateActivityHelper extends someDataMaker {
    enumCast = new Cast<
       
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivity /*singleVariantField*/  }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivity /*singleVariantField*/  }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivity /*singleVariantField*/  }
        | { MintingActivities: /*minEnumVariant*/ MintingActivity /*singleVariantField*/  }
        | { BurningActivities: /*minEnumVariant*/ BurningActivity /*singleVariantField*/  }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedData }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedData }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedData }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField*/  }, 
       
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivityLike /*singleVariantField*/  }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivityLike /*singleVariantField*/  }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivityLike /*singleVariantField*/  }
        | { MintingActivities: /*minEnumVariant*/ MintingActivityLike /*singleVariantField*/  }
        | { BurningActivities: /*minEnumVariant*/ BurningActivityLike /*singleVariantField*/  }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedDataLike }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedDataLike }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedDataLike }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField*/  }
   >(DelegateActivitySchema, { isMainnet: true });
    CapoLifecycleActivities(
        value: 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegateLike }
    ) {
        return this.enumCast.toUplcData({ 
           CapoLifecycleActivities: { activity: value } 
        });
    }

    DelegateLifecycleActivities(
        value: 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMeLike }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }
    ) {
        return this.enumCast.toUplcData({ 
           DelegateLifecycleActivities: { activity: value } 
        });
    }

    SpendingActivities(
        value: 
        | { _placeholder1SA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
    ) {
        return this.enumCast.toUplcData({ 
           SpendingActivities: { activity: value } 
        });
    }

    MintingActivities(
        value: 
        | { _placeholder1MA: /*minEnumVariant*/ TxOutputId | string /*singleVariantField*/  }
    ) {
        return this.enumCast.toUplcData({ 
           MintingActivities: { activity: value } 
        });
    }

    BurningActivities(
        value: 
        | { _placeholder1BA: /*minEnumVariant*/ number[] /*singleVariantField*/  }
    ) {
        return this.enumCast.toUplcData({ 
           BurningActivities: { activity: value } 
        });
    }

    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingDelegatedData(value: hasSeed, fields: { 
        dataType: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingDelegatedData(fields: {
        seed: TxOutputId | string,
        dataType: string 
    } ) : UplcData
    CreatingDelegatedData(
        seedOrUf: hasSeed | { 
            seed: TxOutputId | string,
            dataType: string
        }, 
        filteredFields?: { 
            dataType: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
               CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf; 
            return this.enumCast.toUplcData({
                CreatingDelegatedData: fields 
            });
        }
    }


    UpdatingDelegatedData(fields: { 
        dataType: string,
        recId: number[]
    }) {
        return this.enumCast.toUplcData({
            UpdatingDelegatedData: fields 
        });
    }

    DeletingDelegatedData(fields: { 
        dataType: string,
        recId: number[]
    }) {
        return this.enumCast.toUplcData({
            DeletingDelegatedData: fields 
        });
    }

    MultipleDelegateActivities(
        value: Array<UplcData>
    ) {
        return this.enumCast.toUplcData({ 
           MultipleDelegateActivities: { activities: value } 
        });
    }
}


