// generated by Stellar Contracts mkDataBridgeGenerator
// based on types defined in BasicDelegate (src/delegation/BasicDelegate.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { Cast } from "@helios-lang/contract-utils"
import type { UplcData } from "@helios-lang/uplc";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { EnumTypeSchema } from "@helios-lang/type-utils";

import type {
    AnyData, AnyDataLike,
    DelegationDetail, DelegationDetailLike,
    DelegateDatum$Cip68RefToken, DelegateDatum$Cip68RefTokenLike,
    DelegateDatum, DelegateDatumLike,
    CapoLifecycleActivity$CreatingDelegate, CapoLifecycleActivity$CreatingDelegateLike,
    CapoLifecycleActivity, CapoLifecycleActivityLike,
    DelegateLifecycleActivity$ReplacingMe, DelegateLifecycleActivity$ReplacingMeLike,
    DelegateLifecycleActivity, DelegateLifecycleActivityLike,
    SpendingActivity, SpendingActivityLike,
    MintingActivity, MintingActivityLike,
    BurningActivity, BurningActivityLike,
    DelegateActivity$CreatingDelegatedData, DelegateActivity$CreatingDelegatedDataLike,
    DelegateActivity$UpdatingDelegatedData, DelegateActivity$UpdatingDelegatedDataLike,
    DelegateActivity$DeletingDelegatedData, DelegateActivity$DeletingDelegatedDataLike,
    DelegateActivity, DelegateActivityLike
} from "./UnspecializedDelegate.typeInfo.js"

import { someDataMaker } from "../helios/dataBridge/someDataMaker.js"
import type { tagOnly } from "../helios/HeliosScriptBundle.js"
import type {hasSeed} from "../StellarContract.js"

export default class mkDatumBridgeBasicDelegate extends someDataMaker {
    datum: DelegateDatumHelper = new DelegateDatumHelper(this.bundle)   // datumAccessor
    DelegateDatum: DelegateDatumHelper = this.datum;

    // include accessors for activity types

    // include accessors for other enums (other than datum/activity)

    // include accessors for any other structs (other than datum/activity)

    // TODO: include any utility functions defined in the contract
}

class DelegateDatumHelper extends someDataMaker {
    enumCast = new Cast<
       DelegateDatum,
       DelegateDatumLike
   >(DelegateDatumSchema, { isMainnet: true });
    Cip68RefToken(fields: { 
        cip68meta: {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
},
        cip68version: IntLike,
        dd: Option<{
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}
>
    }) {
        return this.enumCast.toUplcData({
            Cip68RefToken: fields 
        });
    }

    IsDelegation(
        value: {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}

    ) {
        return this.enumCast.toUplcData({ 
           IsDelegation: { dd: value } 
        }); /*SingleField*/
    }

    get ScriptReference() {
        return this.enumCast.toUplcData({ ScriptReference: {} });
    }
}


class CapoLifecycleActivityHelper extends someDataMaker {
    enumCast = new Cast<
       CapoLifecycleActivity,
       CapoLifecycleActivityLike
   >(CapoLifecycleActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingDelegate(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingDelegate(fields: CapoLifecycleActivity$CreatingDelegateLike): UplcData
    CreatingDelegate(
        seedOrUf: hasSeed | CapoLifecycleActivity$CreatingDelegateLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                CreatingDelegate: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as CapoLifecycleActivity$CreatingDelegateLike; 
            return this.enumCast.toUplcData({
                CreatingDelegate: fields 
            });
        }
    }

}


class DelegateLifecycleActivityHelper extends someDataMaker {
    enumCast = new Cast<
       DelegateLifecycleActivity,
       DelegateLifecycleActivityLike
   >(DelegateLifecycleActivitySchema, { isMainnet: true });
    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    ReplacingMe(value: hasSeed, fields: { 
        purpose: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    ReplacingMe(fields: DelegateLifecycleActivity$ReplacingMeLike): UplcData
    ReplacingMe(
        seedOrUf: hasSeed | DelegateLifecycleActivity$ReplacingMeLike, 
        filteredFields?: { 
            purpose: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                ReplacingMe: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as DelegateLifecycleActivity$ReplacingMeLike; 
            return this.enumCast.toUplcData({
                ReplacingMe: fields 
            });
        }
    }


    get Retiring() {
        return this.enumCast.toUplcData({ Retiring: {} });
    }

    get ValidatingSettings() {
        return this.enumCast.toUplcData({ ValidatingSettings: {} });
    }
}


class SpendingActivityHelper extends someDataMaker {
    enumCast = new Cast<
       SpendingActivity,
       SpendingActivityLike
   >(SpendingActivitySchema, { isMainnet: true });
    _placeholder1SA(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           _placeholder1SA: { recId: value } 
        }); /*SingleField*/
    }
}


class MintingActivityHelper extends someDataMaker {
    enumCast = new Cast<
       MintingActivity,
       MintingActivityLike
   >(MintingActivitySchema, { isMainnet: true });
    _placeholder1MA(value: hasSeed | TxOutputId | string) {
       const seedTxOutputId = "string" == typeof value ? value : this.getSeed(value);
        return this.enumCast.toUplcData({ 
           _placeholder1MA: { seed: seedTxOutputId } 
        });  /*SingleField/seeded*/
    }
}


class BurningActivityHelper extends someDataMaker {
    enumCast = new Cast<
       BurningActivity,
       BurningActivityLike
   >(BurningActivitySchema, { isMainnet: true });
    _placeholder1BA(
        value: number[]
    ) {
        return this.enumCast.toUplcData({ 
           _placeholder1BA: { recId: value } 
        }); /*SingleField*/
    }
}


class DelegateActivityHelper extends someDataMaker {
    enumCast = new Cast<
       DelegateActivity,
       DelegateActivityLike
   >(DelegateActivitySchema, { isMainnet: true });
    CapoLifecycleActivities(
        value: CapoLifecycleActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           CapoLifecycleActivities: { activity: value } 
        }); /*SingleField*/
    }

    DelegateLifecycleActivities(
        value: DelegateLifecycleActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           DelegateLifecycleActivities: { activity: value } 
        }); /*SingleField*/
    }

    SpendingActivities(
        value: SpendingActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           SpendingActivities: { activity: value } 
        }); /*SingleField*/
    }

    MintingActivities(
        value: MintingActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           MintingActivities: { activity: value } 
        }); /*SingleField*/
    }

    BurningActivities(
        value: BurningActivityLike
    ) {
        return this.enumCast.toUplcData({ 
           BurningActivities: { activity: value } 
        }); /*SingleField*/
    }

    /**
     * generates UplcData, given a transaction-context with a seed utxo and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.     */
    CreatingDelegatedData(value: hasSeed, fields: { 
        dataType: string 
    } ) : UplcData
    /**
    * generates UplcData with raw seed details included in fields.
    */
    CreatingDelegatedData(fields: DelegateActivity$CreatingDelegatedDataLike): UplcData
    CreatingDelegatedData(
        seedOrUf: hasSeed | DelegateActivity$CreatingDelegatedDataLike, 
        filteredFields?: { 
            dataType: string
    }) : UplcData {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            return this.enumCast.toUplcData({
                CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields } 
            });
        } else {
            const fields = seedOrUf as DelegateActivity$CreatingDelegatedDataLike; 
            return this.enumCast.toUplcData({
                CreatingDelegatedData: fields 
            });
        }
    }


    UpdatingDelegatedData(fields: { 
        dataType: string,
        recId: number[]
    }) {
        return this.enumCast.toUplcData({
            UpdatingDelegatedData: fields 
        });
    }

    DeletingDelegatedData(fields: { 
        dataType: string,
        recId: number[]
    }) {
        return this.enumCast.toUplcData({
            DeletingDelegatedData: fields 
        });
    }

    MultipleDelegateActivities(
        value: Array<UplcData>
    ) {
        return this.enumCast.toUplcData({ 
           MultipleDelegateActivities: { activities: value } 
        }); /*SingleField*/
    }
}


export const DelegateDatumSchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "DelegateDatum",
  "id": "__module__unspecializedDelegate__DelegateDatum[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__unspecializedDelegate__DelegateDatum[]__Cip68RefToken",
      "name": "Cip68RefToken",
      "fieldTypes": [
        {
          "name": "cip68meta",
          "type": {
            "kind": "struct",
            "format": "map",
            "id": "__module__StellarHeliosHelpers__AnyData[]",
            "name": "AnyData",
            "fieldTypes": [
              {
                "name": "id",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                },
                "key": "@id"
              },
              {
                "name": "type",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "tpe"
              }
            ]
          }
        },
        {
          "name": "cip68version",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "dd",
          "type": {
            "kind": "option",
            "someType": {
              "kind": "struct",
              "format": "list",
              "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
              "name": "DelegationDetail",
              "fieldTypes": [
                {
                  "name": "capoAddr",
                  "type": {
                    "kind": "internal",
                    "name": "Address"
                  }
                },
                {
                  "name": "mph",
                  "type": {
                    "kind": "internal",
                    "name": "MintingPolicyHash"
                  }
                },
                {
                  "name": "tn",
                  "type": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__unspecializedDelegate__DelegateDatum[]__IsDelegation",
      "name": "IsDelegation",
      "fieldTypes": [
        {
          "name": "dd",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
            "name": "DelegationDetail",
            "fieldTypes": [
              {
                "name": "capoAddr",
                "type": {
                  "kind": "internal",
                  "name": "Address"
                }
              },
              {
                "name": "mph",
                "type": {
                  "kind": "internal",
                  "name": "MintingPolicyHash"
                }
              },
              {
                "name": "tn",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__unspecializedDelegate__DelegateDatum[]__ScriptReference",
      "name": "ScriptReference",
      "fieldTypes": []
    }
  ]
};
export const CapoLifecycleActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "CapoLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
      "name": "CreatingDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    }
  ]
};
export const DelegateLifecycleActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "DelegateLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
      "name": "ReplacingMe",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
      "name": "Retiring",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
      "name": "ValidatingSettings",
      "fieldTypes": []
    }
  ]
};
export const SpendingActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "SpendingActivity",
  "id": "__module__unspecializedDelegate__SpendingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__unspecializedDelegate__SpendingActivity[]___placeholder1SA",
      "name": "_placeholder1SA",
      "fieldTypes": [
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
export const MintingActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "MintingActivity",
  "id": "__module__unspecializedDelegate__MintingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__unspecializedDelegate__MintingActivity[]___placeholder1MA",
      "name": "_placeholder1MA",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        }
      ]
    }
  ]
};
export const BurningActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "BurningActivity",
  "id": "__module__unspecializedDelegate__BurningActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__unspecializedDelegate__BurningActivity[]___placeholder1BA",
      "name": "_placeholder1BA",
      "fieldTypes": [
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
export const DelegateActivitySchema : EnumTypeSchema = {
  "kind": "enum",
  "name": "DelegateActivity",
  "id": "__module__unspecializedDelegate__DelegateActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__CapoLifecycleActivities",
      "name": "CapoLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "CapoLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                "name": "CreatingDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__DelegateLifecycleActivities",
      "name": "DelegateLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "DelegateLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
                "name": "ReplacingMe",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
                "name": "Retiring",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
                "name": "ValidatingSettings",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__SpendingActivities",
      "name": "SpendingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "SpendingActivity",
            "id": "__module__unspecializedDelegate__SpendingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__unspecializedDelegate__SpendingActivity[]___placeholder1SA",
                "name": "_placeholder1SA",
                "fieldTypes": [
                  {
                    "name": "recId",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__MintingActivities",
      "name": "MintingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "MintingActivity",
            "id": "__module__unspecializedDelegate__MintingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__unspecializedDelegate__MintingActivity[]___placeholder1MA",
                "name": "_placeholder1MA",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__BurningActivities",
      "name": "BurningActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "BurningActivity",
            "id": "__module__unspecializedDelegate__BurningActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__unspecializedDelegate__BurningActivity[]___placeholder1BA",
                "name": "_placeholder1BA",
                "fieldTypes": [
                  {
                    "name": "recId",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__CreatingDelegatedData",
      "name": "CreatingDelegatedData",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__UpdatingDelegatedData",
      "name": "UpdatingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__DeletingDelegatedData",
      "name": "DeletingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 8,
      "id": "__module__unspecializedDelegate__DelegateActivity[]__MultipleDelegateActivities",
      "name": "MultipleDelegateActivities",
      "fieldTypes": [
        {
          "name": "activities",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "internal",
              "name": "Data"
            }
          }
        }
      ]
    }
  ]
};
