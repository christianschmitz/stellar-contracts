// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import type { UplcData } from "@helios-lang/uplc";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { Cast } from "@helios-lang/contract-utils";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";


import {HeliosScriptBundle, type tagOnly, type EnumTypeMeta, 
    type singleEnumVariantMeta
} from "../helios/HeliosScriptBundle.js"

import type { IntersectedEnum } from "../helios/typeUtils.js"
                


export type AnyData = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}

export type ErgoAnyData = AnyData/*like canon-other*/
export type AnyDataLike = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}


export type DelegationDetail = {
    capoAddr: /*minStructField*/ Address
    mph: /*minStructField*/ MintingPolicyHash
    tn: /*minStructField*/ number[]
}

export type ErgoDelegationDetail = DelegationDetail/*like canon-other*/
export type DelegationDetailLike = {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}


export type DelegateDatum$Cip68RefToken = {
    cip68meta: AnyData  /*minVariantField*/ ,
    cip68version: bigint  /*minVariantField*/ ,
    dd: Option<DelegationDetail>  /*minVariantField*/ 
}

export type DelegateDatum$Ergo$Cip68RefToken = {
    cip68meta: ErgoAnyData  /*minVariantField*/ ,
    cip68version: bigint  /*minVariantField*/ ,
    dd: Option<ErgoDelegationDetail>  /*minVariantField*/ 
}

export type DelegateDatum$Cip68RefTokenLike = {
    cip68meta: AnyDataLike  /*minVariantField*/ ,
    cip68version: IntLike  /*minVariantField*/ ,
    dd: Option<DelegationDetailLike>  /*minVariantField*/ 
}


export type DelegateDatumMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "DelegateDatum"}, {
        Cip68RefToken: singleEnumVariantMeta<DelegateDatumMeta, "Cip68RefToken",
            "Constr#0", 
            "fields", DelegateDatum$Cip68RefToken, "noSpecialFlags"
        >,
        IsDelegation: singleEnumVariantMeta<DelegateDatumMeta, "IsDelegation",
            "Constr#1", "singletonField", /* implied wrapper { dd: ... } for singleVariantField */ 
			DelegationDetail   , "noSpecialFlags"
        >,
        capoStoredData: singleEnumVariantMeta<DelegateDatumMeta, "capoStoredData",
            "Constr#2", "singletonField", /* implied wrapper { data: ... } for singleVariantField */ 
			AnyData   , "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariantMeta<DelegateDatumMeta, "ScriptReference",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateDatum enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **4 variant(s)** of the DelegateDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateDatumHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateDatum = 
        | { Cip68RefToken: DelegateDatum$Cip68RefToken /*minEnumVariant*/ }
        | { IsDelegation: /* implied wrapper { dd: ... } for singleVariantField */ 
			DelegationDetail    /*minEnumVariant*/ }
        | { capoStoredData: /* implied wrapper { data: ... } for singleVariantField */ 
			AnyData    /*minEnumVariant*/ }
        | { ScriptReference: tagOnly /*minEnumVariant*/ }

export type ErgoDelegateDatum = IntersectedEnum<
        | { Cip68RefToken: DelegateDatum$Ergo$Cip68RefToken /*minEnumVariant*/ }
        | { IsDelegation: /* implied wrapper { dd: ... } for singleVariantField */ 
			ErgoDelegationDetail    /*minEnumVariant*/ }
        | { capoStoredData: /* implied wrapper { data: ... } for singleVariantField */ 
			ErgoAnyData    /*minEnumVariant*/ }
        | { ScriptReference: tagOnly /*minEnumVariant*/ }
>

/**
 * DelegateDatum enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **4 variant(s)** of the DelegateDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateDatumHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateDatumLike = IntersectedEnum<
        | { Cip68RefToken: DelegateDatum$Cip68RefTokenLike /*minEnumVariant*/ }
        | { IsDelegation: /* implied wrapper { dd: ... } for singleVariantField */ 
			DelegationDetailLike    /*minEnumVariant*/ }
        | { capoStoredData: /* implied wrapper { data: ... } for singleVariantField */ 
			AnyDataLike    /*minEnumVariant*/ }
        | { ScriptReference: tagOnly /*minEnumVariant*/ }
>

export type CapoLifecycleActivity$CreatingDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$CreatingDelegate = CapoLifecycleActivity$CreatingDelegate/*ergo like-canonical-this-variant*/
export type CapoLifecycleActivity$CreatingDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type PendingDelegateAction$Add = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}

export type PendingDelegateAction$Ergo$Add = PendingDelegateAction$Add/*ergo like-canonical-this-variant*/
export type PendingDelegateAction$AddLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash | string | number[]>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}


export type PendingDelegateAction$Replace = {
    replacesDgt: AssetClass  /*minVariantField*/ ,
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}

export type PendingDelegateAction$Ergo$Replace = PendingDelegateAction$Replace/*ergo like-canonical-this-variant*/
export type PendingDelegateAction$ReplaceLike = {
    replacesDgt: AssetClass | string | [string | MintingPolicyHash | number[], string | number[]] | {mph: MintingPolicyHash | string | number[], tokenName: string | number[]}  /*minVariantField*/ ,
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash | string | number[]>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}


export type PendingDelegateActionMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "PendingDelegateAction"}, {
        Add: singleEnumVariantMeta<PendingDelegateActionMeta, "Add",
            "Constr#0", 
            "fields", PendingDelegateAction$Add, "isSeededActivity"
        >,
        Remove: singleEnumVariantMeta<PendingDelegateActionMeta, "Remove",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        Replace: singleEnumVariantMeta<PendingDelegateActionMeta, "Replace",
            "Constr#2", 
            "fields", PendingDelegateAction$Replace, "noSpecialFlags"
        >
    }
>;


/**
 * PendingDelegateAction enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the PendingDelegateAction enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingDelegateActionHelper` class
 *     for generating UPLC data for this enum type
 */
export type PendingDelegateAction = 
        | { Add: PendingDelegateAction$Add /*minEnumVariant*/ }
        | { Remove: tagOnly /*minEnumVariant*/ }
        | { Replace: PendingDelegateAction$Replace /*minEnumVariant*/ }

export type ErgoPendingDelegateAction = IntersectedEnum<
        | { Add: PendingDelegateAction$Ergo$Add /*minEnumVariant*/ }
        | { Remove: tagOnly /*minEnumVariant*/ }
        | { Replace: PendingDelegateAction$Ergo$Replace /*minEnumVariant*/ }
>

/**
 * PendingDelegateAction enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **3 variant(s)** of the PendingDelegateAction enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingDelegateActionHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type PendingDelegateActionLike = IntersectedEnum<
        | { Add: PendingDelegateAction$AddLike /*minEnumVariant*/ }
        | { Remove: tagOnly /*minEnumVariant*/ }
        | { Replace: PendingDelegateAction$ReplaceLike /*minEnumVariant*/ }
>

export type DelegateRoleMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateRole"}, {
        MintDgt: singleEnumVariantMeta<DelegateRoleMeta, "MintDgt",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SpendDgt: singleEnumVariantMeta<DelegateRoleMeta, "SpendDgt",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        MintInvariant: singleEnumVariantMeta<DelegateRoleMeta, "MintInvariant",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SpendInvariant: singleEnumVariantMeta<DelegateRoleMeta, "SpendInvariant",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        DgDataPolicy: singleEnumVariantMeta<DelegateRoleMeta, "DgDataPolicy",
            "Constr#4", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        OtherNamedDgt: singleEnumVariantMeta<DelegateRoleMeta, "OtherNamedDgt",
            "Constr#5", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        BothMintAndSpendDgt: singleEnumVariantMeta<DelegateRoleMeta, "BothMintAndSpendDgt",
            "Constr#6", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateRole enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **7 variant(s)** of the DelegateRole enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateRoleHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateRole = 
        | { MintDgt: tagOnly /*minEnumVariant*/ }
        | { SpendDgt: tagOnly /*minEnumVariant*/ }
        | { MintInvariant: tagOnly /*minEnumVariant*/ }
        | { SpendInvariant: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: tagOnly /*minEnumVariant*/ }
        | { OtherNamedDgt: tagOnly /*minEnumVariant*/ }
        | { BothMintAndSpendDgt: tagOnly /*minEnumVariant*/ }

export type ErgoDelegateRole = IntersectedEnum<DelegateRole/*like canon enum*/>

/**
 * DelegateRole enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **7 variant(s)** of the DelegateRole enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateRoleHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateRoleLike = IntersectedEnum<
        | { MintDgt: tagOnly /*minEnumVariant*/ }
        | { SpendDgt: tagOnly /*minEnumVariant*/ }
        | { MintInvariant: tagOnly /*minEnumVariant*/ }
        | { SpendInvariant: tagOnly /*minEnumVariant*/ }
        | { DgDataPolicy: tagOnly /*minEnumVariant*/ }
        | { OtherNamedDgt: tagOnly /*minEnumVariant*/ }
        | { BothMintAndSpendDgt: tagOnly /*minEnumVariant*/ }
>

export type CapoLifecycleActivity$queuePendingDgtChange = {
    action: PendingDelegateAction  /*minVariantField*/ ,
    role: DelegateRole  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$queuePendingDgtChange = {
    action: ErgoPendingDelegateAction  /*minVariantField*/ ,
    role: ErgoDelegateRole  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}

export type CapoLifecycleActivity$queuePendingDgtChangeLike = {
    action: PendingDelegateActionLike  /*minVariantField*/ ,
    role: DelegateRoleLike  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}


export type CapoLifecycleActivity$removePendingDgtChange = {
    role: DelegateRole  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$removePendingDgtChange = {
    role: ErgoDelegateRole  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}

export type CapoLifecycleActivity$removePendingDgtChangeLike = {
    role: DelegateRoleLike  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}


export type CapoLifecycleActivity$forcingNewSpendDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$forcingNewSpendDelegate = CapoLifecycleActivity$forcingNewSpendDelegate/*ergo like-canonical-this-variant*/
export type CapoLifecycleActivity$forcingNewSpendDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivity$forcingNewMintDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$Ergo$forcingNewMintDelegate = CapoLifecycleActivity$forcingNewMintDelegate/*ergo like-canonical-this-variant*/
export type CapoLifecycleActivity$forcingNewMintDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type ManifestActivity$updatingEntry = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$updatingEntry = ManifestActivity$updatingEntry/*ergo like-canonical-this-variant*/
export type ManifestActivity$updatingEntryLike = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}


export type ManifestActivity$addingEntry = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$addingEntry = ManifestActivity$addingEntry/*ergo like-canonical-this-variant*/
export type ManifestActivity$addingEntryLike = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}


export type ManifestActivity$forkingThreadToken = {
    key: string  /*minVariantField*/ ,
    newThreadCount: bigint  /*minVariantField*/ 
}

export type ManifestActivity$Ergo$forkingThreadToken = ManifestActivity$forkingThreadToken/*ergo like-canonical-this-variant*/
export type ManifestActivity$forkingThreadTokenLike = {
    key: string  /*minVariantField*/ ,
    newThreadCount: IntLike  /*minVariantField*/ 
}


export type ManifestActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "ManifestActivity"}, {
        retiringEntry: singleEnumVariantMeta<ManifestActivityMeta, "retiringEntry",
            "Constr#0", "singletonField", /* implied wrapper { key: ... } for singleVariantField */ 
			string   , "noSpecialFlags"
        >,
        updatingEntry: singleEnumVariantMeta<ManifestActivityMeta, "updatingEntry",
            "Constr#1", 
            "fields", ManifestActivity$updatingEntry, "noSpecialFlags"
        >,
        addingEntry: singleEnumVariantMeta<ManifestActivityMeta, "addingEntry",
            "Constr#2", 
            "fields", ManifestActivity$addingEntry, "noSpecialFlags"
        >,
        forkingThreadToken: singleEnumVariantMeta<ManifestActivityMeta, "forkingThreadToken",
            "Constr#3", 
            "fields", ManifestActivity$forkingThreadToken, "noSpecialFlags"
        >
    }
>;


/**
 * ManifestActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **4 variant(s)** of the ManifestActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type ManifestActivity = 
        | { retiringEntry: /* implied wrapper { key: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { updatingEntry: ManifestActivity$updatingEntry /*minEnumVariant*/ }
        | { addingEntry: ManifestActivity$addingEntry /*minEnumVariant*/ }
        | { forkingThreadToken: ManifestActivity$forkingThreadToken /*minEnumVariant*/ }

export type ErgoManifestActivity = IntersectedEnum<
        | { retiringEntry: /* implied wrapper { key: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { updatingEntry: ManifestActivity$Ergo$updatingEntry /*minEnumVariant*/ }
        | { addingEntry: ManifestActivity$Ergo$addingEntry /*minEnumVariant*/ }
        | { forkingThreadToken: ManifestActivity$Ergo$forkingThreadToken /*minEnumVariant*/ }
>

/**
 * ManifestActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **4 variant(s)** of the ManifestActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type ManifestActivityLike = IntersectedEnum<
        | { retiringEntry: /* implied wrapper { key: ... } for singleVariantField */ 
			string    /*minEnumVariant*/ }
        | { updatingEntry: ManifestActivity$updatingEntryLike /*minEnumVariant*/ }
        | { addingEntry: ManifestActivity$addingEntryLike /*minEnumVariant*/ }
        | { forkingThreadToken: ManifestActivity$forkingThreadTokenLike /*minEnumVariant*/ }
>

export type CapoLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "CreatingDelegate",
            "Constr#0", 
            "fields", CapoLifecycleActivity$CreatingDelegate, "isSeededActivity"
        >,
        queuePendingDgtChange: singleEnumVariantMeta<CapoLifecycleActivityMeta, "queuePendingDgtChange",
            "Constr#1", 
            "fields", CapoLifecycleActivity$queuePendingDgtChange, "noSpecialFlags"
        >,
        removePendingDgtChange: singleEnumVariantMeta<CapoLifecycleActivityMeta, "removePendingDgtChange",
            "Constr#2", 
            "fields", CapoLifecycleActivity$removePendingDgtChange, "noSpecialFlags"
        >,
        commitPendingDgtChanges: singleEnumVariantMeta<CapoLifecycleActivityMeta, "commitPendingDgtChanges",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        forcingNewSpendDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "forcingNewSpendDelegate",
            "Constr#4", 
            "fields", CapoLifecycleActivity$forcingNewSpendDelegate, "isSeededActivity"
        >,
        forcingNewMintDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "forcingNewMintDelegate",
            "Constr#5", 
            "fields", CapoLifecycleActivity$forcingNewMintDelegate, "isSeededActivity"
        >,
        updatingManifest: singleEnumVariantMeta<CapoLifecycleActivityMeta, "updatingManifest",
            "Constr#6", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			ManifestActivity   , "noSpecialFlags"
        >
    }
>;


/**
 * CapoLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **7 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type CapoLifecycleActivity = 
        | { CreatingDelegate: CapoLifecycleActivity$CreatingDelegate /*minEnumVariant*/ }
        | { queuePendingDgtChange: CapoLifecycleActivity$queuePendingDgtChange /*minEnumVariant*/ }
        | { removePendingDgtChange: CapoLifecycleActivity$removePendingDgtChange /*minEnumVariant*/ }
        | { commitPendingDgtChanges: tagOnly /*minEnumVariant*/ }
        | { forcingNewSpendDelegate: CapoLifecycleActivity$forcingNewSpendDelegate /*minEnumVariant*/ }
        | { forcingNewMintDelegate: CapoLifecycleActivity$forcingNewMintDelegate /*minEnumVariant*/ }
        | { updatingManifest: /* implied wrapper { activity: ... } for singleVariantField */ 
			ManifestActivity    /*minEnumVariant*/ }

export type ErgoCapoLifecycleActivity = IntersectedEnum<
        | { CreatingDelegate: CapoLifecycleActivity$Ergo$CreatingDelegate /*minEnumVariant*/ }
        | { queuePendingDgtChange: CapoLifecycleActivity$Ergo$queuePendingDgtChange /*minEnumVariant*/ }
        | { removePendingDgtChange: CapoLifecycleActivity$Ergo$removePendingDgtChange /*minEnumVariant*/ }
        | { commitPendingDgtChanges: tagOnly /*minEnumVariant*/ }
        | { forcingNewSpendDelegate: CapoLifecycleActivity$Ergo$forcingNewSpendDelegate /*minEnumVariant*/ }
        | { forcingNewMintDelegate: CapoLifecycleActivity$Ergo$forcingNewMintDelegate /*minEnumVariant*/ }
        | { updatingManifest: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoManifestActivity    /*minEnumVariant*/ }
>

/**
 * CapoLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **7 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type CapoLifecycleActivityLike = IntersectedEnum<
        | { CreatingDelegate: CapoLifecycleActivity$CreatingDelegateLike /*minEnumVariant*/ }
        | { queuePendingDgtChange: CapoLifecycleActivity$queuePendingDgtChangeLike /*minEnumVariant*/ }
        | { removePendingDgtChange: CapoLifecycleActivity$removePendingDgtChangeLike /*minEnumVariant*/ }
        | { commitPendingDgtChanges: tagOnly /*minEnumVariant*/ }
        | { forcingNewSpendDelegate: CapoLifecycleActivity$forcingNewSpendDelegateLike /*minEnumVariant*/ }
        | { forcingNewMintDelegate: CapoLifecycleActivity$forcingNewMintDelegateLike /*minEnumVariant*/ }
        | { updatingManifest: /* implied wrapper { activity: ... } for singleVariantField */ 
			ManifestActivityLike    /*minEnumVariant*/ }
>

export type DelegateLifecycleActivity$ReplacingMe = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type DelegateLifecycleActivity$Ergo$ReplacingMe = DelegateLifecycleActivity$ReplacingMe/*ergo like-canonical-this-variant*/
export type DelegateLifecycleActivity$ReplacingMeLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type DelegateLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateLifecycleActivity"}, {
        ReplacingMe: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ReplacingMe",
            "Constr#0", 
            "fields", DelegateLifecycleActivity$ReplacingMe, "isSeededActivity"
        >,
        Retiring: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "Retiring",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        ValidatingSettings: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ValidatingSettings",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the DelegateLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateLifecycleActivity = 
        | { ReplacingMe: DelegateLifecycleActivity$ReplacingMe /*minEnumVariant*/ }
        | { Retiring: tagOnly /*minEnumVariant*/ }
        | { ValidatingSettings: tagOnly /*minEnumVariant*/ }

export type ErgoDelegateLifecycleActivity = IntersectedEnum<
        | { ReplacingMe: DelegateLifecycleActivity$Ergo$ReplacingMe /*minEnumVariant*/ }
        | { Retiring: tagOnly /*minEnumVariant*/ }
        | { ValidatingSettings: tagOnly /*minEnumVariant*/ }
>

/**
 * DelegateLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **3 variant(s)** of the DelegateLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateLifecycleActivityLike = IntersectedEnum<
        | { ReplacingMe: DelegateLifecycleActivity$ReplacingMeLike /*minEnumVariant*/ }
        | { Retiring: tagOnly /*minEnumVariant*/ }
        | { ValidatingSettings: tagOnly /*minEnumVariant*/ }
>

export type SpendingActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "SpendingActivity"}, {
        _placeholder1SA: singleEnumVariantMeta<SpendingActivityMeta, "_placeholder1SA",
            "Constr#0", "singletonField", /* implied wrapper { recId: ... } for singleVariantField */ 
			number[]   , "noSpecialFlags"
        >
    }
>;


/**
 * SpendingActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the SpendingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SpendingActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type SpendingActivity = 
        | { _placeholder1SA: /* implied wrapper { recId: ... } for singleVariantField */ 
			number[]    /*minEnumVariant*/ }

export type ErgoSpendingActivity = IntersectedEnum<SpendingActivity/*like canon enum*/>

/**
 * SpendingActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **1 variant(s)** of the SpendingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SpendingActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type SpendingActivityLike = IntersectedEnum<
        | { _placeholder1SA: /* implied wrapper { recId: ... } for singleVariantField */ 
			number[]    /*minEnumVariant*/ }
>

export type MintingActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "MintingActivity"}, {
        _placeholder1MA: singleEnumVariantMeta<MintingActivityMeta, "_placeholder1MA",
            "Constr#0", "singletonField", /* implied wrapper { seed: ... } for singleVariantField */ 
			TxOutputId   , "isSeededActivity"
        >
    }
>;


/**
 * MintingActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the MintingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MintingActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type MintingActivity = 
        | { _placeholder1MA: /* implied wrapper { seed: ... } for singleVariantField */ 
			TxOutputId    /*minEnumVariant*/ }

export type ErgoMintingActivity = IntersectedEnum<MintingActivity/*like canon enum*/>

/**
 * MintingActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **1 variant(s)** of the MintingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MintingActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type MintingActivityLike = IntersectedEnum<
        | { _placeholder1MA: /* implied wrapper { seed: ... } for singleVariantField */ 
			TxOutputId | string    /*minEnumVariant*/ }
>

export type BurningActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "BurningActivity"}, {
        _placeholder1BA: singleEnumVariantMeta<BurningActivityMeta, "_placeholder1BA",
            "Constr#0", "singletonField", /* implied wrapper { recId: ... } for singleVariantField */ 
			number[]   , "noSpecialFlags"
        >
    }
>;


/**
 * BurningActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the BurningActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `BurningActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type BurningActivity = 
        | { _placeholder1BA: /* implied wrapper { recId: ... } for singleVariantField */ 
			number[]    /*minEnumVariant*/ }

export type ErgoBurningActivity = IntersectedEnum<BurningActivity/*like canon enum*/>

/**
 * BurningActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **1 variant(s)** of the BurningActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `BurningActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type BurningActivityLike = IntersectedEnum<
        | { _placeholder1BA: /* implied wrapper { recId: ... } for singleVariantField */ 
			number[]    /*minEnumVariant*/ }
>

export type DelegateActivity$CreatingDelegatedData = {
    seed: TxOutputId  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}

export type DelegateActivity$Ergo$CreatingDelegatedData = DelegateActivity$CreatingDelegatedData/*ergo like-canonical-this-variant*/
export type DelegateActivity$CreatingDelegatedDataLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}


export type DelegateActivity$UpdatingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$Ergo$UpdatingDelegatedData = DelegateActivity$UpdatingDelegatedData/*ergo like-canonical-this-variant*/
export type DelegateActivity$UpdatingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivity$DeletingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$Ergo$DeletingDelegatedData = DelegateActivity$DeletingDelegatedData/*ergo like-canonical-this-variant*/
export type DelegateActivity$DeletingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "DelegateActivity"}, {
        CapoLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "CapoLifecycleActivities",
            "Constr#0", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			CapoLifecycleActivity   , "noSpecialFlags"
        >,
        DelegateLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "DelegateLifecycleActivities",
            "Constr#1", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			DelegateLifecycleActivity   , "noSpecialFlags"
        >,
        SpendingActivities: singleEnumVariantMeta<DelegateActivityMeta, "SpendingActivities",
            "Constr#2", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			SpendingActivity   , "noSpecialFlags"
        >,
        MintingActivities: singleEnumVariantMeta<DelegateActivityMeta, "MintingActivities",
            "Constr#3", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			MintingActivity   , "noSpecialFlags"
        >,
        BurningActivities: singleEnumVariantMeta<DelegateActivityMeta, "BurningActivities",
            "Constr#4", "singletonField", /* implied wrapper { activity: ... } for singleVariantField */ 
			BurningActivity   , "noSpecialFlags"
        >,
        CreatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "CreatingDelegatedData",
            "Constr#5", 
            "fields", DelegateActivity$CreatingDelegatedData, "isSeededActivity"
        >,
        UpdatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "UpdatingDelegatedData",
            "Constr#6", 
            "fields", DelegateActivity$UpdatingDelegatedData, "noSpecialFlags"
        >,
        DeletingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "DeletingDelegatedData",
            "Constr#7", 
            "fields", DelegateActivity$DeletingDelegatedData, "noSpecialFlags"
        >,
        MultipleDelegateActivities: singleEnumVariantMeta<DelegateActivityMeta, "MultipleDelegateActivities",
            "Constr#8", "singletonField", /* implied wrapper { activities: ... } for singleVariantField */ 
			Array<UplcData>   , "noSpecialFlags"
        >
    }
>;


/**
 * DelegateActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **9 variant(s)** of the DelegateActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateActivity = 
        | { CapoLifecycleActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			CapoLifecycleActivity    /*minEnumVariant*/ }
        | { DelegateLifecycleActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			DelegateLifecycleActivity    /*minEnumVariant*/ }
        | { SpendingActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			SpendingActivity    /*minEnumVariant*/ }
        | { MintingActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			MintingActivity    /*minEnumVariant*/ }
        | { BurningActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			BurningActivity    /*minEnumVariant*/ }
        | { CreatingDelegatedData: DelegateActivity$CreatingDelegatedData /*minEnumVariant*/ }
        | { UpdatingDelegatedData: DelegateActivity$UpdatingDelegatedData /*minEnumVariant*/ }
        | { DeletingDelegatedData: DelegateActivity$DeletingDelegatedData /*minEnumVariant*/ }
        | { MultipleDelegateActivities: /* implied wrapper { activities: ... } for singleVariantField */ 
			Array<UplcData>    /*minEnumVariant*/ }

export type ErgoDelegateActivity = IntersectedEnum<
        | { CapoLifecycleActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoCapoLifecycleActivity    /*minEnumVariant*/ }
        | { DelegateLifecycleActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoDelegateLifecycleActivity    /*minEnumVariant*/ }
        | { SpendingActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoSpendingActivity    /*minEnumVariant*/ }
        | { MintingActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoMintingActivity    /*minEnumVariant*/ }
        | { BurningActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			ErgoBurningActivity    /*minEnumVariant*/ }
        | { CreatingDelegatedData: DelegateActivity$Ergo$CreatingDelegatedData /*minEnumVariant*/ }
        | { UpdatingDelegatedData: DelegateActivity$Ergo$UpdatingDelegatedData /*minEnumVariant*/ }
        | { DeletingDelegatedData: DelegateActivity$Ergo$DeletingDelegatedData /*minEnumVariant*/ }
        | { MultipleDelegateActivities: /* implied wrapper { activities: ... } for singleVariantField */ 
			Array<UplcData>    /*minEnumVariant*/ }
>

/**
 * DelegateActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **9 variant(s)** of the DelegateActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateActivityLike = IntersectedEnum<
        | { CapoLifecycleActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			CapoLifecycleActivityLike    /*minEnumVariant*/ }
        | { DelegateLifecycleActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			DelegateLifecycleActivityLike    /*minEnumVariant*/ }
        | { SpendingActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			SpendingActivityLike    /*minEnumVariant*/ }
        | { MintingActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			MintingActivityLike    /*minEnumVariant*/ }
        | { BurningActivities: /* implied wrapper { activity: ... } for singleVariantField */ 
			BurningActivityLike    /*minEnumVariant*/ }
        | { CreatingDelegatedData: DelegateActivity$CreatingDelegatedDataLike /*minEnumVariant*/ }
        | { UpdatingDelegatedData: DelegateActivity$UpdatingDelegatedDataLike /*minEnumVariant*/ }
        | { DeletingDelegatedData: DelegateActivity$DeletingDelegatedDataLike /*minEnumVariant*/ }
        | { MultipleDelegateActivities: /* implied wrapper { activities: ... } for singleVariantField */ 
			Array<UplcData>    /*minEnumVariant*/ }
>

