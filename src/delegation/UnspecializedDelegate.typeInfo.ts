// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import type { UplcData } from "@helios-lang/uplc";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingHash,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    TxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { Cast } from "@helios-lang/contract-utils";
import type { 
    IntLike,
    ByteArrayLike,
 } from "@helios-lang/codec-utils";


import {HeliosScriptBundle, type tagOnly, type EnumTypeMeta, type singleEnumVariantMeta} from "../helios/HeliosScriptBundle.js"
        

export type AnyData = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}

export type AnyDataLike = {
    id: /*minStructField*/ number[]
    type: /*minStructField*/ string
}


export type DelegationDetail = {
    capoAddr: /*minStructField*/ Address
    mph: /*minStructField*/ MintingPolicyHash
    tn: /*minStructField*/ number[]
}

export type DelegationDetailLike = {
    capoAddr: /*minStructField*/ Address | string
    mph: /*minStructField*/ MintingPolicyHash | string | number[]
    tn: /*minStructField*/ number[]
}


export type DelegateDatum$Cip68RefToken = {
    cip68meta: AnyData  /*minVariantField*/ ,
    cip68version: bigint  /*minVariantField*/ ,
    dd: Option<DelegationDetail>  /*minVariantField*/ 
}

export type DelegateDatum$Cip68RefTokenLike = {
    cip68meta: AnyDataLike  /*minVariantField*/ ,
    cip68version: IntLike  /*minVariantField*/ ,
    dd: Option<DelegationDetailLike>  /*minVariantField*/ 
}


export type DelegateDatumMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "DelegateDatum"}, {
        Cip68RefToken: singleEnumVariantMeta<DelegateDatumMeta, "Cip68RefToken",
            "Constr#0", 
            "fields", DelegateDatum$Cip68RefToken, "noSpecialFlags"
        >,
        IsDelegation: singleEnumVariantMeta<DelegateDatumMeta, "IsDelegation",
            "Constr#1", "singletonField", DelegationDetail /*singleVariantField ; elided extra { dd: DelegationDetail} structure*/
  , "noSpecialFlags"
        >,
        capoStoredData: singleEnumVariantMeta<DelegateDatumMeta, "capoStoredData",
            "Constr#2", "singletonField", AnyData /*singleVariantField ; elided extra { data: AnyData} structure*/
  , "noSpecialFlags"
        >,
        ScriptReference: singleEnumVariantMeta<DelegateDatumMeta, "ScriptReference",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateDatum enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **4 variant(s)** of the DelegateDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateDatumHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateDatum = 
        | { Cip68RefToken: /*minEnumVariant*/ DelegateDatum$Cip68RefToken }
        | { IsDelegation: /*minEnumVariant*/ DelegationDetail /*singleVariantField ; elided extra { dd: DelegationDetail} structure*/
   }
        | { capoStoredData: /*minEnumVariant*/ AnyData /*singleVariantField ; elided extra { data: AnyData} structure*/
   }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }

/**
 * DelegateDatum enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **4 variant(s)** of the DelegateDatum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateDatumHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateDatumLike = 
        | { Cip68RefToken: /*minEnumVariant*/ DelegateDatum$Cip68RefTokenLike }
        | { IsDelegation: /*minEnumVariant*/ DelegationDetailLike /*singleVariantField ; elided extra { dd: DelegationDetailLike} structure*/
   }
        | { capoStoredData: /*minEnumVariant*/ AnyDataLike /*singleVariantField ; elided extra { data: AnyDataLike} structure*/
   }
        | { ScriptReference: /*minEnumVariant*/ tagOnly }

export type CapoLifecycleActivity$CreatingDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$CreatingDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type PendingDelegateAction$Add = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}

export type PendingDelegateAction$AddLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash | string | number[]>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}


export type PendingDelegateAction$Replace = {
    replacesDgt: AssetClass  /*minVariantField*/ ,
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}

export type PendingDelegateAction$ReplaceLike = {
    replacesDgt: AssetClass | string | [string | MintingPolicyHash | number[], string | number[]] | {mph: MintingPolicyHash | string | number[], tokenName: string | number[]}  /*minVariantField*/ ,
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ ,
    delegateValidatorHash: Option<ValidatorHash | string | number[]>  /*minVariantField*/ ,
    config: number[]  /*minVariantField*/ 
}


export type PendingDelegateActionMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "PendingDelegateAction"}, {
        Add: singleEnumVariantMeta<PendingDelegateActionMeta, "Add",
            "Constr#0", 
            "fields", PendingDelegateAction$Add, "isSeededActivity"
        >,
        Remove: singleEnumVariantMeta<PendingDelegateActionMeta, "Remove",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        Replace: singleEnumVariantMeta<PendingDelegateActionMeta, "Replace",
            "Constr#2", 
            "fields", PendingDelegateAction$Replace, "noSpecialFlags"
        >
    }
>;


/**
 * PendingDelegateAction enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the PendingDelegateAction enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingDelegateActionHelper` class
 *     for generating UPLC data for this enum type
 */
export type PendingDelegateAction = 
        | { Add: /*minEnumVariant*/ PendingDelegateAction$Add }
        | { Remove: /*minEnumVariant*/ tagOnly }
        | { Replace: /*minEnumVariant*/ PendingDelegateAction$Replace }

/**
 * PendingDelegateAction enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **3 variant(s)** of the PendingDelegateAction enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `PendingDelegateActionHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type PendingDelegateActionLike = 
        | { Add: /*minEnumVariant*/ PendingDelegateAction$AddLike }
        | { Remove: /*minEnumVariant*/ tagOnly }
        | { Replace: /*minEnumVariant*/ PendingDelegateAction$ReplaceLike }

export type DelegateRoleMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateRole"}, {
        MintDgt: singleEnumVariantMeta<DelegateRoleMeta, "MintDgt",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SpendDgt: singleEnumVariantMeta<DelegateRoleMeta, "SpendDgt",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        MintInvariant: singleEnumVariantMeta<DelegateRoleMeta, "MintInvariant",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        SpendInvariant: singleEnumVariantMeta<DelegateRoleMeta, "SpendInvariant",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        DgDataPolicy: singleEnumVariantMeta<DelegateRoleMeta, "DgDataPolicy",
            "Constr#4", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        OtherNamedDgt: singleEnumVariantMeta<DelegateRoleMeta, "OtherNamedDgt",
            "Constr#5", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        BothMintAndSpendDgt: singleEnumVariantMeta<DelegateRoleMeta, "BothMintAndSpendDgt",
            "Constr#6", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateRole enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **7 variant(s)** of the DelegateRole enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateRoleHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateRole = 
        | { MintDgt: /*minEnumVariant*/ tagOnly }
        | { SpendDgt: /*minEnumVariant*/ tagOnly }
        | { MintInvariant: /*minEnumVariant*/ tagOnly }
        | { SpendInvariant: /*minEnumVariant*/ tagOnly }
        | { DgDataPolicy: /*minEnumVariant*/ tagOnly }
        | { OtherNamedDgt: /*minEnumVariant*/ tagOnly }
        | { BothMintAndSpendDgt: /*minEnumVariant*/ tagOnly }

/**
 * DelegateRole enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **7 variant(s)** of the DelegateRole enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateRoleHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateRoleLike = 
        | { MintDgt: /*minEnumVariant*/ tagOnly }
        | { SpendDgt: /*minEnumVariant*/ tagOnly }
        | { MintInvariant: /*minEnumVariant*/ tagOnly }
        | { SpendInvariant: /*minEnumVariant*/ tagOnly }
        | { DgDataPolicy: /*minEnumVariant*/ tagOnly }
        | { OtherNamedDgt: /*minEnumVariant*/ tagOnly }
        | { BothMintAndSpendDgt: /*minEnumVariant*/ tagOnly }

export type CapoLifecycleActivity$queuePendingDgtChange = {
    action: PendingDelegateAction  /*minVariantField*/ ,
    role: DelegateRole  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}

export type CapoLifecycleActivity$queuePendingDgtChangeLike = {
    action: PendingDelegateActionLike  /*minVariantField*/ ,
    role: DelegateRoleLike  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}


export type CapoLifecycleActivity$removePendingDgtChange = {
    role: DelegateRole  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}

export type CapoLifecycleActivity$removePendingDgtChangeLike = {
    role: DelegateRoleLike  /*minVariantField*/ ,
    name: Option<string>  /*minVariantField*/ 
}


export type CapoLifecycleActivity$forcingNewSpendDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$forcingNewSpendDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type CapoLifecycleActivity$forcingNewMintDelegate = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type CapoLifecycleActivity$forcingNewMintDelegateLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type ManifestActivity$updatingEntry = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}

export type ManifestActivity$updatingEntryLike = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}


export type ManifestActivity$addingEntry = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}

export type ManifestActivity$addingEntryLike = {
    key: string  /*minVariantField*/ ,
    tokenName: number[]  /*minVariantField*/ 
}


export type ManifestActivity$forkingThreadToken = {
    key: string  /*minVariantField*/ ,
    newThreadCount: bigint  /*minVariantField*/ 
}

export type ManifestActivity$forkingThreadTokenLike = {
    key: string  /*minVariantField*/ ,
    newThreadCount: IntLike  /*minVariantField*/ 
}


export type ManifestActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "ManifestActivity"}, {
        retiringEntry: singleEnumVariantMeta<ManifestActivityMeta, "retiringEntry",
            "Constr#0", "singletonField", string /*singleVariantField ; elided extra { key: string} structure*/
  , "noSpecialFlags"
        >,
        updatingEntry: singleEnumVariantMeta<ManifestActivityMeta, "updatingEntry",
            "Constr#1", 
            "fields", ManifestActivity$updatingEntry, "noSpecialFlags"
        >,
        addingEntry: singleEnumVariantMeta<ManifestActivityMeta, "addingEntry",
            "Constr#2", 
            "fields", ManifestActivity$addingEntry, "noSpecialFlags"
        >,
        forkingThreadToken: singleEnumVariantMeta<ManifestActivityMeta, "forkingThreadToken",
            "Constr#3", 
            "fields", ManifestActivity$forkingThreadToken, "noSpecialFlags"
        >
    }
>;


/**
 * ManifestActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **4 variant(s)** of the ManifestActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type ManifestActivity = 
        | { retiringEntry: /*minEnumVariant*/ string /*singleVariantField ; elided extra { key: string} structure*/
   }
        | { updatingEntry: /*minEnumVariant*/ ManifestActivity$updatingEntry }
        | { addingEntry: /*minEnumVariant*/ ManifestActivity$addingEntry }
        | { forkingThreadToken: /*minEnumVariant*/ ManifestActivity$forkingThreadToken }

/**
 * ManifestActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **4 variant(s)** of the ManifestActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `ManifestActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type ManifestActivityLike = 
        | { retiringEntry: /*minEnumVariant*/ string /*singleVariantField ; elided extra { key: string} structure*/
   }
        | { updatingEntry: /*minEnumVariant*/ ManifestActivity$updatingEntryLike }
        | { addingEntry: /*minEnumVariant*/ ManifestActivity$addingEntryLike }
        | { forkingThreadToken: /*minEnumVariant*/ ManifestActivity$forkingThreadTokenLike }

export type CapoLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "CapoLifecycleActivity"}, {
        CreatingDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "CreatingDelegate",
            "Constr#0", 
            "fields", CapoLifecycleActivity$CreatingDelegate, "isSeededActivity"
        >,
        queuePendingDgtChange: singleEnumVariantMeta<CapoLifecycleActivityMeta, "queuePendingDgtChange",
            "Constr#1", 
            "fields", CapoLifecycleActivity$queuePendingDgtChange, "noSpecialFlags"
        >,
        removePendingDgtChange: singleEnumVariantMeta<CapoLifecycleActivityMeta, "removePendingDgtChange",
            "Constr#2", 
            "fields", CapoLifecycleActivity$removePendingDgtChange, "noSpecialFlags"
        >,
        commitPendingDgtChanges: singleEnumVariantMeta<CapoLifecycleActivityMeta, "commitPendingDgtChanges",
            "Constr#3", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        forcingNewSpendDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "forcingNewSpendDelegate",
            "Constr#4", 
            "fields", CapoLifecycleActivity$forcingNewSpendDelegate, "isSeededActivity"
        >,
        forcingNewMintDelegate: singleEnumVariantMeta<CapoLifecycleActivityMeta, "forcingNewMintDelegate",
            "Constr#5", 
            "fields", CapoLifecycleActivity$forcingNewMintDelegate, "isSeededActivity"
        >,
        updatingManifest: singleEnumVariantMeta<CapoLifecycleActivityMeta, "updatingManifest",
            "Constr#6", "singletonField", ManifestActivity /*singleVariantField ; elided extra { activity: ManifestActivity} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * CapoLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **7 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type CapoLifecycleActivity = 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegate }
        | { queuePendingDgtChange: /*minEnumVariant*/ CapoLifecycleActivity$queuePendingDgtChange }
        | { removePendingDgtChange: /*minEnumVariant*/ CapoLifecycleActivity$removePendingDgtChange }
        | { commitPendingDgtChanges: /*minEnumVariant*/ tagOnly }
        | { forcingNewSpendDelegate: /*minEnumVariant*/ CapoLifecycleActivity$forcingNewSpendDelegate }
        | { forcingNewMintDelegate: /*minEnumVariant*/ CapoLifecycleActivity$forcingNewMintDelegate }
        | { updatingManifest: /*minEnumVariant*/ ManifestActivity /*singleVariantField ; elided extra { activity: ManifestActivity} structure*/
   }

/**
 * CapoLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **7 variant(s)** of the CapoLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `CapoLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type CapoLifecycleActivityLike = 
        | { CreatingDelegate: /*minEnumVariant*/ CapoLifecycleActivity$CreatingDelegateLike }
        | { queuePendingDgtChange: /*minEnumVariant*/ CapoLifecycleActivity$queuePendingDgtChangeLike }
        | { removePendingDgtChange: /*minEnumVariant*/ CapoLifecycleActivity$removePendingDgtChangeLike }
        | { commitPendingDgtChanges: /*minEnumVariant*/ tagOnly }
        | { forcingNewSpendDelegate: /*minEnumVariant*/ CapoLifecycleActivity$forcingNewSpendDelegateLike }
        | { forcingNewMintDelegate: /*minEnumVariant*/ CapoLifecycleActivity$forcingNewMintDelegateLike }
        | { updatingManifest: /*minEnumVariant*/ ManifestActivityLike /*singleVariantField ; elided extra { activity: ManifestActivityLike} structure*/
   }

export type DelegateLifecycleActivity$ReplacingMe = {
    seed: TxOutputId  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}

export type DelegateLifecycleActivity$ReplacingMeLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    purpose: string  /*minVariantField*/ 
}


export type DelegateLifecycleActivityMeta = EnumTypeMeta<
    {module: "CapoDelegateHelpers", enumName: "DelegateLifecycleActivity"}, {
        ReplacingMe: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ReplacingMe",
            "Constr#0", 
            "fields", DelegateLifecycleActivity$ReplacingMe, "isSeededActivity"
        >,
        Retiring: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "Retiring",
            "Constr#1", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        ValidatingSettings: singleEnumVariantMeta<DelegateLifecycleActivityMeta, "ValidatingSettings",
            "Constr#2", "tagOnly", tagOnly, "noSpecialFlags"
        >
    }
>;


/**
 * DelegateLifecycleActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **3 variant(s)** of the DelegateLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateLifecycleActivity = 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMe }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }

/**
 * DelegateLifecycleActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **3 variant(s)** of the DelegateLifecycleActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateLifecycleActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateLifecycleActivityLike = 
        | { ReplacingMe: /*minEnumVariant*/ DelegateLifecycleActivity$ReplacingMeLike }
        | { Retiring: /*minEnumVariant*/ tagOnly }
        | { ValidatingSettings: /*minEnumVariant*/ tagOnly }

export type SpendingActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "SpendingActivity"}, {
        _placeholder1SA: singleEnumVariantMeta<SpendingActivityMeta, "_placeholder1SA",
            "Constr#0", "singletonField", number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * SpendingActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the SpendingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SpendingActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type SpendingActivity = 
        | { _placeholder1SA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
   }

/**
 * SpendingActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **1 variant(s)** of the SpendingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SpendingActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type SpendingActivityLike = 
        | { _placeholder1SA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
   }

export type MintingActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "MintingActivity"}, {
        _placeholder1MA: singleEnumVariantMeta<MintingActivityMeta, "_placeholder1MA",
            "Constr#0", "singletonField", TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
  , "isSeededActivity"
        >
    }
>;


/**
 * MintingActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the MintingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MintingActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type MintingActivity = 
        | { _placeholder1MA: /*minEnumVariant*/ TxOutputId /*singleVariantField ; elided extra { seed: TxOutputId} structure*/
   }

/**
 * MintingActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **1 variant(s)** of the MintingActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `MintingActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type MintingActivityLike = 
        | { _placeholder1MA: /*minEnumVariant*/ TxOutputId | string /*singleVariantField ; elided extra { seed: TxOutputId | string} structure*/
   }

export type BurningActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "BurningActivity"}, {
        _placeholder1BA: singleEnumVariantMeta<BurningActivityMeta, "_placeholder1BA",
            "Constr#0", "singletonField", number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * BurningActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **1 variant(s)** of the BurningActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `BurningActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type BurningActivity = 
        | { _placeholder1BA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
   }

/**
 * BurningActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **1 variant(s)** of the BurningActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `BurningActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type BurningActivityLike = 
        | { _placeholder1BA: /*minEnumVariant*/ number[] /*singleVariantField ; elided extra { recId: number[]} structure*/
   }

export type DelegateActivity$CreatingDelegatedData = {
    seed: TxOutputId  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}

export type DelegateActivity$CreatingDelegatedDataLike = {
    seed: TxOutputId | string  /*minVariantField*/ ,
    dataType: string  /*minVariantField*/ 
}


export type DelegateActivity$UpdatingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$UpdatingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivity$DeletingDelegatedData = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}

export type DelegateActivity$DeletingDelegatedDataLike = {
    dataType: string  /*minVariantField*/ ,
    recId: number[]  /*minVariantField*/ 
}


export type DelegateActivityMeta = EnumTypeMeta<
    {module: "unspecializedDelegate", enumName: "DelegateActivity"}, {
        CapoLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "CapoLifecycleActivities",
            "Constr#0", "singletonField", CapoLifecycleActivity /*singleVariantField ; elided extra { activity: CapoLifecycleActivity} structure*/
  , "noSpecialFlags"
        >,
        DelegateLifecycleActivities: singleEnumVariantMeta<DelegateActivityMeta, "DelegateLifecycleActivities",
            "Constr#1", "singletonField", DelegateLifecycleActivity /*singleVariantField ; elided extra { activity: DelegateLifecycleActivity} structure*/
  , "noSpecialFlags"
        >,
        SpendingActivities: singleEnumVariantMeta<DelegateActivityMeta, "SpendingActivities",
            "Constr#2", "singletonField", SpendingActivity /*singleVariantField ; elided extra { activity: SpendingActivity} structure*/
  , "noSpecialFlags"
        >,
        MintingActivities: singleEnumVariantMeta<DelegateActivityMeta, "MintingActivities",
            "Constr#3", "singletonField", MintingActivity /*singleVariantField ; elided extra { activity: MintingActivity} structure*/
  , "noSpecialFlags"
        >,
        BurningActivities: singleEnumVariantMeta<DelegateActivityMeta, "BurningActivities",
            "Constr#4", "singletonField", BurningActivity /*singleVariantField ; elided extra { activity: BurningActivity} structure*/
  , "noSpecialFlags"
        >,
        CreatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "CreatingDelegatedData",
            "Constr#5", 
            "fields", DelegateActivity$CreatingDelegatedData, "isSeededActivity"
        >,
        UpdatingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "UpdatingDelegatedData",
            "Constr#6", 
            "fields", DelegateActivity$UpdatingDelegatedData, "noSpecialFlags"
        >,
        DeletingDelegatedData: singleEnumVariantMeta<DelegateActivityMeta, "DeletingDelegatedData",
            "Constr#7", 
            "fields", DelegateActivity$DeletingDelegatedData, "noSpecialFlags"
        >,
        MultipleDelegateActivities: singleEnumVariantMeta<DelegateActivityMeta, "MultipleDelegateActivities",
            "Constr#8", "singletonField", Array<UplcData> /*singleVariantField ; elided extra { activities: Array<UplcData>} structure*/
  , "noSpecialFlags"
        >
    }
>;


/**
 * DelegateActivity enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **9 variant(s)** of the DelegateActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateActivityHelper` class
 *     for generating UPLC data for this enum type
 */
export type DelegateActivity = 
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivity /*singleVariantField ; elided extra { activity: CapoLifecycleActivity} structure*/
   }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivity /*singleVariantField ; elided extra { activity: DelegateLifecycleActivity} structure*/
   }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivity /*singleVariantField ; elided extra { activity: SpendingActivity} structure*/
   }
        | { MintingActivities: /*minEnumVariant*/ MintingActivity /*singleVariantField ; elided extra { activity: MintingActivity} structure*/
   }
        | { BurningActivities: /*minEnumVariant*/ BurningActivity /*singleVariantField ; elided extra { activity: BurningActivity} structure*/
   }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedData }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedData }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedData }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField ; elided extra { activities: Array<UplcData>} structure*/
   }

/**
 * DelegateActivity enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structures
 * for creating any of the **9 variant(s)** of the DelegateActivity enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `DelegateActivityHelper` class
 *     for generating UPLC data for this enum type
 *
 * ### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 */
export type DelegateActivityLike = 
        | { CapoLifecycleActivities: /*minEnumVariant*/ CapoLifecycleActivityLike /*singleVariantField ; elided extra { activity: CapoLifecycleActivityLike} structure*/
   }
        | { DelegateLifecycleActivities: /*minEnumVariant*/ DelegateLifecycleActivityLike /*singleVariantField ; elided extra { activity: DelegateLifecycleActivityLike} structure*/
   }
        | { SpendingActivities: /*minEnumVariant*/ SpendingActivityLike /*singleVariantField ; elided extra { activity: SpendingActivityLike} structure*/
   }
        | { MintingActivities: /*minEnumVariant*/ MintingActivityLike /*singleVariantField ; elided extra { activity: MintingActivityLike} structure*/
   }
        | { BurningActivities: /*minEnumVariant*/ BurningActivityLike /*singleVariantField ; elided extra { activity: BurningActivityLike} structure*/
   }
        | { CreatingDelegatedData: /*minEnumVariant*/ DelegateActivity$CreatingDelegatedDataLike }
        | { UpdatingDelegatedData: /*minEnumVariant*/ DelegateActivity$UpdatingDelegatedDataLike }
        | { DeletingDelegatedData: /*minEnumVariant*/ DelegateActivity$DeletingDelegatedDataLike }
        | { MultipleDelegateActivities: /*minEnumVariant*/ Array<UplcData> /*singleVariantField ; elided extra { activities: Array<UplcData>} structure*/
   }

