import {CapoHeliosBundle} from "../CapoHeliosBundle.js";
import { mkHeliosModule, type HeliosModuleSrc } from "../helios/HeliosModuleSrc.js";
import { HeliosScriptBundle } from "../helios/HeliosScriptBundle.js";
import BasicDelegate from "./BasicDelegate.hl";

export type CapoDelegateBundleClass = new (
    capoBundle: CapoHeliosBundle
) => CapoDelegateBundle;

// this class expresses a "has dependences from the Capo" semantic,
// ... not because it expects any dynamic code dependencies from an
// ... application-specific Capo.  Also, this class being abstract, it never
// ... is used directly.  The direct requirements of its included code from
// ... BasicDelegate are easily satisfied by the unspecialized Capo bundle.
//
// Subclasses of this class MAY have application-specific dependencies
// ... to be provided by an application-specific Capo.


/**
 * for any Capo delegate; combines the BasicDelegate with a
 *  concrete specialization
 **/
export abstract class CapoDelegateBundle extends HeliosScriptBundle {
    abstract get specializedDelegateModule(): HeliosModuleSrc;

    constructor(public capoBundle: CapoHeliosBundle) {
        super();
    }

    get main() {
        return BasicDelegate;
    }

    get moduleName() {
        const specialDgt = this.specializedDelegateModule;
        return specialDgt.moduleName
    }

    get modules() {
        const specialDgt = this.specializedDelegateModule;
        const delegateWrapper = this.mkDelegateWrapper(specialDgt.moduleName);

        return [
            ...this.capoBundle.modules, 
            delegateWrapper,
            this.specializedDelegateModule
        ];
    }

    mkDelegateWrapper(moduleName) {
        const indent = " ".repeat(8);
        const src = `module specializedDelegate
import {
    DelegateActivity,
    DelegateDatum,
    BurningActivity,
    MintingActivity,
    SpendingActivity
} from ${moduleName}\n`;
        // console.log("mkDelegateWrapper:", new Error( src));
        return mkHeliosModule(src, `generatedSpecializedDelegateModule`, {
            project: "stellar-contracts",
            moreInfo:
                `${indent}- wraps ${moduleName} provided by ${this.constructor.name}\n` +
                `${indent}  (generated by stellar-contracts:src/delegation/ContractBasedDelegate.ts:mkDelegateWrapper())`,
        });
    }

}
