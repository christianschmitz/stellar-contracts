module CapoDelegateHelpers

import {
    mkTv,
    returnsValueToScript
} from StellarHeliosHelpers

// Delegates can define addtional activities in their enum variants,
// but these 4 basic activities are essential.
enum BASE_DELEGATE_Activity {
    Authorizing
    Reassigning
    Retiring
    Modifying
}

// data stored in the Capo, representing basic delegate info
//   about the connection to a delegate.  
struct RelativeDelegateLink {
    uutName: String
    strategyName: String
    delegateValidatorHash: Option[ValidatorHash]

    // config: Data
}

// data stored in isDelegate Datum (in the delegate's script)
// ... links back to the capo info
struct DelegationDetail {
    capoAddr: Address
    mph: MintingPolicyHash
    tn: ByteArray
}

// Delegates can define additional Datum in their enums,
// but this first Datum is essential
enum BASE_DELEGATE_Datum {
    IsDelegation {
        dd: DelegationDetail
        CustomConfig: Data
    }
}

func mustReturnValueToScript(value : Value, ctx : ScriptContext) -> Bool {
    if (!returnsValueToScript( value, ctx)) {
        error("authZor not returned")
        // error("the authZor token MUST be returned")
    };
    true
}

//!!! call with existing delegate Datum.serialize()
func unmodifiedDelegation(oldDD : ByteArray, ctx: ScriptContext) -> Bool {
    o : []TxOutput = ctx.get_cont_outputs();
    //    print("::::::::::::::::::::::::::::::::: hi "+o.head.datum.get_inline_data().serialize().show());
    assert(o.head.datum.get_inline_data().serialize() == oldDD,
    // "delegation datum must not be modified"
    "modified dgtDtm"
);
    true
    // MintDelegateDatum::IsDelegation{
    //     ddNew, _
    // } = MintDelegateDatum::from_data( 
        
    // );

    //! the datum must be unchanged.
    // ddNew == dd 
}

/**
 * returns the AssetClass for the authority token found in the given DelegationDetail struct
 */
func acAuthorityToken(dd: DelegationDetail) -> AssetClass {
    AssetClass::new(dd.mph, dd.tn)
}

/**
 * returns a Value for the authority-token found in the given DelegationDetail struct
 */
 func tvAuthorityToken(dd: DelegationDetail) -> Value {
    Value::new(
        acAuthorityToken(dd), 1
    )
}

func requiresNoDelegateInput(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash, 
    ctx : ScriptContext
) -> Bool {
    v : Value = mkTv(mph, delegateLink.uutName);
    if (ctx.tx.inputs.any((i: TxInput) -> Bool {
        i.value.contains(v)
    })) {
        error("must not have dgTkn input: "+delegateLink.uutName)
    };
    print("ok: no dgTkn input: "+ delegateLink.uutName);
    true
}

func requiresValidDelegateOutput(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash, 
    ctx : ScriptContext,
    required: Bool = true
) -> Bool {
    RelativeDelegateLink{
        uut, strategy,
        validatorHash
    } = delegateLink;
    if (strategy.encode_utf8().length < 4) {
        error("strategy too short")
        // error("strategy must be at least 4 bytes, got: '"+strategy +
        //     "' = "+ strategy.encode_utf8().length.show()
        // )
    };

    v : Value = mkTv(mph, uut);
    hasDelegate : Bool = validatorHash.switch{
        Some{vh} => {
            print(" - seek dgTkn in vh " + vh.show());
            ctx.tx.value_locked_by(vh).contains(v)
        },
        None => ctx.tx.outputs.find_safe((o : TxOutput) -> Bool {
            o.value.contains(v)
        }).switch{
            Some => true, 
            None => false
        }
    };

    if (!hasDelegate && required) {
        error("missing dgTkn "+ uut )
    };
    print ("has delegate output: ok");
    hasDelegate
}

// todo: move to Mint helpers, as that's it's only purpose.
func requiresDelegateAuthorizingMint(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash, 
    ctx : ScriptContext,
    extraMintDelegateRedeemerCheck: Bool = true
) -> Bool {
    authzVal : Value = Value::new(AssetClass::new(mph, delegateLink.uutName.encode_utf8()), 1);
    print("finding my "+ delegateLink.uutName);
    targetId: TxOutputId = ctx.tx.inputs.find_safe((i: TxInput) -> {
        // print("   ?  in "+i.value.show());
        i.value.contains(authzVal) // find my authority token
    }).switch{
        Some{x} => x.output_id,
        None => error("missing dgTkn "+delegateLink.uutName)
    };
    print ("     found ^");
    spendsAuthorityUut : ScriptPurpose = ctx.tx.redeemers.find_key( 
        (purpose : ScriptPurpose) -> { purpose.switch{ 
            sp: Spending => {
                // print ("oid: " + sp.output_id.show());
                sp.output_id == targetId
            }, 
            _ => false 
        } }
    );

    // r : Data = ctx.tx.redeemers.get(  // index redeemers by...
    //     ScriptPurpose::new_spending(  // [spending, plus ...
    //     );
        
    err : String = "dgTkn "+delegateLink.uutName+" not being spent as expected"; // "not spent with an authorizing activity!")
    maybeCheckedMintDelegateAuthority : Bool = ctx.tx.redeemers.get_safe(
        spendsAuthorityUut
    ).switch {
        None => {
            error(err)
        },
        Some{x} => x.switch {
            (index: Int, _fields: []Data) => {

                /* avoids unused-variable warning: */ _fields == _fields && 
                if (!extraMintDelegateRedeemerCheck) {
                    print("  -- okay, the delegate token was spent");
                    print("  -- skipping extra check for mint delegate's particular redeemer");
                    true
                } else { 
                    if (0 == index || index >= 9) {
                        print (" -- delegate is authorizing: ok redeemer #"+index.show());
                        true
                        } else {
                        print("expected mint-delegation activity with index = 0 or >= 9, not: "+index.show());
                        error(err)
                    }
                }
            },
            _ => {
                error(err)
            }
        }
    };
    delegateDidAuthorize = true; // otherwise, we'd have failed above.

    // NOTE: DOESN'T CHECK that the AUTHORIZING DELEGATE is returned anywhere specific.
    //    - it's not generally a minting responsibility (however, as an exception the bootstrap charter event DOES 
    //      actually check for valid delegate outputs).  All other cases should have the correct
    // print("no no no");
    //      delegate outputs checked (e.g. in the Capo's CharterDatum spend checker).
    // maybeCheckDelegateOutput : Bool = if (!checkDelegateOutput) {
    //     print("  -- skipping check for expected delegate output ");
    //     true
    // } else {
    //     requiresValidDelegateOutput(delegateLink, mph, ctx)        
    // };
    delegateDidAuthorize && maybeCheckedMintDelegateAuthority
}
