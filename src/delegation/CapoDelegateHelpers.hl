module CapoDelegateHelpers

import {
    mustFindInputRedeemer,
    mkTv,
    returnsValueToScript
} from StellarHeliosHelpers

// todo: add this to RelativeDelegateLink
enum stakingKeyRequirement {
    NoStakingKeyAllowed
    StakingKeyRequired
    SpecificStakeKeyRequired {
        stakeCredential: StakingCredential
    }
}

// use this activity at Redeemer zero, as enum Redeemer {
//   DelegateLifecycleActivity { a: DelegateLifecycleActivity }}
//   ... followed by app-specific redeemer variants
// }
enum DelegateLifecycleActivity {
    ReplacingMe { // replaces this delegate with a different one
        seedTxn: TxId
        seedIndex: Int
        purpose: String
    }
    Retiring
    ValidatingSettings
}

// use this activity at Redeemer #1 CapoLifecycleActivities
enum CapoLifecycleActivity {
    CreatingDelegate {
        seedTxn: TxId
        seedIndex: Int
        purpose: String
    }
    // ActivatingDelegate {
    //     uutName: String
    // }


}

// use this enum to match any redeemer if you don't care about what other
// variants may be in that delegate, but you know it has to be a delegate with the 
// universal delegate activities at constr#0
enum AbstractDelegateActivitiesEnum {
    CapoLifecycleActivities {
        a: CapoLifecycleActivity
    }
    DelegateLifecycleActivities {
        a: DelegateLifecycleActivity
    }
    SpendingActivities {
        activity: Data
    }
    MintingActivities {
        activity: Data
    }

    // allows for delegated-data minting activities to be checked generically,
    // instead of having to create explicit minting/spending activities for each one.
    // The mint/spend delegate can thus generically support any registered data-type,
    // enforcing that right delegate is used but not needing to deal with specifics of 
    // their activities.  Requires a typeMap for to resolve dataType to the concrete delegate.

    // DelegatedDataMinting {
    //     dataType: String
    // }
    // DelegatedDataSpending {
    //     dataType: String
    // }
}

// data stored in the Capo, representing basic delegate info
//   about the connection to a delegate.  
struct RelativeDelegateLink {
    uutName: String // TODO: use ByteArray instead.
    strategyName: String
    // delegate links without a validator hash are "arms-length" delegates,
    // which means they won't be checked for possible auto-upgrades 
    //  ... to new versions of their code.
    // it also means that they won't be able to participate 
    //   ... in validation of configuration changes in the Capo.
    delegateValidatorHash: Option[ValidatorHash]
    // !!! todo ???  - for namedDelegates particularly
    // stakingCred: stakingKeyRequirement

    func getRedeemer(self,  input : TxInput, ctx: ScriptContext)  -> AbstractDelegateActivitiesEnum {
        if(false) {
            assert(self == self, "no way")// avoid unused variable
        };
        AbstractDelegateActivitiesEnum::from_data( 
            mustFindInputRedeemer(ctx, input)
        )
    }

    func getTv(self, mph: MintingPolicyHash) -> Value {
        mkTv(mph, self.uutName)
    }
    
    func validatesUpdatedSettings(self,
        inputs: []TxInput,
        mph: MintingPolicyHash,
        inputRequired: Bool,
        ctx: ScriptContext
    ) -> Option[Bool] {
        self.hasDelegateInput(
            inputs: inputs,
            mph: mph,
            required: inputRequired
        ).switch {
            // hasDelegateInput already failed if the input was required.
            None => Option[Bool]::None, // clean "not found but the caller indicated that's ok"
            Some{spendDelegateInput} => {
                spendDelegateIsValid : Bool = AbstractDelegateActivitiesEnum::from_data( 
                    mustFindInputRedeemer(ctx, spendDelegateInput)
                ).switch {
                    DelegateLifecycleActivities{a} => {
                        a.switch {
                            ValidatingSettings => self.hasValidOutput(
                                 mph, ctx
                            ),
                            _ => error("delegate not ValidatingSettings: "+ self.uutName)
                        }
                    },
                    _ => error("no way") // throws if the redeemer isn't #0.
                };

                assert(spendDelegateIsValid, "no way"); // it threw any error already
                Option[Bool]::Some{spendDelegateIsValid}        
            }
        }
    }

    func hasDelegateInput(self, 
        inputs: []TxInput, 
        mph: MintingPolicyHash,
        required: Bool = true
    ) -> Option[TxInput] {
        self.delegateValidatorHash.switch{
            // when no special input is needed by the delegate, 
            None => {
                if (required) {
                    error("❌ ➡️ 💁missing required input for delegate link " + self.uutName)
                };
                Option[TxInput]::None
            },
            Some{vh} => {
                needsAddrWithCred : Credential = Credential::new_validator(vh);
                // if we arrived here, then we have a delegate that's supposed to be at a specific address.
                // if we can't find an input with that address, it's an error condition.
                // we need an input with this address, having the expected UUT.
                expectedUut : Value = mkTv(mph, self.uutName);
                print ( self.uutName );
                inputs.find_safe((i: TxInput) -> Bool {
                    i.address.credential == needsAddrWithCred &&
                    i.value.contains(expectedUut)
                }).switch {
                    foundGood: Some => {
                        print ("  ✅ ➡️  💁 found ^ input dgTkn" );
                        foundGood
                    },
                    /* notFound: */ None => {
                        if (required) {
                            error("_❌ ➡️  💁 missing req'd ^ input dgTkn (at script addr) " + self.uutName)
                        };
                        print (" <- ❌  ➡️ 💁 no input for ^ dgTkn; not req'd; ret false");
                        Option[TxInput]::None
                    }
                }
            }        
        }
    }
    
    // func delegateUnchanged(self,
    //     mph: MintingPolicyHash, 
    //     ctx : ScriptContext,
    //     input: TxInput,
    // ) -> Bool {
    //     RelativeDelegateLink{
    //         uut, strategy,
    //         validatorHash
    //     } = self;
    //     v : Value = mkTv(mph, uut);

    //     validatorHash.switch {
    //         Some{vh} => {
    //             // print(" ⬅️ 🔎 💁 expect dgTkn "+uut + " sent to vh " + vh.show());
    //             assert(
    //                 ctx.tx.value_locked_by(vh)   .
    //                 contains(
    //                     mkTv(mph, uut)
    //                 ), 
    //                 "dgTkn not returned: "+ uut
    //             );
    //             ctx.tx.outputs.find_safe((o : TxOutput) -> Bool {
    //                 o.datum.serialize() == input.datum.serialize()
    //             }).switch{
    //                 Some => true, 
    //                 None => error("dgt modified")
    //             }

    //             true
    //         },
    //         None => {
    //             error("unchOut - no vh")
    //         }    
    //     }
    // }

    // was requiresValidDelegateOutput 
    func hasValidOutput(
        self, // delegateLink: RelativeDelegateLink, 
        mph: MintingPolicyHash, 
        ctx : ScriptContext,
        required: Bool = true
    ) -> Bool {
        RelativeDelegateLink{
            uut, strategy,
            validatorHash
        } = self;
        if (strategy.encode_utf8().length < 4) {
            error("strategy too short")
            // error("strategy must be at least 4 bytes, got: '"+strategy +
            //     "' = "+ strategy.encode_utf8().length.show()
            // )
        };
    
        v : Value = mkTv(mph, uut);
        hasDelegate : Bool = validatorHash.switch{
            Some{vh} => {
                print(uut);
                print(" ⬅️ 🔎 💁 expect ^ dgTkn sent to vh  vv");
                print(vh.show());
                ctx.tx.value_locked_by(vh).contains(v)
            },
            None => {
                print( uut );
                print( " ⬅️ 🔎 💁  expect ^ dgTkn sent anywhere");
                ctx.tx.outputs.find_safe((o : TxOutput) -> Bool {
                    o.value.contains(v)
                }).switch{
                    Some => true, 
                    None => false
                }
            }
        };
    
        if (!hasDelegate && required) {
            error("⬅️ ❌ 💁 missing dgTkn "+ uut )
        } else {
            print(uut);
            if (hasDelegate) {
                print(" ⬅️ ✅ 💁 uut ^")
            } else {
                print(" ⬅️ ❌ 💁 no delegate but not req'd; false")
            }
        };
        hasDelegate
    }
    
    // config: Data
}

// data stored in isDelegate Datum (in the delegate's script)
// ... links back to the capo info
struct DelegationDetail {
    capoAddr: Address
    mph: MintingPolicyHash
    tn: ByteArray
}

// Delegates can define additional Datum in their enums,
// but this first Datum is essential
enum BASE_DELEGATE_Datum {
    IsDelegation {
        dd: DelegationDetail
    }
}

func mustReturnValueToScript(
    value : Value, 
    ctx : ScriptContext,
    tokenName: ByteArray = #
) -> Bool {
    if (!returnsValueToScript( value, ctx)) {
        error(" ❌ dgTkn not returned: " + tokenName.decode_utf8())
        // error("the authZor token MUST be returned")
    };
    true
}

//!!! call with existing delegate Datum.serialize()
func unmodifiedDelegation(oldDD : ByteArray, ctx: ScriptContext) -> Bool {
    o : []TxOutput = ctx.get_cont_outputs();
    //    print("::::::::::::::::::::::::::::::::: hi "+o.head.datum.get_inline_data().serialize().show());
    assert(o.head.datum.get_inline_data().serialize() == oldDD,
    // "delegation datum must not be modified"
    "modified dgtDtm"
);
    true
    // MintDelegateDatum::IsDelegation{
    //     ddNew, _
    // } = MintDelegateDatum::from_data( 
        
    // );

    //! the datum must be unchanged.
    // ddNew == dd 
}

/**
 * returns the AssetClass for the authority token found in the given DelegationDetail struct
 */
func acAuthorityToken(dd: DelegationDetail) -> AssetClass {
    AssetClass::new(dd.mph, dd.tn)
}

/**
 * returns a Value for the authority-token found in the given DelegationDetail struct
 */
 func tvAuthorityToken(dd: DelegationDetail) -> Value {
    Value::new(
        acAuthorityToken(dd), 1
    )
}

func requiresNoDelegateInput(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash, 
    ctx : ScriptContext
) -> Bool {
    v : Value = mkTv(mph, delegateLink.uutName);
    if (ctx.tx.inputs.any((i: TxInput) -> Bool {
        i.value.contains(v)
    })) {
        error("must not have dgTkn input: "+delegateLink.uutName)
    };
    print("ok: no dgTkn input: "+ delegateLink.uutName);
    true
}

// just some convenience stuff to lead people to the right place
struct delegateLink_hasValidOutput_asMethod {
    placeHolder: String 
}

// func requiresValidDelegateOutput(
//     delegateLink: delegateLink_hasValidOutput_asMethod,
//     mph: MintingPolicyHash, 
//     ctx : ScriptContext,
//     required: Bool = true
// ) -> Bool {
         ///                  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//     assert(false, "replaced by delegateLink.hasValidOutput(...)");
//     assert(delegateLink==delegateLink, "no way");
//     assert(mph==mph, "no");
//     assert(ctx==ctx, "no");
//     assert(required==required, "no way");
//     true
// }

